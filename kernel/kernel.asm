
kernel.elf:     file format elf32-i386


Disassembly of section .text:

80100000 <multiboot_header>:
80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
80100006:	01 00                	add    %eax,(%eax)
80100008:	fe 4f 51             	decb   0x51(%edi)
8010000b:	e4 00                	in     $0x0,%al
8010000d:	00 10                	add    %dl,(%eax)
8010000f:	00 00                	add    %al,(%eax)
80100011:	00 10                	add    %dl,(%eax)
80100013:	00 96 b1 10 00 e0    	add    %dl,-0x1fffef4f(%esi)
80100019:	22 11                	and    (%ecx),%dl
8010001b:	00 20                	add    %ah,(%eax)
8010001d:	00 10                	add    %dl,(%eax)
	...

80100020 <entry>:

# Entering xv6 on boot processor, with paging off.
.globl entry
entry:
  # Turn on page size extension for 4Mbyte pages
  movl    %cr4, %eax
80100020:	0f 20 e0             	mov    %cr4,%eax
  orl     $(CR4_PSE), %eax
80100023:	83 c8 10             	or     $0x10,%eax
  movl    %eax, %cr4
80100026:	0f 22 e0             	mov    %eax,%cr4
  # Set page directory
  movl    $(V2P_WO(entrypgdir)), %eax
80100029:	b8 00 a0 10 00       	mov    $0x10a000,%eax
  movl    %eax, %cr3
8010002e:	0f 22 d8             	mov    %eax,%cr3
  # Turn on paging.
  movl    %cr0, %eax
80100031:	0f 20 c0             	mov    %cr0,%eax
  orl     $(CR0_PG|CR0_WP), %eax
80100034:	0d 00 00 01 80       	or     $0x80010000,%eax
  movl    %eax, %cr0
80100039:	0f 22 c0             	mov    %eax,%cr0

  # Set up the stack pointer.
  movl $(stack + KSTACKSIZE), %esp
8010003c:	bc e0 22 11 80       	mov    $0x801122e0,%esp

  # Jump to main(), and switch to executing at
  # high addresses. The indirect call is needed because
  # the assembler produces a PC-relative instruction
  # for a direct jump.
  mov $main, %eax
80100041:	b8 51 3f 10 80       	mov    $0x80103f51,%eax
  jmp *%eax
80100046:	ff e0                	jmp    *%eax

80100048 <swtch>:
# Save current register context in old
# and then load register context from new.

.globl swtch
swtch:
  movl 4(%esp), %eax
80100048:	8b 44 24 04          	mov    0x4(%esp),%eax
  movl 8(%esp), %edx
8010004c:	8b 54 24 08          	mov    0x8(%esp),%edx

  # Save old callee-save registers
  pushl %ebp
80100050:	55                   	push   %ebp
  pushl %ebx
80100051:	53                   	push   %ebx
  pushl %esi
80100052:	56                   	push   %esi
  pushl %edi
80100053:	57                   	push   %edi

  # Switch stacks
  movl %esp, (%eax)
80100054:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
80100056:	89 d4                	mov    %edx,%esp

  # Load new callee-save registers
  popl %edi
80100058:	5f                   	pop    %edi
  popl %esi
80100059:	5e                   	pop    %esi
  popl %ebx
8010005a:	5b                   	pop    %ebx
  popl %ebp
8010005b:	5d                   	pop    %ebp
  ret
8010005c:	c3                   	ret    

8010005d <alltraps>:

  # vectors.S sends all traps here.
.globl alltraps
alltraps:
  # Build trap frame.
  pushl %ds
8010005d:	1e                   	push   %ds
  pushl %es
8010005e:	06                   	push   %es
  pushl %fs
8010005f:	0f a0                	push   %fs
  pushl %gs
80100061:	0f a8                	push   %gs
  pushal
80100063:	60                   	pusha  
  
  # Set up data and per-cpu segments.
  movw $(SEG_KDATA<<3), %ax
80100064:	66 b8 10 00          	mov    $0x10,%ax
  movw %ax, %ds
80100068:	8e d8                	mov    %eax,%ds
  movw %ax, %es
8010006a:	8e c0                	mov    %eax,%es
  movw $(SEG_KCPU<<3), %ax
8010006c:	66 b8 18 00          	mov    $0x18,%ax
  movw %ax, %fs
80100070:	8e e0                	mov    %eax,%fs
  movw %ax, %gs
80100072:	8e e8                	mov    %eax,%gs

  # Call trap(tf), where tf=%esp
  pushl %esp
80100074:	54                   	push   %esp
  call trap
80100075:	e8 2c 72 00 00       	call   801072a6 <trap>
  addl $4, %esp
8010007a:	83 c4 04             	add    $0x4,%esp

8010007d <trapret>:

  # Return falls through to trapret...
.globl trapret
trapret:
  popal
8010007d:	61                   	popa   
  popl %gs
8010007e:	0f a9                	pop    %gs
  popl %fs
80100080:	0f a1                	pop    %fs
  popl %es
80100082:	07                   	pop    %es
  popl %ds
80100083:	1f                   	pop    %ds
  addl $0x8, %esp  # trapno and errcode
80100084:	83 c4 08             	add    $0x8,%esp
  iret
80100087:	cf                   	iret   

80100088 <vector0>:
# generated by vectors.pl - do not edit
# handlers
.globl alltraps
.globl vector0
vector0:
  pushl $0
80100088:	6a 00                	push   $0x0
  pushl $0
8010008a:	6a 00                	push   $0x0
  jmp alltraps
8010008c:	e9 cc ff ff ff       	jmp    8010005d <alltraps>

80100091 <vector1>:
.globl vector1
vector1:
  pushl $0
80100091:	6a 00                	push   $0x0
  pushl $1
80100093:	6a 01                	push   $0x1
  jmp alltraps
80100095:	e9 c3 ff ff ff       	jmp    8010005d <alltraps>

8010009a <vector2>:
.globl vector2
vector2:
  pushl $0
8010009a:	6a 00                	push   $0x0
  pushl $2
8010009c:	6a 02                	push   $0x2
  jmp alltraps
8010009e:	e9 ba ff ff ff       	jmp    8010005d <alltraps>

801000a3 <vector3>:
.globl vector3
vector3:
  pushl $0
801000a3:	6a 00                	push   $0x0
  pushl $3
801000a5:	6a 03                	push   $0x3
  jmp alltraps
801000a7:	e9 b1 ff ff ff       	jmp    8010005d <alltraps>

801000ac <vector4>:
.globl vector4
vector4:
  pushl $0
801000ac:	6a 00                	push   $0x0
  pushl $4
801000ae:	6a 04                	push   $0x4
  jmp alltraps
801000b0:	e9 a8 ff ff ff       	jmp    8010005d <alltraps>

801000b5 <vector5>:
.globl vector5
vector5:
  pushl $0
801000b5:	6a 00                	push   $0x0
  pushl $5
801000b7:	6a 05                	push   $0x5
  jmp alltraps
801000b9:	e9 9f ff ff ff       	jmp    8010005d <alltraps>

801000be <vector6>:
.globl vector6
vector6:
  pushl $0
801000be:	6a 00                	push   $0x0
  pushl $6
801000c0:	6a 06                	push   $0x6
  jmp alltraps
801000c2:	e9 96 ff ff ff       	jmp    8010005d <alltraps>

801000c7 <vector7>:
.globl vector7
vector7:
  pushl $0
801000c7:	6a 00                	push   $0x0
  pushl $7
801000c9:	6a 07                	push   $0x7
  jmp alltraps
801000cb:	e9 8d ff ff ff       	jmp    8010005d <alltraps>

801000d0 <vector8>:
.globl vector8
vector8:
  pushl $8
801000d0:	6a 08                	push   $0x8
  jmp alltraps
801000d2:	e9 86 ff ff ff       	jmp    8010005d <alltraps>

801000d7 <vector9>:
.globl vector9
vector9:
  pushl $0
801000d7:	6a 00                	push   $0x0
  pushl $9
801000d9:	6a 09                	push   $0x9
  jmp alltraps
801000db:	e9 7d ff ff ff       	jmp    8010005d <alltraps>

801000e0 <vector10>:
.globl vector10
vector10:
  pushl $10
801000e0:	6a 0a                	push   $0xa
  jmp alltraps
801000e2:	e9 76 ff ff ff       	jmp    8010005d <alltraps>

801000e7 <vector11>:
.globl vector11
vector11:
  pushl $11
801000e7:	6a 0b                	push   $0xb
  jmp alltraps
801000e9:	e9 6f ff ff ff       	jmp    8010005d <alltraps>

801000ee <vector12>:
.globl vector12
vector12:
  pushl $12
801000ee:	6a 0c                	push   $0xc
  jmp alltraps
801000f0:	e9 68 ff ff ff       	jmp    8010005d <alltraps>

801000f5 <vector13>:
.globl vector13
vector13:
  pushl $13
801000f5:	6a 0d                	push   $0xd
  jmp alltraps
801000f7:	e9 61 ff ff ff       	jmp    8010005d <alltraps>

801000fc <vector14>:
.globl vector14
vector14:
  pushl $14
801000fc:	6a 0e                	push   $0xe
  jmp alltraps
801000fe:	e9 5a ff ff ff       	jmp    8010005d <alltraps>

80100103 <vector15>:
.globl vector15
vector15:
  pushl $0
80100103:	6a 00                	push   $0x0
  pushl $15
80100105:	6a 0f                	push   $0xf
  jmp alltraps
80100107:	e9 51 ff ff ff       	jmp    8010005d <alltraps>

8010010c <vector16>:
.globl vector16
vector16:
  pushl $0
8010010c:	6a 00                	push   $0x0
  pushl $16
8010010e:	6a 10                	push   $0x10
  jmp alltraps
80100110:	e9 48 ff ff ff       	jmp    8010005d <alltraps>

80100115 <vector17>:
.globl vector17
vector17:
  pushl $17
80100115:	6a 11                	push   $0x11
  jmp alltraps
80100117:	e9 41 ff ff ff       	jmp    8010005d <alltraps>

8010011c <vector18>:
.globl vector18
vector18:
  pushl $0
8010011c:	6a 00                	push   $0x0
  pushl $18
8010011e:	6a 12                	push   $0x12
  jmp alltraps
80100120:	e9 38 ff ff ff       	jmp    8010005d <alltraps>

80100125 <vector19>:
.globl vector19
vector19:
  pushl $0
80100125:	6a 00                	push   $0x0
  pushl $19
80100127:	6a 13                	push   $0x13
  jmp alltraps
80100129:	e9 2f ff ff ff       	jmp    8010005d <alltraps>

8010012e <vector20>:
.globl vector20
vector20:
  pushl $0
8010012e:	6a 00                	push   $0x0
  pushl $20
80100130:	6a 14                	push   $0x14
  jmp alltraps
80100132:	e9 26 ff ff ff       	jmp    8010005d <alltraps>

80100137 <vector21>:
.globl vector21
vector21:
  pushl $0
80100137:	6a 00                	push   $0x0
  pushl $21
80100139:	6a 15                	push   $0x15
  jmp alltraps
8010013b:	e9 1d ff ff ff       	jmp    8010005d <alltraps>

80100140 <vector22>:
.globl vector22
vector22:
  pushl $0
80100140:	6a 00                	push   $0x0
  pushl $22
80100142:	6a 16                	push   $0x16
  jmp alltraps
80100144:	e9 14 ff ff ff       	jmp    8010005d <alltraps>

80100149 <vector23>:
.globl vector23
vector23:
  pushl $0
80100149:	6a 00                	push   $0x0
  pushl $23
8010014b:	6a 17                	push   $0x17
  jmp alltraps
8010014d:	e9 0b ff ff ff       	jmp    8010005d <alltraps>

80100152 <vector24>:
.globl vector24
vector24:
  pushl $0
80100152:	6a 00                	push   $0x0
  pushl $24
80100154:	6a 18                	push   $0x18
  jmp alltraps
80100156:	e9 02 ff ff ff       	jmp    8010005d <alltraps>

8010015b <vector25>:
.globl vector25
vector25:
  pushl $0
8010015b:	6a 00                	push   $0x0
  pushl $25
8010015d:	6a 19                	push   $0x19
  jmp alltraps
8010015f:	e9 f9 fe ff ff       	jmp    8010005d <alltraps>

80100164 <vector26>:
.globl vector26
vector26:
  pushl $0
80100164:	6a 00                	push   $0x0
  pushl $26
80100166:	6a 1a                	push   $0x1a
  jmp alltraps
80100168:	e9 f0 fe ff ff       	jmp    8010005d <alltraps>

8010016d <vector27>:
.globl vector27
vector27:
  pushl $0
8010016d:	6a 00                	push   $0x0
  pushl $27
8010016f:	6a 1b                	push   $0x1b
  jmp alltraps
80100171:	e9 e7 fe ff ff       	jmp    8010005d <alltraps>

80100176 <vector28>:
.globl vector28
vector28:
  pushl $0
80100176:	6a 00                	push   $0x0
  pushl $28
80100178:	6a 1c                	push   $0x1c
  jmp alltraps
8010017a:	e9 de fe ff ff       	jmp    8010005d <alltraps>

8010017f <vector29>:
.globl vector29
vector29:
  pushl $0
8010017f:	6a 00                	push   $0x0
  pushl $29
80100181:	6a 1d                	push   $0x1d
  jmp alltraps
80100183:	e9 d5 fe ff ff       	jmp    8010005d <alltraps>

80100188 <vector30>:
.globl vector30
vector30:
  pushl $0
80100188:	6a 00                	push   $0x0
  pushl $30
8010018a:	6a 1e                	push   $0x1e
  jmp alltraps
8010018c:	e9 cc fe ff ff       	jmp    8010005d <alltraps>

80100191 <vector31>:
.globl vector31
vector31:
  pushl $0
80100191:	6a 00                	push   $0x0
  pushl $31
80100193:	6a 1f                	push   $0x1f
  jmp alltraps
80100195:	e9 c3 fe ff ff       	jmp    8010005d <alltraps>

8010019a <vector32>:
.globl vector32
vector32:
  pushl $0
8010019a:	6a 00                	push   $0x0
  pushl $32
8010019c:	6a 20                	push   $0x20
  jmp alltraps
8010019e:	e9 ba fe ff ff       	jmp    8010005d <alltraps>

801001a3 <vector33>:
.globl vector33
vector33:
  pushl $0
801001a3:	6a 00                	push   $0x0
  pushl $33
801001a5:	6a 21                	push   $0x21
  jmp alltraps
801001a7:	e9 b1 fe ff ff       	jmp    8010005d <alltraps>

801001ac <vector34>:
.globl vector34
vector34:
  pushl $0
801001ac:	6a 00                	push   $0x0
  pushl $34
801001ae:	6a 22                	push   $0x22
  jmp alltraps
801001b0:	e9 a8 fe ff ff       	jmp    8010005d <alltraps>

801001b5 <vector35>:
.globl vector35
vector35:
  pushl $0
801001b5:	6a 00                	push   $0x0
  pushl $35
801001b7:	6a 23                	push   $0x23
  jmp alltraps
801001b9:	e9 9f fe ff ff       	jmp    8010005d <alltraps>

801001be <vector36>:
.globl vector36
vector36:
  pushl $0
801001be:	6a 00                	push   $0x0
  pushl $36
801001c0:	6a 24                	push   $0x24
  jmp alltraps
801001c2:	e9 96 fe ff ff       	jmp    8010005d <alltraps>

801001c7 <vector37>:
.globl vector37
vector37:
  pushl $0
801001c7:	6a 00                	push   $0x0
  pushl $37
801001c9:	6a 25                	push   $0x25
  jmp alltraps
801001cb:	e9 8d fe ff ff       	jmp    8010005d <alltraps>

801001d0 <vector38>:
.globl vector38
vector38:
  pushl $0
801001d0:	6a 00                	push   $0x0
  pushl $38
801001d2:	6a 26                	push   $0x26
  jmp alltraps
801001d4:	e9 84 fe ff ff       	jmp    8010005d <alltraps>

801001d9 <vector39>:
.globl vector39
vector39:
  pushl $0
801001d9:	6a 00                	push   $0x0
  pushl $39
801001db:	6a 27                	push   $0x27
  jmp alltraps
801001dd:	e9 7b fe ff ff       	jmp    8010005d <alltraps>

801001e2 <vector40>:
.globl vector40
vector40:
  pushl $0
801001e2:	6a 00                	push   $0x0
  pushl $40
801001e4:	6a 28                	push   $0x28
  jmp alltraps
801001e6:	e9 72 fe ff ff       	jmp    8010005d <alltraps>

801001eb <vector41>:
.globl vector41
vector41:
  pushl $0
801001eb:	6a 00                	push   $0x0
  pushl $41
801001ed:	6a 29                	push   $0x29
  jmp alltraps
801001ef:	e9 69 fe ff ff       	jmp    8010005d <alltraps>

801001f4 <vector42>:
.globl vector42
vector42:
  pushl $0
801001f4:	6a 00                	push   $0x0
  pushl $42
801001f6:	6a 2a                	push   $0x2a
  jmp alltraps
801001f8:	e9 60 fe ff ff       	jmp    8010005d <alltraps>

801001fd <vector43>:
.globl vector43
vector43:
  pushl $0
801001fd:	6a 00                	push   $0x0
  pushl $43
801001ff:	6a 2b                	push   $0x2b
  jmp alltraps
80100201:	e9 57 fe ff ff       	jmp    8010005d <alltraps>

80100206 <vector44>:
.globl vector44
vector44:
  pushl $0
80100206:	6a 00                	push   $0x0
  pushl $44
80100208:	6a 2c                	push   $0x2c
  jmp alltraps
8010020a:	e9 4e fe ff ff       	jmp    8010005d <alltraps>

8010020f <vector45>:
.globl vector45
vector45:
  pushl $0
8010020f:	6a 00                	push   $0x0
  pushl $45
80100211:	6a 2d                	push   $0x2d
  jmp alltraps
80100213:	e9 45 fe ff ff       	jmp    8010005d <alltraps>

80100218 <vector46>:
.globl vector46
vector46:
  pushl $0
80100218:	6a 00                	push   $0x0
  pushl $46
8010021a:	6a 2e                	push   $0x2e
  jmp alltraps
8010021c:	e9 3c fe ff ff       	jmp    8010005d <alltraps>

80100221 <vector47>:
.globl vector47
vector47:
  pushl $0
80100221:	6a 00                	push   $0x0
  pushl $47
80100223:	6a 2f                	push   $0x2f
  jmp alltraps
80100225:	e9 33 fe ff ff       	jmp    8010005d <alltraps>

8010022a <vector48>:
.globl vector48
vector48:
  pushl $0
8010022a:	6a 00                	push   $0x0
  pushl $48
8010022c:	6a 30                	push   $0x30
  jmp alltraps
8010022e:	e9 2a fe ff ff       	jmp    8010005d <alltraps>

80100233 <vector49>:
.globl vector49
vector49:
  pushl $0
80100233:	6a 00                	push   $0x0
  pushl $49
80100235:	6a 31                	push   $0x31
  jmp alltraps
80100237:	e9 21 fe ff ff       	jmp    8010005d <alltraps>

8010023c <vector50>:
.globl vector50
vector50:
  pushl $0
8010023c:	6a 00                	push   $0x0
  pushl $50
8010023e:	6a 32                	push   $0x32
  jmp alltraps
80100240:	e9 18 fe ff ff       	jmp    8010005d <alltraps>

80100245 <vector51>:
.globl vector51
vector51:
  pushl $0
80100245:	6a 00                	push   $0x0
  pushl $51
80100247:	6a 33                	push   $0x33
  jmp alltraps
80100249:	e9 0f fe ff ff       	jmp    8010005d <alltraps>

8010024e <vector52>:
.globl vector52
vector52:
  pushl $0
8010024e:	6a 00                	push   $0x0
  pushl $52
80100250:	6a 34                	push   $0x34
  jmp alltraps
80100252:	e9 06 fe ff ff       	jmp    8010005d <alltraps>

80100257 <vector53>:
.globl vector53
vector53:
  pushl $0
80100257:	6a 00                	push   $0x0
  pushl $53
80100259:	6a 35                	push   $0x35
  jmp alltraps
8010025b:	e9 fd fd ff ff       	jmp    8010005d <alltraps>

80100260 <vector54>:
.globl vector54
vector54:
  pushl $0
80100260:	6a 00                	push   $0x0
  pushl $54
80100262:	6a 36                	push   $0x36
  jmp alltraps
80100264:	e9 f4 fd ff ff       	jmp    8010005d <alltraps>

80100269 <vector55>:
.globl vector55
vector55:
  pushl $0
80100269:	6a 00                	push   $0x0
  pushl $55
8010026b:	6a 37                	push   $0x37
  jmp alltraps
8010026d:	e9 eb fd ff ff       	jmp    8010005d <alltraps>

80100272 <vector56>:
.globl vector56
vector56:
  pushl $0
80100272:	6a 00                	push   $0x0
  pushl $56
80100274:	6a 38                	push   $0x38
  jmp alltraps
80100276:	e9 e2 fd ff ff       	jmp    8010005d <alltraps>

8010027b <vector57>:
.globl vector57
vector57:
  pushl $0
8010027b:	6a 00                	push   $0x0
  pushl $57
8010027d:	6a 39                	push   $0x39
  jmp alltraps
8010027f:	e9 d9 fd ff ff       	jmp    8010005d <alltraps>

80100284 <vector58>:
.globl vector58
vector58:
  pushl $0
80100284:	6a 00                	push   $0x0
  pushl $58
80100286:	6a 3a                	push   $0x3a
  jmp alltraps
80100288:	e9 d0 fd ff ff       	jmp    8010005d <alltraps>

8010028d <vector59>:
.globl vector59
vector59:
  pushl $0
8010028d:	6a 00                	push   $0x0
  pushl $59
8010028f:	6a 3b                	push   $0x3b
  jmp alltraps
80100291:	e9 c7 fd ff ff       	jmp    8010005d <alltraps>

80100296 <vector60>:
.globl vector60
vector60:
  pushl $0
80100296:	6a 00                	push   $0x0
  pushl $60
80100298:	6a 3c                	push   $0x3c
  jmp alltraps
8010029a:	e9 be fd ff ff       	jmp    8010005d <alltraps>

8010029f <vector61>:
.globl vector61
vector61:
  pushl $0
8010029f:	6a 00                	push   $0x0
  pushl $61
801002a1:	6a 3d                	push   $0x3d
  jmp alltraps
801002a3:	e9 b5 fd ff ff       	jmp    8010005d <alltraps>

801002a8 <vector62>:
.globl vector62
vector62:
  pushl $0
801002a8:	6a 00                	push   $0x0
  pushl $62
801002aa:	6a 3e                	push   $0x3e
  jmp alltraps
801002ac:	e9 ac fd ff ff       	jmp    8010005d <alltraps>

801002b1 <vector63>:
.globl vector63
vector63:
  pushl $0
801002b1:	6a 00                	push   $0x0
  pushl $63
801002b3:	6a 3f                	push   $0x3f
  jmp alltraps
801002b5:	e9 a3 fd ff ff       	jmp    8010005d <alltraps>

801002ba <vector64>:
.globl vector64
vector64:
  pushl $0
801002ba:	6a 00                	push   $0x0
  pushl $64
801002bc:	6a 40                	push   $0x40
  jmp alltraps
801002be:	e9 9a fd ff ff       	jmp    8010005d <alltraps>

801002c3 <vector65>:
.globl vector65
vector65:
  pushl $0
801002c3:	6a 00                	push   $0x0
  pushl $65
801002c5:	6a 41                	push   $0x41
  jmp alltraps
801002c7:	e9 91 fd ff ff       	jmp    8010005d <alltraps>

801002cc <vector66>:
.globl vector66
vector66:
  pushl $0
801002cc:	6a 00                	push   $0x0
  pushl $66
801002ce:	6a 42                	push   $0x42
  jmp alltraps
801002d0:	e9 88 fd ff ff       	jmp    8010005d <alltraps>

801002d5 <vector67>:
.globl vector67
vector67:
  pushl $0
801002d5:	6a 00                	push   $0x0
  pushl $67
801002d7:	6a 43                	push   $0x43
  jmp alltraps
801002d9:	e9 7f fd ff ff       	jmp    8010005d <alltraps>

801002de <vector68>:
.globl vector68
vector68:
  pushl $0
801002de:	6a 00                	push   $0x0
  pushl $68
801002e0:	6a 44                	push   $0x44
  jmp alltraps
801002e2:	e9 76 fd ff ff       	jmp    8010005d <alltraps>

801002e7 <vector69>:
.globl vector69
vector69:
  pushl $0
801002e7:	6a 00                	push   $0x0
  pushl $69
801002e9:	6a 45                	push   $0x45
  jmp alltraps
801002eb:	e9 6d fd ff ff       	jmp    8010005d <alltraps>

801002f0 <vector70>:
.globl vector70
vector70:
  pushl $0
801002f0:	6a 00                	push   $0x0
  pushl $70
801002f2:	6a 46                	push   $0x46
  jmp alltraps
801002f4:	e9 64 fd ff ff       	jmp    8010005d <alltraps>

801002f9 <vector71>:
.globl vector71
vector71:
  pushl $0
801002f9:	6a 00                	push   $0x0
  pushl $71
801002fb:	6a 47                	push   $0x47
  jmp alltraps
801002fd:	e9 5b fd ff ff       	jmp    8010005d <alltraps>

80100302 <vector72>:
.globl vector72
vector72:
  pushl $0
80100302:	6a 00                	push   $0x0
  pushl $72
80100304:	6a 48                	push   $0x48
  jmp alltraps
80100306:	e9 52 fd ff ff       	jmp    8010005d <alltraps>

8010030b <vector73>:
.globl vector73
vector73:
  pushl $0
8010030b:	6a 00                	push   $0x0
  pushl $73
8010030d:	6a 49                	push   $0x49
  jmp alltraps
8010030f:	e9 49 fd ff ff       	jmp    8010005d <alltraps>

80100314 <vector74>:
.globl vector74
vector74:
  pushl $0
80100314:	6a 00                	push   $0x0
  pushl $74
80100316:	6a 4a                	push   $0x4a
  jmp alltraps
80100318:	e9 40 fd ff ff       	jmp    8010005d <alltraps>

8010031d <vector75>:
.globl vector75
vector75:
  pushl $0
8010031d:	6a 00                	push   $0x0
  pushl $75
8010031f:	6a 4b                	push   $0x4b
  jmp alltraps
80100321:	e9 37 fd ff ff       	jmp    8010005d <alltraps>

80100326 <vector76>:
.globl vector76
vector76:
  pushl $0
80100326:	6a 00                	push   $0x0
  pushl $76
80100328:	6a 4c                	push   $0x4c
  jmp alltraps
8010032a:	e9 2e fd ff ff       	jmp    8010005d <alltraps>

8010032f <vector77>:
.globl vector77
vector77:
  pushl $0
8010032f:	6a 00                	push   $0x0
  pushl $77
80100331:	6a 4d                	push   $0x4d
  jmp alltraps
80100333:	e9 25 fd ff ff       	jmp    8010005d <alltraps>

80100338 <vector78>:
.globl vector78
vector78:
  pushl $0
80100338:	6a 00                	push   $0x0
  pushl $78
8010033a:	6a 4e                	push   $0x4e
  jmp alltraps
8010033c:	e9 1c fd ff ff       	jmp    8010005d <alltraps>

80100341 <vector79>:
.globl vector79
vector79:
  pushl $0
80100341:	6a 00                	push   $0x0
  pushl $79
80100343:	6a 4f                	push   $0x4f
  jmp alltraps
80100345:	e9 13 fd ff ff       	jmp    8010005d <alltraps>

8010034a <vector80>:
.globl vector80
vector80:
  pushl $0
8010034a:	6a 00                	push   $0x0
  pushl $80
8010034c:	6a 50                	push   $0x50
  jmp alltraps
8010034e:	e9 0a fd ff ff       	jmp    8010005d <alltraps>

80100353 <vector81>:
.globl vector81
vector81:
  pushl $0
80100353:	6a 00                	push   $0x0
  pushl $81
80100355:	6a 51                	push   $0x51
  jmp alltraps
80100357:	e9 01 fd ff ff       	jmp    8010005d <alltraps>

8010035c <vector82>:
.globl vector82
vector82:
  pushl $0
8010035c:	6a 00                	push   $0x0
  pushl $82
8010035e:	6a 52                	push   $0x52
  jmp alltraps
80100360:	e9 f8 fc ff ff       	jmp    8010005d <alltraps>

80100365 <vector83>:
.globl vector83
vector83:
  pushl $0
80100365:	6a 00                	push   $0x0
  pushl $83
80100367:	6a 53                	push   $0x53
  jmp alltraps
80100369:	e9 ef fc ff ff       	jmp    8010005d <alltraps>

8010036e <vector84>:
.globl vector84
vector84:
  pushl $0
8010036e:	6a 00                	push   $0x0
  pushl $84
80100370:	6a 54                	push   $0x54
  jmp alltraps
80100372:	e9 e6 fc ff ff       	jmp    8010005d <alltraps>

80100377 <vector85>:
.globl vector85
vector85:
  pushl $0
80100377:	6a 00                	push   $0x0
  pushl $85
80100379:	6a 55                	push   $0x55
  jmp alltraps
8010037b:	e9 dd fc ff ff       	jmp    8010005d <alltraps>

80100380 <vector86>:
.globl vector86
vector86:
  pushl $0
80100380:	6a 00                	push   $0x0
  pushl $86
80100382:	6a 56                	push   $0x56
  jmp alltraps
80100384:	e9 d4 fc ff ff       	jmp    8010005d <alltraps>

80100389 <vector87>:
.globl vector87
vector87:
  pushl $0
80100389:	6a 00                	push   $0x0
  pushl $87
8010038b:	6a 57                	push   $0x57
  jmp alltraps
8010038d:	e9 cb fc ff ff       	jmp    8010005d <alltraps>

80100392 <vector88>:
.globl vector88
vector88:
  pushl $0
80100392:	6a 00                	push   $0x0
  pushl $88
80100394:	6a 58                	push   $0x58
  jmp alltraps
80100396:	e9 c2 fc ff ff       	jmp    8010005d <alltraps>

8010039b <vector89>:
.globl vector89
vector89:
  pushl $0
8010039b:	6a 00                	push   $0x0
  pushl $89
8010039d:	6a 59                	push   $0x59
  jmp alltraps
8010039f:	e9 b9 fc ff ff       	jmp    8010005d <alltraps>

801003a4 <vector90>:
.globl vector90
vector90:
  pushl $0
801003a4:	6a 00                	push   $0x0
  pushl $90
801003a6:	6a 5a                	push   $0x5a
  jmp alltraps
801003a8:	e9 b0 fc ff ff       	jmp    8010005d <alltraps>

801003ad <vector91>:
.globl vector91
vector91:
  pushl $0
801003ad:	6a 00                	push   $0x0
  pushl $91
801003af:	6a 5b                	push   $0x5b
  jmp alltraps
801003b1:	e9 a7 fc ff ff       	jmp    8010005d <alltraps>

801003b6 <vector92>:
.globl vector92
vector92:
  pushl $0
801003b6:	6a 00                	push   $0x0
  pushl $92
801003b8:	6a 5c                	push   $0x5c
  jmp alltraps
801003ba:	e9 9e fc ff ff       	jmp    8010005d <alltraps>

801003bf <vector93>:
.globl vector93
vector93:
  pushl $0
801003bf:	6a 00                	push   $0x0
  pushl $93
801003c1:	6a 5d                	push   $0x5d
  jmp alltraps
801003c3:	e9 95 fc ff ff       	jmp    8010005d <alltraps>

801003c8 <vector94>:
.globl vector94
vector94:
  pushl $0
801003c8:	6a 00                	push   $0x0
  pushl $94
801003ca:	6a 5e                	push   $0x5e
  jmp alltraps
801003cc:	e9 8c fc ff ff       	jmp    8010005d <alltraps>

801003d1 <vector95>:
.globl vector95
vector95:
  pushl $0
801003d1:	6a 00                	push   $0x0
  pushl $95
801003d3:	6a 5f                	push   $0x5f
  jmp alltraps
801003d5:	e9 83 fc ff ff       	jmp    8010005d <alltraps>

801003da <vector96>:
.globl vector96
vector96:
  pushl $0
801003da:	6a 00                	push   $0x0
  pushl $96
801003dc:	6a 60                	push   $0x60
  jmp alltraps
801003de:	e9 7a fc ff ff       	jmp    8010005d <alltraps>

801003e3 <vector97>:
.globl vector97
vector97:
  pushl $0
801003e3:	6a 00                	push   $0x0
  pushl $97
801003e5:	6a 61                	push   $0x61
  jmp alltraps
801003e7:	e9 71 fc ff ff       	jmp    8010005d <alltraps>

801003ec <vector98>:
.globl vector98
vector98:
  pushl $0
801003ec:	6a 00                	push   $0x0
  pushl $98
801003ee:	6a 62                	push   $0x62
  jmp alltraps
801003f0:	e9 68 fc ff ff       	jmp    8010005d <alltraps>

801003f5 <vector99>:
.globl vector99
vector99:
  pushl $0
801003f5:	6a 00                	push   $0x0
  pushl $99
801003f7:	6a 63                	push   $0x63
  jmp alltraps
801003f9:	e9 5f fc ff ff       	jmp    8010005d <alltraps>

801003fe <vector100>:
.globl vector100
vector100:
  pushl $0
801003fe:	6a 00                	push   $0x0
  pushl $100
80100400:	6a 64                	push   $0x64
  jmp alltraps
80100402:	e9 56 fc ff ff       	jmp    8010005d <alltraps>

80100407 <vector101>:
.globl vector101
vector101:
  pushl $0
80100407:	6a 00                	push   $0x0
  pushl $101
80100409:	6a 65                	push   $0x65
  jmp alltraps
8010040b:	e9 4d fc ff ff       	jmp    8010005d <alltraps>

80100410 <vector102>:
.globl vector102
vector102:
  pushl $0
80100410:	6a 00                	push   $0x0
  pushl $102
80100412:	6a 66                	push   $0x66
  jmp alltraps
80100414:	e9 44 fc ff ff       	jmp    8010005d <alltraps>

80100419 <vector103>:
.globl vector103
vector103:
  pushl $0
80100419:	6a 00                	push   $0x0
  pushl $103
8010041b:	6a 67                	push   $0x67
  jmp alltraps
8010041d:	e9 3b fc ff ff       	jmp    8010005d <alltraps>

80100422 <vector104>:
.globl vector104
vector104:
  pushl $0
80100422:	6a 00                	push   $0x0
  pushl $104
80100424:	6a 68                	push   $0x68
  jmp alltraps
80100426:	e9 32 fc ff ff       	jmp    8010005d <alltraps>

8010042b <vector105>:
.globl vector105
vector105:
  pushl $0
8010042b:	6a 00                	push   $0x0
  pushl $105
8010042d:	6a 69                	push   $0x69
  jmp alltraps
8010042f:	e9 29 fc ff ff       	jmp    8010005d <alltraps>

80100434 <vector106>:
.globl vector106
vector106:
  pushl $0
80100434:	6a 00                	push   $0x0
  pushl $106
80100436:	6a 6a                	push   $0x6a
  jmp alltraps
80100438:	e9 20 fc ff ff       	jmp    8010005d <alltraps>

8010043d <vector107>:
.globl vector107
vector107:
  pushl $0
8010043d:	6a 00                	push   $0x0
  pushl $107
8010043f:	6a 6b                	push   $0x6b
  jmp alltraps
80100441:	e9 17 fc ff ff       	jmp    8010005d <alltraps>

80100446 <vector108>:
.globl vector108
vector108:
  pushl $0
80100446:	6a 00                	push   $0x0
  pushl $108
80100448:	6a 6c                	push   $0x6c
  jmp alltraps
8010044a:	e9 0e fc ff ff       	jmp    8010005d <alltraps>

8010044f <vector109>:
.globl vector109
vector109:
  pushl $0
8010044f:	6a 00                	push   $0x0
  pushl $109
80100451:	6a 6d                	push   $0x6d
  jmp alltraps
80100453:	e9 05 fc ff ff       	jmp    8010005d <alltraps>

80100458 <vector110>:
.globl vector110
vector110:
  pushl $0
80100458:	6a 00                	push   $0x0
  pushl $110
8010045a:	6a 6e                	push   $0x6e
  jmp alltraps
8010045c:	e9 fc fb ff ff       	jmp    8010005d <alltraps>

80100461 <vector111>:
.globl vector111
vector111:
  pushl $0
80100461:	6a 00                	push   $0x0
  pushl $111
80100463:	6a 6f                	push   $0x6f
  jmp alltraps
80100465:	e9 f3 fb ff ff       	jmp    8010005d <alltraps>

8010046a <vector112>:
.globl vector112
vector112:
  pushl $0
8010046a:	6a 00                	push   $0x0
  pushl $112
8010046c:	6a 70                	push   $0x70
  jmp alltraps
8010046e:	e9 ea fb ff ff       	jmp    8010005d <alltraps>

80100473 <vector113>:
.globl vector113
vector113:
  pushl $0
80100473:	6a 00                	push   $0x0
  pushl $113
80100475:	6a 71                	push   $0x71
  jmp alltraps
80100477:	e9 e1 fb ff ff       	jmp    8010005d <alltraps>

8010047c <vector114>:
.globl vector114
vector114:
  pushl $0
8010047c:	6a 00                	push   $0x0
  pushl $114
8010047e:	6a 72                	push   $0x72
  jmp alltraps
80100480:	e9 d8 fb ff ff       	jmp    8010005d <alltraps>

80100485 <vector115>:
.globl vector115
vector115:
  pushl $0
80100485:	6a 00                	push   $0x0
  pushl $115
80100487:	6a 73                	push   $0x73
  jmp alltraps
80100489:	e9 cf fb ff ff       	jmp    8010005d <alltraps>

8010048e <vector116>:
.globl vector116
vector116:
  pushl $0
8010048e:	6a 00                	push   $0x0
  pushl $116
80100490:	6a 74                	push   $0x74
  jmp alltraps
80100492:	e9 c6 fb ff ff       	jmp    8010005d <alltraps>

80100497 <vector117>:
.globl vector117
vector117:
  pushl $0
80100497:	6a 00                	push   $0x0
  pushl $117
80100499:	6a 75                	push   $0x75
  jmp alltraps
8010049b:	e9 bd fb ff ff       	jmp    8010005d <alltraps>

801004a0 <vector118>:
.globl vector118
vector118:
  pushl $0
801004a0:	6a 00                	push   $0x0
  pushl $118
801004a2:	6a 76                	push   $0x76
  jmp alltraps
801004a4:	e9 b4 fb ff ff       	jmp    8010005d <alltraps>

801004a9 <vector119>:
.globl vector119
vector119:
  pushl $0
801004a9:	6a 00                	push   $0x0
  pushl $119
801004ab:	6a 77                	push   $0x77
  jmp alltraps
801004ad:	e9 ab fb ff ff       	jmp    8010005d <alltraps>

801004b2 <vector120>:
.globl vector120
vector120:
  pushl $0
801004b2:	6a 00                	push   $0x0
  pushl $120
801004b4:	6a 78                	push   $0x78
  jmp alltraps
801004b6:	e9 a2 fb ff ff       	jmp    8010005d <alltraps>

801004bb <vector121>:
.globl vector121
vector121:
  pushl $0
801004bb:	6a 00                	push   $0x0
  pushl $121
801004bd:	6a 79                	push   $0x79
  jmp alltraps
801004bf:	e9 99 fb ff ff       	jmp    8010005d <alltraps>

801004c4 <vector122>:
.globl vector122
vector122:
  pushl $0
801004c4:	6a 00                	push   $0x0
  pushl $122
801004c6:	6a 7a                	push   $0x7a
  jmp alltraps
801004c8:	e9 90 fb ff ff       	jmp    8010005d <alltraps>

801004cd <vector123>:
.globl vector123
vector123:
  pushl $0
801004cd:	6a 00                	push   $0x0
  pushl $123
801004cf:	6a 7b                	push   $0x7b
  jmp alltraps
801004d1:	e9 87 fb ff ff       	jmp    8010005d <alltraps>

801004d6 <vector124>:
.globl vector124
vector124:
  pushl $0
801004d6:	6a 00                	push   $0x0
  pushl $124
801004d8:	6a 7c                	push   $0x7c
  jmp alltraps
801004da:	e9 7e fb ff ff       	jmp    8010005d <alltraps>

801004df <vector125>:
.globl vector125
vector125:
  pushl $0
801004df:	6a 00                	push   $0x0
  pushl $125
801004e1:	6a 7d                	push   $0x7d
  jmp alltraps
801004e3:	e9 75 fb ff ff       	jmp    8010005d <alltraps>

801004e8 <vector126>:
.globl vector126
vector126:
  pushl $0
801004e8:	6a 00                	push   $0x0
  pushl $126
801004ea:	6a 7e                	push   $0x7e
  jmp alltraps
801004ec:	e9 6c fb ff ff       	jmp    8010005d <alltraps>

801004f1 <vector127>:
.globl vector127
vector127:
  pushl $0
801004f1:	6a 00                	push   $0x0
  pushl $127
801004f3:	6a 7f                	push   $0x7f
  jmp alltraps
801004f5:	e9 63 fb ff ff       	jmp    8010005d <alltraps>

801004fa <vector128>:
.globl vector128
vector128:
  pushl $0
801004fa:	6a 00                	push   $0x0
  pushl $128
801004fc:	68 80 00 00 00       	push   $0x80
  jmp alltraps
80100501:	e9 57 fb ff ff       	jmp    8010005d <alltraps>

80100506 <vector129>:
.globl vector129
vector129:
  pushl $0
80100506:	6a 00                	push   $0x0
  pushl $129
80100508:	68 81 00 00 00       	push   $0x81
  jmp alltraps
8010050d:	e9 4b fb ff ff       	jmp    8010005d <alltraps>

80100512 <vector130>:
.globl vector130
vector130:
  pushl $0
80100512:	6a 00                	push   $0x0
  pushl $130
80100514:	68 82 00 00 00       	push   $0x82
  jmp alltraps
80100519:	e9 3f fb ff ff       	jmp    8010005d <alltraps>

8010051e <vector131>:
.globl vector131
vector131:
  pushl $0
8010051e:	6a 00                	push   $0x0
  pushl $131
80100520:	68 83 00 00 00       	push   $0x83
  jmp alltraps
80100525:	e9 33 fb ff ff       	jmp    8010005d <alltraps>

8010052a <vector132>:
.globl vector132
vector132:
  pushl $0
8010052a:	6a 00                	push   $0x0
  pushl $132
8010052c:	68 84 00 00 00       	push   $0x84
  jmp alltraps
80100531:	e9 27 fb ff ff       	jmp    8010005d <alltraps>

80100536 <vector133>:
.globl vector133
vector133:
  pushl $0
80100536:	6a 00                	push   $0x0
  pushl $133
80100538:	68 85 00 00 00       	push   $0x85
  jmp alltraps
8010053d:	e9 1b fb ff ff       	jmp    8010005d <alltraps>

80100542 <vector134>:
.globl vector134
vector134:
  pushl $0
80100542:	6a 00                	push   $0x0
  pushl $134
80100544:	68 86 00 00 00       	push   $0x86
  jmp alltraps
80100549:	e9 0f fb ff ff       	jmp    8010005d <alltraps>

8010054e <vector135>:
.globl vector135
vector135:
  pushl $0
8010054e:	6a 00                	push   $0x0
  pushl $135
80100550:	68 87 00 00 00       	push   $0x87
  jmp alltraps
80100555:	e9 03 fb ff ff       	jmp    8010005d <alltraps>

8010055a <vector136>:
.globl vector136
vector136:
  pushl $0
8010055a:	6a 00                	push   $0x0
  pushl $136
8010055c:	68 88 00 00 00       	push   $0x88
  jmp alltraps
80100561:	e9 f7 fa ff ff       	jmp    8010005d <alltraps>

80100566 <vector137>:
.globl vector137
vector137:
  pushl $0
80100566:	6a 00                	push   $0x0
  pushl $137
80100568:	68 89 00 00 00       	push   $0x89
  jmp alltraps
8010056d:	e9 eb fa ff ff       	jmp    8010005d <alltraps>

80100572 <vector138>:
.globl vector138
vector138:
  pushl $0
80100572:	6a 00                	push   $0x0
  pushl $138
80100574:	68 8a 00 00 00       	push   $0x8a
  jmp alltraps
80100579:	e9 df fa ff ff       	jmp    8010005d <alltraps>

8010057e <vector139>:
.globl vector139
vector139:
  pushl $0
8010057e:	6a 00                	push   $0x0
  pushl $139
80100580:	68 8b 00 00 00       	push   $0x8b
  jmp alltraps
80100585:	e9 d3 fa ff ff       	jmp    8010005d <alltraps>

8010058a <vector140>:
.globl vector140
vector140:
  pushl $0
8010058a:	6a 00                	push   $0x0
  pushl $140
8010058c:	68 8c 00 00 00       	push   $0x8c
  jmp alltraps
80100591:	e9 c7 fa ff ff       	jmp    8010005d <alltraps>

80100596 <vector141>:
.globl vector141
vector141:
  pushl $0
80100596:	6a 00                	push   $0x0
  pushl $141
80100598:	68 8d 00 00 00       	push   $0x8d
  jmp alltraps
8010059d:	e9 bb fa ff ff       	jmp    8010005d <alltraps>

801005a2 <vector142>:
.globl vector142
vector142:
  pushl $0
801005a2:	6a 00                	push   $0x0
  pushl $142
801005a4:	68 8e 00 00 00       	push   $0x8e
  jmp alltraps
801005a9:	e9 af fa ff ff       	jmp    8010005d <alltraps>

801005ae <vector143>:
.globl vector143
vector143:
  pushl $0
801005ae:	6a 00                	push   $0x0
  pushl $143
801005b0:	68 8f 00 00 00       	push   $0x8f
  jmp alltraps
801005b5:	e9 a3 fa ff ff       	jmp    8010005d <alltraps>

801005ba <vector144>:
.globl vector144
vector144:
  pushl $0
801005ba:	6a 00                	push   $0x0
  pushl $144
801005bc:	68 90 00 00 00       	push   $0x90
  jmp alltraps
801005c1:	e9 97 fa ff ff       	jmp    8010005d <alltraps>

801005c6 <vector145>:
.globl vector145
vector145:
  pushl $0
801005c6:	6a 00                	push   $0x0
  pushl $145
801005c8:	68 91 00 00 00       	push   $0x91
  jmp alltraps
801005cd:	e9 8b fa ff ff       	jmp    8010005d <alltraps>

801005d2 <vector146>:
.globl vector146
vector146:
  pushl $0
801005d2:	6a 00                	push   $0x0
  pushl $146
801005d4:	68 92 00 00 00       	push   $0x92
  jmp alltraps
801005d9:	e9 7f fa ff ff       	jmp    8010005d <alltraps>

801005de <vector147>:
.globl vector147
vector147:
  pushl $0
801005de:	6a 00                	push   $0x0
  pushl $147
801005e0:	68 93 00 00 00       	push   $0x93
  jmp alltraps
801005e5:	e9 73 fa ff ff       	jmp    8010005d <alltraps>

801005ea <vector148>:
.globl vector148
vector148:
  pushl $0
801005ea:	6a 00                	push   $0x0
  pushl $148
801005ec:	68 94 00 00 00       	push   $0x94
  jmp alltraps
801005f1:	e9 67 fa ff ff       	jmp    8010005d <alltraps>

801005f6 <vector149>:
.globl vector149
vector149:
  pushl $0
801005f6:	6a 00                	push   $0x0
  pushl $149
801005f8:	68 95 00 00 00       	push   $0x95
  jmp alltraps
801005fd:	e9 5b fa ff ff       	jmp    8010005d <alltraps>

80100602 <vector150>:
.globl vector150
vector150:
  pushl $0
80100602:	6a 00                	push   $0x0
  pushl $150
80100604:	68 96 00 00 00       	push   $0x96
  jmp alltraps
80100609:	e9 4f fa ff ff       	jmp    8010005d <alltraps>

8010060e <vector151>:
.globl vector151
vector151:
  pushl $0
8010060e:	6a 00                	push   $0x0
  pushl $151
80100610:	68 97 00 00 00       	push   $0x97
  jmp alltraps
80100615:	e9 43 fa ff ff       	jmp    8010005d <alltraps>

8010061a <vector152>:
.globl vector152
vector152:
  pushl $0
8010061a:	6a 00                	push   $0x0
  pushl $152
8010061c:	68 98 00 00 00       	push   $0x98
  jmp alltraps
80100621:	e9 37 fa ff ff       	jmp    8010005d <alltraps>

80100626 <vector153>:
.globl vector153
vector153:
  pushl $0
80100626:	6a 00                	push   $0x0
  pushl $153
80100628:	68 99 00 00 00       	push   $0x99
  jmp alltraps
8010062d:	e9 2b fa ff ff       	jmp    8010005d <alltraps>

80100632 <vector154>:
.globl vector154
vector154:
  pushl $0
80100632:	6a 00                	push   $0x0
  pushl $154
80100634:	68 9a 00 00 00       	push   $0x9a
  jmp alltraps
80100639:	e9 1f fa ff ff       	jmp    8010005d <alltraps>

8010063e <vector155>:
.globl vector155
vector155:
  pushl $0
8010063e:	6a 00                	push   $0x0
  pushl $155
80100640:	68 9b 00 00 00       	push   $0x9b
  jmp alltraps
80100645:	e9 13 fa ff ff       	jmp    8010005d <alltraps>

8010064a <vector156>:
.globl vector156
vector156:
  pushl $0
8010064a:	6a 00                	push   $0x0
  pushl $156
8010064c:	68 9c 00 00 00       	push   $0x9c
  jmp alltraps
80100651:	e9 07 fa ff ff       	jmp    8010005d <alltraps>

80100656 <vector157>:
.globl vector157
vector157:
  pushl $0
80100656:	6a 00                	push   $0x0
  pushl $157
80100658:	68 9d 00 00 00       	push   $0x9d
  jmp alltraps
8010065d:	e9 fb f9 ff ff       	jmp    8010005d <alltraps>

80100662 <vector158>:
.globl vector158
vector158:
  pushl $0
80100662:	6a 00                	push   $0x0
  pushl $158
80100664:	68 9e 00 00 00       	push   $0x9e
  jmp alltraps
80100669:	e9 ef f9 ff ff       	jmp    8010005d <alltraps>

8010066e <vector159>:
.globl vector159
vector159:
  pushl $0
8010066e:	6a 00                	push   $0x0
  pushl $159
80100670:	68 9f 00 00 00       	push   $0x9f
  jmp alltraps
80100675:	e9 e3 f9 ff ff       	jmp    8010005d <alltraps>

8010067a <vector160>:
.globl vector160
vector160:
  pushl $0
8010067a:	6a 00                	push   $0x0
  pushl $160
8010067c:	68 a0 00 00 00       	push   $0xa0
  jmp alltraps
80100681:	e9 d7 f9 ff ff       	jmp    8010005d <alltraps>

80100686 <vector161>:
.globl vector161
vector161:
  pushl $0
80100686:	6a 00                	push   $0x0
  pushl $161
80100688:	68 a1 00 00 00       	push   $0xa1
  jmp alltraps
8010068d:	e9 cb f9 ff ff       	jmp    8010005d <alltraps>

80100692 <vector162>:
.globl vector162
vector162:
  pushl $0
80100692:	6a 00                	push   $0x0
  pushl $162
80100694:	68 a2 00 00 00       	push   $0xa2
  jmp alltraps
80100699:	e9 bf f9 ff ff       	jmp    8010005d <alltraps>

8010069e <vector163>:
.globl vector163
vector163:
  pushl $0
8010069e:	6a 00                	push   $0x0
  pushl $163
801006a0:	68 a3 00 00 00       	push   $0xa3
  jmp alltraps
801006a5:	e9 b3 f9 ff ff       	jmp    8010005d <alltraps>

801006aa <vector164>:
.globl vector164
vector164:
  pushl $0
801006aa:	6a 00                	push   $0x0
  pushl $164
801006ac:	68 a4 00 00 00       	push   $0xa4
  jmp alltraps
801006b1:	e9 a7 f9 ff ff       	jmp    8010005d <alltraps>

801006b6 <vector165>:
.globl vector165
vector165:
  pushl $0
801006b6:	6a 00                	push   $0x0
  pushl $165
801006b8:	68 a5 00 00 00       	push   $0xa5
  jmp alltraps
801006bd:	e9 9b f9 ff ff       	jmp    8010005d <alltraps>

801006c2 <vector166>:
.globl vector166
vector166:
  pushl $0
801006c2:	6a 00                	push   $0x0
  pushl $166
801006c4:	68 a6 00 00 00       	push   $0xa6
  jmp alltraps
801006c9:	e9 8f f9 ff ff       	jmp    8010005d <alltraps>

801006ce <vector167>:
.globl vector167
vector167:
  pushl $0
801006ce:	6a 00                	push   $0x0
  pushl $167
801006d0:	68 a7 00 00 00       	push   $0xa7
  jmp alltraps
801006d5:	e9 83 f9 ff ff       	jmp    8010005d <alltraps>

801006da <vector168>:
.globl vector168
vector168:
  pushl $0
801006da:	6a 00                	push   $0x0
  pushl $168
801006dc:	68 a8 00 00 00       	push   $0xa8
  jmp alltraps
801006e1:	e9 77 f9 ff ff       	jmp    8010005d <alltraps>

801006e6 <vector169>:
.globl vector169
vector169:
  pushl $0
801006e6:	6a 00                	push   $0x0
  pushl $169
801006e8:	68 a9 00 00 00       	push   $0xa9
  jmp alltraps
801006ed:	e9 6b f9 ff ff       	jmp    8010005d <alltraps>

801006f2 <vector170>:
.globl vector170
vector170:
  pushl $0
801006f2:	6a 00                	push   $0x0
  pushl $170
801006f4:	68 aa 00 00 00       	push   $0xaa
  jmp alltraps
801006f9:	e9 5f f9 ff ff       	jmp    8010005d <alltraps>

801006fe <vector171>:
.globl vector171
vector171:
  pushl $0
801006fe:	6a 00                	push   $0x0
  pushl $171
80100700:	68 ab 00 00 00       	push   $0xab
  jmp alltraps
80100705:	e9 53 f9 ff ff       	jmp    8010005d <alltraps>

8010070a <vector172>:
.globl vector172
vector172:
  pushl $0
8010070a:	6a 00                	push   $0x0
  pushl $172
8010070c:	68 ac 00 00 00       	push   $0xac
  jmp alltraps
80100711:	e9 47 f9 ff ff       	jmp    8010005d <alltraps>

80100716 <vector173>:
.globl vector173
vector173:
  pushl $0
80100716:	6a 00                	push   $0x0
  pushl $173
80100718:	68 ad 00 00 00       	push   $0xad
  jmp alltraps
8010071d:	e9 3b f9 ff ff       	jmp    8010005d <alltraps>

80100722 <vector174>:
.globl vector174
vector174:
  pushl $0
80100722:	6a 00                	push   $0x0
  pushl $174
80100724:	68 ae 00 00 00       	push   $0xae
  jmp alltraps
80100729:	e9 2f f9 ff ff       	jmp    8010005d <alltraps>

8010072e <vector175>:
.globl vector175
vector175:
  pushl $0
8010072e:	6a 00                	push   $0x0
  pushl $175
80100730:	68 af 00 00 00       	push   $0xaf
  jmp alltraps
80100735:	e9 23 f9 ff ff       	jmp    8010005d <alltraps>

8010073a <vector176>:
.globl vector176
vector176:
  pushl $0
8010073a:	6a 00                	push   $0x0
  pushl $176
8010073c:	68 b0 00 00 00       	push   $0xb0
  jmp alltraps
80100741:	e9 17 f9 ff ff       	jmp    8010005d <alltraps>

80100746 <vector177>:
.globl vector177
vector177:
  pushl $0
80100746:	6a 00                	push   $0x0
  pushl $177
80100748:	68 b1 00 00 00       	push   $0xb1
  jmp alltraps
8010074d:	e9 0b f9 ff ff       	jmp    8010005d <alltraps>

80100752 <vector178>:
.globl vector178
vector178:
  pushl $0
80100752:	6a 00                	push   $0x0
  pushl $178
80100754:	68 b2 00 00 00       	push   $0xb2
  jmp alltraps
80100759:	e9 ff f8 ff ff       	jmp    8010005d <alltraps>

8010075e <vector179>:
.globl vector179
vector179:
  pushl $0
8010075e:	6a 00                	push   $0x0
  pushl $179
80100760:	68 b3 00 00 00       	push   $0xb3
  jmp alltraps
80100765:	e9 f3 f8 ff ff       	jmp    8010005d <alltraps>

8010076a <vector180>:
.globl vector180
vector180:
  pushl $0
8010076a:	6a 00                	push   $0x0
  pushl $180
8010076c:	68 b4 00 00 00       	push   $0xb4
  jmp alltraps
80100771:	e9 e7 f8 ff ff       	jmp    8010005d <alltraps>

80100776 <vector181>:
.globl vector181
vector181:
  pushl $0
80100776:	6a 00                	push   $0x0
  pushl $181
80100778:	68 b5 00 00 00       	push   $0xb5
  jmp alltraps
8010077d:	e9 db f8 ff ff       	jmp    8010005d <alltraps>

80100782 <vector182>:
.globl vector182
vector182:
  pushl $0
80100782:	6a 00                	push   $0x0
  pushl $182
80100784:	68 b6 00 00 00       	push   $0xb6
  jmp alltraps
80100789:	e9 cf f8 ff ff       	jmp    8010005d <alltraps>

8010078e <vector183>:
.globl vector183
vector183:
  pushl $0
8010078e:	6a 00                	push   $0x0
  pushl $183
80100790:	68 b7 00 00 00       	push   $0xb7
  jmp alltraps
80100795:	e9 c3 f8 ff ff       	jmp    8010005d <alltraps>

8010079a <vector184>:
.globl vector184
vector184:
  pushl $0
8010079a:	6a 00                	push   $0x0
  pushl $184
8010079c:	68 b8 00 00 00       	push   $0xb8
  jmp alltraps
801007a1:	e9 b7 f8 ff ff       	jmp    8010005d <alltraps>

801007a6 <vector185>:
.globl vector185
vector185:
  pushl $0
801007a6:	6a 00                	push   $0x0
  pushl $185
801007a8:	68 b9 00 00 00       	push   $0xb9
  jmp alltraps
801007ad:	e9 ab f8 ff ff       	jmp    8010005d <alltraps>

801007b2 <vector186>:
.globl vector186
vector186:
  pushl $0
801007b2:	6a 00                	push   $0x0
  pushl $186
801007b4:	68 ba 00 00 00       	push   $0xba
  jmp alltraps
801007b9:	e9 9f f8 ff ff       	jmp    8010005d <alltraps>

801007be <vector187>:
.globl vector187
vector187:
  pushl $0
801007be:	6a 00                	push   $0x0
  pushl $187
801007c0:	68 bb 00 00 00       	push   $0xbb
  jmp alltraps
801007c5:	e9 93 f8 ff ff       	jmp    8010005d <alltraps>

801007ca <vector188>:
.globl vector188
vector188:
  pushl $0
801007ca:	6a 00                	push   $0x0
  pushl $188
801007cc:	68 bc 00 00 00       	push   $0xbc
  jmp alltraps
801007d1:	e9 87 f8 ff ff       	jmp    8010005d <alltraps>

801007d6 <vector189>:
.globl vector189
vector189:
  pushl $0
801007d6:	6a 00                	push   $0x0
  pushl $189
801007d8:	68 bd 00 00 00       	push   $0xbd
  jmp alltraps
801007dd:	e9 7b f8 ff ff       	jmp    8010005d <alltraps>

801007e2 <vector190>:
.globl vector190
vector190:
  pushl $0
801007e2:	6a 00                	push   $0x0
  pushl $190
801007e4:	68 be 00 00 00       	push   $0xbe
  jmp alltraps
801007e9:	e9 6f f8 ff ff       	jmp    8010005d <alltraps>

801007ee <vector191>:
.globl vector191
vector191:
  pushl $0
801007ee:	6a 00                	push   $0x0
  pushl $191
801007f0:	68 bf 00 00 00       	push   $0xbf
  jmp alltraps
801007f5:	e9 63 f8 ff ff       	jmp    8010005d <alltraps>

801007fa <vector192>:
.globl vector192
vector192:
  pushl $0
801007fa:	6a 00                	push   $0x0
  pushl $192
801007fc:	68 c0 00 00 00       	push   $0xc0
  jmp alltraps
80100801:	e9 57 f8 ff ff       	jmp    8010005d <alltraps>

80100806 <vector193>:
.globl vector193
vector193:
  pushl $0
80100806:	6a 00                	push   $0x0
  pushl $193
80100808:	68 c1 00 00 00       	push   $0xc1
  jmp alltraps
8010080d:	e9 4b f8 ff ff       	jmp    8010005d <alltraps>

80100812 <vector194>:
.globl vector194
vector194:
  pushl $0
80100812:	6a 00                	push   $0x0
  pushl $194
80100814:	68 c2 00 00 00       	push   $0xc2
  jmp alltraps
80100819:	e9 3f f8 ff ff       	jmp    8010005d <alltraps>

8010081e <vector195>:
.globl vector195
vector195:
  pushl $0
8010081e:	6a 00                	push   $0x0
  pushl $195
80100820:	68 c3 00 00 00       	push   $0xc3
  jmp alltraps
80100825:	e9 33 f8 ff ff       	jmp    8010005d <alltraps>

8010082a <vector196>:
.globl vector196
vector196:
  pushl $0
8010082a:	6a 00                	push   $0x0
  pushl $196
8010082c:	68 c4 00 00 00       	push   $0xc4
  jmp alltraps
80100831:	e9 27 f8 ff ff       	jmp    8010005d <alltraps>

80100836 <vector197>:
.globl vector197
vector197:
  pushl $0
80100836:	6a 00                	push   $0x0
  pushl $197
80100838:	68 c5 00 00 00       	push   $0xc5
  jmp alltraps
8010083d:	e9 1b f8 ff ff       	jmp    8010005d <alltraps>

80100842 <vector198>:
.globl vector198
vector198:
  pushl $0
80100842:	6a 00                	push   $0x0
  pushl $198
80100844:	68 c6 00 00 00       	push   $0xc6
  jmp alltraps
80100849:	e9 0f f8 ff ff       	jmp    8010005d <alltraps>

8010084e <vector199>:
.globl vector199
vector199:
  pushl $0
8010084e:	6a 00                	push   $0x0
  pushl $199
80100850:	68 c7 00 00 00       	push   $0xc7
  jmp alltraps
80100855:	e9 03 f8 ff ff       	jmp    8010005d <alltraps>

8010085a <vector200>:
.globl vector200
vector200:
  pushl $0
8010085a:	6a 00                	push   $0x0
  pushl $200
8010085c:	68 c8 00 00 00       	push   $0xc8
  jmp alltraps
80100861:	e9 f7 f7 ff ff       	jmp    8010005d <alltraps>

80100866 <vector201>:
.globl vector201
vector201:
  pushl $0
80100866:	6a 00                	push   $0x0
  pushl $201
80100868:	68 c9 00 00 00       	push   $0xc9
  jmp alltraps
8010086d:	e9 eb f7 ff ff       	jmp    8010005d <alltraps>

80100872 <vector202>:
.globl vector202
vector202:
  pushl $0
80100872:	6a 00                	push   $0x0
  pushl $202
80100874:	68 ca 00 00 00       	push   $0xca
  jmp alltraps
80100879:	e9 df f7 ff ff       	jmp    8010005d <alltraps>

8010087e <vector203>:
.globl vector203
vector203:
  pushl $0
8010087e:	6a 00                	push   $0x0
  pushl $203
80100880:	68 cb 00 00 00       	push   $0xcb
  jmp alltraps
80100885:	e9 d3 f7 ff ff       	jmp    8010005d <alltraps>

8010088a <vector204>:
.globl vector204
vector204:
  pushl $0
8010088a:	6a 00                	push   $0x0
  pushl $204
8010088c:	68 cc 00 00 00       	push   $0xcc
  jmp alltraps
80100891:	e9 c7 f7 ff ff       	jmp    8010005d <alltraps>

80100896 <vector205>:
.globl vector205
vector205:
  pushl $0
80100896:	6a 00                	push   $0x0
  pushl $205
80100898:	68 cd 00 00 00       	push   $0xcd
  jmp alltraps
8010089d:	e9 bb f7 ff ff       	jmp    8010005d <alltraps>

801008a2 <vector206>:
.globl vector206
vector206:
  pushl $0
801008a2:	6a 00                	push   $0x0
  pushl $206
801008a4:	68 ce 00 00 00       	push   $0xce
  jmp alltraps
801008a9:	e9 af f7 ff ff       	jmp    8010005d <alltraps>

801008ae <vector207>:
.globl vector207
vector207:
  pushl $0
801008ae:	6a 00                	push   $0x0
  pushl $207
801008b0:	68 cf 00 00 00       	push   $0xcf
  jmp alltraps
801008b5:	e9 a3 f7 ff ff       	jmp    8010005d <alltraps>

801008ba <vector208>:
.globl vector208
vector208:
  pushl $0
801008ba:	6a 00                	push   $0x0
  pushl $208
801008bc:	68 d0 00 00 00       	push   $0xd0
  jmp alltraps
801008c1:	e9 97 f7 ff ff       	jmp    8010005d <alltraps>

801008c6 <vector209>:
.globl vector209
vector209:
  pushl $0
801008c6:	6a 00                	push   $0x0
  pushl $209
801008c8:	68 d1 00 00 00       	push   $0xd1
  jmp alltraps
801008cd:	e9 8b f7 ff ff       	jmp    8010005d <alltraps>

801008d2 <vector210>:
.globl vector210
vector210:
  pushl $0
801008d2:	6a 00                	push   $0x0
  pushl $210
801008d4:	68 d2 00 00 00       	push   $0xd2
  jmp alltraps
801008d9:	e9 7f f7 ff ff       	jmp    8010005d <alltraps>

801008de <vector211>:
.globl vector211
vector211:
  pushl $0
801008de:	6a 00                	push   $0x0
  pushl $211
801008e0:	68 d3 00 00 00       	push   $0xd3
  jmp alltraps
801008e5:	e9 73 f7 ff ff       	jmp    8010005d <alltraps>

801008ea <vector212>:
.globl vector212
vector212:
  pushl $0
801008ea:	6a 00                	push   $0x0
  pushl $212
801008ec:	68 d4 00 00 00       	push   $0xd4
  jmp alltraps
801008f1:	e9 67 f7 ff ff       	jmp    8010005d <alltraps>

801008f6 <vector213>:
.globl vector213
vector213:
  pushl $0
801008f6:	6a 00                	push   $0x0
  pushl $213
801008f8:	68 d5 00 00 00       	push   $0xd5
  jmp alltraps
801008fd:	e9 5b f7 ff ff       	jmp    8010005d <alltraps>

80100902 <vector214>:
.globl vector214
vector214:
  pushl $0
80100902:	6a 00                	push   $0x0
  pushl $214
80100904:	68 d6 00 00 00       	push   $0xd6
  jmp alltraps
80100909:	e9 4f f7 ff ff       	jmp    8010005d <alltraps>

8010090e <vector215>:
.globl vector215
vector215:
  pushl $0
8010090e:	6a 00                	push   $0x0
  pushl $215
80100910:	68 d7 00 00 00       	push   $0xd7
  jmp alltraps
80100915:	e9 43 f7 ff ff       	jmp    8010005d <alltraps>

8010091a <vector216>:
.globl vector216
vector216:
  pushl $0
8010091a:	6a 00                	push   $0x0
  pushl $216
8010091c:	68 d8 00 00 00       	push   $0xd8
  jmp alltraps
80100921:	e9 37 f7 ff ff       	jmp    8010005d <alltraps>

80100926 <vector217>:
.globl vector217
vector217:
  pushl $0
80100926:	6a 00                	push   $0x0
  pushl $217
80100928:	68 d9 00 00 00       	push   $0xd9
  jmp alltraps
8010092d:	e9 2b f7 ff ff       	jmp    8010005d <alltraps>

80100932 <vector218>:
.globl vector218
vector218:
  pushl $0
80100932:	6a 00                	push   $0x0
  pushl $218
80100934:	68 da 00 00 00       	push   $0xda
  jmp alltraps
80100939:	e9 1f f7 ff ff       	jmp    8010005d <alltraps>

8010093e <vector219>:
.globl vector219
vector219:
  pushl $0
8010093e:	6a 00                	push   $0x0
  pushl $219
80100940:	68 db 00 00 00       	push   $0xdb
  jmp alltraps
80100945:	e9 13 f7 ff ff       	jmp    8010005d <alltraps>

8010094a <vector220>:
.globl vector220
vector220:
  pushl $0
8010094a:	6a 00                	push   $0x0
  pushl $220
8010094c:	68 dc 00 00 00       	push   $0xdc
  jmp alltraps
80100951:	e9 07 f7 ff ff       	jmp    8010005d <alltraps>

80100956 <vector221>:
.globl vector221
vector221:
  pushl $0
80100956:	6a 00                	push   $0x0
  pushl $221
80100958:	68 dd 00 00 00       	push   $0xdd
  jmp alltraps
8010095d:	e9 fb f6 ff ff       	jmp    8010005d <alltraps>

80100962 <vector222>:
.globl vector222
vector222:
  pushl $0
80100962:	6a 00                	push   $0x0
  pushl $222
80100964:	68 de 00 00 00       	push   $0xde
  jmp alltraps
80100969:	e9 ef f6 ff ff       	jmp    8010005d <alltraps>

8010096e <vector223>:
.globl vector223
vector223:
  pushl $0
8010096e:	6a 00                	push   $0x0
  pushl $223
80100970:	68 df 00 00 00       	push   $0xdf
  jmp alltraps
80100975:	e9 e3 f6 ff ff       	jmp    8010005d <alltraps>

8010097a <vector224>:
.globl vector224
vector224:
  pushl $0
8010097a:	6a 00                	push   $0x0
  pushl $224
8010097c:	68 e0 00 00 00       	push   $0xe0
  jmp alltraps
80100981:	e9 d7 f6 ff ff       	jmp    8010005d <alltraps>

80100986 <vector225>:
.globl vector225
vector225:
  pushl $0
80100986:	6a 00                	push   $0x0
  pushl $225
80100988:	68 e1 00 00 00       	push   $0xe1
  jmp alltraps
8010098d:	e9 cb f6 ff ff       	jmp    8010005d <alltraps>

80100992 <vector226>:
.globl vector226
vector226:
  pushl $0
80100992:	6a 00                	push   $0x0
  pushl $226
80100994:	68 e2 00 00 00       	push   $0xe2
  jmp alltraps
80100999:	e9 bf f6 ff ff       	jmp    8010005d <alltraps>

8010099e <vector227>:
.globl vector227
vector227:
  pushl $0
8010099e:	6a 00                	push   $0x0
  pushl $227
801009a0:	68 e3 00 00 00       	push   $0xe3
  jmp alltraps
801009a5:	e9 b3 f6 ff ff       	jmp    8010005d <alltraps>

801009aa <vector228>:
.globl vector228
vector228:
  pushl $0
801009aa:	6a 00                	push   $0x0
  pushl $228
801009ac:	68 e4 00 00 00       	push   $0xe4
  jmp alltraps
801009b1:	e9 a7 f6 ff ff       	jmp    8010005d <alltraps>

801009b6 <vector229>:
.globl vector229
vector229:
  pushl $0
801009b6:	6a 00                	push   $0x0
  pushl $229
801009b8:	68 e5 00 00 00       	push   $0xe5
  jmp alltraps
801009bd:	e9 9b f6 ff ff       	jmp    8010005d <alltraps>

801009c2 <vector230>:
.globl vector230
vector230:
  pushl $0
801009c2:	6a 00                	push   $0x0
  pushl $230
801009c4:	68 e6 00 00 00       	push   $0xe6
  jmp alltraps
801009c9:	e9 8f f6 ff ff       	jmp    8010005d <alltraps>

801009ce <vector231>:
.globl vector231
vector231:
  pushl $0
801009ce:	6a 00                	push   $0x0
  pushl $231
801009d0:	68 e7 00 00 00       	push   $0xe7
  jmp alltraps
801009d5:	e9 83 f6 ff ff       	jmp    8010005d <alltraps>

801009da <vector232>:
.globl vector232
vector232:
  pushl $0
801009da:	6a 00                	push   $0x0
  pushl $232
801009dc:	68 e8 00 00 00       	push   $0xe8
  jmp alltraps
801009e1:	e9 77 f6 ff ff       	jmp    8010005d <alltraps>

801009e6 <vector233>:
.globl vector233
vector233:
  pushl $0
801009e6:	6a 00                	push   $0x0
  pushl $233
801009e8:	68 e9 00 00 00       	push   $0xe9
  jmp alltraps
801009ed:	e9 6b f6 ff ff       	jmp    8010005d <alltraps>

801009f2 <vector234>:
.globl vector234
vector234:
  pushl $0
801009f2:	6a 00                	push   $0x0
  pushl $234
801009f4:	68 ea 00 00 00       	push   $0xea
  jmp alltraps
801009f9:	e9 5f f6 ff ff       	jmp    8010005d <alltraps>

801009fe <vector235>:
.globl vector235
vector235:
  pushl $0
801009fe:	6a 00                	push   $0x0
  pushl $235
80100a00:	68 eb 00 00 00       	push   $0xeb
  jmp alltraps
80100a05:	e9 53 f6 ff ff       	jmp    8010005d <alltraps>

80100a0a <vector236>:
.globl vector236
vector236:
  pushl $0
80100a0a:	6a 00                	push   $0x0
  pushl $236
80100a0c:	68 ec 00 00 00       	push   $0xec
  jmp alltraps
80100a11:	e9 47 f6 ff ff       	jmp    8010005d <alltraps>

80100a16 <vector237>:
.globl vector237
vector237:
  pushl $0
80100a16:	6a 00                	push   $0x0
  pushl $237
80100a18:	68 ed 00 00 00       	push   $0xed
  jmp alltraps
80100a1d:	e9 3b f6 ff ff       	jmp    8010005d <alltraps>

80100a22 <vector238>:
.globl vector238
vector238:
  pushl $0
80100a22:	6a 00                	push   $0x0
  pushl $238
80100a24:	68 ee 00 00 00       	push   $0xee
  jmp alltraps
80100a29:	e9 2f f6 ff ff       	jmp    8010005d <alltraps>

80100a2e <vector239>:
.globl vector239
vector239:
  pushl $0
80100a2e:	6a 00                	push   $0x0
  pushl $239
80100a30:	68 ef 00 00 00       	push   $0xef
  jmp alltraps
80100a35:	e9 23 f6 ff ff       	jmp    8010005d <alltraps>

80100a3a <vector240>:
.globl vector240
vector240:
  pushl $0
80100a3a:	6a 00                	push   $0x0
  pushl $240
80100a3c:	68 f0 00 00 00       	push   $0xf0
  jmp alltraps
80100a41:	e9 17 f6 ff ff       	jmp    8010005d <alltraps>

80100a46 <vector241>:
.globl vector241
vector241:
  pushl $0
80100a46:	6a 00                	push   $0x0
  pushl $241
80100a48:	68 f1 00 00 00       	push   $0xf1
  jmp alltraps
80100a4d:	e9 0b f6 ff ff       	jmp    8010005d <alltraps>

80100a52 <vector242>:
.globl vector242
vector242:
  pushl $0
80100a52:	6a 00                	push   $0x0
  pushl $242
80100a54:	68 f2 00 00 00       	push   $0xf2
  jmp alltraps
80100a59:	e9 ff f5 ff ff       	jmp    8010005d <alltraps>

80100a5e <vector243>:
.globl vector243
vector243:
  pushl $0
80100a5e:	6a 00                	push   $0x0
  pushl $243
80100a60:	68 f3 00 00 00       	push   $0xf3
  jmp alltraps
80100a65:	e9 f3 f5 ff ff       	jmp    8010005d <alltraps>

80100a6a <vector244>:
.globl vector244
vector244:
  pushl $0
80100a6a:	6a 00                	push   $0x0
  pushl $244
80100a6c:	68 f4 00 00 00       	push   $0xf4
  jmp alltraps
80100a71:	e9 e7 f5 ff ff       	jmp    8010005d <alltraps>

80100a76 <vector245>:
.globl vector245
vector245:
  pushl $0
80100a76:	6a 00                	push   $0x0
  pushl $245
80100a78:	68 f5 00 00 00       	push   $0xf5
  jmp alltraps
80100a7d:	e9 db f5 ff ff       	jmp    8010005d <alltraps>

80100a82 <vector246>:
.globl vector246
vector246:
  pushl $0
80100a82:	6a 00                	push   $0x0
  pushl $246
80100a84:	68 f6 00 00 00       	push   $0xf6
  jmp alltraps
80100a89:	e9 cf f5 ff ff       	jmp    8010005d <alltraps>

80100a8e <vector247>:
.globl vector247
vector247:
  pushl $0
80100a8e:	6a 00                	push   $0x0
  pushl $247
80100a90:	68 f7 00 00 00       	push   $0xf7
  jmp alltraps
80100a95:	e9 c3 f5 ff ff       	jmp    8010005d <alltraps>

80100a9a <vector248>:
.globl vector248
vector248:
  pushl $0
80100a9a:	6a 00                	push   $0x0
  pushl $248
80100a9c:	68 f8 00 00 00       	push   $0xf8
  jmp alltraps
80100aa1:	e9 b7 f5 ff ff       	jmp    8010005d <alltraps>

80100aa6 <vector249>:
.globl vector249
vector249:
  pushl $0
80100aa6:	6a 00                	push   $0x0
  pushl $249
80100aa8:	68 f9 00 00 00       	push   $0xf9
  jmp alltraps
80100aad:	e9 ab f5 ff ff       	jmp    8010005d <alltraps>

80100ab2 <vector250>:
.globl vector250
vector250:
  pushl $0
80100ab2:	6a 00                	push   $0x0
  pushl $250
80100ab4:	68 fa 00 00 00       	push   $0xfa
  jmp alltraps
80100ab9:	e9 9f f5 ff ff       	jmp    8010005d <alltraps>

80100abe <vector251>:
.globl vector251
vector251:
  pushl $0
80100abe:	6a 00                	push   $0x0
  pushl $251
80100ac0:	68 fb 00 00 00       	push   $0xfb
  jmp alltraps
80100ac5:	e9 93 f5 ff ff       	jmp    8010005d <alltraps>

80100aca <vector252>:
.globl vector252
vector252:
  pushl $0
80100aca:	6a 00                	push   $0x0
  pushl $252
80100acc:	68 fc 00 00 00       	push   $0xfc
  jmp alltraps
80100ad1:	e9 87 f5 ff ff       	jmp    8010005d <alltraps>

80100ad6 <vector253>:
.globl vector253
vector253:
  pushl $0
80100ad6:	6a 00                	push   $0x0
  pushl $253
80100ad8:	68 fd 00 00 00       	push   $0xfd
  jmp alltraps
80100add:	e9 7b f5 ff ff       	jmp    8010005d <alltraps>

80100ae2 <vector254>:
.globl vector254
vector254:
  pushl $0
80100ae2:	6a 00                	push   $0x0
  pushl $254
80100ae4:	68 fe 00 00 00       	push   $0xfe
  jmp alltraps
80100ae9:	e9 6f f5 ff ff       	jmp    8010005d <alltraps>

80100aee <vector255>:
.globl vector255
vector255:
  pushl $0
80100aee:	6a 00                	push   $0x0
  pushl $255
80100af0:	68 ff 00 00 00       	push   $0xff
  jmp alltraps
80100af5:	e9 63 f5 ff ff       	jmp    8010005d <alltraps>

80100afa <binit>:
  struct buf head;
} bcache;

void
binit(void)
{
80100afa:	55                   	push   %ebp
80100afb:	89 e5                	mov    %esp,%ebp
80100afd:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  initlock(&bcache.lock, "bcache");
80100b00:	83 ec 08             	sub    $0x8,%esp
80100b03:	68 0c 85 10 80       	push   $0x8010850c
80100b08:	68 a0 b1 10 80       	push   $0x8010b1a0
80100b0d:	e8 68 4f 00 00       	call   80105a7a <initlock>
80100b12:	83 c4 10             	add    $0x10,%esp

//PAGEBREAK!
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
80100b15:	c7 05 d0 c6 10 80 c4 	movl   $0x8010c6c4,0x8010c6d0
80100b1c:	c6 10 80 
  bcache.head.next = &bcache.head;
80100b1f:	c7 05 d4 c6 10 80 c4 	movl   $0x8010c6c4,0x8010c6d4
80100b26:	c6 10 80 
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
80100b29:	c7 45 f4 d4 b1 10 80 	movl   $0x8010b1d4,-0xc(%ebp)
80100b30:	eb 3a                	jmp    80100b6c <binit+0x72>
    b->next = bcache.head.next;
80100b32:	8b 15 d4 c6 10 80    	mov    0x8010c6d4,%edx
80100b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b3b:	89 50 10             	mov    %edx,0x10(%eax)
    b->prev = &bcache.head;
80100b3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b41:	c7 40 0c c4 c6 10 80 	movl   $0x8010c6c4,0xc(%eax)
    b->dev = -1;
80100b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b4b:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
    bcache.head.next->prev = b;
80100b52:	a1 d4 c6 10 80       	mov    0x8010c6d4,%eax
80100b57:	8b 55 f4             	mov    -0xc(%ebp),%edx
80100b5a:	89 50 0c             	mov    %edx,0xc(%eax)
    bcache.head.next = b;
80100b5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b60:	a3 d4 c6 10 80       	mov    %eax,0x8010c6d4

//PAGEBREAK!
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
  bcache.head.next = &bcache.head;
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
80100b65:	81 45 f4 18 02 00 00 	addl   $0x218,-0xc(%ebp)
80100b6c:	81 7d f4 c4 c6 10 80 	cmpl   $0x8010c6c4,-0xc(%ebp)
80100b73:	72 bd                	jb     80100b32 <binit+0x38>
    b->prev = &bcache.head;
    b->dev = -1;
    bcache.head.next->prev = b;
    bcache.head.next = b;
  }
}
80100b75:	c9                   	leave  
80100b76:	c3                   	ret    

80100b77 <bget>:
// Look through buffer cache for sector on device dev.
// If not found, allocate fresh block.
// In either case, return B_BUSY buffer.
static struct buf*
bget(uint dev, uint sector)
{
80100b77:	55                   	push   %ebp
80100b78:	89 e5                	mov    %esp,%ebp
80100b7a:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  acquire(&bcache.lock);
80100b7d:	83 ec 0c             	sub    $0xc,%esp
80100b80:	68 a0 b1 10 80       	push   $0x8010b1a0
80100b85:	e8 11 4f 00 00       	call   80105a9b <acquire>
80100b8a:	83 c4 10             	add    $0x10,%esp

 loop:
  // Is the sector already cached?
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
80100b8d:	a1 d4 c6 10 80       	mov    0x8010c6d4,%eax
80100b92:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100b95:	eb 67                	jmp    80100bfe <bget+0x87>
    if(b->dev == dev && b->sector == sector){
80100b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b9a:	8b 40 04             	mov    0x4(%eax),%eax
80100b9d:	3b 45 08             	cmp    0x8(%ebp),%eax
80100ba0:	75 53                	jne    80100bf5 <bget+0x7e>
80100ba2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100ba5:	8b 40 08             	mov    0x8(%eax),%eax
80100ba8:	3b 45 0c             	cmp    0xc(%ebp),%eax
80100bab:	75 48                	jne    80100bf5 <bget+0x7e>
      if(!(b->flags & B_BUSY)){
80100bad:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bb0:	8b 00                	mov    (%eax),%eax
80100bb2:	83 e0 01             	and    $0x1,%eax
80100bb5:	85 c0                	test   %eax,%eax
80100bb7:	75 27                	jne    80100be0 <bget+0x69>
        b->flags |= B_BUSY;
80100bb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bbc:	8b 00                	mov    (%eax),%eax
80100bbe:	83 c8 01             	or     $0x1,%eax
80100bc1:	89 c2                	mov    %eax,%edx
80100bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bc6:	89 10                	mov    %edx,(%eax)
        release(&bcache.lock);
80100bc8:	83 ec 0c             	sub    $0xc,%esp
80100bcb:	68 a0 b1 10 80       	push   $0x8010b1a0
80100bd0:	e8 80 4f 00 00       	call   80105b55 <release>
80100bd5:	83 c4 10             	add    $0x10,%esp
        return b;
80100bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bdb:	e9 98 00 00 00       	jmp    80100c78 <bget+0x101>
      }
      sleep(b, &bcache.lock);
80100be0:	83 ec 08             	sub    $0x8,%esp
80100be3:	68 a0 b1 10 80       	push   $0x8010b1a0
80100be8:	ff 75 f4             	pushl  -0xc(%ebp)
80100beb:	e8 bf 4b 00 00       	call   801057af <sleep>
80100bf0:	83 c4 10             	add    $0x10,%esp
      goto loop;
80100bf3:	eb 98                	jmp    80100b8d <bget+0x16>

  acquire(&bcache.lock);

 loop:
  // Is the sector already cached?
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
80100bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bf8:	8b 40 10             	mov    0x10(%eax),%eax
80100bfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100bfe:	81 7d f4 c4 c6 10 80 	cmpl   $0x8010c6c4,-0xc(%ebp)
80100c05:	75 90                	jne    80100b97 <bget+0x20>
      goto loop;
    }
  }

  // Not cached; recycle some non-busy and clean buffer.
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
80100c07:	a1 d0 c6 10 80       	mov    0x8010c6d0,%eax
80100c0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100c0f:	eb 51                	jmp    80100c62 <bget+0xeb>
    if((b->flags & B_BUSY) == 0 && (b->flags & B_DIRTY) == 0){
80100c11:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c14:	8b 00                	mov    (%eax),%eax
80100c16:	83 e0 01             	and    $0x1,%eax
80100c19:	85 c0                	test   %eax,%eax
80100c1b:	75 3c                	jne    80100c59 <bget+0xe2>
80100c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c20:	8b 00                	mov    (%eax),%eax
80100c22:	83 e0 04             	and    $0x4,%eax
80100c25:	85 c0                	test   %eax,%eax
80100c27:	75 30                	jne    80100c59 <bget+0xe2>
      b->dev = dev;
80100c29:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c2c:	8b 55 08             	mov    0x8(%ebp),%edx
80100c2f:	89 50 04             	mov    %edx,0x4(%eax)
      b->sector = sector;
80100c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c35:	8b 55 0c             	mov    0xc(%ebp),%edx
80100c38:	89 50 08             	mov    %edx,0x8(%eax)
      b->flags = B_BUSY;
80100c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c3e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
      release(&bcache.lock);
80100c44:	83 ec 0c             	sub    $0xc,%esp
80100c47:	68 a0 b1 10 80       	push   $0x8010b1a0
80100c4c:	e8 04 4f 00 00       	call   80105b55 <release>
80100c51:	83 c4 10             	add    $0x10,%esp
      return b;
80100c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c57:	eb 1f                	jmp    80100c78 <bget+0x101>
      goto loop;
    }
  }

  // Not cached; recycle some non-busy and clean buffer.
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
80100c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c5c:	8b 40 0c             	mov    0xc(%eax),%eax
80100c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100c62:	81 7d f4 c4 c6 10 80 	cmpl   $0x8010c6c4,-0xc(%ebp)
80100c69:	75 a6                	jne    80100c11 <bget+0x9a>
      b->flags = B_BUSY;
      release(&bcache.lock);
      return b;
    }
  }
  panic("bget: no buffers");
80100c6b:	83 ec 0c             	sub    $0xc,%esp
80100c6e:	68 13 85 10 80       	push   $0x80108513
80100c73:	e8 19 04 00 00       	call   80101091 <panic>
}
80100c78:	c9                   	leave  
80100c79:	c3                   	ret    

80100c7a <bread>:

// Return a B_BUSY buf with the contents of the indicated disk sector.
struct buf*
bread(uint dev, uint sector)
{
80100c7a:	55                   	push   %ebp
80100c7b:	89 e5                	mov    %esp,%ebp
80100c7d:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  b = bget(dev, sector);
80100c80:	83 ec 08             	sub    $0x8,%esp
80100c83:	ff 75 0c             	pushl  0xc(%ebp)
80100c86:	ff 75 08             	pushl  0x8(%ebp)
80100c89:	e8 e9 fe ff ff       	call   80100b77 <bget>
80100c8e:	83 c4 10             	add    $0x10,%esp
80100c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!(b->flags & B_VALID))
80100c94:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c97:	8b 00                	mov    (%eax),%eax
80100c99:	83 e0 02             	and    $0x2,%eax
80100c9c:	85 c0                	test   %eax,%eax
80100c9e:	75 0e                	jne    80100cae <bread+0x34>
    iderw(b);
80100ca0:	83 ec 0c             	sub    $0xc,%esp
80100ca3:	ff 75 f4             	pushl  -0xc(%ebp)
80100ca6:	e8 6d 26 00 00       	call   80103318 <iderw>
80100cab:	83 c4 10             	add    $0x10,%esp
  return b;
80100cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80100cb1:	c9                   	leave  
80100cb2:	c3                   	ret    

80100cb3 <bwrite>:

// Write b's contents to disk.  Must be B_BUSY.
void
bwrite(struct buf *b)
{
80100cb3:	55                   	push   %ebp
80100cb4:	89 e5                	mov    %esp,%ebp
80100cb6:	83 ec 08             	sub    $0x8,%esp
  if((b->flags & B_BUSY) == 0)
80100cb9:	8b 45 08             	mov    0x8(%ebp),%eax
80100cbc:	8b 00                	mov    (%eax),%eax
80100cbe:	83 e0 01             	and    $0x1,%eax
80100cc1:	85 c0                	test   %eax,%eax
80100cc3:	75 0d                	jne    80100cd2 <bwrite+0x1f>
    panic("bwrite");
80100cc5:	83 ec 0c             	sub    $0xc,%esp
80100cc8:	68 24 85 10 80       	push   $0x80108524
80100ccd:	e8 bf 03 00 00       	call   80101091 <panic>
  b->flags |= B_DIRTY;
80100cd2:	8b 45 08             	mov    0x8(%ebp),%eax
80100cd5:	8b 00                	mov    (%eax),%eax
80100cd7:	83 c8 04             	or     $0x4,%eax
80100cda:	89 c2                	mov    %eax,%edx
80100cdc:	8b 45 08             	mov    0x8(%ebp),%eax
80100cdf:	89 10                	mov    %edx,(%eax)
  iderw(b);
80100ce1:	83 ec 0c             	sub    $0xc,%esp
80100ce4:	ff 75 08             	pushl  0x8(%ebp)
80100ce7:	e8 2c 26 00 00       	call   80103318 <iderw>
80100cec:	83 c4 10             	add    $0x10,%esp
}
80100cef:	c9                   	leave  
80100cf0:	c3                   	ret    

80100cf1 <brelse>:

// Release a B_BUSY buffer.
// Move to the head of the MRU list.
void
brelse(struct buf *b)
{
80100cf1:	55                   	push   %ebp
80100cf2:	89 e5                	mov    %esp,%ebp
80100cf4:	83 ec 08             	sub    $0x8,%esp
  if((b->flags & B_BUSY) == 0)
80100cf7:	8b 45 08             	mov    0x8(%ebp),%eax
80100cfa:	8b 00                	mov    (%eax),%eax
80100cfc:	83 e0 01             	and    $0x1,%eax
80100cff:	85 c0                	test   %eax,%eax
80100d01:	75 0d                	jne    80100d10 <brelse+0x1f>
    panic("brelse");
80100d03:	83 ec 0c             	sub    $0xc,%esp
80100d06:	68 2b 85 10 80       	push   $0x8010852b
80100d0b:	e8 81 03 00 00       	call   80101091 <panic>

  acquire(&bcache.lock);
80100d10:	83 ec 0c             	sub    $0xc,%esp
80100d13:	68 a0 b1 10 80       	push   $0x8010b1a0
80100d18:	e8 7e 4d 00 00       	call   80105a9b <acquire>
80100d1d:	83 c4 10             	add    $0x10,%esp

  b->next->prev = b->prev;
80100d20:	8b 45 08             	mov    0x8(%ebp),%eax
80100d23:	8b 40 10             	mov    0x10(%eax),%eax
80100d26:	8b 55 08             	mov    0x8(%ebp),%edx
80100d29:	8b 52 0c             	mov    0xc(%edx),%edx
80100d2c:	89 50 0c             	mov    %edx,0xc(%eax)
  b->prev->next = b->next;
80100d2f:	8b 45 08             	mov    0x8(%ebp),%eax
80100d32:	8b 40 0c             	mov    0xc(%eax),%eax
80100d35:	8b 55 08             	mov    0x8(%ebp),%edx
80100d38:	8b 52 10             	mov    0x10(%edx),%edx
80100d3b:	89 50 10             	mov    %edx,0x10(%eax)
  b->next = bcache.head.next;
80100d3e:	8b 15 d4 c6 10 80    	mov    0x8010c6d4,%edx
80100d44:	8b 45 08             	mov    0x8(%ebp),%eax
80100d47:	89 50 10             	mov    %edx,0x10(%eax)
  b->prev = &bcache.head;
80100d4a:	8b 45 08             	mov    0x8(%ebp),%eax
80100d4d:	c7 40 0c c4 c6 10 80 	movl   $0x8010c6c4,0xc(%eax)
  bcache.head.next->prev = b;
80100d54:	a1 d4 c6 10 80       	mov    0x8010c6d4,%eax
80100d59:	8b 55 08             	mov    0x8(%ebp),%edx
80100d5c:	89 50 0c             	mov    %edx,0xc(%eax)
  bcache.head.next = b;
80100d5f:	8b 45 08             	mov    0x8(%ebp),%eax
80100d62:	a3 d4 c6 10 80       	mov    %eax,0x8010c6d4

  b->flags &= ~B_BUSY;
80100d67:	8b 45 08             	mov    0x8(%ebp),%eax
80100d6a:	8b 00                	mov    (%eax),%eax
80100d6c:	83 e0 fe             	and    $0xfffffffe,%eax
80100d6f:	89 c2                	mov    %eax,%edx
80100d71:	8b 45 08             	mov    0x8(%ebp),%eax
80100d74:	89 10                	mov    %edx,(%eax)
  wakeup(b);
80100d76:	83 ec 0c             	sub    $0xc,%esp
80100d79:	ff 75 08             	pushl  0x8(%ebp)
80100d7c:	e8 17 4b 00 00       	call   80105898 <wakeup>
80100d81:	83 c4 10             	add    $0x10,%esp

  release(&bcache.lock);
80100d84:	83 ec 0c             	sub    $0xc,%esp
80100d87:	68 a0 b1 10 80       	push   $0x8010b1a0
80100d8c:	e8 c4 4d 00 00       	call   80105b55 <release>
80100d91:	83 c4 10             	add    $0x10,%esp
}
80100d94:	c9                   	leave  
80100d95:	c3                   	ret    

80100d96 <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
80100d96:	55                   	push   %ebp
80100d97:	89 e5                	mov    %esp,%ebp
80100d99:	83 ec 14             	sub    $0x14,%esp
80100d9c:	8b 45 08             	mov    0x8(%ebp),%eax
80100d9f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80100da3:	8b 45 ec             	mov    -0x14(%ebp),%eax
80100da6:	89 c2                	mov    %eax,%edx
80100da8:	ec                   	in     (%dx),%al
80100da9:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80100dac:	8a 45 ff             	mov    -0x1(%ebp),%al
}
80100daf:	c9                   	leave  
80100db0:	c3                   	ret    

80100db1 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
80100db1:	55                   	push   %ebp
80100db2:	89 e5                	mov    %esp,%ebp
80100db4:	83 ec 08             	sub    $0x8,%esp
80100db7:	8b 45 08             	mov    0x8(%ebp),%eax
80100dba:	8b 55 0c             	mov    0xc(%ebp),%edx
80100dbd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80100dc1:	88 55 f8             	mov    %dl,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80100dc4:	8a 45 f8             	mov    -0x8(%ebp),%al
80100dc7:	8b 55 fc             	mov    -0x4(%ebp),%edx
80100dca:	ee                   	out    %al,(%dx)
}
80100dcb:	c9                   	leave  
80100dcc:	c3                   	ret    

80100dcd <lidt>:

struct gatedesc;

static inline void
lidt(struct gatedesc *p, int size)
{
80100dcd:	55                   	push   %ebp
80100dce:	89 e5                	mov    %esp,%ebp
80100dd0:	83 ec 10             	sub    $0x10,%esp
  volatile ushort pd[5];

  pd[0] = size-1;
80100dd3:	8b 45 0c             	mov    0xc(%ebp),%eax
80100dd6:	48                   	dec    %eax
80100dd7:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
  pd[1] = (uintp)p;
80100ddb:	8b 45 08             	mov    0x8(%ebp),%eax
80100dde:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  pd[2] = (uintp)p >> 16;
80100de2:	8b 45 08             	mov    0x8(%ebp),%eax
80100de5:	c1 e8 10             	shr    $0x10,%eax
80100de8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
#if X64
  pd[3] = (uintp)p >> 32;
  pd[4] = (uintp)p >> 48;
#endif
  asm volatile("lidt (%0)" : : "r" (pd));
80100dec:	8d 45 f6             	lea    -0xa(%ebp),%eax
80100def:	0f 01 18             	lidtl  (%eax)
}
80100df2:	c9                   	leave  
80100df3:	c3                   	ret    

80100df4 <cli>:
  asm volatile("movw %0, %%gs" : : "r" (v));
}

static inline void
cli(void)
{
80100df4:	55                   	push   %ebp
80100df5:	89 e5                	mov    %esp,%ebp
  asm volatile("cli");
80100df7:	fa                   	cli    
}
80100df8:	5d                   	pop    %ebp
80100df9:	c3                   	ret    

80100dfa <printptr>:
} cons;

static char digits[] = "0123456789abcdef";

static void
printptr(uintp x) {
80100dfa:	55                   	push   %ebp
80100dfb:	89 e5                	mov    %esp,%ebp
80100dfd:	83 ec 18             	sub    $0x18,%esp
  int i;
  for (i = 0; i < (sizeof(uintp) * 2); i++, x <<= 4)
80100e00:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80100e07:	eb 22                	jmp    80100e2b <printptr+0x31>
    consputc(digits[x >> (sizeof(uintp) * 8 - 4)]);
80100e09:	8b 45 08             	mov    0x8(%ebp),%eax
80100e0c:	c1 e8 1c             	shr    $0x1c,%eax
80100e0f:	8a 80 00 94 10 80    	mov    -0x7fef6c00(%eax),%al
80100e15:	0f be c0             	movsbl %al,%eax
80100e18:	83 ec 0c             	sub    $0xc,%esp
80100e1b:	50                   	push   %eax
80100e1c:	e8 6b 04 00 00       	call   8010128c <consputc>
80100e21:	83 c4 10             	add    $0x10,%esp
static char digits[] = "0123456789abcdef";

static void
printptr(uintp x) {
  int i;
  for (i = 0; i < (sizeof(uintp) * 2); i++, x <<= 4)
80100e24:	ff 45 f4             	incl   -0xc(%ebp)
80100e27:	c1 65 08 04          	shll   $0x4,0x8(%ebp)
80100e2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100e2e:	83 f8 07             	cmp    $0x7,%eax
80100e31:	76 d6                	jbe    80100e09 <printptr+0xf>
    consputc(digits[x >> (sizeof(uintp) * 8 - 4)]);
}
80100e33:	c9                   	leave  
80100e34:	c3                   	ret    

80100e35 <printint>:

static void
printint(int xx, int base, int sign)
{
80100e35:	55                   	push   %ebp
80100e36:	89 e5                	mov    %esp,%ebp
80100e38:	53                   	push   %ebx
80100e39:	83 ec 24             	sub    $0x24,%esp
  char buf[16];
  int i;
  uint x;

  if(sign && (sign = xx < 0))
80100e3c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100e40:	74 1c                	je     80100e5e <printint+0x29>
80100e42:	8b 45 08             	mov    0x8(%ebp),%eax
80100e45:	c1 e8 1f             	shr    $0x1f,%eax
80100e48:	0f b6 c0             	movzbl %al,%eax
80100e4b:	89 45 10             	mov    %eax,0x10(%ebp)
80100e4e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100e52:	74 0a                	je     80100e5e <printint+0x29>
    x = -xx;
80100e54:	8b 45 08             	mov    0x8(%ebp),%eax
80100e57:	f7 d8                	neg    %eax
80100e59:	89 45 f0             	mov    %eax,-0x10(%ebp)
80100e5c:	eb 06                	jmp    80100e64 <printint+0x2f>
  else
    x = xx;
80100e5e:	8b 45 08             	mov    0x8(%ebp),%eax
80100e61:	89 45 f0             	mov    %eax,-0x10(%ebp)

  i = 0;
80100e64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  do{
    buf[i++] = digits[x % base];
80100e6b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
80100e6e:	8d 41 01             	lea    0x1(%ecx),%eax
80100e71:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100e74:	8b 5d 0c             	mov    0xc(%ebp),%ebx
80100e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
80100e7a:	ba 00 00 00 00       	mov    $0x0,%edx
80100e7f:	f7 f3                	div    %ebx
80100e81:	89 d0                	mov    %edx,%eax
80100e83:	8a 80 00 94 10 80    	mov    -0x7fef6c00(%eax),%al
80100e89:	88 44 0d e0          	mov    %al,-0x20(%ebp,%ecx,1)
  }while((x /= base) != 0);
80100e8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
80100e90:	8b 45 f0             	mov    -0x10(%ebp),%eax
80100e93:	ba 00 00 00 00       	mov    $0x0,%edx
80100e98:	f7 f3                	div    %ebx
80100e9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
80100e9d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80100ea1:	75 c8                	jne    80100e6b <printint+0x36>

  if(sign)
80100ea3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100ea7:	74 0e                	je     80100eb7 <printint+0x82>
    buf[i++] = '-';
80100ea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100eac:	8d 50 01             	lea    0x1(%eax),%edx
80100eaf:	89 55 f4             	mov    %edx,-0xc(%ebp)
80100eb2:	c6 44 05 e0 2d       	movb   $0x2d,-0x20(%ebp,%eax,1)

  while(--i >= 0)
80100eb7:	eb 19                	jmp    80100ed2 <printint+0x9d>
    consputc(buf[i]);
80100eb9:	8d 55 e0             	lea    -0x20(%ebp),%edx
80100ebc:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100ebf:	01 d0                	add    %edx,%eax
80100ec1:	8a 00                	mov    (%eax),%al
80100ec3:	0f be c0             	movsbl %al,%eax
80100ec6:	83 ec 0c             	sub    $0xc,%esp
80100ec9:	50                   	push   %eax
80100eca:	e8 bd 03 00 00       	call   8010128c <consputc>
80100ecf:	83 c4 10             	add    $0x10,%esp
  }while((x /= base) != 0);

  if(sign)
    buf[i++] = '-';

  while(--i >= 0)
80100ed2:	ff 4d f4             	decl   -0xc(%ebp)
80100ed5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80100ed9:	79 de                	jns    80100eb9 <printint+0x84>
    consputc(buf[i]);
}
80100edb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100ede:	c9                   	leave  
80100edf:	c3                   	ret    

80100ee0 <cprintf>:
//PAGEBREAK: 50

// Print to the console. only understands %d, %x, %p, %s.
void
cprintf(char *fmt, ...)
{
80100ee0:	55                   	push   %ebp
80100ee1:	89 e5                	mov    %esp,%ebp
80100ee3:	83 ec 28             	sub    $0x28,%esp
  va_list ap;
  int i, c, locking;
  char *s;

  va_start(ap, fmt);
80100ee6:	8d 45 0c             	lea    0xc(%ebp),%eax
80100ee9:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  locking = cons.locking;
80100eec:	a1 f4 c9 10 80       	mov    0x8010c9f4,%eax
80100ef1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if(locking)
80100ef4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80100ef8:	74 10                	je     80100f0a <cprintf+0x2a>
    acquire(&cons.lock);
80100efa:	83 ec 0c             	sub    $0xc,%esp
80100efd:	68 c0 c9 10 80       	push   $0x8010c9c0
80100f02:	e8 94 4b 00 00       	call   80105a9b <acquire>
80100f07:	83 c4 10             	add    $0x10,%esp

  if (fmt == 0)
80100f0a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80100f0e:	75 0d                	jne    80100f1d <cprintf+0x3d>
    panic("null fmt");
80100f10:	83 ec 0c             	sub    $0xc,%esp
80100f13:	68 32 85 10 80       	push   $0x80108532
80100f18:	e8 74 01 00 00       	call   80101091 <panic>

  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
80100f1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80100f24:	e9 31 01 00 00       	jmp    8010105a <cprintf+0x17a>
    if(c != '%'){
80100f29:	83 7d e8 25          	cmpl   $0x25,-0x18(%ebp)
80100f2d:	74 13                	je     80100f42 <cprintf+0x62>
      consputc(c);
80100f2f:	83 ec 0c             	sub    $0xc,%esp
80100f32:	ff 75 e8             	pushl  -0x18(%ebp)
80100f35:	e8 52 03 00 00       	call   8010128c <consputc>
80100f3a:	83 c4 10             	add    $0x10,%esp
      continue;
80100f3d:	e9 15 01 00 00       	jmp    80101057 <cprintf+0x177>
    }
    c = fmt[++i] & 0xff;
80100f42:	ff 45 f4             	incl   -0xc(%ebp)
80100f45:	8b 55 f4             	mov    -0xc(%ebp),%edx
80100f48:	8b 45 08             	mov    0x8(%ebp),%eax
80100f4b:	01 d0                	add    %edx,%eax
80100f4d:	8a 00                	mov    (%eax),%al
80100f4f:	0f be c0             	movsbl %al,%eax
80100f52:	25 ff 00 00 00       	and    $0xff,%eax
80100f57:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(c == 0)
80100f5a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80100f5e:	75 05                	jne    80100f65 <cprintf+0x85>
      break;
80100f60:	e9 14 01 00 00       	jmp    80101079 <cprintf+0x199>
    switch(c){
80100f65:	8b 45 e8             	mov    -0x18(%ebp),%eax
80100f68:	83 f8 70             	cmp    $0x70,%eax
80100f6b:	74 67                	je     80100fd4 <cprintf+0xf4>
80100f6d:	83 f8 70             	cmp    $0x70,%eax
80100f70:	7f 13                	jg     80100f85 <cprintf+0xa5>
80100f72:	83 f8 25             	cmp    $0x25,%eax
80100f75:	0f 84 b1 00 00 00    	je     8010102c <cprintf+0x14c>
80100f7b:	83 f8 64             	cmp    $0x64,%eax
80100f7e:	74 14                	je     80100f94 <cprintf+0xb4>
80100f80:	e9 b6 00 00 00       	jmp    8010103b <cprintf+0x15b>
80100f85:	83 f8 73             	cmp    $0x73,%eax
80100f88:	74 63                	je     80100fed <cprintf+0x10d>
80100f8a:	83 f8 78             	cmp    $0x78,%eax
80100f8d:	74 25                	je     80100fb4 <cprintf+0xd4>
80100f8f:	e9 a7 00 00 00       	jmp    8010103b <cprintf+0x15b>
    case 'd':
      printint(va_arg(ap, int), 10, 1);
80100f94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100f97:	8d 50 04             	lea    0x4(%eax),%edx
80100f9a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80100f9d:	8b 00                	mov    (%eax),%eax
80100f9f:	83 ec 04             	sub    $0x4,%esp
80100fa2:	6a 01                	push   $0x1
80100fa4:	6a 0a                	push   $0xa
80100fa6:	50                   	push   %eax
80100fa7:	e8 89 fe ff ff       	call   80100e35 <printint>
80100fac:	83 c4 10             	add    $0x10,%esp
      break;
80100faf:	e9 a3 00 00 00       	jmp    80101057 <cprintf+0x177>
    case 'x':
      printint(va_arg(ap, int), 16, 0);
80100fb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100fb7:	8d 50 04             	lea    0x4(%eax),%edx
80100fba:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80100fbd:	8b 00                	mov    (%eax),%eax
80100fbf:	83 ec 04             	sub    $0x4,%esp
80100fc2:	6a 00                	push   $0x0
80100fc4:	6a 10                	push   $0x10
80100fc6:	50                   	push   %eax
80100fc7:	e8 69 fe ff ff       	call   80100e35 <printint>
80100fcc:	83 c4 10             	add    $0x10,%esp
      break;
80100fcf:	e9 83 00 00 00       	jmp    80101057 <cprintf+0x177>
    case 'p':
      printptr(va_arg(ap, uintp));
80100fd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100fd7:	8d 50 04             	lea    0x4(%eax),%edx
80100fda:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80100fdd:	8b 00                	mov    (%eax),%eax
80100fdf:	83 ec 0c             	sub    $0xc,%esp
80100fe2:	50                   	push   %eax
80100fe3:	e8 12 fe ff ff       	call   80100dfa <printptr>
80100fe8:	83 c4 10             	add    $0x10,%esp
      break;
80100feb:	eb 6a                	jmp    80101057 <cprintf+0x177>
    case 's':
      if((s = va_arg(ap, char*)) == 0)
80100fed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100ff0:	8d 50 04             	lea    0x4(%eax),%edx
80100ff3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80100ff6:	8b 00                	mov    (%eax),%eax
80100ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
80100ffb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80100fff:	75 07                	jne    80101008 <cprintf+0x128>
        s = "(null)";
80101001:	c7 45 f0 3b 85 10 80 	movl   $0x8010853b,-0x10(%ebp)
      for(; *s; s++)
80101008:	eb 17                	jmp    80101021 <cprintf+0x141>
        consputc(*s);
8010100a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010100d:	8a 00                	mov    (%eax),%al
8010100f:	0f be c0             	movsbl %al,%eax
80101012:	83 ec 0c             	sub    $0xc,%esp
80101015:	50                   	push   %eax
80101016:	e8 71 02 00 00       	call   8010128c <consputc>
8010101b:	83 c4 10             	add    $0x10,%esp
      printptr(va_arg(ap, uintp));
      break;
    case 's':
      if((s = va_arg(ap, char*)) == 0)
        s = "(null)";
      for(; *s; s++)
8010101e:	ff 45 f0             	incl   -0x10(%ebp)
80101021:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101024:	8a 00                	mov    (%eax),%al
80101026:	84 c0                	test   %al,%al
80101028:	75 e0                	jne    8010100a <cprintf+0x12a>
        consputc(*s);
      break;
8010102a:	eb 2b                	jmp    80101057 <cprintf+0x177>
    case '%':
      consputc('%');
8010102c:	83 ec 0c             	sub    $0xc,%esp
8010102f:	6a 25                	push   $0x25
80101031:	e8 56 02 00 00       	call   8010128c <consputc>
80101036:	83 c4 10             	add    $0x10,%esp
      break;
80101039:	eb 1c                	jmp    80101057 <cprintf+0x177>
    default:
      // Print unknown % sequence to draw attention.
      consputc('%');
8010103b:	83 ec 0c             	sub    $0xc,%esp
8010103e:	6a 25                	push   $0x25
80101040:	e8 47 02 00 00       	call   8010128c <consputc>
80101045:	83 c4 10             	add    $0x10,%esp
      consputc(c);
80101048:	83 ec 0c             	sub    $0xc,%esp
8010104b:	ff 75 e8             	pushl  -0x18(%ebp)
8010104e:	e8 39 02 00 00       	call   8010128c <consputc>
80101053:	83 c4 10             	add    $0x10,%esp
      break;
80101056:	90                   	nop
    acquire(&cons.lock);

  if (fmt == 0)
    panic("null fmt");

  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
80101057:	ff 45 f4             	incl   -0xc(%ebp)
8010105a:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010105d:	8b 45 08             	mov    0x8(%ebp),%eax
80101060:	01 d0                	add    %edx,%eax
80101062:	8a 00                	mov    (%eax),%al
80101064:	0f be c0             	movsbl %al,%eax
80101067:	25 ff 00 00 00       	and    $0xff,%eax
8010106c:	89 45 e8             	mov    %eax,-0x18(%ebp)
8010106f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80101073:	0f 85 b0 fe ff ff    	jne    80100f29 <cprintf+0x49>
      consputc(c);
      break;
    }
  }

  if(locking)
80101079:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
8010107d:	74 10                	je     8010108f <cprintf+0x1af>
    release(&cons.lock);
8010107f:	83 ec 0c             	sub    $0xc,%esp
80101082:	68 c0 c9 10 80       	push   $0x8010c9c0
80101087:	e8 c9 4a 00 00       	call   80105b55 <release>
8010108c:	83 c4 10             	add    $0x10,%esp
}
8010108f:	c9                   	leave  
80101090:	c3                   	ret    

80101091 <panic>:

void
panic(char *s)
{
80101091:	55                   	push   %ebp
80101092:	89 e5                	mov    %esp,%ebp
80101094:	83 ec 38             	sub    $0x38,%esp
  int i;
  uintp pcs[10];
  
  cli();
80101097:	e8 58 fd ff ff       	call   80100df4 <cli>
  cons.locking = 0;
8010109c:	c7 05 f4 c9 10 80 00 	movl   $0x0,0x8010c9f4
801010a3:	00 00 00 
  cprintf("cpu%d: panic: ", cpu->id);
801010a6:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
801010ac:	8a 00                	mov    (%eax),%al
801010ae:	0f b6 c0             	movzbl %al,%eax
801010b1:	83 ec 08             	sub    $0x8,%esp
801010b4:	50                   	push   %eax
801010b5:	68 42 85 10 80       	push   $0x80108542
801010ba:	e8 21 fe ff ff       	call   80100ee0 <cprintf>
801010bf:	83 c4 10             	add    $0x10,%esp
  cprintf(s);
801010c2:	8b 45 08             	mov    0x8(%ebp),%eax
801010c5:	83 ec 0c             	sub    $0xc,%esp
801010c8:	50                   	push   %eax
801010c9:	e8 12 fe ff ff       	call   80100ee0 <cprintf>
801010ce:	83 c4 10             	add    $0x10,%esp
  cprintf("\n");
801010d1:	83 ec 0c             	sub    $0xc,%esp
801010d4:	68 51 85 10 80       	push   $0x80108551
801010d9:	e8 02 fe ff ff       	call   80100ee0 <cprintf>
801010de:	83 c4 10             	add    $0x10,%esp
  getcallerpcs(&s, pcs);
801010e1:	83 ec 08             	sub    $0x8,%esp
801010e4:	8d 45 cc             	lea    -0x34(%ebp),%eax
801010e7:	50                   	push   %eax
801010e8:	8d 45 08             	lea    0x8(%ebp),%eax
801010eb:	50                   	push   %eax
801010ec:	e8 b5 4a 00 00       	call   80105ba6 <getcallerpcs>
801010f1:	83 c4 10             	add    $0x10,%esp
  for(i=0; i<10; i++)
801010f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801010fb:	eb 1b                	jmp    80101118 <panic+0x87>
    cprintf(" %p", pcs[i]);
801010fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101100:	8b 44 85 cc          	mov    -0x34(%ebp,%eax,4),%eax
80101104:	83 ec 08             	sub    $0x8,%esp
80101107:	50                   	push   %eax
80101108:	68 53 85 10 80       	push   $0x80108553
8010110d:	e8 ce fd ff ff       	call   80100ee0 <cprintf>
80101112:	83 c4 10             	add    $0x10,%esp
  cons.locking = 0;
  cprintf("cpu%d: panic: ", cpu->id);
  cprintf(s);
  cprintf("\n");
  getcallerpcs(&s, pcs);
  for(i=0; i<10; i++)
80101115:	ff 45 f4             	incl   -0xc(%ebp)
80101118:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
8010111c:	7e df                	jle    801010fd <panic+0x6c>
    cprintf(" %p", pcs[i]);
  panicked = 1; // freeze other CPU
8010111e:	c7 05 a0 c9 10 80 01 	movl   $0x1,0x8010c9a0
80101125:	00 00 00 
  for(;;)
    ;
80101128:	eb fe                	jmp    80101128 <panic+0x97>

8010112a <cgaputc>:
#define CRTPORT 0x3d4
static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory

static void
cgaputc(int c)
{
8010112a:	55                   	push   %ebp
8010112b:	89 e5                	mov    %esp,%ebp
8010112d:	83 ec 18             	sub    $0x18,%esp
  int pos;
  
  // Cursor position: col + 80*row.
  outb(CRTPORT, 14);
80101130:	6a 0e                	push   $0xe
80101132:	68 d4 03 00 00       	push   $0x3d4
80101137:	e8 75 fc ff ff       	call   80100db1 <outb>
8010113c:	83 c4 08             	add    $0x8,%esp
  pos = inb(CRTPORT+1) << 8;
8010113f:	68 d5 03 00 00       	push   $0x3d5
80101144:	e8 4d fc ff ff       	call   80100d96 <inb>
80101149:	83 c4 04             	add    $0x4,%esp
8010114c:	0f b6 c0             	movzbl %al,%eax
8010114f:	c1 e0 08             	shl    $0x8,%eax
80101152:	89 45 f4             	mov    %eax,-0xc(%ebp)
  outb(CRTPORT, 15);
80101155:	6a 0f                	push   $0xf
80101157:	68 d4 03 00 00       	push   $0x3d4
8010115c:	e8 50 fc ff ff       	call   80100db1 <outb>
80101161:	83 c4 08             	add    $0x8,%esp
  pos |= inb(CRTPORT+1);
80101164:	68 d5 03 00 00       	push   $0x3d5
80101169:	e8 28 fc ff ff       	call   80100d96 <inb>
8010116e:	83 c4 04             	add    $0x4,%esp
80101171:	0f b6 c0             	movzbl %al,%eax
80101174:	09 45 f4             	or     %eax,-0xc(%ebp)

  if(c == '\n')
80101177:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
8010117b:	75 1b                	jne    80101198 <cgaputc+0x6e>
    pos += 80 - pos%80;
8010117d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101180:	b9 50 00 00 00       	mov    $0x50,%ecx
80101185:	99                   	cltd   
80101186:	f7 f9                	idiv   %ecx
80101188:	89 d0                	mov    %edx,%eax
8010118a:	ba 50 00 00 00       	mov    $0x50,%edx
8010118f:	29 c2                	sub    %eax,%edx
80101191:	89 d0                	mov    %edx,%eax
80101193:	01 45 f4             	add    %eax,-0xc(%ebp)
80101196:	eb 34                	jmp    801011cc <cgaputc+0xa2>
  else if(c == BACKSPACE){
80101198:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
8010119f:	75 0b                	jne    801011ac <cgaputc+0x82>
    if(pos > 0) --pos;
801011a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801011a5:	7e 25                	jle    801011cc <cgaputc+0xa2>
801011a7:	ff 4d f4             	decl   -0xc(%ebp)
801011aa:	eb 20                	jmp    801011cc <cgaputc+0xa2>
  } else
    crt[pos++] = (c&0xff) | 0x0700;  // black on white
801011ac:	8b 0d 14 94 10 80    	mov    0x80109414,%ecx
801011b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801011b5:	8d 50 01             	lea    0x1(%eax),%edx
801011b8:	89 55 f4             	mov    %edx,-0xc(%ebp)
801011bb:	01 c0                	add    %eax,%eax
801011bd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
801011c0:	8b 45 08             	mov    0x8(%ebp),%eax
801011c3:	0f b6 c0             	movzbl %al,%eax
801011c6:	80 cc 07             	or     $0x7,%ah
801011c9:	66 89 02             	mov    %ax,(%edx)
  
  if((pos/80) >= 24){  // Scroll up.
801011cc:	81 7d f4 7f 07 00 00 	cmpl   $0x77f,-0xc(%ebp)
801011d3:	7e 4e                	jle    80101223 <cgaputc+0xf9>
    memmove(crt, crt+80, sizeof(crt[0])*23*80);
801011d5:	a1 14 94 10 80       	mov    0x80109414,%eax
801011da:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
801011e0:	a1 14 94 10 80       	mov    0x80109414,%eax
801011e5:	83 ec 04             	sub    $0x4,%esp
801011e8:	68 60 0e 00 00       	push   $0xe60
801011ed:	52                   	push   %edx
801011ee:	50                   	push   %eax
801011ef:	e8 25 4c 00 00       	call   80105e19 <memmove>
801011f4:	83 c4 10             	add    $0x10,%esp
    pos -= 80;
801011f7:	83 6d f4 50          	subl   $0x50,-0xc(%ebp)
    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
801011fb:	b8 80 07 00 00       	mov    $0x780,%eax
80101200:	2b 45 f4             	sub    -0xc(%ebp),%eax
80101203:	01 c0                	add    %eax,%eax
80101205:	89 c2                	mov    %eax,%edx
80101207:	8b 0d 14 94 10 80    	mov    0x80109414,%ecx
8010120d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101210:	01 c0                	add    %eax,%eax
80101212:	01 c8                	add    %ecx,%eax
80101214:	83 ec 04             	sub    $0x4,%esp
80101217:	52                   	push   %edx
80101218:	6a 00                	push   $0x0
8010121a:	50                   	push   %eax
8010121b:	e8 40 4b 00 00       	call   80105d60 <memset>
80101220:	83 c4 10             	add    $0x10,%esp
  }
  
  outb(CRTPORT, 14);
80101223:	83 ec 08             	sub    $0x8,%esp
80101226:	6a 0e                	push   $0xe
80101228:	68 d4 03 00 00       	push   $0x3d4
8010122d:	e8 7f fb ff ff       	call   80100db1 <outb>
80101232:	83 c4 10             	add    $0x10,%esp
  outb(CRTPORT+1, pos>>8);
80101235:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101238:	c1 f8 08             	sar    $0x8,%eax
8010123b:	0f b6 c0             	movzbl %al,%eax
8010123e:	83 ec 08             	sub    $0x8,%esp
80101241:	50                   	push   %eax
80101242:	68 d5 03 00 00       	push   $0x3d5
80101247:	e8 65 fb ff ff       	call   80100db1 <outb>
8010124c:	83 c4 10             	add    $0x10,%esp
  outb(CRTPORT, 15);
8010124f:	83 ec 08             	sub    $0x8,%esp
80101252:	6a 0f                	push   $0xf
80101254:	68 d4 03 00 00       	push   $0x3d4
80101259:	e8 53 fb ff ff       	call   80100db1 <outb>
8010125e:	83 c4 10             	add    $0x10,%esp
  outb(CRTPORT+1, pos);
80101261:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101264:	0f b6 c0             	movzbl %al,%eax
80101267:	83 ec 08             	sub    $0x8,%esp
8010126a:	50                   	push   %eax
8010126b:	68 d5 03 00 00       	push   $0x3d5
80101270:	e8 3c fb ff ff       	call   80100db1 <outb>
80101275:	83 c4 10             	add    $0x10,%esp
  crt[pos] = ' ' | 0x0700;
80101278:	8b 15 14 94 10 80    	mov    0x80109414,%edx
8010127e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101281:	01 c0                	add    %eax,%eax
80101283:	01 d0                	add    %edx,%eax
80101285:	66 c7 00 20 07       	movw   $0x720,(%eax)
}
8010128a:	c9                   	leave  
8010128b:	c3                   	ret    

8010128c <consputc>:

void
consputc(int c)
{
8010128c:	55                   	push   %ebp
8010128d:	89 e5                	mov    %esp,%ebp
8010128f:	83 ec 08             	sub    $0x8,%esp
  if(panicked){
80101292:	a1 a0 c9 10 80       	mov    0x8010c9a0,%eax
80101297:	85 c0                	test   %eax,%eax
80101299:	74 07                	je     801012a2 <consputc+0x16>
    cli();
8010129b:	e8 54 fb ff ff       	call   80100df4 <cli>
    for(;;)
      ;
801012a0:	eb fe                	jmp    801012a0 <consputc+0x14>
  }

  if(c == BACKSPACE){
801012a2:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
801012a9:	75 29                	jne    801012d4 <consputc+0x48>
    uartputc('\b'); uartputc(' '); uartputc('\b');
801012ab:	83 ec 0c             	sub    $0xc,%esp
801012ae:	6a 08                	push   $0x8
801012b0:	e8 8d 63 00 00       	call   80107642 <uartputc>
801012b5:	83 c4 10             	add    $0x10,%esp
801012b8:	83 ec 0c             	sub    $0xc,%esp
801012bb:	6a 20                	push   $0x20
801012bd:	e8 80 63 00 00       	call   80107642 <uartputc>
801012c2:	83 c4 10             	add    $0x10,%esp
801012c5:	83 ec 0c             	sub    $0xc,%esp
801012c8:	6a 08                	push   $0x8
801012ca:	e8 73 63 00 00       	call   80107642 <uartputc>
801012cf:	83 c4 10             	add    $0x10,%esp
801012d2:	eb 0e                	jmp    801012e2 <consputc+0x56>
  } else
    uartputc(c);
801012d4:	83 ec 0c             	sub    $0xc,%esp
801012d7:	ff 75 08             	pushl  0x8(%ebp)
801012da:	e8 63 63 00 00       	call   80107642 <uartputc>
801012df:	83 c4 10             	add    $0x10,%esp
  cgaputc(c);
801012e2:	83 ec 0c             	sub    $0xc,%esp
801012e5:	ff 75 08             	pushl  0x8(%ebp)
801012e8:	e8 3d fe ff ff       	call   8010112a <cgaputc>
801012ed:	83 c4 10             	add    $0x10,%esp
}
801012f0:	c9                   	leave  
801012f1:	c3                   	ret    

801012f2 <consoleintr>:

#define C(x)  ((x)-'@')  // Control-x

void
consoleintr(int (*getc)(void))
{
801012f2:	55                   	push   %ebp
801012f3:	89 e5                	mov    %esp,%ebp
801012f5:	83 ec 18             	sub    $0x18,%esp
  int c;

  acquire(&input.lock);
801012f8:	83 ec 0c             	sub    $0xc,%esp
801012fb:	68 e0 c8 10 80       	push   $0x8010c8e0
80101300:	e8 96 47 00 00       	call   80105a9b <acquire>
80101305:	83 c4 10             	add    $0x10,%esp
  while((c = getc()) >= 0){
80101308:	e9 4c 01 00 00       	jmp    80101459 <consoleintr+0x167>
    switch(c){
8010130d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101310:	83 f8 15             	cmp    $0x15,%eax
80101313:	74 5c                	je     80101371 <consoleintr+0x7f>
80101315:	83 f8 15             	cmp    $0x15,%eax
80101318:	7f 0f                	jg     80101329 <consoleintr+0x37>
8010131a:	83 f8 08             	cmp    $0x8,%eax
8010131d:	74 79                	je     80101398 <consoleintr+0xa6>
8010131f:	83 f8 10             	cmp    $0x10,%eax
80101322:	74 28                	je     8010134c <consoleintr+0x5a>
80101324:	e9 9e 00 00 00       	jmp    801013c7 <consoleintr+0xd5>
80101329:	83 f8 1a             	cmp    $0x1a,%eax
8010132c:	74 0a                	je     80101338 <consoleintr+0x46>
8010132e:	83 f8 7f             	cmp    $0x7f,%eax
80101331:	74 65                	je     80101398 <consoleintr+0xa6>
80101333:	e9 8f 00 00 00       	jmp    801013c7 <consoleintr+0xd5>
    case C('Z'): // reboot
      lidt(0,0);
80101338:	83 ec 08             	sub    $0x8,%esp
8010133b:	6a 00                	push   $0x0
8010133d:	6a 00                	push   $0x0
8010133f:	e8 89 fa ff ff       	call   80100dcd <lidt>
80101344:	83 c4 10             	add    $0x10,%esp
      break;
80101347:	e9 0d 01 00 00       	jmp    80101459 <consoleintr+0x167>
    case C('P'):  // Process listing.
      procdump();
8010134c:	e8 01 46 00 00       	call   80105952 <procdump>
      break;
80101351:	e9 03 01 00 00       	jmp    80101459 <consoleintr+0x167>
    case C('U'):  // Kill line.
      while(input.e != input.w &&
            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
        input.e--;
80101356:	a1 9c c9 10 80       	mov    0x8010c99c,%eax
8010135b:	48                   	dec    %eax
8010135c:	a3 9c c9 10 80       	mov    %eax,0x8010c99c
        consputc(BACKSPACE);
80101361:	83 ec 0c             	sub    $0xc,%esp
80101364:	68 00 01 00 00       	push   $0x100
80101369:	e8 1e ff ff ff       	call   8010128c <consputc>
8010136e:	83 c4 10             	add    $0x10,%esp
      break;
    case C('P'):  // Process listing.
      procdump();
      break;
    case C('U'):  // Kill line.
      while(input.e != input.w &&
80101371:	8b 15 9c c9 10 80    	mov    0x8010c99c,%edx
80101377:	a1 98 c9 10 80       	mov    0x8010c998,%eax
8010137c:	39 c2                	cmp    %eax,%edx
8010137e:	74 13                	je     80101393 <consoleintr+0xa1>
            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
80101380:	a1 9c c9 10 80       	mov    0x8010c99c,%eax
80101385:	48                   	dec    %eax
80101386:	83 e0 7f             	and    $0x7f,%eax
80101389:	8a 80 14 c9 10 80    	mov    -0x7fef36ec(%eax),%al
      break;
    case C('P'):  // Process listing.
      procdump();
      break;
    case C('U'):  // Kill line.
      while(input.e != input.w &&
8010138f:	3c 0a                	cmp    $0xa,%al
80101391:	75 c3                	jne    80101356 <consoleintr+0x64>
            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
        input.e--;
        consputc(BACKSPACE);
      }
      break;
80101393:	e9 c1 00 00 00       	jmp    80101459 <consoleintr+0x167>
    case C('H'): case '\x7f':  // Backspace
      if(input.e != input.w){
80101398:	8b 15 9c c9 10 80    	mov    0x8010c99c,%edx
8010139e:	a1 98 c9 10 80       	mov    0x8010c998,%eax
801013a3:	39 c2                	cmp    %eax,%edx
801013a5:	74 1b                	je     801013c2 <consoleintr+0xd0>
        input.e--;
801013a7:	a1 9c c9 10 80       	mov    0x8010c99c,%eax
801013ac:	48                   	dec    %eax
801013ad:	a3 9c c9 10 80       	mov    %eax,0x8010c99c
        consputc(BACKSPACE);
801013b2:	83 ec 0c             	sub    $0xc,%esp
801013b5:	68 00 01 00 00       	push   $0x100
801013ba:	e8 cd fe ff ff       	call   8010128c <consputc>
801013bf:	83 c4 10             	add    $0x10,%esp
      }
      break;
801013c2:	e9 92 00 00 00       	jmp    80101459 <consoleintr+0x167>
    default:
      if(c != 0 && input.e-input.r < INPUT_BUF){
801013c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801013cb:	0f 84 87 00 00 00    	je     80101458 <consoleintr+0x166>
801013d1:	8b 15 9c c9 10 80    	mov    0x8010c99c,%edx
801013d7:	a1 94 c9 10 80       	mov    0x8010c994,%eax
801013dc:	29 c2                	sub    %eax,%edx
801013de:	89 d0                	mov    %edx,%eax
801013e0:	83 f8 7f             	cmp    $0x7f,%eax
801013e3:	77 73                	ja     80101458 <consoleintr+0x166>
        c = (c == '\r') ? '\n' : c;
801013e5:	83 7d f4 0d          	cmpl   $0xd,-0xc(%ebp)
801013e9:	74 05                	je     801013f0 <consoleintr+0xfe>
801013eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801013ee:	eb 05                	jmp    801013f5 <consoleintr+0x103>
801013f0:	b8 0a 00 00 00       	mov    $0xa,%eax
801013f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        input.buf[input.e++ % INPUT_BUF] = c;
801013f8:	a1 9c c9 10 80       	mov    0x8010c99c,%eax
801013fd:	8d 50 01             	lea    0x1(%eax),%edx
80101400:	89 15 9c c9 10 80    	mov    %edx,0x8010c99c
80101406:	83 e0 7f             	and    $0x7f,%eax
80101409:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010140c:	88 90 14 c9 10 80    	mov    %dl,-0x7fef36ec(%eax)
        consputc(c);
80101412:	83 ec 0c             	sub    $0xc,%esp
80101415:	ff 75 f4             	pushl  -0xc(%ebp)
80101418:	e8 6f fe ff ff       	call   8010128c <consputc>
8010141d:	83 c4 10             	add    $0x10,%esp
        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
80101420:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
80101424:	74 18                	je     8010143e <consoleintr+0x14c>
80101426:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
8010142a:	74 12                	je     8010143e <consoleintr+0x14c>
8010142c:	a1 9c c9 10 80       	mov    0x8010c99c,%eax
80101431:	8b 15 94 c9 10 80    	mov    0x8010c994,%edx
80101437:	83 ea 80             	sub    $0xffffff80,%edx
8010143a:	39 d0                	cmp    %edx,%eax
8010143c:	75 1a                	jne    80101458 <consoleintr+0x166>
          input.w = input.e;
8010143e:	a1 9c c9 10 80       	mov    0x8010c99c,%eax
80101443:	a3 98 c9 10 80       	mov    %eax,0x8010c998
          wakeup(&input.r);
80101448:	83 ec 0c             	sub    $0xc,%esp
8010144b:	68 94 c9 10 80       	push   $0x8010c994
80101450:	e8 43 44 00 00       	call   80105898 <wakeup>
80101455:	83 c4 10             	add    $0x10,%esp
        }
      }
      break;
80101458:	90                   	nop
consoleintr(int (*getc)(void))
{
  int c;

  acquire(&input.lock);
  while((c = getc()) >= 0){
80101459:	8b 45 08             	mov    0x8(%ebp),%eax
8010145c:	ff d0                	call   *%eax
8010145e:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101461:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101465:	0f 89 a2 fe ff ff    	jns    8010130d <consoleintr+0x1b>
        }
      }
      break;
    }
  }
  release(&input.lock);
8010146b:	83 ec 0c             	sub    $0xc,%esp
8010146e:	68 e0 c8 10 80       	push   $0x8010c8e0
80101473:	e8 dd 46 00 00       	call   80105b55 <release>
80101478:	83 c4 10             	add    $0x10,%esp
}
8010147b:	c9                   	leave  
8010147c:	c3                   	ret    

8010147d <consoleread>:

int
consoleread(struct inode *ip, char *dst, int n)
{
8010147d:	55                   	push   %ebp
8010147e:	89 e5                	mov    %esp,%ebp
80101480:	83 ec 18             	sub    $0x18,%esp
  uint target;
  int c;

  iunlock(ip);
80101483:	83 ec 0c             	sub    $0xc,%esp
80101486:	ff 75 08             	pushl  0x8(%ebp)
80101489:	e8 95 10 00 00       	call   80102523 <iunlock>
8010148e:	83 c4 10             	add    $0x10,%esp
  target = n;
80101491:	8b 45 10             	mov    0x10(%ebp),%eax
80101494:	89 45 f4             	mov    %eax,-0xc(%ebp)
  acquire(&input.lock);
80101497:	83 ec 0c             	sub    $0xc,%esp
8010149a:	68 e0 c8 10 80       	push   $0x8010c8e0
8010149f:	e8 f7 45 00 00       	call   80105a9b <acquire>
801014a4:	83 c4 10             	add    $0x10,%esp
  while(n > 0){
801014a7:	e9 ae 00 00 00       	jmp    8010155a <consoleread+0xdd>
    while(input.r == input.w){
801014ac:	eb 4a                	jmp    801014f8 <consoleread+0x7b>
      if(proc->killed){
801014ae:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801014b4:	8b 40 24             	mov    0x24(%eax),%eax
801014b7:	85 c0                	test   %eax,%eax
801014b9:	74 28                	je     801014e3 <consoleread+0x66>
        release(&input.lock);
801014bb:	83 ec 0c             	sub    $0xc,%esp
801014be:	68 e0 c8 10 80       	push   $0x8010c8e0
801014c3:	e8 8d 46 00 00       	call   80105b55 <release>
801014c8:	83 c4 10             	add    $0x10,%esp
        ilock(ip);
801014cb:	83 ec 0c             	sub    $0xc,%esp
801014ce:	ff 75 08             	pushl  0x8(%ebp)
801014d1:	e8 f9 0e 00 00       	call   801023cf <ilock>
801014d6:	83 c4 10             	add    $0x10,%esp
        return -1;
801014d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801014de:	e9 a9 00 00 00       	jmp    8010158c <consoleread+0x10f>
      }
      sleep(&input.r, &input.lock);
801014e3:	83 ec 08             	sub    $0x8,%esp
801014e6:	68 e0 c8 10 80       	push   $0x8010c8e0
801014eb:	68 94 c9 10 80       	push   $0x8010c994
801014f0:	e8 ba 42 00 00       	call   801057af <sleep>
801014f5:	83 c4 10             	add    $0x10,%esp

  iunlock(ip);
  target = n;
  acquire(&input.lock);
  while(n > 0){
    while(input.r == input.w){
801014f8:	8b 15 94 c9 10 80    	mov    0x8010c994,%edx
801014fe:	a1 98 c9 10 80       	mov    0x8010c998,%eax
80101503:	39 c2                	cmp    %eax,%edx
80101505:	74 a7                	je     801014ae <consoleread+0x31>
        ilock(ip);
        return -1;
      }
      sleep(&input.r, &input.lock);
    }
    c = input.buf[input.r++ % INPUT_BUF];
80101507:	a1 94 c9 10 80       	mov    0x8010c994,%eax
8010150c:	8d 50 01             	lea    0x1(%eax),%edx
8010150f:	89 15 94 c9 10 80    	mov    %edx,0x8010c994
80101515:	83 e0 7f             	and    $0x7f,%eax
80101518:	8a 80 14 c9 10 80    	mov    -0x7fef36ec(%eax),%al
8010151e:	0f be c0             	movsbl %al,%eax
80101521:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(c == C('D')){  // EOF
80101524:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
80101528:	75 17                	jne    80101541 <consoleread+0xc4>
      if(n < target){
8010152a:	8b 45 10             	mov    0x10(%ebp),%eax
8010152d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80101530:	73 0d                	jae    8010153f <consoleread+0xc2>
        // Save ^D for next time, to make sure
        // caller gets a 0-byte result.
        input.r--;
80101532:	a1 94 c9 10 80       	mov    0x8010c994,%eax
80101537:	48                   	dec    %eax
80101538:	a3 94 c9 10 80       	mov    %eax,0x8010c994
      }
      break;
8010153d:	eb 25                	jmp    80101564 <consoleread+0xe7>
8010153f:	eb 23                	jmp    80101564 <consoleread+0xe7>
    }
    *dst++ = c;
80101541:	8b 45 0c             	mov    0xc(%ebp),%eax
80101544:	8d 50 01             	lea    0x1(%eax),%edx
80101547:	89 55 0c             	mov    %edx,0xc(%ebp)
8010154a:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010154d:	88 10                	mov    %dl,(%eax)
    --n;
8010154f:	ff 4d 10             	decl   0x10(%ebp)
    if(c == '\n')
80101552:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
80101556:	75 02                	jne    8010155a <consoleread+0xdd>
      break;
80101558:	eb 0a                	jmp    80101564 <consoleread+0xe7>
  int c;

  iunlock(ip);
  target = n;
  acquire(&input.lock);
  while(n > 0){
8010155a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
8010155e:	0f 8f 48 ff ff ff    	jg     801014ac <consoleread+0x2f>
    *dst++ = c;
    --n;
    if(c == '\n')
      break;
  }
  release(&input.lock);
80101564:	83 ec 0c             	sub    $0xc,%esp
80101567:	68 e0 c8 10 80       	push   $0x8010c8e0
8010156c:	e8 e4 45 00 00       	call   80105b55 <release>
80101571:	83 c4 10             	add    $0x10,%esp
  ilock(ip);
80101574:	83 ec 0c             	sub    $0xc,%esp
80101577:	ff 75 08             	pushl  0x8(%ebp)
8010157a:	e8 50 0e 00 00       	call   801023cf <ilock>
8010157f:	83 c4 10             	add    $0x10,%esp

  return target - n;
80101582:	8b 45 10             	mov    0x10(%ebp),%eax
80101585:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101588:	29 c2                	sub    %eax,%edx
8010158a:	89 d0                	mov    %edx,%eax
}
8010158c:	c9                   	leave  
8010158d:	c3                   	ret    

8010158e <consolewrite>:

int
consolewrite(struct inode *ip, char *buf, int n)
{
8010158e:	55                   	push   %ebp
8010158f:	89 e5                	mov    %esp,%ebp
80101591:	83 ec 18             	sub    $0x18,%esp
  int i;

  iunlock(ip);
80101594:	83 ec 0c             	sub    $0xc,%esp
80101597:	ff 75 08             	pushl  0x8(%ebp)
8010159a:	e8 84 0f 00 00       	call   80102523 <iunlock>
8010159f:	83 c4 10             	add    $0x10,%esp
  acquire(&cons.lock);
801015a2:	83 ec 0c             	sub    $0xc,%esp
801015a5:	68 c0 c9 10 80       	push   $0x8010c9c0
801015aa:	e8 ec 44 00 00       	call   80105a9b <acquire>
801015af:	83 c4 10             	add    $0x10,%esp
  for(i = 0; i < n; i++)
801015b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801015b9:	eb 1f                	jmp    801015da <consolewrite+0x4c>
    consputc(buf[i] & 0xff);
801015bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
801015be:	8b 45 0c             	mov    0xc(%ebp),%eax
801015c1:	01 d0                	add    %edx,%eax
801015c3:	8a 00                	mov    (%eax),%al
801015c5:	0f be c0             	movsbl %al,%eax
801015c8:	0f b6 c0             	movzbl %al,%eax
801015cb:	83 ec 0c             	sub    $0xc,%esp
801015ce:	50                   	push   %eax
801015cf:	e8 b8 fc ff ff       	call   8010128c <consputc>
801015d4:	83 c4 10             	add    $0x10,%esp
{
  int i;

  iunlock(ip);
  acquire(&cons.lock);
  for(i = 0; i < n; i++)
801015d7:	ff 45 f4             	incl   -0xc(%ebp)
801015da:	8b 45 f4             	mov    -0xc(%ebp),%eax
801015dd:	3b 45 10             	cmp    0x10(%ebp),%eax
801015e0:	7c d9                	jl     801015bb <consolewrite+0x2d>
    consputc(buf[i] & 0xff);
  release(&cons.lock);
801015e2:	83 ec 0c             	sub    $0xc,%esp
801015e5:	68 c0 c9 10 80       	push   $0x8010c9c0
801015ea:	e8 66 45 00 00       	call   80105b55 <release>
801015ef:	83 c4 10             	add    $0x10,%esp
  ilock(ip);
801015f2:	83 ec 0c             	sub    $0xc,%esp
801015f5:	ff 75 08             	pushl  0x8(%ebp)
801015f8:	e8 d2 0d 00 00       	call   801023cf <ilock>
801015fd:	83 c4 10             	add    $0x10,%esp

  return n;
80101600:	8b 45 10             	mov    0x10(%ebp),%eax
}
80101603:	c9                   	leave  
80101604:	c3                   	ret    

80101605 <consoleinit>:

void
consoleinit(void)
{
80101605:	55                   	push   %ebp
80101606:	89 e5                	mov    %esp,%ebp
80101608:	83 ec 08             	sub    $0x8,%esp
  initlock(&cons.lock, "console");
8010160b:	83 ec 08             	sub    $0x8,%esp
8010160e:	68 57 85 10 80       	push   $0x80108557
80101613:	68 c0 c9 10 80       	push   $0x8010c9c0
80101618:	e8 5d 44 00 00       	call   80105a7a <initlock>
8010161d:	83 c4 10             	add    $0x10,%esp
  initlock(&input.lock, "input");
80101620:	83 ec 08             	sub    $0x8,%esp
80101623:	68 5f 85 10 80       	push   $0x8010855f
80101628:	68 e0 c8 10 80       	push   $0x8010c8e0
8010162d:	e8 48 44 00 00       	call   80105a7a <initlock>
80101632:	83 c4 10             	add    $0x10,%esp

  devsw[CONSOLE].write = consolewrite;
80101635:	c7 05 0c ca 10 80 8e 	movl   $0x8010158e,0x8010ca0c
8010163c:	15 10 80 
  devsw[CONSOLE].read = consoleread;
8010163f:	c7 05 08 ca 10 80 7d 	movl   $0x8010147d,0x8010ca08
80101646:	14 10 80 
  cons.locking = 1;
80101649:	c7 05 f4 c9 10 80 01 	movl   $0x1,0x8010c9f4
80101650:	00 00 00 

  picenable(IRQ_KBD);
80101653:	83 ec 0c             	sub    $0xc,%esp
80101656:	6a 01                	push   $0x1
80101658:	e8 ac 33 00 00       	call   80104a09 <picenable>
8010165d:	83 c4 10             	add    $0x10,%esp
  ioapicenable(IRQ_KBD, 0);
80101660:	83 ec 08             	sub    $0x8,%esp
80101663:	6a 00                	push   $0x0
80101665:	6a 01                	push   $0x1
80101667:	e8 70 1e 00 00       	call   801034dc <ioapicenable>
8010166c:	83 c4 10             	add    $0x10,%esp
}
8010166f:	c9                   	leave  
80101670:	c3                   	ret    

80101671 <exec>:
#include "x86.h"
#include "elf.h"

int
exec(char *path, char **argv)
{
80101671:	55                   	push   %ebp
80101672:	89 e5                	mov    %esp,%ebp
80101674:	81 ec 18 01 00 00    	sub    $0x118,%esp
  struct elfhdr elf;
  struct inode *ip;
  struct proghdr ph;
  pde_t *pgdir, *oldpgdir;

  if((ip = namei(path)) == 0)
8010167a:	83 ec 0c             	sub    $0xc,%esp
8010167d:	ff 75 08             	pushl  0x8(%ebp)
80101680:	e8 f6 18 00 00       	call   80102f7b <namei>
80101685:	83 c4 10             	add    $0x10,%esp
80101688:	89 45 d8             	mov    %eax,-0x28(%ebp)
8010168b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
8010168f:	75 0a                	jne    8010169b <exec+0x2a>
    return -1;
80101691:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101696:	e9 a1 03 00 00       	jmp    80101a3c <exec+0x3cb>
  ilock(ip);
8010169b:	83 ec 0c             	sub    $0xc,%esp
8010169e:	ff 75 d8             	pushl  -0x28(%ebp)
801016a1:	e8 29 0d 00 00       	call   801023cf <ilock>
801016a6:	83 c4 10             	add    $0x10,%esp
  pgdir = 0;
801016a9:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)

  // Check ELF header
  if(readi(ip, (char*)&elf, 0, sizeof(elf)) < sizeof(elf))
801016b0:	6a 34                	push   $0x34
801016b2:	6a 00                	push   $0x0
801016b4:	8d 85 0c ff ff ff    	lea    -0xf4(%ebp),%eax
801016ba:	50                   	push   %eax
801016bb:	ff 75 d8             	pushl  -0x28(%ebp)
801016be:	e8 68 12 00 00       	call   8010292b <readi>
801016c3:	83 c4 10             	add    $0x10,%esp
801016c6:	83 f8 33             	cmp    $0x33,%eax
801016c9:	77 05                	ja     801016d0 <exec+0x5f>
    goto bad;
801016cb:	e9 3f 03 00 00       	jmp    80101a0f <exec+0x39e>
  if(elf.magic != ELF_MAGIC)
801016d0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
801016d6:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
801016db:	74 05                	je     801016e2 <exec+0x71>
    goto bad;
801016dd:	e9 2d 03 00 00       	jmp    80101a0f <exec+0x39e>

  if((pgdir = setupkvm()) == 0)
801016e2:	e8 15 66 00 00       	call   80107cfc <setupkvm>
801016e7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
801016ea:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
801016ee:	75 05                	jne    801016f5 <exec+0x84>
    goto bad;
801016f0:	e9 1a 03 00 00       	jmp    80101a0f <exec+0x39e>

  // Load program into memory.
  sz = 0;
801016f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
801016fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
80101703:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
80101709:	89 45 e8             	mov    %eax,-0x18(%ebp)
8010170c:	e9 ad 00 00 00       	jmp    801017be <exec+0x14d>
    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
80101711:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101714:	6a 20                	push   $0x20
80101716:	50                   	push   %eax
80101717:	8d 85 ec fe ff ff    	lea    -0x114(%ebp),%eax
8010171d:	50                   	push   %eax
8010171e:	ff 75 d8             	pushl  -0x28(%ebp)
80101721:	e8 05 12 00 00       	call   8010292b <readi>
80101726:	83 c4 10             	add    $0x10,%esp
80101729:	83 f8 20             	cmp    $0x20,%eax
8010172c:	74 05                	je     80101733 <exec+0xc2>
      goto bad;
8010172e:	e9 dc 02 00 00       	jmp    80101a0f <exec+0x39e>
    if(ph.type != ELF_PROG_LOAD)
80101733:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
80101739:	83 f8 01             	cmp    $0x1,%eax
8010173c:	74 02                	je     80101740 <exec+0xcf>
      continue;
8010173e:	eb 72                	jmp    801017b2 <exec+0x141>
    if(ph.memsz < ph.filesz)
80101740:	8b 95 00 ff ff ff    	mov    -0x100(%ebp),%edx
80101746:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
8010174c:	39 c2                	cmp    %eax,%edx
8010174e:	73 05                	jae    80101755 <exec+0xe4>
      goto bad;
80101750:	e9 ba 02 00 00       	jmp    80101a0f <exec+0x39e>
    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
80101755:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
8010175b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
80101761:	01 d0                	add    %edx,%eax
80101763:	83 ec 04             	sub    $0x4,%esp
80101766:	50                   	push   %eax
80101767:	ff 75 e0             	pushl  -0x20(%ebp)
8010176a:	ff 75 d4             	pushl  -0x2c(%ebp)
8010176d:	e8 1f 69 00 00       	call   80108091 <allocuvm>
80101772:	83 c4 10             	add    $0x10,%esp
80101775:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101778:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
8010177c:	75 05                	jne    80101783 <exec+0x112>
      goto bad;
8010177e:	e9 8c 02 00 00       	jmp    80101a0f <exec+0x39e>
    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
80101783:	8b 95 fc fe ff ff    	mov    -0x104(%ebp),%edx
80101789:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
8010178f:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
80101795:	83 ec 0c             	sub    $0xc,%esp
80101798:	52                   	push   %edx
80101799:	50                   	push   %eax
8010179a:	ff 75 d8             	pushl  -0x28(%ebp)
8010179d:	51                   	push   %ecx
8010179e:	ff 75 d4             	pushl  -0x2c(%ebp)
801017a1:	e8 14 68 00 00       	call   80107fba <loaduvm>
801017a6:	83 c4 20             	add    $0x20,%esp
801017a9:	85 c0                	test   %eax,%eax
801017ab:	79 05                	jns    801017b2 <exec+0x141>
      goto bad;
801017ad:	e9 5d 02 00 00       	jmp    80101a0f <exec+0x39e>
  if((pgdir = setupkvm()) == 0)
    goto bad;

  // Load program into memory.
  sz = 0;
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
801017b2:	ff 45 ec             	incl   -0x14(%ebp)
801017b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
801017b8:	83 c0 20             	add    $0x20,%eax
801017bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
801017be:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
801017c4:	0f b7 c0             	movzwl %ax,%eax
801017c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
801017ca:	0f 8f 41 ff ff ff    	jg     80101711 <exec+0xa0>
    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
      goto bad;
    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
      goto bad;
  }
  iunlockput(ip);
801017d0:	83 ec 0c             	sub    $0xc,%esp
801017d3:	ff 75 d8             	pushl  -0x28(%ebp)
801017d6:	e8 a8 0e 00 00       	call   80102683 <iunlockput>
801017db:	83 c4 10             	add    $0x10,%esp
  ip = 0;
801017de:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

  // Allocate two pages at the next page boundary.
  // Make the first inaccessible.  Use the second as the user stack.
  sz = PGROUNDUP(sz);
801017e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
801017e8:	05 ff 0f 00 00       	add    $0xfff,%eax
801017ed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801017f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
801017f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
801017f8:	05 00 20 00 00       	add    $0x2000,%eax
801017fd:	83 ec 04             	sub    $0x4,%esp
80101800:	50                   	push   %eax
80101801:	ff 75 e0             	pushl  -0x20(%ebp)
80101804:	ff 75 d4             	pushl  -0x2c(%ebp)
80101807:	e8 85 68 00 00       	call   80108091 <allocuvm>
8010180c:	83 c4 10             	add    $0x10,%esp
8010180f:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101812:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
80101816:	75 05                	jne    8010181d <exec+0x1ac>
    goto bad;
80101818:	e9 f2 01 00 00       	jmp    80101a0f <exec+0x39e>
  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
8010181d:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101820:	2d 00 20 00 00       	sub    $0x2000,%eax
80101825:	83 ec 08             	sub    $0x8,%esp
80101828:	50                   	push   %eax
80101829:	ff 75 d4             	pushl  -0x2c(%ebp)
8010182c:	e8 84 6a 00 00       	call   801082b5 <clearpteu>
80101831:	83 c4 10             	add    $0x10,%esp
  sp = sz;
80101834:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101837:	89 45 dc             	mov    %eax,-0x24(%ebp)

  // Push argument strings, prepare rest of stack in ustack.
  for(argc = 0; argv[argc]; argc++) {
8010183a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80101841:	e9 93 00 00 00       	jmp    801018d9 <exec+0x268>
    if(argc >= MAXARG)
80101846:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
8010184a:	76 05                	jbe    80101851 <exec+0x1e0>
      goto bad;
8010184c:	e9 be 01 00 00       	jmp    80101a0f <exec+0x39e>
    sp = (sp - (strlen(argv[argc]) + 1)) & ~(sizeof(uintp)-1);
80101851:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101854:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
8010185b:	8b 45 0c             	mov    0xc(%ebp),%eax
8010185e:	01 d0                	add    %edx,%eax
80101860:	8b 00                	mov    (%eax),%eax
80101862:	83 ec 0c             	sub    $0xc,%esp
80101865:	50                   	push   %eax
80101866:	e8 2d 47 00 00       	call   80105f98 <strlen>
8010186b:	83 c4 10             	add    $0x10,%esp
8010186e:	89 c2                	mov    %eax,%edx
80101870:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101873:	29 d0                	sub    %edx,%eax
80101875:	48                   	dec    %eax
80101876:	83 e0 fc             	and    $0xfffffffc,%eax
80101879:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
8010187c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010187f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101886:	8b 45 0c             	mov    0xc(%ebp),%eax
80101889:	01 d0                	add    %edx,%eax
8010188b:	8b 00                	mov    (%eax),%eax
8010188d:	83 ec 0c             	sub    $0xc,%esp
80101890:	50                   	push   %eax
80101891:	e8 02 47 00 00       	call   80105f98 <strlen>
80101896:	83 c4 10             	add    $0x10,%esp
80101899:	40                   	inc    %eax
8010189a:	89 c2                	mov    %eax,%edx
8010189c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010189f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
801018a6:	8b 45 0c             	mov    0xc(%ebp),%eax
801018a9:	01 c8                	add    %ecx,%eax
801018ab:	8b 00                	mov    (%eax),%eax
801018ad:	52                   	push   %edx
801018ae:	50                   	push   %eax
801018af:	ff 75 dc             	pushl  -0x24(%ebp)
801018b2:	ff 75 d4             	pushl  -0x2c(%ebp)
801018b5:	e8 b1 6b 00 00       	call   8010846b <copyout>
801018ba:	83 c4 10             	add    $0x10,%esp
801018bd:	85 c0                	test   %eax,%eax
801018bf:	79 05                	jns    801018c6 <exec+0x255>
      goto bad;
801018c1:	e9 49 01 00 00       	jmp    80101a0f <exec+0x39e>
    ustack[3+argc] = sp;
801018c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801018c9:	8d 50 03             	lea    0x3(%eax),%edx
801018cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
801018cf:	89 84 95 40 ff ff ff 	mov    %eax,-0xc0(%ebp,%edx,4)
    goto bad;
  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
  sp = sz;

  // Push argument strings, prepare rest of stack in ustack.
  for(argc = 0; argv[argc]; argc++) {
801018d6:	ff 45 e4             	incl   -0x1c(%ebp)
801018d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801018dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
801018e3:	8b 45 0c             	mov    0xc(%ebp),%eax
801018e6:	01 d0                	add    %edx,%eax
801018e8:	8b 00                	mov    (%eax),%eax
801018ea:	85 c0                	test   %eax,%eax
801018ec:	0f 85 54 ff ff ff    	jne    80101846 <exec+0x1d5>
    sp = (sp - (strlen(argv[argc]) + 1)) & ~(sizeof(uintp)-1);
    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
      goto bad;
    ustack[3+argc] = sp;
  }
  ustack[3+argc] = 0;
801018f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801018f5:	83 c0 03             	add    $0x3,%eax
801018f8:	c7 84 85 40 ff ff ff 	movl   $0x0,-0xc0(%ebp,%eax,4)
801018ff:	00 00 00 00 

  ustack[0] = 0xffffffff;  // fake return PC
80101903:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
8010190a:	ff ff ff 
  ustack[1] = argc;
8010190d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101910:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  ustack[2] = sp - (argc+1)*sizeof(uintp);  // argv pointer
80101916:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101919:	40                   	inc    %eax
8010191a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101921:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101924:	29 d0                	sub    %edx,%eax
80101926:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
#if X64
  proc->tf->rdi = argc;
  proc->tf->rsi = sp - (argc+1)*sizeof(uintp);
#endif

  sp -= (3+argc+1) * sizeof(uintp);
8010192c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010192f:	83 c0 04             	add    $0x4,%eax
80101932:	c1 e0 02             	shl    $0x2,%eax
80101935:	29 45 dc             	sub    %eax,-0x24(%ebp)
  if(copyout(pgdir, sp, ustack, (3+argc+1)*sizeof(uintp)) < 0)
80101938:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010193b:	83 c0 04             	add    $0x4,%eax
8010193e:	c1 e0 02             	shl    $0x2,%eax
80101941:	50                   	push   %eax
80101942:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
80101948:	50                   	push   %eax
80101949:	ff 75 dc             	pushl  -0x24(%ebp)
8010194c:	ff 75 d4             	pushl  -0x2c(%ebp)
8010194f:	e8 17 6b 00 00       	call   8010846b <copyout>
80101954:	83 c4 10             	add    $0x10,%esp
80101957:	85 c0                	test   %eax,%eax
80101959:	79 05                	jns    80101960 <exec+0x2ef>
    goto bad;
8010195b:	e9 af 00 00 00       	jmp    80101a0f <exec+0x39e>

  // Save program name for debugging.
  for(last=s=path; *s; s++)
80101960:	8b 45 08             	mov    0x8(%ebp),%eax
80101963:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101966:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101969:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010196c:	eb 13                	jmp    80101981 <exec+0x310>
    if(*s == '/')
8010196e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101971:	8a 00                	mov    (%eax),%al
80101973:	3c 2f                	cmp    $0x2f,%al
80101975:	75 07                	jne    8010197e <exec+0x30d>
      last = s+1;
80101977:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010197a:	40                   	inc    %eax
8010197b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  sp -= (3+argc+1) * sizeof(uintp);
  if(copyout(pgdir, sp, ustack, (3+argc+1)*sizeof(uintp)) < 0)
    goto bad;

  // Save program name for debugging.
  for(last=s=path; *s; s++)
8010197e:	ff 45 f4             	incl   -0xc(%ebp)
80101981:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101984:	8a 00                	mov    (%eax),%al
80101986:	84 c0                	test   %al,%al
80101988:	75 e4                	jne    8010196e <exec+0x2fd>
    if(*s == '/')
      last = s+1;
  safestrcpy(proc->name, last, sizeof(proc->name));
8010198a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80101990:	83 c0 6c             	add    $0x6c,%eax
80101993:	83 ec 04             	sub    $0x4,%esp
80101996:	6a 10                	push   $0x10
80101998:	ff 75 f0             	pushl  -0x10(%ebp)
8010199b:	50                   	push   %eax
8010199c:	e8 b0 45 00 00       	call   80105f51 <safestrcpy>
801019a1:	83 c4 10             	add    $0x10,%esp

  // Commit to the user image.
  oldpgdir = proc->pgdir;
801019a4:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801019aa:	8b 40 04             	mov    0x4(%eax),%eax
801019ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
  proc->pgdir = pgdir;
801019b0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801019b6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
801019b9:	89 50 04             	mov    %edx,0x4(%eax)
  proc->sz = sz;
801019bc:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801019c2:	8b 55 e0             	mov    -0x20(%ebp),%edx
801019c5:	89 10                	mov    %edx,(%eax)
  proc->tf->eip = elf.entry;  // main
801019c7:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801019cd:	8b 40 18             	mov    0x18(%eax),%eax
801019d0:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
801019d6:	89 50 38             	mov    %edx,0x38(%eax)
  proc->tf->esp = sp;
801019d9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801019df:	8b 40 18             	mov    0x18(%eax),%eax
801019e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
801019e5:	89 50 44             	mov    %edx,0x44(%eax)
  switchuvm(proc);
801019e8:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801019ee:	83 ec 0c             	sub    $0xc,%esp
801019f1:	50                   	push   %eax
801019f2:	e8 ea 63 00 00       	call   80107de1 <switchuvm>
801019f7:	83 c4 10             	add    $0x10,%esp
  freevm(oldpgdir);
801019fa:	83 ec 0c             	sub    $0xc,%esp
801019fd:	ff 75 d0             	pushl  -0x30(%ebp)
80101a00:	e8 12 68 00 00       	call   80108217 <freevm>
80101a05:	83 c4 10             	add    $0x10,%esp
  return 0;
80101a08:	b8 00 00 00 00       	mov    $0x0,%eax
80101a0d:	eb 2d                	jmp    80101a3c <exec+0x3cb>

 bad:
  if(pgdir)
80101a0f:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
80101a13:	74 0e                	je     80101a23 <exec+0x3b2>
    freevm(pgdir);
80101a15:	83 ec 0c             	sub    $0xc,%esp
80101a18:	ff 75 d4             	pushl  -0x2c(%ebp)
80101a1b:	e8 f7 67 00 00       	call   80108217 <freevm>
80101a20:	83 c4 10             	add    $0x10,%esp
  if(ip)
80101a23:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
80101a27:	74 0e                	je     80101a37 <exec+0x3c6>
    iunlockput(ip);
80101a29:	83 ec 0c             	sub    $0xc,%esp
80101a2c:	ff 75 d8             	pushl  -0x28(%ebp)
80101a2f:	e8 4f 0c 00 00       	call   80102683 <iunlockput>
80101a34:	83 c4 10             	add    $0x10,%esp
  return -1;
80101a37:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80101a3c:	c9                   	leave  
80101a3d:	c3                   	ret    

80101a3e <fileinit>:
  struct file file[NFILE];
} ftable;

void
fileinit(void)
{
80101a3e:	55                   	push   %ebp
80101a3f:	89 e5                	mov    %esp,%ebp
80101a41:	83 ec 08             	sub    $0x8,%esp
  initlock(&ftable.lock, "ftable");
80101a44:	83 ec 08             	sub    $0x8,%esp
80101a47:	68 65 85 10 80       	push   $0x80108565
80101a4c:	68 60 ca 10 80       	push   $0x8010ca60
80101a51:	e8 24 40 00 00       	call   80105a7a <initlock>
80101a56:	83 c4 10             	add    $0x10,%esp
}
80101a59:	c9                   	leave  
80101a5a:	c3                   	ret    

80101a5b <filealloc>:

// Allocate a file structure.
struct file*
filealloc(void)
{
80101a5b:	55                   	push   %ebp
80101a5c:	89 e5                	mov    %esp,%ebp
80101a5e:	83 ec 18             	sub    $0x18,%esp
  struct file *f;

  acquire(&ftable.lock);
80101a61:	83 ec 0c             	sub    $0xc,%esp
80101a64:	68 60 ca 10 80       	push   $0x8010ca60
80101a69:	e8 2d 40 00 00       	call   80105a9b <acquire>
80101a6e:	83 c4 10             	add    $0x10,%esp
  for(f = ftable.file; f < ftable.file + NFILE; f++){
80101a71:	c7 45 f4 94 ca 10 80 	movl   $0x8010ca94,-0xc(%ebp)
80101a78:	eb 2d                	jmp    80101aa7 <filealloc+0x4c>
    if(f->ref == 0){
80101a7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101a7d:	8b 40 04             	mov    0x4(%eax),%eax
80101a80:	85 c0                	test   %eax,%eax
80101a82:	75 1f                	jne    80101aa3 <filealloc+0x48>
      f->ref = 1;
80101a84:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101a87:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
      release(&ftable.lock);
80101a8e:	83 ec 0c             	sub    $0xc,%esp
80101a91:	68 60 ca 10 80       	push   $0x8010ca60
80101a96:	e8 ba 40 00 00       	call   80105b55 <release>
80101a9b:	83 c4 10             	add    $0x10,%esp
      return f;
80101a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101aa1:	eb 22                	jmp    80101ac5 <filealloc+0x6a>
filealloc(void)
{
  struct file *f;

  acquire(&ftable.lock);
  for(f = ftable.file; f < ftable.file + NFILE; f++){
80101aa3:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)
80101aa7:	81 7d f4 f4 d3 10 80 	cmpl   $0x8010d3f4,-0xc(%ebp)
80101aae:	72 ca                	jb     80101a7a <filealloc+0x1f>
      f->ref = 1;
      release(&ftable.lock);
      return f;
    }
  }
  release(&ftable.lock);
80101ab0:	83 ec 0c             	sub    $0xc,%esp
80101ab3:	68 60 ca 10 80       	push   $0x8010ca60
80101ab8:	e8 98 40 00 00       	call   80105b55 <release>
80101abd:	83 c4 10             	add    $0x10,%esp
  return 0;
80101ac0:	b8 00 00 00 00       	mov    $0x0,%eax
}
80101ac5:	c9                   	leave  
80101ac6:	c3                   	ret    

80101ac7 <filedup>:

// Increment ref count for file f.
struct file*
filedup(struct file *f)
{
80101ac7:	55                   	push   %ebp
80101ac8:	89 e5                	mov    %esp,%ebp
80101aca:	83 ec 08             	sub    $0x8,%esp
  acquire(&ftable.lock);
80101acd:	83 ec 0c             	sub    $0xc,%esp
80101ad0:	68 60 ca 10 80       	push   $0x8010ca60
80101ad5:	e8 c1 3f 00 00       	call   80105a9b <acquire>
80101ada:	83 c4 10             	add    $0x10,%esp
  if(f->ref < 1)
80101add:	8b 45 08             	mov    0x8(%ebp),%eax
80101ae0:	8b 40 04             	mov    0x4(%eax),%eax
80101ae3:	85 c0                	test   %eax,%eax
80101ae5:	7f 0d                	jg     80101af4 <filedup+0x2d>
    panic("filedup");
80101ae7:	83 ec 0c             	sub    $0xc,%esp
80101aea:	68 6c 85 10 80       	push   $0x8010856c
80101aef:	e8 9d f5 ff ff       	call   80101091 <panic>
  f->ref++;
80101af4:	8b 45 08             	mov    0x8(%ebp),%eax
80101af7:	8b 40 04             	mov    0x4(%eax),%eax
80101afa:	8d 50 01             	lea    0x1(%eax),%edx
80101afd:	8b 45 08             	mov    0x8(%ebp),%eax
80101b00:	89 50 04             	mov    %edx,0x4(%eax)
  release(&ftable.lock);
80101b03:	83 ec 0c             	sub    $0xc,%esp
80101b06:	68 60 ca 10 80       	push   $0x8010ca60
80101b0b:	e8 45 40 00 00       	call   80105b55 <release>
80101b10:	83 c4 10             	add    $0x10,%esp
  return f;
80101b13:	8b 45 08             	mov    0x8(%ebp),%eax
}
80101b16:	c9                   	leave  
80101b17:	c3                   	ret    

80101b18 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void
fileclose(struct file *f)
{
80101b18:	55                   	push   %ebp
80101b19:	89 e5                	mov    %esp,%ebp
80101b1b:	57                   	push   %edi
80101b1c:	56                   	push   %esi
80101b1d:	53                   	push   %ebx
80101b1e:	83 ec 2c             	sub    $0x2c,%esp
  struct file ff;

  acquire(&ftable.lock);
80101b21:	83 ec 0c             	sub    $0xc,%esp
80101b24:	68 60 ca 10 80       	push   $0x8010ca60
80101b29:	e8 6d 3f 00 00       	call   80105a9b <acquire>
80101b2e:	83 c4 10             	add    $0x10,%esp
  if(f->ref < 1)
80101b31:	8b 45 08             	mov    0x8(%ebp),%eax
80101b34:	8b 40 04             	mov    0x4(%eax),%eax
80101b37:	85 c0                	test   %eax,%eax
80101b39:	7f 0d                	jg     80101b48 <fileclose+0x30>
    panic("fileclose");
80101b3b:	83 ec 0c             	sub    $0xc,%esp
80101b3e:	68 74 85 10 80       	push   $0x80108574
80101b43:	e8 49 f5 ff ff       	call   80101091 <panic>
  if(--f->ref > 0){
80101b48:	8b 45 08             	mov    0x8(%ebp),%eax
80101b4b:	8b 40 04             	mov    0x4(%eax),%eax
80101b4e:	8d 50 ff             	lea    -0x1(%eax),%edx
80101b51:	8b 45 08             	mov    0x8(%ebp),%eax
80101b54:	89 50 04             	mov    %edx,0x4(%eax)
80101b57:	8b 45 08             	mov    0x8(%ebp),%eax
80101b5a:	8b 40 04             	mov    0x4(%eax),%eax
80101b5d:	85 c0                	test   %eax,%eax
80101b5f:	7e 12                	jle    80101b73 <fileclose+0x5b>
    release(&ftable.lock);
80101b61:	83 ec 0c             	sub    $0xc,%esp
80101b64:	68 60 ca 10 80       	push   $0x8010ca60
80101b69:	e8 e7 3f 00 00       	call   80105b55 <release>
80101b6e:	83 c4 10             	add    $0x10,%esp
80101b71:	eb 79                	jmp    80101bec <fileclose+0xd4>
    return;
  }
  ff = *f;
80101b73:	8b 55 08             	mov    0x8(%ebp),%edx
80101b76:	8d 45 d0             	lea    -0x30(%ebp),%eax
80101b79:	89 d3                	mov    %edx,%ebx
80101b7b:	ba 06 00 00 00       	mov    $0x6,%edx
80101b80:	89 c7                	mov    %eax,%edi
80101b82:	89 de                	mov    %ebx,%esi
80101b84:	89 d1                	mov    %edx,%ecx
80101b86:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  f->ref = 0;
80101b88:	8b 45 08             	mov    0x8(%ebp),%eax
80101b8b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  f->type = FD_NONE;
80101b92:	8b 45 08             	mov    0x8(%ebp),%eax
80101b95:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  release(&ftable.lock);
80101b9b:	83 ec 0c             	sub    $0xc,%esp
80101b9e:	68 60 ca 10 80       	push   $0x8010ca60
80101ba3:	e8 ad 3f 00 00       	call   80105b55 <release>
80101ba8:	83 c4 10             	add    $0x10,%esp
  
  if(ff.type == FD_PIPE)
80101bab:	8b 45 d0             	mov    -0x30(%ebp),%eax
80101bae:	83 f8 01             	cmp    $0x1,%eax
80101bb1:	75 18                	jne    80101bcb <fileclose+0xb3>
    pipeclose(ff.pipe, ff.writable);
80101bb3:	8a 45 d9             	mov    -0x27(%ebp),%al
80101bb6:	0f be d0             	movsbl %al,%edx
80101bb9:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101bbc:	83 ec 08             	sub    $0x8,%esp
80101bbf:	52                   	push   %edx
80101bc0:	50                   	push   %eax
80101bc1:	e8 a7 30 00 00       	call   80104c6d <pipeclose>
80101bc6:	83 c4 10             	add    $0x10,%esp
80101bc9:	eb 21                	jmp    80101bec <fileclose+0xd4>
  else if(ff.type == FD_INODE){
80101bcb:	8b 45 d0             	mov    -0x30(%ebp),%eax
80101bce:	83 f8 02             	cmp    $0x2,%eax
80101bd1:	75 19                	jne    80101bec <fileclose+0xd4>
    begin_trans();
80101bd3:	e8 82 21 00 00       	call   80103d5a <begin_trans>
    iput(ff.ip);
80101bd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101bdb:	83 ec 0c             	sub    $0xc,%esp
80101bde:	50                   	push   %eax
80101bdf:	e8 b0 09 00 00       	call   80102594 <iput>
80101be4:	83 c4 10             	add    $0x10,%esp
    commit_trans();
80101be7:	e8 c0 21 00 00       	call   80103dac <commit_trans>
  }
}
80101bec:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101bef:	5b                   	pop    %ebx
80101bf0:	5e                   	pop    %esi
80101bf1:	5f                   	pop    %edi
80101bf2:	5d                   	pop    %ebp
80101bf3:	c3                   	ret    

80101bf4 <filestat>:

// Get metadata about file f.
int
filestat(struct file *f, struct stat *st)
{
80101bf4:	55                   	push   %ebp
80101bf5:	89 e5                	mov    %esp,%ebp
80101bf7:	83 ec 08             	sub    $0x8,%esp
  if(f->type == FD_INODE){
80101bfa:	8b 45 08             	mov    0x8(%ebp),%eax
80101bfd:	8b 00                	mov    (%eax),%eax
80101bff:	83 f8 02             	cmp    $0x2,%eax
80101c02:	75 40                	jne    80101c44 <filestat+0x50>
    ilock(f->ip);
80101c04:	8b 45 08             	mov    0x8(%ebp),%eax
80101c07:	8b 40 10             	mov    0x10(%eax),%eax
80101c0a:	83 ec 0c             	sub    $0xc,%esp
80101c0d:	50                   	push   %eax
80101c0e:	e8 bc 07 00 00       	call   801023cf <ilock>
80101c13:	83 c4 10             	add    $0x10,%esp
    stati(f->ip, st);
80101c16:	8b 45 08             	mov    0x8(%ebp),%eax
80101c19:	8b 40 10             	mov    0x10(%eax),%eax
80101c1c:	83 ec 08             	sub    $0x8,%esp
80101c1f:	ff 75 0c             	pushl  0xc(%ebp)
80101c22:	50                   	push   %eax
80101c23:	e8 bf 0c 00 00       	call   801028e7 <stati>
80101c28:	83 c4 10             	add    $0x10,%esp
    iunlock(f->ip);
80101c2b:	8b 45 08             	mov    0x8(%ebp),%eax
80101c2e:	8b 40 10             	mov    0x10(%eax),%eax
80101c31:	83 ec 0c             	sub    $0xc,%esp
80101c34:	50                   	push   %eax
80101c35:	e8 e9 08 00 00       	call   80102523 <iunlock>
80101c3a:	83 c4 10             	add    $0x10,%esp
    return 0;
80101c3d:	b8 00 00 00 00       	mov    $0x0,%eax
80101c42:	eb 05                	jmp    80101c49 <filestat+0x55>
  }
  return -1;
80101c44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80101c49:	c9                   	leave  
80101c4a:	c3                   	ret    

80101c4b <fileread>:

// Read from file f.
int
fileread(struct file *f, char *addr, int n)
{
80101c4b:	55                   	push   %ebp
80101c4c:	89 e5                	mov    %esp,%ebp
80101c4e:	83 ec 18             	sub    $0x18,%esp
  int r;

  if(f->readable == 0)
80101c51:	8b 45 08             	mov    0x8(%ebp),%eax
80101c54:	8a 40 08             	mov    0x8(%eax),%al
80101c57:	84 c0                	test   %al,%al
80101c59:	75 0a                	jne    80101c65 <fileread+0x1a>
    return -1;
80101c5b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101c60:	e9 9b 00 00 00       	jmp    80101d00 <fileread+0xb5>
  if(f->type == FD_PIPE)
80101c65:	8b 45 08             	mov    0x8(%ebp),%eax
80101c68:	8b 00                	mov    (%eax),%eax
80101c6a:	83 f8 01             	cmp    $0x1,%eax
80101c6d:	75 1a                	jne    80101c89 <fileread+0x3e>
    return piperead(f->pipe, addr, n);
80101c6f:	8b 45 08             	mov    0x8(%ebp),%eax
80101c72:	8b 40 0c             	mov    0xc(%eax),%eax
80101c75:	83 ec 04             	sub    $0x4,%esp
80101c78:	ff 75 10             	pushl  0x10(%ebp)
80101c7b:	ff 75 0c             	pushl  0xc(%ebp)
80101c7e:	50                   	push   %eax
80101c7f:	e8 94 31 00 00       	call   80104e18 <piperead>
80101c84:	83 c4 10             	add    $0x10,%esp
80101c87:	eb 77                	jmp    80101d00 <fileread+0xb5>
  if(f->type == FD_INODE){
80101c89:	8b 45 08             	mov    0x8(%ebp),%eax
80101c8c:	8b 00                	mov    (%eax),%eax
80101c8e:	83 f8 02             	cmp    $0x2,%eax
80101c91:	75 60                	jne    80101cf3 <fileread+0xa8>
    ilock(f->ip);
80101c93:	8b 45 08             	mov    0x8(%ebp),%eax
80101c96:	8b 40 10             	mov    0x10(%eax),%eax
80101c99:	83 ec 0c             	sub    $0xc,%esp
80101c9c:	50                   	push   %eax
80101c9d:	e8 2d 07 00 00       	call   801023cf <ilock>
80101ca2:	83 c4 10             	add    $0x10,%esp
    if((r = readi(f->ip, addr, f->off, n)) > 0)
80101ca5:	8b 4d 10             	mov    0x10(%ebp),%ecx
80101ca8:	8b 45 08             	mov    0x8(%ebp),%eax
80101cab:	8b 50 14             	mov    0x14(%eax),%edx
80101cae:	8b 45 08             	mov    0x8(%ebp),%eax
80101cb1:	8b 40 10             	mov    0x10(%eax),%eax
80101cb4:	51                   	push   %ecx
80101cb5:	52                   	push   %edx
80101cb6:	ff 75 0c             	pushl  0xc(%ebp)
80101cb9:	50                   	push   %eax
80101cba:	e8 6c 0c 00 00       	call   8010292b <readi>
80101cbf:	83 c4 10             	add    $0x10,%esp
80101cc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101cc5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101cc9:	7e 11                	jle    80101cdc <fileread+0x91>
      f->off += r;
80101ccb:	8b 45 08             	mov    0x8(%ebp),%eax
80101cce:	8b 50 14             	mov    0x14(%eax),%edx
80101cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101cd4:	01 c2                	add    %eax,%edx
80101cd6:	8b 45 08             	mov    0x8(%ebp),%eax
80101cd9:	89 50 14             	mov    %edx,0x14(%eax)
    iunlock(f->ip);
80101cdc:	8b 45 08             	mov    0x8(%ebp),%eax
80101cdf:	8b 40 10             	mov    0x10(%eax),%eax
80101ce2:	83 ec 0c             	sub    $0xc,%esp
80101ce5:	50                   	push   %eax
80101ce6:	e8 38 08 00 00       	call   80102523 <iunlock>
80101ceb:	83 c4 10             	add    $0x10,%esp
    return r;
80101cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101cf1:	eb 0d                	jmp    80101d00 <fileread+0xb5>
  }
  panic("fileread");
80101cf3:	83 ec 0c             	sub    $0xc,%esp
80101cf6:	68 7e 85 10 80       	push   $0x8010857e
80101cfb:	e8 91 f3 ff ff       	call   80101091 <panic>
}
80101d00:	c9                   	leave  
80101d01:	c3                   	ret    

80101d02 <filewrite>:

//PAGEBREAK!
// Write to file f.
int
filewrite(struct file *f, char *addr, int n)
{
80101d02:	55                   	push   %ebp
80101d03:	89 e5                	mov    %esp,%ebp
80101d05:	53                   	push   %ebx
80101d06:	83 ec 14             	sub    $0x14,%esp
  int r;

  if(f->writable == 0)
80101d09:	8b 45 08             	mov    0x8(%ebp),%eax
80101d0c:	8a 40 09             	mov    0x9(%eax),%al
80101d0f:	84 c0                	test   %al,%al
80101d11:	75 0a                	jne    80101d1d <filewrite+0x1b>
    return -1;
80101d13:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101d18:	e9 1a 01 00 00       	jmp    80101e37 <filewrite+0x135>
  if(f->type == FD_PIPE)
80101d1d:	8b 45 08             	mov    0x8(%ebp),%eax
80101d20:	8b 00                	mov    (%eax),%eax
80101d22:	83 f8 01             	cmp    $0x1,%eax
80101d25:	75 1d                	jne    80101d44 <filewrite+0x42>
    return pipewrite(f->pipe, addr, n);
80101d27:	8b 45 08             	mov    0x8(%ebp),%eax
80101d2a:	8b 40 0c             	mov    0xc(%eax),%eax
80101d2d:	83 ec 04             	sub    $0x4,%esp
80101d30:	ff 75 10             	pushl  0x10(%ebp)
80101d33:	ff 75 0c             	pushl  0xc(%ebp)
80101d36:	50                   	push   %eax
80101d37:	e8 da 2f 00 00       	call   80104d16 <pipewrite>
80101d3c:	83 c4 10             	add    $0x10,%esp
80101d3f:	e9 f3 00 00 00       	jmp    80101e37 <filewrite+0x135>
  if(f->type == FD_INODE){
80101d44:	8b 45 08             	mov    0x8(%ebp),%eax
80101d47:	8b 00                	mov    (%eax),%eax
80101d49:	83 f8 02             	cmp    $0x2,%eax
80101d4c:	0f 85 d8 00 00 00    	jne    80101e2a <filewrite+0x128>
    // the maximum log transaction size, including
    // i-node, indirect block, allocation blocks,
    // and 2 blocks of slop for non-aligned writes.
    // this really belongs lower down, since writei()
    // might be writing a device like the console.
    int max = ((LOGSIZE-1-1-2) / 2) * 512;
80101d52:	c7 45 ec 00 06 00 00 	movl   $0x600,-0x14(%ebp)
    int i = 0;
80101d59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while(i < n){
80101d60:	e9 a5 00 00 00       	jmp    80101e0a <filewrite+0x108>
      int n1 = n - i;
80101d65:	8b 45 10             	mov    0x10(%ebp),%eax
80101d68:	2b 45 f4             	sub    -0xc(%ebp),%eax
80101d6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(n1 > max)
80101d6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101d71:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80101d74:	7e 06                	jle    80101d7c <filewrite+0x7a>
        n1 = max;
80101d76:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101d79:	89 45 f0             	mov    %eax,-0x10(%ebp)

      begin_trans();
80101d7c:	e8 d9 1f 00 00       	call   80103d5a <begin_trans>
      ilock(f->ip);
80101d81:	8b 45 08             	mov    0x8(%ebp),%eax
80101d84:	8b 40 10             	mov    0x10(%eax),%eax
80101d87:	83 ec 0c             	sub    $0xc,%esp
80101d8a:	50                   	push   %eax
80101d8b:	e8 3f 06 00 00       	call   801023cf <ilock>
80101d90:	83 c4 10             	add    $0x10,%esp
      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
80101d93:	8b 4d f0             	mov    -0x10(%ebp),%ecx
80101d96:	8b 45 08             	mov    0x8(%ebp),%eax
80101d99:	8b 50 14             	mov    0x14(%eax),%edx
80101d9c:	8b 5d f4             	mov    -0xc(%ebp),%ebx
80101d9f:	8b 45 0c             	mov    0xc(%ebp),%eax
80101da2:	01 c3                	add    %eax,%ebx
80101da4:	8b 45 08             	mov    0x8(%ebp),%eax
80101da7:	8b 40 10             	mov    0x10(%eax),%eax
80101daa:	51                   	push   %ecx
80101dab:	52                   	push   %edx
80101dac:	53                   	push   %ebx
80101dad:	50                   	push   %eax
80101dae:	e8 d8 0c 00 00       	call   80102a8b <writei>
80101db3:	83 c4 10             	add    $0x10,%esp
80101db6:	89 45 e8             	mov    %eax,-0x18(%ebp)
80101db9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80101dbd:	7e 11                	jle    80101dd0 <filewrite+0xce>
        f->off += r;
80101dbf:	8b 45 08             	mov    0x8(%ebp),%eax
80101dc2:	8b 50 14             	mov    0x14(%eax),%edx
80101dc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101dc8:	01 c2                	add    %eax,%edx
80101dca:	8b 45 08             	mov    0x8(%ebp),%eax
80101dcd:	89 50 14             	mov    %edx,0x14(%eax)
      iunlock(f->ip);
80101dd0:	8b 45 08             	mov    0x8(%ebp),%eax
80101dd3:	8b 40 10             	mov    0x10(%eax),%eax
80101dd6:	83 ec 0c             	sub    $0xc,%esp
80101dd9:	50                   	push   %eax
80101dda:	e8 44 07 00 00       	call   80102523 <iunlock>
80101ddf:	83 c4 10             	add    $0x10,%esp
      commit_trans();
80101de2:	e8 c5 1f 00 00       	call   80103dac <commit_trans>

      if(r < 0)
80101de7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80101deb:	79 02                	jns    80101def <filewrite+0xed>
        break;
80101ded:	eb 27                	jmp    80101e16 <filewrite+0x114>
      if(r != n1)
80101def:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101df2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80101df5:	74 0d                	je     80101e04 <filewrite+0x102>
        panic("short filewrite");
80101df7:	83 ec 0c             	sub    $0xc,%esp
80101dfa:	68 87 85 10 80       	push   $0x80108587
80101dff:	e8 8d f2 ff ff       	call   80101091 <panic>
      i += r;
80101e04:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101e07:	01 45 f4             	add    %eax,-0xc(%ebp)
    // and 2 blocks of slop for non-aligned writes.
    // this really belongs lower down, since writei()
    // might be writing a device like the console.
    int max = ((LOGSIZE-1-1-2) / 2) * 512;
    int i = 0;
    while(i < n){
80101e0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101e0d:	3b 45 10             	cmp    0x10(%ebp),%eax
80101e10:	0f 8c 4f ff ff ff    	jl     80101d65 <filewrite+0x63>
        break;
      if(r != n1)
        panic("short filewrite");
      i += r;
    }
    return i == n ? n : -1;
80101e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101e19:	3b 45 10             	cmp    0x10(%ebp),%eax
80101e1c:	75 05                	jne    80101e23 <filewrite+0x121>
80101e1e:	8b 45 10             	mov    0x10(%ebp),%eax
80101e21:	eb 14                	jmp    80101e37 <filewrite+0x135>
80101e23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101e28:	eb 0d                	jmp    80101e37 <filewrite+0x135>
  }
  panic("filewrite");
80101e2a:	83 ec 0c             	sub    $0xc,%esp
80101e2d:	68 97 85 10 80       	push   $0x80108597
80101e32:	e8 5a f2 ff ff       	call   80101091 <panic>
}
80101e37:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101e3a:	c9                   	leave  
80101e3b:	c3                   	ret    

80101e3c <readsb>:
static void itrunc(struct inode*);

// Read the super block.
void
readsb(int dev, struct superblock *sb)
{
80101e3c:	55                   	push   %ebp
80101e3d:	89 e5                	mov    %esp,%ebp
80101e3f:	83 ec 18             	sub    $0x18,%esp
  struct buf *bp;
  
  bp = bread(dev, 1);
80101e42:	8b 45 08             	mov    0x8(%ebp),%eax
80101e45:	83 ec 08             	sub    $0x8,%esp
80101e48:	6a 01                	push   $0x1
80101e4a:	50                   	push   %eax
80101e4b:	e8 2a ee ff ff       	call   80100c7a <bread>
80101e50:	83 c4 10             	add    $0x10,%esp
80101e53:	89 45 f4             	mov    %eax,-0xc(%ebp)
  memmove(sb, bp->data, sizeof(*sb));
80101e56:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101e59:	83 c0 18             	add    $0x18,%eax
80101e5c:	83 ec 04             	sub    $0x4,%esp
80101e5f:	6a 10                	push   $0x10
80101e61:	50                   	push   %eax
80101e62:	ff 75 0c             	pushl  0xc(%ebp)
80101e65:	e8 af 3f 00 00       	call   80105e19 <memmove>
80101e6a:	83 c4 10             	add    $0x10,%esp
  brelse(bp);
80101e6d:	83 ec 0c             	sub    $0xc,%esp
80101e70:	ff 75 f4             	pushl  -0xc(%ebp)
80101e73:	e8 79 ee ff ff       	call   80100cf1 <brelse>
80101e78:	83 c4 10             	add    $0x10,%esp
}
80101e7b:	c9                   	leave  
80101e7c:	c3                   	ret    

80101e7d <bzero>:

// Zero a block.
static void
bzero(int dev, int bno)
{
80101e7d:	55                   	push   %ebp
80101e7e:	89 e5                	mov    %esp,%ebp
80101e80:	83 ec 18             	sub    $0x18,%esp
  struct buf *bp;
  
  bp = bread(dev, bno);
80101e83:	8b 55 0c             	mov    0xc(%ebp),%edx
80101e86:	8b 45 08             	mov    0x8(%ebp),%eax
80101e89:	83 ec 08             	sub    $0x8,%esp
80101e8c:	52                   	push   %edx
80101e8d:	50                   	push   %eax
80101e8e:	e8 e7 ed ff ff       	call   80100c7a <bread>
80101e93:	83 c4 10             	add    $0x10,%esp
80101e96:	89 45 f4             	mov    %eax,-0xc(%ebp)
  memset(bp->data, 0, BSIZE);
80101e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101e9c:	83 c0 18             	add    $0x18,%eax
80101e9f:	83 ec 04             	sub    $0x4,%esp
80101ea2:	68 00 02 00 00       	push   $0x200
80101ea7:	6a 00                	push   $0x0
80101ea9:	50                   	push   %eax
80101eaa:	e8 b1 3e 00 00       	call   80105d60 <memset>
80101eaf:	83 c4 10             	add    $0x10,%esp
  log_write(bp);
80101eb2:	83 ec 0c             	sub    $0xc,%esp
80101eb5:	ff 75 f4             	pushl  -0xc(%ebp)
80101eb8:	e8 53 1f 00 00       	call   80103e10 <log_write>
80101ebd:	83 c4 10             	add    $0x10,%esp
  brelse(bp);
80101ec0:	83 ec 0c             	sub    $0xc,%esp
80101ec3:	ff 75 f4             	pushl  -0xc(%ebp)
80101ec6:	e8 26 ee ff ff       	call   80100cf1 <brelse>
80101ecb:	83 c4 10             	add    $0x10,%esp
}
80101ece:	c9                   	leave  
80101ecf:	c3                   	ret    

80101ed0 <balloc>:
// Blocks. 

// Allocate a zeroed disk block.
static uint
balloc(uint dev)
{
80101ed0:	55                   	push   %ebp
80101ed1:	89 e5                	mov    %esp,%ebp
80101ed3:	83 ec 28             	sub    $0x28,%esp
  int b, bi, m;
  struct buf *bp;
  struct superblock sb;

  bp = 0;
80101ed6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  readsb(dev, &sb);
80101edd:	8b 45 08             	mov    0x8(%ebp),%eax
80101ee0:	83 ec 08             	sub    $0x8,%esp
80101ee3:	8d 55 d8             	lea    -0x28(%ebp),%edx
80101ee6:	52                   	push   %edx
80101ee7:	50                   	push   %eax
80101ee8:	e8 4f ff ff ff       	call   80101e3c <readsb>
80101eed:	83 c4 10             	add    $0x10,%esp
  for(b = 0; b < sb.size; b += BPB){
80101ef0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80101ef7:	e9 11 01 00 00       	jmp    8010200d <balloc+0x13d>
    bp = bread(dev, BBLOCK(b, sb.ninodes));
80101efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101eff:	85 c0                	test   %eax,%eax
80101f01:	79 05                	jns    80101f08 <balloc+0x38>
80101f03:	05 ff 0f 00 00       	add    $0xfff,%eax
80101f08:	c1 f8 0c             	sar    $0xc,%eax
80101f0b:	89 c2                	mov    %eax,%edx
80101f0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101f10:	c1 e8 03             	shr    $0x3,%eax
80101f13:	01 d0                	add    %edx,%eax
80101f15:	83 c0 03             	add    $0x3,%eax
80101f18:	83 ec 08             	sub    $0x8,%esp
80101f1b:	50                   	push   %eax
80101f1c:	ff 75 08             	pushl  0x8(%ebp)
80101f1f:	e8 56 ed ff ff       	call   80100c7a <bread>
80101f24:	83 c4 10             	add    $0x10,%esp
80101f27:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
80101f2a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80101f31:	e9 a4 00 00 00       	jmp    80101fda <balloc+0x10a>
      m = 1 << (bi % 8);
80101f36:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101f39:	25 07 00 00 80       	and    $0x80000007,%eax
80101f3e:	85 c0                	test   %eax,%eax
80101f40:	79 05                	jns    80101f47 <balloc+0x77>
80101f42:	48                   	dec    %eax
80101f43:	83 c8 f8             	or     $0xfffffff8,%eax
80101f46:	40                   	inc    %eax
80101f47:	ba 01 00 00 00       	mov    $0x1,%edx
80101f4c:	88 c1                	mov    %al,%cl
80101f4e:	d3 e2                	shl    %cl,%edx
80101f50:	89 d0                	mov    %edx,%eax
80101f52:	89 45 e8             	mov    %eax,-0x18(%ebp)
      if((bp->data[bi/8] & m) == 0){  // Is block free?
80101f55:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101f58:	85 c0                	test   %eax,%eax
80101f5a:	79 03                	jns    80101f5f <balloc+0x8f>
80101f5c:	83 c0 07             	add    $0x7,%eax
80101f5f:	c1 f8 03             	sar    $0x3,%eax
80101f62:	89 c2                	mov    %eax,%edx
80101f64:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101f67:	8a 44 10 18          	mov    0x18(%eax,%edx,1),%al
80101f6b:	0f b6 c0             	movzbl %al,%eax
80101f6e:	23 45 e8             	and    -0x18(%ebp),%eax
80101f71:	85 c0                	test   %eax,%eax
80101f73:	75 62                	jne    80101fd7 <balloc+0x107>
        bp->data[bi/8] |= m;  // Mark block in use.
80101f75:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101f78:	85 c0                	test   %eax,%eax
80101f7a:	79 03                	jns    80101f7f <balloc+0xaf>
80101f7c:	83 c0 07             	add    $0x7,%eax
80101f7f:	c1 f8 03             	sar    $0x3,%eax
80101f82:	8b 55 ec             	mov    -0x14(%ebp),%edx
80101f85:	8a 54 02 18          	mov    0x18(%edx,%eax,1),%dl
80101f89:	88 d1                	mov    %dl,%cl
80101f8b:	8b 55 e8             	mov    -0x18(%ebp),%edx
80101f8e:	09 ca                	or     %ecx,%edx
80101f90:	88 d1                	mov    %dl,%cl
80101f92:	8b 55 ec             	mov    -0x14(%ebp),%edx
80101f95:	88 4c 02 18          	mov    %cl,0x18(%edx,%eax,1)
        log_write(bp);
80101f99:	83 ec 0c             	sub    $0xc,%esp
80101f9c:	ff 75 ec             	pushl  -0x14(%ebp)
80101f9f:	e8 6c 1e 00 00       	call   80103e10 <log_write>
80101fa4:	83 c4 10             	add    $0x10,%esp
        brelse(bp);
80101fa7:	83 ec 0c             	sub    $0xc,%esp
80101faa:	ff 75 ec             	pushl  -0x14(%ebp)
80101fad:	e8 3f ed ff ff       	call   80100cf1 <brelse>
80101fb2:	83 c4 10             	add    $0x10,%esp
        bzero(dev, b + bi);
80101fb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101fb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101fbb:	01 c2                	add    %eax,%edx
80101fbd:	8b 45 08             	mov    0x8(%ebp),%eax
80101fc0:	83 ec 08             	sub    $0x8,%esp
80101fc3:	52                   	push   %edx
80101fc4:	50                   	push   %eax
80101fc5:	e8 b3 fe ff ff       	call   80101e7d <bzero>
80101fca:	83 c4 10             	add    $0x10,%esp
        return b + bi;
80101fcd:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101fd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101fd3:	01 d0                	add    %edx,%eax
80101fd5:	eb 51                	jmp    80102028 <balloc+0x158>

  bp = 0;
  readsb(dev, &sb);
  for(b = 0; b < sb.size; b += BPB){
    bp = bread(dev, BBLOCK(b, sb.ninodes));
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
80101fd7:	ff 45 f0             	incl   -0x10(%ebp)
80101fda:	81 7d f0 ff 0f 00 00 	cmpl   $0xfff,-0x10(%ebp)
80101fe1:	7f 15                	jg     80101ff8 <balloc+0x128>
80101fe3:	8b 55 f4             	mov    -0xc(%ebp),%edx
80101fe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101fe9:	01 d0                	add    %edx,%eax
80101feb:	89 c2                	mov    %eax,%edx
80101fed:	8b 45 d8             	mov    -0x28(%ebp),%eax
80101ff0:	39 c2                	cmp    %eax,%edx
80101ff2:	0f 82 3e ff ff ff    	jb     80101f36 <balloc+0x66>
        brelse(bp);
        bzero(dev, b + bi);
        return b + bi;
      }
    }
    brelse(bp);
80101ff8:	83 ec 0c             	sub    $0xc,%esp
80101ffb:	ff 75 ec             	pushl  -0x14(%ebp)
80101ffe:	e8 ee ec ff ff       	call   80100cf1 <brelse>
80102003:	83 c4 10             	add    $0x10,%esp
  struct buf *bp;
  struct superblock sb;

  bp = 0;
  readsb(dev, &sb);
  for(b = 0; b < sb.size; b += BPB){
80102006:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
8010200d:	8b 55 f4             	mov    -0xc(%ebp),%edx
80102010:	8b 45 d8             	mov    -0x28(%ebp),%eax
80102013:	39 c2                	cmp    %eax,%edx
80102015:	0f 82 e1 fe ff ff    	jb     80101efc <balloc+0x2c>
        return b + bi;
      }
    }
    brelse(bp);
  }
  panic("balloc: out of blocks");
8010201b:	83 ec 0c             	sub    $0xc,%esp
8010201e:	68 a1 85 10 80       	push   $0x801085a1
80102023:	e8 69 f0 ff ff       	call   80101091 <panic>
}
80102028:	c9                   	leave  
80102029:	c3                   	ret    

8010202a <bfree>:

// Free a disk block.
static void
bfree(int dev, uint b)
{
8010202a:	55                   	push   %ebp
8010202b:	89 e5                	mov    %esp,%ebp
8010202d:	83 ec 28             	sub    $0x28,%esp
  struct buf *bp;
  struct superblock sb;
  int bi, m;

  readsb(dev, &sb);
80102030:	83 ec 08             	sub    $0x8,%esp
80102033:	8d 45 dc             	lea    -0x24(%ebp),%eax
80102036:	50                   	push   %eax
80102037:	ff 75 08             	pushl  0x8(%ebp)
8010203a:	e8 fd fd ff ff       	call   80101e3c <readsb>
8010203f:	83 c4 10             	add    $0x10,%esp
  bp = bread(dev, BBLOCK(b, sb.ninodes));
80102042:	8b 45 0c             	mov    0xc(%ebp),%eax
80102045:	c1 e8 0c             	shr    $0xc,%eax
80102048:	89 c2                	mov    %eax,%edx
8010204a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010204d:	c1 e8 03             	shr    $0x3,%eax
80102050:	01 d0                	add    %edx,%eax
80102052:	8d 50 03             	lea    0x3(%eax),%edx
80102055:	8b 45 08             	mov    0x8(%ebp),%eax
80102058:	83 ec 08             	sub    $0x8,%esp
8010205b:	52                   	push   %edx
8010205c:	50                   	push   %eax
8010205d:	e8 18 ec ff ff       	call   80100c7a <bread>
80102062:	83 c4 10             	add    $0x10,%esp
80102065:	89 45 f4             	mov    %eax,-0xc(%ebp)
  bi = b % BPB;
80102068:	8b 45 0c             	mov    0xc(%ebp),%eax
8010206b:	25 ff 0f 00 00       	and    $0xfff,%eax
80102070:	89 45 f0             	mov    %eax,-0x10(%ebp)
  m = 1 << (bi % 8);
80102073:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102076:	25 07 00 00 80       	and    $0x80000007,%eax
8010207b:	85 c0                	test   %eax,%eax
8010207d:	79 05                	jns    80102084 <bfree+0x5a>
8010207f:	48                   	dec    %eax
80102080:	83 c8 f8             	or     $0xfffffff8,%eax
80102083:	40                   	inc    %eax
80102084:	ba 01 00 00 00       	mov    $0x1,%edx
80102089:	88 c1                	mov    %al,%cl
8010208b:	d3 e2                	shl    %cl,%edx
8010208d:	89 d0                	mov    %edx,%eax
8010208f:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if((bp->data[bi/8] & m) == 0)
80102092:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102095:	85 c0                	test   %eax,%eax
80102097:	79 03                	jns    8010209c <bfree+0x72>
80102099:	83 c0 07             	add    $0x7,%eax
8010209c:	c1 f8 03             	sar    $0x3,%eax
8010209f:	89 c2                	mov    %eax,%edx
801020a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801020a4:	8a 44 10 18          	mov    0x18(%eax,%edx,1),%al
801020a8:	0f b6 c0             	movzbl %al,%eax
801020ab:	23 45 ec             	and    -0x14(%ebp),%eax
801020ae:	85 c0                	test   %eax,%eax
801020b0:	75 0d                	jne    801020bf <bfree+0x95>
    panic("freeing free block");
801020b2:	83 ec 0c             	sub    $0xc,%esp
801020b5:	68 b7 85 10 80       	push   $0x801085b7
801020ba:	e8 d2 ef ff ff       	call   80101091 <panic>
  bp->data[bi/8] &= ~m;
801020bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
801020c2:	85 c0                	test   %eax,%eax
801020c4:	79 03                	jns    801020c9 <bfree+0x9f>
801020c6:	83 c0 07             	add    $0x7,%eax
801020c9:	c1 f8 03             	sar    $0x3,%eax
801020cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
801020cf:	8a 54 02 18          	mov    0x18(%edx,%eax,1),%dl
801020d3:	88 d1                	mov    %dl,%cl
801020d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
801020d8:	f7 d2                	not    %edx
801020da:	21 ca                	and    %ecx,%edx
801020dc:	88 d1                	mov    %dl,%cl
801020de:	8b 55 f4             	mov    -0xc(%ebp),%edx
801020e1:	88 4c 02 18          	mov    %cl,0x18(%edx,%eax,1)
  log_write(bp);
801020e5:	83 ec 0c             	sub    $0xc,%esp
801020e8:	ff 75 f4             	pushl  -0xc(%ebp)
801020eb:	e8 20 1d 00 00       	call   80103e10 <log_write>
801020f0:	83 c4 10             	add    $0x10,%esp
  brelse(bp);
801020f3:	83 ec 0c             	sub    $0xc,%esp
801020f6:	ff 75 f4             	pushl  -0xc(%ebp)
801020f9:	e8 f3 eb ff ff       	call   80100cf1 <brelse>
801020fe:	83 c4 10             	add    $0x10,%esp
}
80102101:	c9                   	leave  
80102102:	c3                   	ret    

80102103 <iinit>:
  struct inode inode[NINODE];
} icache;

void
iinit(void)
{
80102103:	55                   	push   %ebp
80102104:	89 e5                	mov    %esp,%ebp
80102106:	83 ec 08             	sub    $0x8,%esp
  initlock(&icache.lock, "icache");
80102109:	83 ec 08             	sub    $0x8,%esp
8010210c:	68 ca 85 10 80       	push   $0x801085ca
80102111:	68 00 d4 10 80       	push   $0x8010d400
80102116:	e8 5f 39 00 00       	call   80105a7a <initlock>
8010211b:	83 c4 10             	add    $0x10,%esp
}
8010211e:	c9                   	leave  
8010211f:	c3                   	ret    

80102120 <ialloc>:
//PAGEBREAK!
// Allocate a new inode with the given type on device dev.
// A free inode has a type of zero.
struct inode*
ialloc(uint dev, short type)
{
80102120:	55                   	push   %ebp
80102121:	89 e5                	mov    %esp,%ebp
80102123:	83 ec 38             	sub    $0x38,%esp
80102126:	8b 45 0c             	mov    0xc(%ebp),%eax
80102129:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
  int inum;
  struct buf *bp;
  struct dinode *dip;
  struct superblock sb;

  readsb(dev, &sb);
8010212d:	8b 45 08             	mov    0x8(%ebp),%eax
80102130:	83 ec 08             	sub    $0x8,%esp
80102133:	8d 55 dc             	lea    -0x24(%ebp),%edx
80102136:	52                   	push   %edx
80102137:	50                   	push   %eax
80102138:	e8 ff fc ff ff       	call   80101e3c <readsb>
8010213d:	83 c4 10             	add    $0x10,%esp

  for(inum = 1; inum < sb.ninodes; inum++){
80102140:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
80102147:	e9 95 00 00 00       	jmp    801021e1 <ialloc+0xc1>
    bp = bread(dev, IBLOCK(inum));
8010214c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010214f:	c1 e8 03             	shr    $0x3,%eax
80102152:	83 c0 02             	add    $0x2,%eax
80102155:	83 ec 08             	sub    $0x8,%esp
80102158:	50                   	push   %eax
80102159:	ff 75 08             	pushl  0x8(%ebp)
8010215c:	e8 19 eb ff ff       	call   80100c7a <bread>
80102161:	83 c4 10             	add    $0x10,%esp
80102164:	89 45 f0             	mov    %eax,-0x10(%ebp)
    dip = (struct dinode*)bp->data + inum%IPB;
80102167:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010216a:	8d 50 18             	lea    0x18(%eax),%edx
8010216d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102170:	83 e0 07             	and    $0x7,%eax
80102173:	c1 e0 06             	shl    $0x6,%eax
80102176:	01 d0                	add    %edx,%eax
80102178:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if(dip->type == 0){  // a free inode
8010217b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010217e:	8b 00                	mov    (%eax),%eax
80102180:	66 85 c0             	test   %ax,%ax
80102183:	75 4b                	jne    801021d0 <ialloc+0xb0>
      memset(dip, 0, sizeof(*dip));
80102185:	83 ec 04             	sub    $0x4,%esp
80102188:	6a 40                	push   $0x40
8010218a:	6a 00                	push   $0x0
8010218c:	ff 75 ec             	pushl  -0x14(%ebp)
8010218f:	e8 cc 3b 00 00       	call   80105d60 <memset>
80102194:	83 c4 10             	add    $0x10,%esp
      dip->type = type;
80102197:	8b 55 ec             	mov    -0x14(%ebp),%edx
8010219a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8010219d:	66 89 02             	mov    %ax,(%edx)
      log_write(bp);   // mark it allocated on the disk
801021a0:	83 ec 0c             	sub    $0xc,%esp
801021a3:	ff 75 f0             	pushl  -0x10(%ebp)
801021a6:	e8 65 1c 00 00       	call   80103e10 <log_write>
801021ab:	83 c4 10             	add    $0x10,%esp
      brelse(bp);
801021ae:	83 ec 0c             	sub    $0xc,%esp
801021b1:	ff 75 f0             	pushl  -0x10(%ebp)
801021b4:	e8 38 eb ff ff       	call   80100cf1 <brelse>
801021b9:	83 c4 10             	add    $0x10,%esp
      return iget(dev, inum);
801021bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801021bf:	83 ec 08             	sub    $0x8,%esp
801021c2:	50                   	push   %eax
801021c3:	ff 75 08             	pushl  0x8(%ebp)
801021c6:	e8 eb 00 00 00       	call   801022b6 <iget>
801021cb:	83 c4 10             	add    $0x10,%esp
801021ce:	eb 2c                	jmp    801021fc <ialloc+0xdc>
    }
    brelse(bp);
801021d0:	83 ec 0c             	sub    $0xc,%esp
801021d3:	ff 75 f0             	pushl  -0x10(%ebp)
801021d6:	e8 16 eb ff ff       	call   80100cf1 <brelse>
801021db:	83 c4 10             	add    $0x10,%esp
  struct dinode *dip;
  struct superblock sb;

  readsb(dev, &sb);

  for(inum = 1; inum < sb.ninodes; inum++){
801021de:	ff 45 f4             	incl   -0xc(%ebp)
801021e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
801021e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801021e7:	39 c2                	cmp    %eax,%edx
801021e9:	0f 82 5d ff ff ff    	jb     8010214c <ialloc+0x2c>
      brelse(bp);
      return iget(dev, inum);
    }
    brelse(bp);
  }
  panic("ialloc: no inodes");
801021ef:	83 ec 0c             	sub    $0xc,%esp
801021f2:	68 d1 85 10 80       	push   $0x801085d1
801021f7:	e8 95 ee ff ff       	call   80101091 <panic>
}
801021fc:	c9                   	leave  
801021fd:	c3                   	ret    

801021fe <iupdate>:

// Copy a modified in-memory inode to disk.
void
iupdate(struct inode *ip)
{
801021fe:	55                   	push   %ebp
801021ff:	89 e5                	mov    %esp,%ebp
80102201:	83 ec 18             	sub    $0x18,%esp
  struct buf *bp;
  struct dinode *dip;

  bp = bread(ip->dev, IBLOCK(ip->inum));
80102204:	8b 45 08             	mov    0x8(%ebp),%eax
80102207:	8b 40 04             	mov    0x4(%eax),%eax
8010220a:	c1 e8 03             	shr    $0x3,%eax
8010220d:	8d 50 02             	lea    0x2(%eax),%edx
80102210:	8b 45 08             	mov    0x8(%ebp),%eax
80102213:	8b 00                	mov    (%eax),%eax
80102215:	83 ec 08             	sub    $0x8,%esp
80102218:	52                   	push   %edx
80102219:	50                   	push   %eax
8010221a:	e8 5b ea ff ff       	call   80100c7a <bread>
8010221f:	83 c4 10             	add    $0x10,%esp
80102222:	89 45 f4             	mov    %eax,-0xc(%ebp)
  dip = (struct dinode*)bp->data + ip->inum%IPB;
80102225:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102228:	8d 50 18             	lea    0x18(%eax),%edx
8010222b:	8b 45 08             	mov    0x8(%ebp),%eax
8010222e:	8b 40 04             	mov    0x4(%eax),%eax
80102231:	83 e0 07             	and    $0x7,%eax
80102234:	c1 e0 06             	shl    $0x6,%eax
80102237:	01 d0                	add    %edx,%eax
80102239:	89 45 f0             	mov    %eax,-0x10(%ebp)
  dip->type = ip->type;
8010223c:	8b 45 08             	mov    0x8(%ebp),%eax
8010223f:	8b 40 10             	mov    0x10(%eax),%eax
80102242:	8b 55 f0             	mov    -0x10(%ebp),%edx
80102245:	66 89 02             	mov    %ax,(%edx)
  dip->major = ip->major;
80102248:	8b 45 08             	mov    0x8(%ebp),%eax
8010224b:	66 8b 40 12          	mov    0x12(%eax),%ax
8010224f:	8b 55 f0             	mov    -0x10(%ebp),%edx
80102252:	66 89 42 02          	mov    %ax,0x2(%edx)
  dip->minor = ip->minor;
80102256:	8b 45 08             	mov    0x8(%ebp),%eax
80102259:	8b 40 14             	mov    0x14(%eax),%eax
8010225c:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010225f:	66 89 42 04          	mov    %ax,0x4(%edx)
  dip->nlink = ip->nlink;
80102263:	8b 45 08             	mov    0x8(%ebp),%eax
80102266:	66 8b 40 16          	mov    0x16(%eax),%ax
8010226a:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010226d:	66 89 42 06          	mov    %ax,0x6(%edx)
  dip->size = ip->size;
80102271:	8b 45 08             	mov    0x8(%ebp),%eax
80102274:	8b 50 18             	mov    0x18(%eax),%edx
80102277:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010227a:	89 50 08             	mov    %edx,0x8(%eax)
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
8010227d:	8b 45 08             	mov    0x8(%ebp),%eax
80102280:	8d 50 1c             	lea    0x1c(%eax),%edx
80102283:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102286:	83 c0 0c             	add    $0xc,%eax
80102289:	83 ec 04             	sub    $0x4,%esp
8010228c:	6a 34                	push   $0x34
8010228e:	52                   	push   %edx
8010228f:	50                   	push   %eax
80102290:	e8 84 3b 00 00       	call   80105e19 <memmove>
80102295:	83 c4 10             	add    $0x10,%esp
  log_write(bp);
80102298:	83 ec 0c             	sub    $0xc,%esp
8010229b:	ff 75 f4             	pushl  -0xc(%ebp)
8010229e:	e8 6d 1b 00 00       	call   80103e10 <log_write>
801022a3:	83 c4 10             	add    $0x10,%esp
  brelse(bp);
801022a6:	83 ec 0c             	sub    $0xc,%esp
801022a9:	ff 75 f4             	pushl  -0xc(%ebp)
801022ac:	e8 40 ea ff ff       	call   80100cf1 <brelse>
801022b1:	83 c4 10             	add    $0x10,%esp
}
801022b4:	c9                   	leave  
801022b5:	c3                   	ret    

801022b6 <iget>:
// Find the inode with number inum on device dev
// and return the in-memory copy. Does not lock
// the inode and does not read it from disk.
static struct inode*
iget(uint dev, uint inum)
{
801022b6:	55                   	push   %ebp
801022b7:	89 e5                	mov    %esp,%ebp
801022b9:	83 ec 18             	sub    $0x18,%esp
  struct inode *ip, *empty;

  acquire(&icache.lock);
801022bc:	83 ec 0c             	sub    $0xc,%esp
801022bf:	68 00 d4 10 80       	push   $0x8010d400
801022c4:	e8 d2 37 00 00       	call   80105a9b <acquire>
801022c9:	83 c4 10             	add    $0x10,%esp

  // Is the inode already cached?
  empty = 0;
801022cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
801022d3:	c7 45 f4 34 d4 10 80 	movl   $0x8010d434,-0xc(%ebp)
801022da:	eb 5d                	jmp    80102339 <iget+0x83>
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
801022dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801022df:	8b 40 08             	mov    0x8(%eax),%eax
801022e2:	85 c0                	test   %eax,%eax
801022e4:	7e 39                	jle    8010231f <iget+0x69>
801022e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801022e9:	8b 00                	mov    (%eax),%eax
801022eb:	3b 45 08             	cmp    0x8(%ebp),%eax
801022ee:	75 2f                	jne    8010231f <iget+0x69>
801022f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801022f3:	8b 40 04             	mov    0x4(%eax),%eax
801022f6:	3b 45 0c             	cmp    0xc(%ebp),%eax
801022f9:	75 24                	jne    8010231f <iget+0x69>
      ip->ref++;
801022fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801022fe:	8b 40 08             	mov    0x8(%eax),%eax
80102301:	8d 50 01             	lea    0x1(%eax),%edx
80102304:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102307:	89 50 08             	mov    %edx,0x8(%eax)
      release(&icache.lock);
8010230a:	83 ec 0c             	sub    $0xc,%esp
8010230d:	68 00 d4 10 80       	push   $0x8010d400
80102312:	e8 3e 38 00 00       	call   80105b55 <release>
80102317:	83 c4 10             	add    $0x10,%esp
      return ip;
8010231a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010231d:	eb 74                	jmp    80102393 <iget+0xdd>
    }
    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
8010231f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80102323:	75 10                	jne    80102335 <iget+0x7f>
80102325:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102328:	8b 40 08             	mov    0x8(%eax),%eax
8010232b:	85 c0                	test   %eax,%eax
8010232d:	75 06                	jne    80102335 <iget+0x7f>
      empty = ip;
8010232f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102332:	89 45 f0             	mov    %eax,-0x10(%ebp)

  acquire(&icache.lock);

  // Is the inode already cached?
  empty = 0;
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
80102335:	83 45 f4 50          	addl   $0x50,-0xc(%ebp)
80102339:	81 7d f4 d4 e3 10 80 	cmpl   $0x8010e3d4,-0xc(%ebp)
80102340:	72 9a                	jb     801022dc <iget+0x26>
    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
      empty = ip;
  }

  // Recycle an inode cache entry.
  if(empty == 0)
80102342:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80102346:	75 0d                	jne    80102355 <iget+0x9f>
    panic("iget: no inodes");
80102348:	83 ec 0c             	sub    $0xc,%esp
8010234b:	68 e3 85 10 80       	push   $0x801085e3
80102350:	e8 3c ed ff ff       	call   80101091 <panic>

  ip = empty;
80102355:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102358:	89 45 f4             	mov    %eax,-0xc(%ebp)
  ip->dev = dev;
8010235b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010235e:	8b 55 08             	mov    0x8(%ebp),%edx
80102361:	89 10                	mov    %edx,(%eax)
  ip->inum = inum;
80102363:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102366:	8b 55 0c             	mov    0xc(%ebp),%edx
80102369:	89 50 04             	mov    %edx,0x4(%eax)
  ip->ref = 1;
8010236c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010236f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
  ip->flags = 0;
80102376:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102379:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
  release(&icache.lock);
80102380:	83 ec 0c             	sub    $0xc,%esp
80102383:	68 00 d4 10 80       	push   $0x8010d400
80102388:	e8 c8 37 00 00       	call   80105b55 <release>
8010238d:	83 c4 10             	add    $0x10,%esp

  return ip;
80102390:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80102393:	c9                   	leave  
80102394:	c3                   	ret    

80102395 <idup>:

// Increment reference count for ip.
// Returns ip to enable ip = idup(ip1) idiom.
struct inode*
idup(struct inode *ip)
{
80102395:	55                   	push   %ebp
80102396:	89 e5                	mov    %esp,%ebp
80102398:	83 ec 08             	sub    $0x8,%esp
  acquire(&icache.lock);
8010239b:	83 ec 0c             	sub    $0xc,%esp
8010239e:	68 00 d4 10 80       	push   $0x8010d400
801023a3:	e8 f3 36 00 00       	call   80105a9b <acquire>
801023a8:	83 c4 10             	add    $0x10,%esp
  ip->ref++;
801023ab:	8b 45 08             	mov    0x8(%ebp),%eax
801023ae:	8b 40 08             	mov    0x8(%eax),%eax
801023b1:	8d 50 01             	lea    0x1(%eax),%edx
801023b4:	8b 45 08             	mov    0x8(%ebp),%eax
801023b7:	89 50 08             	mov    %edx,0x8(%eax)
  release(&icache.lock);
801023ba:	83 ec 0c             	sub    $0xc,%esp
801023bd:	68 00 d4 10 80       	push   $0x8010d400
801023c2:	e8 8e 37 00 00       	call   80105b55 <release>
801023c7:	83 c4 10             	add    $0x10,%esp
  return ip;
801023ca:	8b 45 08             	mov    0x8(%ebp),%eax
}
801023cd:	c9                   	leave  
801023ce:	c3                   	ret    

801023cf <ilock>:

// Lock the given inode.
// Reads the inode from disk if necessary.
void
ilock(struct inode *ip)
{
801023cf:	55                   	push   %ebp
801023d0:	89 e5                	mov    %esp,%ebp
801023d2:	83 ec 18             	sub    $0x18,%esp
  struct buf *bp;
  struct dinode *dip;

  if(ip == 0 || ip->ref < 1)
801023d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801023d9:	74 0a                	je     801023e5 <ilock+0x16>
801023db:	8b 45 08             	mov    0x8(%ebp),%eax
801023de:	8b 40 08             	mov    0x8(%eax),%eax
801023e1:	85 c0                	test   %eax,%eax
801023e3:	7f 0d                	jg     801023f2 <ilock+0x23>
    panic("ilock");
801023e5:	83 ec 0c             	sub    $0xc,%esp
801023e8:	68 f3 85 10 80       	push   $0x801085f3
801023ed:	e8 9f ec ff ff       	call   80101091 <panic>

  acquire(&icache.lock);
801023f2:	83 ec 0c             	sub    $0xc,%esp
801023f5:	68 00 d4 10 80       	push   $0x8010d400
801023fa:	e8 9c 36 00 00       	call   80105a9b <acquire>
801023ff:	83 c4 10             	add    $0x10,%esp
  while(ip->flags & I_BUSY)
80102402:	eb 13                	jmp    80102417 <ilock+0x48>
    sleep(ip, &icache.lock);
80102404:	83 ec 08             	sub    $0x8,%esp
80102407:	68 00 d4 10 80       	push   $0x8010d400
8010240c:	ff 75 08             	pushl  0x8(%ebp)
8010240f:	e8 9b 33 00 00       	call   801057af <sleep>
80102414:	83 c4 10             	add    $0x10,%esp

  if(ip == 0 || ip->ref < 1)
    panic("ilock");

  acquire(&icache.lock);
  while(ip->flags & I_BUSY)
80102417:	8b 45 08             	mov    0x8(%ebp),%eax
8010241a:	8b 40 0c             	mov    0xc(%eax),%eax
8010241d:	83 e0 01             	and    $0x1,%eax
80102420:	85 c0                	test   %eax,%eax
80102422:	75 e0                	jne    80102404 <ilock+0x35>
    sleep(ip, &icache.lock);
  ip->flags |= I_BUSY;
80102424:	8b 45 08             	mov    0x8(%ebp),%eax
80102427:	8b 40 0c             	mov    0xc(%eax),%eax
8010242a:	83 c8 01             	or     $0x1,%eax
8010242d:	89 c2                	mov    %eax,%edx
8010242f:	8b 45 08             	mov    0x8(%ebp),%eax
80102432:	89 50 0c             	mov    %edx,0xc(%eax)
  release(&icache.lock);
80102435:	83 ec 0c             	sub    $0xc,%esp
80102438:	68 00 d4 10 80       	push   $0x8010d400
8010243d:	e8 13 37 00 00       	call   80105b55 <release>
80102442:	83 c4 10             	add    $0x10,%esp

  if(!(ip->flags & I_VALID)){
80102445:	8b 45 08             	mov    0x8(%ebp),%eax
80102448:	8b 40 0c             	mov    0xc(%eax),%eax
8010244b:	83 e0 02             	and    $0x2,%eax
8010244e:	85 c0                	test   %eax,%eax
80102450:	0f 85 cb 00 00 00    	jne    80102521 <ilock+0x152>
    bp = bread(ip->dev, IBLOCK(ip->inum));
80102456:	8b 45 08             	mov    0x8(%ebp),%eax
80102459:	8b 40 04             	mov    0x4(%eax),%eax
8010245c:	c1 e8 03             	shr    $0x3,%eax
8010245f:	8d 50 02             	lea    0x2(%eax),%edx
80102462:	8b 45 08             	mov    0x8(%ebp),%eax
80102465:	8b 00                	mov    (%eax),%eax
80102467:	83 ec 08             	sub    $0x8,%esp
8010246a:	52                   	push   %edx
8010246b:	50                   	push   %eax
8010246c:	e8 09 e8 ff ff       	call   80100c7a <bread>
80102471:	83 c4 10             	add    $0x10,%esp
80102474:	89 45 f4             	mov    %eax,-0xc(%ebp)
    dip = (struct dinode*)bp->data + ip->inum%IPB;
80102477:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010247a:	8d 50 18             	lea    0x18(%eax),%edx
8010247d:	8b 45 08             	mov    0x8(%ebp),%eax
80102480:	8b 40 04             	mov    0x4(%eax),%eax
80102483:	83 e0 07             	and    $0x7,%eax
80102486:	c1 e0 06             	shl    $0x6,%eax
80102489:	01 d0                	add    %edx,%eax
8010248b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ip->type = dip->type;
8010248e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102491:	8b 00                	mov    (%eax),%eax
80102493:	8b 55 08             	mov    0x8(%ebp),%edx
80102496:	66 89 42 10          	mov    %ax,0x10(%edx)
    ip->major = dip->major;
8010249a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010249d:	66 8b 40 02          	mov    0x2(%eax),%ax
801024a1:	8b 55 08             	mov    0x8(%ebp),%edx
801024a4:	66 89 42 12          	mov    %ax,0x12(%edx)
    ip->minor = dip->minor;
801024a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024ab:	8b 40 04             	mov    0x4(%eax),%eax
801024ae:	8b 55 08             	mov    0x8(%ebp),%edx
801024b1:	66 89 42 14          	mov    %ax,0x14(%edx)
    ip->nlink = dip->nlink;
801024b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024b8:	66 8b 40 06          	mov    0x6(%eax),%ax
801024bc:	8b 55 08             	mov    0x8(%ebp),%edx
801024bf:	66 89 42 16          	mov    %ax,0x16(%edx)
    ip->size = dip->size;
801024c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024c6:	8b 50 08             	mov    0x8(%eax),%edx
801024c9:	8b 45 08             	mov    0x8(%ebp),%eax
801024cc:	89 50 18             	mov    %edx,0x18(%eax)
    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
801024cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024d2:	8d 50 0c             	lea    0xc(%eax),%edx
801024d5:	8b 45 08             	mov    0x8(%ebp),%eax
801024d8:	83 c0 1c             	add    $0x1c,%eax
801024db:	83 ec 04             	sub    $0x4,%esp
801024de:	6a 34                	push   $0x34
801024e0:	52                   	push   %edx
801024e1:	50                   	push   %eax
801024e2:	e8 32 39 00 00       	call   80105e19 <memmove>
801024e7:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
801024ea:	83 ec 0c             	sub    $0xc,%esp
801024ed:	ff 75 f4             	pushl  -0xc(%ebp)
801024f0:	e8 fc e7 ff ff       	call   80100cf1 <brelse>
801024f5:	83 c4 10             	add    $0x10,%esp
    ip->flags |= I_VALID;
801024f8:	8b 45 08             	mov    0x8(%ebp),%eax
801024fb:	8b 40 0c             	mov    0xc(%eax),%eax
801024fe:	83 c8 02             	or     $0x2,%eax
80102501:	89 c2                	mov    %eax,%edx
80102503:	8b 45 08             	mov    0x8(%ebp),%eax
80102506:	89 50 0c             	mov    %edx,0xc(%eax)
    if(ip->type == 0)
80102509:	8b 45 08             	mov    0x8(%ebp),%eax
8010250c:	8b 40 10             	mov    0x10(%eax),%eax
8010250f:	66 85 c0             	test   %ax,%ax
80102512:	75 0d                	jne    80102521 <ilock+0x152>
      panic("ilock: no type");
80102514:	83 ec 0c             	sub    $0xc,%esp
80102517:	68 f9 85 10 80       	push   $0x801085f9
8010251c:	e8 70 eb ff ff       	call   80101091 <panic>
  }
}
80102521:	c9                   	leave  
80102522:	c3                   	ret    

80102523 <iunlock>:

// Unlock the given inode.
void
iunlock(struct inode *ip)
{
80102523:	55                   	push   %ebp
80102524:	89 e5                	mov    %esp,%ebp
80102526:	83 ec 08             	sub    $0x8,%esp
  if(ip == 0 || !(ip->flags & I_BUSY) || ip->ref < 1)
80102529:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
8010252d:	74 17                	je     80102546 <iunlock+0x23>
8010252f:	8b 45 08             	mov    0x8(%ebp),%eax
80102532:	8b 40 0c             	mov    0xc(%eax),%eax
80102535:	83 e0 01             	and    $0x1,%eax
80102538:	85 c0                	test   %eax,%eax
8010253a:	74 0a                	je     80102546 <iunlock+0x23>
8010253c:	8b 45 08             	mov    0x8(%ebp),%eax
8010253f:	8b 40 08             	mov    0x8(%eax),%eax
80102542:	85 c0                	test   %eax,%eax
80102544:	7f 0d                	jg     80102553 <iunlock+0x30>
    panic("iunlock");
80102546:	83 ec 0c             	sub    $0xc,%esp
80102549:	68 08 86 10 80       	push   $0x80108608
8010254e:	e8 3e eb ff ff       	call   80101091 <panic>

  acquire(&icache.lock);
80102553:	83 ec 0c             	sub    $0xc,%esp
80102556:	68 00 d4 10 80       	push   $0x8010d400
8010255b:	e8 3b 35 00 00       	call   80105a9b <acquire>
80102560:	83 c4 10             	add    $0x10,%esp
  ip->flags &= ~I_BUSY;
80102563:	8b 45 08             	mov    0x8(%ebp),%eax
80102566:	8b 40 0c             	mov    0xc(%eax),%eax
80102569:	83 e0 fe             	and    $0xfffffffe,%eax
8010256c:	89 c2                	mov    %eax,%edx
8010256e:	8b 45 08             	mov    0x8(%ebp),%eax
80102571:	89 50 0c             	mov    %edx,0xc(%eax)
  wakeup(ip);
80102574:	83 ec 0c             	sub    $0xc,%esp
80102577:	ff 75 08             	pushl  0x8(%ebp)
8010257a:	e8 19 33 00 00       	call   80105898 <wakeup>
8010257f:	83 c4 10             	add    $0x10,%esp
  release(&icache.lock);
80102582:	83 ec 0c             	sub    $0xc,%esp
80102585:	68 00 d4 10 80       	push   $0x8010d400
8010258a:	e8 c6 35 00 00       	call   80105b55 <release>
8010258f:	83 c4 10             	add    $0x10,%esp
}
80102592:	c9                   	leave  
80102593:	c3                   	ret    

80102594 <iput>:
// be recycled.
// If that was the last reference and the inode has no links
// to it, free the inode (and its content) on disk.
void
iput(struct inode *ip)
{
80102594:	55                   	push   %ebp
80102595:	89 e5                	mov    %esp,%ebp
80102597:	83 ec 08             	sub    $0x8,%esp
  acquire(&icache.lock);
8010259a:	83 ec 0c             	sub    $0xc,%esp
8010259d:	68 00 d4 10 80       	push   $0x8010d400
801025a2:	e8 f4 34 00 00       	call   80105a9b <acquire>
801025a7:	83 c4 10             	add    $0x10,%esp
  if(ip->ref == 1 && (ip->flags & I_VALID) && ip->nlink == 0){
801025aa:	8b 45 08             	mov    0x8(%ebp),%eax
801025ad:	8b 40 08             	mov    0x8(%eax),%eax
801025b0:	83 f8 01             	cmp    $0x1,%eax
801025b3:	0f 85 a9 00 00 00    	jne    80102662 <iput+0xce>
801025b9:	8b 45 08             	mov    0x8(%ebp),%eax
801025bc:	8b 40 0c             	mov    0xc(%eax),%eax
801025bf:	83 e0 02             	and    $0x2,%eax
801025c2:	85 c0                	test   %eax,%eax
801025c4:	0f 84 98 00 00 00    	je     80102662 <iput+0xce>
801025ca:	8b 45 08             	mov    0x8(%ebp),%eax
801025cd:	66 8b 40 16          	mov    0x16(%eax),%ax
801025d1:	66 85 c0             	test   %ax,%ax
801025d4:	0f 85 88 00 00 00    	jne    80102662 <iput+0xce>
    // inode has no links: truncate and free inode.
    if(ip->flags & I_BUSY)
801025da:	8b 45 08             	mov    0x8(%ebp),%eax
801025dd:	8b 40 0c             	mov    0xc(%eax),%eax
801025e0:	83 e0 01             	and    $0x1,%eax
801025e3:	85 c0                	test   %eax,%eax
801025e5:	74 0d                	je     801025f4 <iput+0x60>
      panic("iput busy");
801025e7:	83 ec 0c             	sub    $0xc,%esp
801025ea:	68 10 86 10 80       	push   $0x80108610
801025ef:	e8 9d ea ff ff       	call   80101091 <panic>
    ip->flags |= I_BUSY;
801025f4:	8b 45 08             	mov    0x8(%ebp),%eax
801025f7:	8b 40 0c             	mov    0xc(%eax),%eax
801025fa:	83 c8 01             	or     $0x1,%eax
801025fd:	89 c2                	mov    %eax,%edx
801025ff:	8b 45 08             	mov    0x8(%ebp),%eax
80102602:	89 50 0c             	mov    %edx,0xc(%eax)
    release(&icache.lock);
80102605:	83 ec 0c             	sub    $0xc,%esp
80102608:	68 00 d4 10 80       	push   $0x8010d400
8010260d:	e8 43 35 00 00       	call   80105b55 <release>
80102612:	83 c4 10             	add    $0x10,%esp
    itrunc(ip);
80102615:	83 ec 0c             	sub    $0xc,%esp
80102618:	ff 75 08             	pushl  0x8(%ebp)
8010261b:	e8 a6 01 00 00       	call   801027c6 <itrunc>
80102620:	83 c4 10             	add    $0x10,%esp
    ip->type = 0;
80102623:	8b 45 08             	mov    0x8(%ebp),%eax
80102626:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    iupdate(ip);
8010262c:	83 ec 0c             	sub    $0xc,%esp
8010262f:	ff 75 08             	pushl  0x8(%ebp)
80102632:	e8 c7 fb ff ff       	call   801021fe <iupdate>
80102637:	83 c4 10             	add    $0x10,%esp
    acquire(&icache.lock);
8010263a:	83 ec 0c             	sub    $0xc,%esp
8010263d:	68 00 d4 10 80       	push   $0x8010d400
80102642:	e8 54 34 00 00       	call   80105a9b <acquire>
80102647:	83 c4 10             	add    $0x10,%esp
    ip->flags = 0;
8010264a:	8b 45 08             	mov    0x8(%ebp),%eax
8010264d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    wakeup(ip);
80102654:	83 ec 0c             	sub    $0xc,%esp
80102657:	ff 75 08             	pushl  0x8(%ebp)
8010265a:	e8 39 32 00 00       	call   80105898 <wakeup>
8010265f:	83 c4 10             	add    $0x10,%esp
  }
  ip->ref--;
80102662:	8b 45 08             	mov    0x8(%ebp),%eax
80102665:	8b 40 08             	mov    0x8(%eax),%eax
80102668:	8d 50 ff             	lea    -0x1(%eax),%edx
8010266b:	8b 45 08             	mov    0x8(%ebp),%eax
8010266e:	89 50 08             	mov    %edx,0x8(%eax)
  release(&icache.lock);
80102671:	83 ec 0c             	sub    $0xc,%esp
80102674:	68 00 d4 10 80       	push   $0x8010d400
80102679:	e8 d7 34 00 00       	call   80105b55 <release>
8010267e:	83 c4 10             	add    $0x10,%esp
}
80102681:	c9                   	leave  
80102682:	c3                   	ret    

80102683 <iunlockput>:

// Common idiom: unlock, then put.
void
iunlockput(struct inode *ip)
{
80102683:	55                   	push   %ebp
80102684:	89 e5                	mov    %esp,%ebp
80102686:	83 ec 08             	sub    $0x8,%esp
  iunlock(ip);
80102689:	83 ec 0c             	sub    $0xc,%esp
8010268c:	ff 75 08             	pushl  0x8(%ebp)
8010268f:	e8 8f fe ff ff       	call   80102523 <iunlock>
80102694:	83 c4 10             	add    $0x10,%esp
  iput(ip);
80102697:	83 ec 0c             	sub    $0xc,%esp
8010269a:	ff 75 08             	pushl  0x8(%ebp)
8010269d:	e8 f2 fe ff ff       	call   80102594 <iput>
801026a2:	83 c4 10             	add    $0x10,%esp
}
801026a5:	c9                   	leave  
801026a6:	c3                   	ret    

801026a7 <bmap>:

// Return the disk block address of the nth block in inode ip.
// If there is no such block, bmap allocates one.
static uint
bmap(struct inode *ip, uint bn)
{
801026a7:	55                   	push   %ebp
801026a8:	89 e5                	mov    %esp,%ebp
801026aa:	53                   	push   %ebx
801026ab:	83 ec 14             	sub    $0x14,%esp
  uint addr, *a;
  struct buf *bp;

  if(bn < NDIRECT){
801026ae:	83 7d 0c 0b          	cmpl   $0xb,0xc(%ebp)
801026b2:	77 42                	ja     801026f6 <bmap+0x4f>
    if((addr = ip->addrs[bn]) == 0)
801026b4:	8b 45 08             	mov    0x8(%ebp),%eax
801026b7:	8b 55 0c             	mov    0xc(%ebp),%edx
801026ba:	83 c2 04             	add    $0x4,%edx
801026bd:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
801026c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
801026c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801026c8:	75 24                	jne    801026ee <bmap+0x47>
      ip->addrs[bn] = addr = balloc(ip->dev);
801026ca:	8b 45 08             	mov    0x8(%ebp),%eax
801026cd:	8b 00                	mov    (%eax),%eax
801026cf:	83 ec 0c             	sub    $0xc,%esp
801026d2:	50                   	push   %eax
801026d3:	e8 f8 f7 ff ff       	call   80101ed0 <balloc>
801026d8:	83 c4 10             	add    $0x10,%esp
801026db:	89 45 f4             	mov    %eax,-0xc(%ebp)
801026de:	8b 45 08             	mov    0x8(%ebp),%eax
801026e1:	8b 55 0c             	mov    0xc(%ebp),%edx
801026e4:	8d 4a 04             	lea    0x4(%edx),%ecx
801026e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
801026ea:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
    return addr;
801026ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
801026f1:	e9 cb 00 00 00       	jmp    801027c1 <bmap+0x11a>
  }
  bn -= NDIRECT;
801026f6:	83 6d 0c 0c          	subl   $0xc,0xc(%ebp)

  if(bn < NINDIRECT){
801026fa:	83 7d 0c 7f          	cmpl   $0x7f,0xc(%ebp)
801026fe:	0f 87 b0 00 00 00    	ja     801027b4 <bmap+0x10d>
    // Load indirect block, allocating if necessary.
    if((addr = ip->addrs[NDIRECT]) == 0)
80102704:	8b 45 08             	mov    0x8(%ebp),%eax
80102707:	8b 40 4c             	mov    0x4c(%eax),%eax
8010270a:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010270d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80102711:	75 1d                	jne    80102730 <bmap+0x89>
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
80102713:	8b 45 08             	mov    0x8(%ebp),%eax
80102716:	8b 00                	mov    (%eax),%eax
80102718:	83 ec 0c             	sub    $0xc,%esp
8010271b:	50                   	push   %eax
8010271c:	e8 af f7 ff ff       	call   80101ed0 <balloc>
80102721:	83 c4 10             	add    $0x10,%esp
80102724:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102727:	8b 45 08             	mov    0x8(%ebp),%eax
8010272a:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010272d:	89 50 4c             	mov    %edx,0x4c(%eax)
    bp = bread(ip->dev, addr);
80102730:	8b 45 08             	mov    0x8(%ebp),%eax
80102733:	8b 00                	mov    (%eax),%eax
80102735:	83 ec 08             	sub    $0x8,%esp
80102738:	ff 75 f4             	pushl  -0xc(%ebp)
8010273b:	50                   	push   %eax
8010273c:	e8 39 e5 ff ff       	call   80100c7a <bread>
80102741:	83 c4 10             	add    $0x10,%esp
80102744:	89 45 f0             	mov    %eax,-0x10(%ebp)
    a = (uint*)bp->data;
80102747:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010274a:	83 c0 18             	add    $0x18,%eax
8010274d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if((addr = a[bn]) == 0){
80102750:	8b 45 0c             	mov    0xc(%ebp),%eax
80102753:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
8010275a:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010275d:	01 d0                	add    %edx,%eax
8010275f:	8b 00                	mov    (%eax),%eax
80102761:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102764:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80102768:	75 37                	jne    801027a1 <bmap+0xfa>
      a[bn] = addr = balloc(ip->dev);
8010276a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010276d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102774:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102777:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
8010277a:	8b 45 08             	mov    0x8(%ebp),%eax
8010277d:	8b 00                	mov    (%eax),%eax
8010277f:	83 ec 0c             	sub    $0xc,%esp
80102782:	50                   	push   %eax
80102783:	e8 48 f7 ff ff       	call   80101ed0 <balloc>
80102788:	83 c4 10             	add    $0x10,%esp
8010278b:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010278e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102791:	89 03                	mov    %eax,(%ebx)
      log_write(bp);
80102793:	83 ec 0c             	sub    $0xc,%esp
80102796:	ff 75 f0             	pushl  -0x10(%ebp)
80102799:	e8 72 16 00 00       	call   80103e10 <log_write>
8010279e:	83 c4 10             	add    $0x10,%esp
    }
    brelse(bp);
801027a1:	83 ec 0c             	sub    $0xc,%esp
801027a4:	ff 75 f0             	pushl  -0x10(%ebp)
801027a7:	e8 45 e5 ff ff       	call   80100cf1 <brelse>
801027ac:	83 c4 10             	add    $0x10,%esp
    return addr;
801027af:	8b 45 f4             	mov    -0xc(%ebp),%eax
801027b2:	eb 0d                	jmp    801027c1 <bmap+0x11a>
  }

  panic("bmap: out of range");
801027b4:	83 ec 0c             	sub    $0xc,%esp
801027b7:	68 1a 86 10 80       	push   $0x8010861a
801027bc:	e8 d0 e8 ff ff       	call   80101091 <panic>
}
801027c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801027c4:	c9                   	leave  
801027c5:	c3                   	ret    

801027c6 <itrunc>:
// to it (no directory entries referring to it)
// and has no in-memory reference to it (is
// not an open file or current directory).
static void
itrunc(struct inode *ip)
{
801027c6:	55                   	push   %ebp
801027c7:	89 e5                	mov    %esp,%ebp
801027c9:	83 ec 18             	sub    $0x18,%esp
  int i, j;
  struct buf *bp;
  uint *a;

  for(i = 0; i < NDIRECT; i++){
801027cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801027d3:	eb 44                	jmp    80102819 <itrunc+0x53>
    if(ip->addrs[i]){
801027d5:	8b 45 08             	mov    0x8(%ebp),%eax
801027d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
801027db:	83 c2 04             	add    $0x4,%edx
801027de:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
801027e2:	85 c0                	test   %eax,%eax
801027e4:	74 30                	je     80102816 <itrunc+0x50>
      bfree(ip->dev, ip->addrs[i]);
801027e6:	8b 45 08             	mov    0x8(%ebp),%eax
801027e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
801027ec:	83 c2 04             	add    $0x4,%edx
801027ef:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
801027f3:	8b 55 08             	mov    0x8(%ebp),%edx
801027f6:	8b 12                	mov    (%edx),%edx
801027f8:	83 ec 08             	sub    $0x8,%esp
801027fb:	50                   	push   %eax
801027fc:	52                   	push   %edx
801027fd:	e8 28 f8 ff ff       	call   8010202a <bfree>
80102802:	83 c4 10             	add    $0x10,%esp
      ip->addrs[i] = 0;
80102805:	8b 45 08             	mov    0x8(%ebp),%eax
80102808:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010280b:	83 c2 04             	add    $0x4,%edx
8010280e:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
80102815:	00 
{
  int i, j;
  struct buf *bp;
  uint *a;

  for(i = 0; i < NDIRECT; i++){
80102816:	ff 45 f4             	incl   -0xc(%ebp)
80102819:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
8010281d:	7e b6                	jle    801027d5 <itrunc+0xf>
      bfree(ip->dev, ip->addrs[i]);
      ip->addrs[i] = 0;
    }
  }
  
  if(ip->addrs[NDIRECT]){
8010281f:	8b 45 08             	mov    0x8(%ebp),%eax
80102822:	8b 40 4c             	mov    0x4c(%eax),%eax
80102825:	85 c0                	test   %eax,%eax
80102827:	0f 84 a0 00 00 00    	je     801028cd <itrunc+0x107>
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
8010282d:	8b 45 08             	mov    0x8(%ebp),%eax
80102830:	8b 50 4c             	mov    0x4c(%eax),%edx
80102833:	8b 45 08             	mov    0x8(%ebp),%eax
80102836:	8b 00                	mov    (%eax),%eax
80102838:	83 ec 08             	sub    $0x8,%esp
8010283b:	52                   	push   %edx
8010283c:	50                   	push   %eax
8010283d:	e8 38 e4 ff ff       	call   80100c7a <bread>
80102842:	83 c4 10             	add    $0x10,%esp
80102845:	89 45 ec             	mov    %eax,-0x14(%ebp)
    a = (uint*)bp->data;
80102848:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010284b:	83 c0 18             	add    $0x18,%eax
8010284e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for(j = 0; j < NINDIRECT; j++){
80102851:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80102858:	eb 3b                	jmp    80102895 <itrunc+0xcf>
      if(a[j])
8010285a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010285d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102864:	8b 45 e8             	mov    -0x18(%ebp),%eax
80102867:	01 d0                	add    %edx,%eax
80102869:	8b 00                	mov    (%eax),%eax
8010286b:	85 c0                	test   %eax,%eax
8010286d:	74 23                	je     80102892 <itrunc+0xcc>
        bfree(ip->dev, a[j]);
8010286f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102872:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102879:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010287c:	01 d0                	add    %edx,%eax
8010287e:	8b 00                	mov    (%eax),%eax
80102880:	8b 55 08             	mov    0x8(%ebp),%edx
80102883:	8b 12                	mov    (%edx),%edx
80102885:	83 ec 08             	sub    $0x8,%esp
80102888:	50                   	push   %eax
80102889:	52                   	push   %edx
8010288a:	e8 9b f7 ff ff       	call   8010202a <bfree>
8010288f:	83 c4 10             	add    $0x10,%esp
  }
  
  if(ip->addrs[NDIRECT]){
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
    a = (uint*)bp->data;
    for(j = 0; j < NINDIRECT; j++){
80102892:	ff 45 f0             	incl   -0x10(%ebp)
80102895:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102898:	83 f8 7f             	cmp    $0x7f,%eax
8010289b:	76 bd                	jbe    8010285a <itrunc+0x94>
      if(a[j])
        bfree(ip->dev, a[j]);
    }
    brelse(bp);
8010289d:	83 ec 0c             	sub    $0xc,%esp
801028a0:	ff 75 ec             	pushl  -0x14(%ebp)
801028a3:	e8 49 e4 ff ff       	call   80100cf1 <brelse>
801028a8:	83 c4 10             	add    $0x10,%esp
    bfree(ip->dev, ip->addrs[NDIRECT]);
801028ab:	8b 45 08             	mov    0x8(%ebp),%eax
801028ae:	8b 40 4c             	mov    0x4c(%eax),%eax
801028b1:	8b 55 08             	mov    0x8(%ebp),%edx
801028b4:	8b 12                	mov    (%edx),%edx
801028b6:	83 ec 08             	sub    $0x8,%esp
801028b9:	50                   	push   %eax
801028ba:	52                   	push   %edx
801028bb:	e8 6a f7 ff ff       	call   8010202a <bfree>
801028c0:	83 c4 10             	add    $0x10,%esp
    ip->addrs[NDIRECT] = 0;
801028c3:	8b 45 08             	mov    0x8(%ebp),%eax
801028c6:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
  }

  ip->size = 0;
801028cd:	8b 45 08             	mov    0x8(%ebp),%eax
801028d0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
  iupdate(ip);
801028d7:	83 ec 0c             	sub    $0xc,%esp
801028da:	ff 75 08             	pushl  0x8(%ebp)
801028dd:	e8 1c f9 ff ff       	call   801021fe <iupdate>
801028e2:	83 c4 10             	add    $0x10,%esp
}
801028e5:	c9                   	leave  
801028e6:	c3                   	ret    

801028e7 <stati>:

// Copy stat information from inode.
void
stati(struct inode *ip, struct stat *st)
{
801028e7:	55                   	push   %ebp
801028e8:	89 e5                	mov    %esp,%ebp
  st->dev = ip->dev;
801028ea:	8b 45 08             	mov    0x8(%ebp),%eax
801028ed:	8b 00                	mov    (%eax),%eax
801028ef:	89 c2                	mov    %eax,%edx
801028f1:	8b 45 0c             	mov    0xc(%ebp),%eax
801028f4:	89 50 04             	mov    %edx,0x4(%eax)
  st->ino = ip->inum;
801028f7:	8b 45 08             	mov    0x8(%ebp),%eax
801028fa:	8b 50 04             	mov    0x4(%eax),%edx
801028fd:	8b 45 0c             	mov    0xc(%ebp),%eax
80102900:	89 50 08             	mov    %edx,0x8(%eax)
  st->type = ip->type;
80102903:	8b 45 08             	mov    0x8(%ebp),%eax
80102906:	8b 40 10             	mov    0x10(%eax),%eax
80102909:	8b 55 0c             	mov    0xc(%ebp),%edx
8010290c:	66 89 02             	mov    %ax,(%edx)
  st->nlink = ip->nlink;
8010290f:	8b 45 08             	mov    0x8(%ebp),%eax
80102912:	66 8b 40 16          	mov    0x16(%eax),%ax
80102916:	8b 55 0c             	mov    0xc(%ebp),%edx
80102919:	66 89 42 0c          	mov    %ax,0xc(%edx)
  st->size = ip->size;
8010291d:	8b 45 08             	mov    0x8(%ebp),%eax
80102920:	8b 50 18             	mov    0x18(%eax),%edx
80102923:	8b 45 0c             	mov    0xc(%ebp),%eax
80102926:	89 50 10             	mov    %edx,0x10(%eax)
}
80102929:	5d                   	pop    %ebp
8010292a:	c3                   	ret    

8010292b <readi>:

//PAGEBREAK!
// Read data from inode.
int
readi(struct inode *ip, char *dst, uint off, uint n)
{
8010292b:	55                   	push   %ebp
8010292c:	89 e5                	mov    %esp,%ebp
8010292e:	83 ec 18             	sub    $0x18,%esp
  uint tot, m;
  struct buf *bp;

  if(ip->type == T_DEV){
80102931:	8b 45 08             	mov    0x8(%ebp),%eax
80102934:	8b 40 10             	mov    0x10(%eax),%eax
80102937:	66 83 f8 03          	cmp    $0x3,%ax
8010293b:	75 5c                	jne    80102999 <readi+0x6e>
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
8010293d:	8b 45 08             	mov    0x8(%ebp),%eax
80102940:	66 8b 40 12          	mov    0x12(%eax),%ax
80102944:	66 85 c0             	test   %ax,%ax
80102947:	78 20                	js     80102969 <readi+0x3e>
80102949:	8b 45 08             	mov    0x8(%ebp),%eax
8010294c:	66 8b 40 12          	mov    0x12(%eax),%ax
80102950:	66 83 f8 09          	cmp    $0x9,%ax
80102954:	7f 13                	jg     80102969 <readi+0x3e>
80102956:	8b 45 08             	mov    0x8(%ebp),%eax
80102959:	66 8b 40 12          	mov    0x12(%eax),%ax
8010295d:	98                   	cwtl   
8010295e:	8b 04 c5 00 ca 10 80 	mov    -0x7fef3600(,%eax,8),%eax
80102965:	85 c0                	test   %eax,%eax
80102967:	75 0a                	jne    80102973 <readi+0x48>
      return -1;
80102969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010296e:	e9 16 01 00 00       	jmp    80102a89 <readi+0x15e>
    return devsw[ip->major].read(ip, dst, n);
80102973:	8b 45 08             	mov    0x8(%ebp),%eax
80102976:	66 8b 40 12          	mov    0x12(%eax),%ax
8010297a:	98                   	cwtl   
8010297b:	8b 04 c5 00 ca 10 80 	mov    -0x7fef3600(,%eax,8),%eax
80102982:	8b 55 14             	mov    0x14(%ebp),%edx
80102985:	83 ec 04             	sub    $0x4,%esp
80102988:	52                   	push   %edx
80102989:	ff 75 0c             	pushl  0xc(%ebp)
8010298c:	ff 75 08             	pushl  0x8(%ebp)
8010298f:	ff d0                	call   *%eax
80102991:	83 c4 10             	add    $0x10,%esp
80102994:	e9 f0 00 00 00       	jmp    80102a89 <readi+0x15e>
  }

  if(off > ip->size || off + n < off)
80102999:	8b 45 08             	mov    0x8(%ebp),%eax
8010299c:	8b 40 18             	mov    0x18(%eax),%eax
8010299f:	3b 45 10             	cmp    0x10(%ebp),%eax
801029a2:	72 0d                	jb     801029b1 <readi+0x86>
801029a4:	8b 55 10             	mov    0x10(%ebp),%edx
801029a7:	8b 45 14             	mov    0x14(%ebp),%eax
801029aa:	01 d0                	add    %edx,%eax
801029ac:	3b 45 10             	cmp    0x10(%ebp),%eax
801029af:	73 0a                	jae    801029bb <readi+0x90>
    return -1;
801029b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801029b6:	e9 ce 00 00 00       	jmp    80102a89 <readi+0x15e>
  if(off + n > ip->size)
801029bb:	8b 55 10             	mov    0x10(%ebp),%edx
801029be:	8b 45 14             	mov    0x14(%ebp),%eax
801029c1:	01 c2                	add    %eax,%edx
801029c3:	8b 45 08             	mov    0x8(%ebp),%eax
801029c6:	8b 40 18             	mov    0x18(%eax),%eax
801029c9:	39 c2                	cmp    %eax,%edx
801029cb:	76 0c                	jbe    801029d9 <readi+0xae>
    n = ip->size - off;
801029cd:	8b 45 08             	mov    0x8(%ebp),%eax
801029d0:	8b 40 18             	mov    0x18(%eax),%eax
801029d3:	2b 45 10             	sub    0x10(%ebp),%eax
801029d6:	89 45 14             	mov    %eax,0x14(%ebp)

  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
801029d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801029e0:	e9 95 00 00 00       	jmp    80102a7a <readi+0x14f>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
801029e5:	8b 45 10             	mov    0x10(%ebp),%eax
801029e8:	c1 e8 09             	shr    $0x9,%eax
801029eb:	83 ec 08             	sub    $0x8,%esp
801029ee:	50                   	push   %eax
801029ef:	ff 75 08             	pushl  0x8(%ebp)
801029f2:	e8 b0 fc ff ff       	call   801026a7 <bmap>
801029f7:	83 c4 10             	add    $0x10,%esp
801029fa:	89 c2                	mov    %eax,%edx
801029fc:	8b 45 08             	mov    0x8(%ebp),%eax
801029ff:	8b 00                	mov    (%eax),%eax
80102a01:	83 ec 08             	sub    $0x8,%esp
80102a04:	52                   	push   %edx
80102a05:	50                   	push   %eax
80102a06:	e8 6f e2 ff ff       	call   80100c7a <bread>
80102a0b:	83 c4 10             	add    $0x10,%esp
80102a0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    m = min(n - tot, BSIZE - off%BSIZE);
80102a11:	8b 45 10             	mov    0x10(%ebp),%eax
80102a14:	25 ff 01 00 00       	and    $0x1ff,%eax
80102a19:	ba 00 02 00 00       	mov    $0x200,%edx
80102a1e:	89 d1                	mov    %edx,%ecx
80102a20:	29 c1                	sub    %eax,%ecx
80102a22:	8b 45 14             	mov    0x14(%ebp),%eax
80102a25:	2b 45 f4             	sub    -0xc(%ebp),%eax
80102a28:	89 c2                	mov    %eax,%edx
80102a2a:	89 c8                	mov    %ecx,%eax
80102a2c:	39 d0                	cmp    %edx,%eax
80102a2e:	76 02                	jbe    80102a32 <readi+0x107>
80102a30:	89 d0                	mov    %edx,%eax
80102a32:	89 45 ec             	mov    %eax,-0x14(%ebp)
    memmove(dst, bp->data + off%BSIZE, m);
80102a35:	8b 45 10             	mov    0x10(%ebp),%eax
80102a38:	25 ff 01 00 00       	and    $0x1ff,%eax
80102a3d:	8d 50 10             	lea    0x10(%eax),%edx
80102a40:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102a43:	01 d0                	add    %edx,%eax
80102a45:	83 c0 08             	add    $0x8,%eax
80102a48:	83 ec 04             	sub    $0x4,%esp
80102a4b:	ff 75 ec             	pushl  -0x14(%ebp)
80102a4e:	50                   	push   %eax
80102a4f:	ff 75 0c             	pushl  0xc(%ebp)
80102a52:	e8 c2 33 00 00       	call   80105e19 <memmove>
80102a57:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
80102a5a:	83 ec 0c             	sub    $0xc,%esp
80102a5d:	ff 75 f0             	pushl  -0x10(%ebp)
80102a60:	e8 8c e2 ff ff       	call   80100cf1 <brelse>
80102a65:	83 c4 10             	add    $0x10,%esp
  if(off > ip->size || off + n < off)
    return -1;
  if(off + n > ip->size)
    n = ip->size - off;

  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
80102a68:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102a6b:	01 45 f4             	add    %eax,-0xc(%ebp)
80102a6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102a71:	01 45 10             	add    %eax,0x10(%ebp)
80102a74:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102a77:	01 45 0c             	add    %eax,0xc(%ebp)
80102a7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102a7d:	3b 45 14             	cmp    0x14(%ebp),%eax
80102a80:	0f 82 5f ff ff ff    	jb     801029e5 <readi+0xba>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
    m = min(n - tot, BSIZE - off%BSIZE);
    memmove(dst, bp->data + off%BSIZE, m);
    brelse(bp);
  }
  return n;
80102a86:	8b 45 14             	mov    0x14(%ebp),%eax
}
80102a89:	c9                   	leave  
80102a8a:	c3                   	ret    

80102a8b <writei>:

// PAGEBREAK!
// Write data to inode.
int
writei(struct inode *ip, char *src, uint off, uint n)
{
80102a8b:	55                   	push   %ebp
80102a8c:	89 e5                	mov    %esp,%ebp
80102a8e:	83 ec 18             	sub    $0x18,%esp
  uint tot, m;
  struct buf *bp;

  if(ip->type == T_DEV){
80102a91:	8b 45 08             	mov    0x8(%ebp),%eax
80102a94:	8b 40 10             	mov    0x10(%eax),%eax
80102a97:	66 83 f8 03          	cmp    $0x3,%ax
80102a9b:	75 5c                	jne    80102af9 <writei+0x6e>
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
80102a9d:	8b 45 08             	mov    0x8(%ebp),%eax
80102aa0:	66 8b 40 12          	mov    0x12(%eax),%ax
80102aa4:	66 85 c0             	test   %ax,%ax
80102aa7:	78 20                	js     80102ac9 <writei+0x3e>
80102aa9:	8b 45 08             	mov    0x8(%ebp),%eax
80102aac:	66 8b 40 12          	mov    0x12(%eax),%ax
80102ab0:	66 83 f8 09          	cmp    $0x9,%ax
80102ab4:	7f 13                	jg     80102ac9 <writei+0x3e>
80102ab6:	8b 45 08             	mov    0x8(%ebp),%eax
80102ab9:	66 8b 40 12          	mov    0x12(%eax),%ax
80102abd:	98                   	cwtl   
80102abe:	8b 04 c5 04 ca 10 80 	mov    -0x7fef35fc(,%eax,8),%eax
80102ac5:	85 c0                	test   %eax,%eax
80102ac7:	75 0a                	jne    80102ad3 <writei+0x48>
      return -1;
80102ac9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102ace:	e9 47 01 00 00       	jmp    80102c1a <writei+0x18f>
    return devsw[ip->major].write(ip, src, n);
80102ad3:	8b 45 08             	mov    0x8(%ebp),%eax
80102ad6:	66 8b 40 12          	mov    0x12(%eax),%ax
80102ada:	98                   	cwtl   
80102adb:	8b 04 c5 04 ca 10 80 	mov    -0x7fef35fc(,%eax,8),%eax
80102ae2:	8b 55 14             	mov    0x14(%ebp),%edx
80102ae5:	83 ec 04             	sub    $0x4,%esp
80102ae8:	52                   	push   %edx
80102ae9:	ff 75 0c             	pushl  0xc(%ebp)
80102aec:	ff 75 08             	pushl  0x8(%ebp)
80102aef:	ff d0                	call   *%eax
80102af1:	83 c4 10             	add    $0x10,%esp
80102af4:	e9 21 01 00 00       	jmp    80102c1a <writei+0x18f>
  }

  if(off > ip->size || off + n < off)
80102af9:	8b 45 08             	mov    0x8(%ebp),%eax
80102afc:	8b 40 18             	mov    0x18(%eax),%eax
80102aff:	3b 45 10             	cmp    0x10(%ebp),%eax
80102b02:	72 0d                	jb     80102b11 <writei+0x86>
80102b04:	8b 55 10             	mov    0x10(%ebp),%edx
80102b07:	8b 45 14             	mov    0x14(%ebp),%eax
80102b0a:	01 d0                	add    %edx,%eax
80102b0c:	3b 45 10             	cmp    0x10(%ebp),%eax
80102b0f:	73 0a                	jae    80102b1b <writei+0x90>
    return -1;
80102b11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102b16:	e9 ff 00 00 00       	jmp    80102c1a <writei+0x18f>
  if(off + n > MAXFILE*BSIZE)
80102b1b:	8b 55 10             	mov    0x10(%ebp),%edx
80102b1e:	8b 45 14             	mov    0x14(%ebp),%eax
80102b21:	01 d0                	add    %edx,%eax
80102b23:	3d 00 18 01 00       	cmp    $0x11800,%eax
80102b28:	76 0a                	jbe    80102b34 <writei+0xa9>
    return -1;
80102b2a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102b2f:	e9 e6 00 00 00       	jmp    80102c1a <writei+0x18f>

  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
80102b34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102b3b:	e9 a3 00 00 00       	jmp    80102be3 <writei+0x158>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
80102b40:	8b 45 10             	mov    0x10(%ebp),%eax
80102b43:	c1 e8 09             	shr    $0x9,%eax
80102b46:	83 ec 08             	sub    $0x8,%esp
80102b49:	50                   	push   %eax
80102b4a:	ff 75 08             	pushl  0x8(%ebp)
80102b4d:	e8 55 fb ff ff       	call   801026a7 <bmap>
80102b52:	83 c4 10             	add    $0x10,%esp
80102b55:	89 c2                	mov    %eax,%edx
80102b57:	8b 45 08             	mov    0x8(%ebp),%eax
80102b5a:	8b 00                	mov    (%eax),%eax
80102b5c:	83 ec 08             	sub    $0x8,%esp
80102b5f:	52                   	push   %edx
80102b60:	50                   	push   %eax
80102b61:	e8 14 e1 ff ff       	call   80100c7a <bread>
80102b66:	83 c4 10             	add    $0x10,%esp
80102b69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    m = min(n - tot, BSIZE - off%BSIZE);
80102b6c:	8b 45 10             	mov    0x10(%ebp),%eax
80102b6f:	25 ff 01 00 00       	and    $0x1ff,%eax
80102b74:	ba 00 02 00 00       	mov    $0x200,%edx
80102b79:	89 d1                	mov    %edx,%ecx
80102b7b:	29 c1                	sub    %eax,%ecx
80102b7d:	8b 45 14             	mov    0x14(%ebp),%eax
80102b80:	2b 45 f4             	sub    -0xc(%ebp),%eax
80102b83:	89 c2                	mov    %eax,%edx
80102b85:	89 c8                	mov    %ecx,%eax
80102b87:	39 d0                	cmp    %edx,%eax
80102b89:	76 02                	jbe    80102b8d <writei+0x102>
80102b8b:	89 d0                	mov    %edx,%eax
80102b8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    memmove(bp->data + off%BSIZE, src, m);
80102b90:	8b 45 10             	mov    0x10(%ebp),%eax
80102b93:	25 ff 01 00 00       	and    $0x1ff,%eax
80102b98:	8d 50 10             	lea    0x10(%eax),%edx
80102b9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102b9e:	01 d0                	add    %edx,%eax
80102ba0:	83 c0 08             	add    $0x8,%eax
80102ba3:	83 ec 04             	sub    $0x4,%esp
80102ba6:	ff 75 ec             	pushl  -0x14(%ebp)
80102ba9:	ff 75 0c             	pushl  0xc(%ebp)
80102bac:	50                   	push   %eax
80102bad:	e8 67 32 00 00       	call   80105e19 <memmove>
80102bb2:	83 c4 10             	add    $0x10,%esp
    log_write(bp);
80102bb5:	83 ec 0c             	sub    $0xc,%esp
80102bb8:	ff 75 f0             	pushl  -0x10(%ebp)
80102bbb:	e8 50 12 00 00       	call   80103e10 <log_write>
80102bc0:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
80102bc3:	83 ec 0c             	sub    $0xc,%esp
80102bc6:	ff 75 f0             	pushl  -0x10(%ebp)
80102bc9:	e8 23 e1 ff ff       	call   80100cf1 <brelse>
80102bce:	83 c4 10             	add    $0x10,%esp
  if(off > ip->size || off + n < off)
    return -1;
  if(off + n > MAXFILE*BSIZE)
    return -1;

  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
80102bd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102bd4:	01 45 f4             	add    %eax,-0xc(%ebp)
80102bd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102bda:	01 45 10             	add    %eax,0x10(%ebp)
80102bdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102be0:	01 45 0c             	add    %eax,0xc(%ebp)
80102be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102be6:	3b 45 14             	cmp    0x14(%ebp),%eax
80102be9:	0f 82 51 ff ff ff    	jb     80102b40 <writei+0xb5>
    memmove(bp->data + off%BSIZE, src, m);
    log_write(bp);
    brelse(bp);
  }

  if(n > 0 && off > ip->size){
80102bef:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
80102bf3:	74 22                	je     80102c17 <writei+0x18c>
80102bf5:	8b 45 08             	mov    0x8(%ebp),%eax
80102bf8:	8b 40 18             	mov    0x18(%eax),%eax
80102bfb:	3b 45 10             	cmp    0x10(%ebp),%eax
80102bfe:	73 17                	jae    80102c17 <writei+0x18c>
    ip->size = off;
80102c00:	8b 45 08             	mov    0x8(%ebp),%eax
80102c03:	8b 55 10             	mov    0x10(%ebp),%edx
80102c06:	89 50 18             	mov    %edx,0x18(%eax)
    iupdate(ip);
80102c09:	83 ec 0c             	sub    $0xc,%esp
80102c0c:	ff 75 08             	pushl  0x8(%ebp)
80102c0f:	e8 ea f5 ff ff       	call   801021fe <iupdate>
80102c14:	83 c4 10             	add    $0x10,%esp
  }
  return n;
80102c17:	8b 45 14             	mov    0x14(%ebp),%eax
}
80102c1a:	c9                   	leave  
80102c1b:	c3                   	ret    

80102c1c <namecmp>:
//PAGEBREAK!
// Directories

int
namecmp(const char *s, const char *t)
{
80102c1c:	55                   	push   %ebp
80102c1d:	89 e5                	mov    %esp,%ebp
80102c1f:	83 ec 08             	sub    $0x8,%esp
  return strncmp(s, t, DIRSIZ);
80102c22:	83 ec 04             	sub    $0x4,%esp
80102c25:	6a 0e                	push   $0xe
80102c27:	ff 75 0c             	pushl  0xc(%ebp)
80102c2a:	ff 75 08             	pushl  0x8(%ebp)
80102c2d:	e8 7b 32 00 00       	call   80105ead <strncmp>
80102c32:	83 c4 10             	add    $0x10,%esp
}
80102c35:	c9                   	leave  
80102c36:	c3                   	ret    

80102c37 <dirlookup>:

// Look for a directory entry in a directory.
// If found, set *poff to byte offset of entry.
struct inode*
dirlookup(struct inode *dp, char *name, uint *poff)
{
80102c37:	55                   	push   %ebp
80102c38:	89 e5                	mov    %esp,%ebp
80102c3a:	83 ec 28             	sub    $0x28,%esp
  uint off, inum;
  struct dirent de;

  if(dp->type != T_DIR)
80102c3d:	8b 45 08             	mov    0x8(%ebp),%eax
80102c40:	8b 40 10             	mov    0x10(%eax),%eax
80102c43:	66 83 f8 01          	cmp    $0x1,%ax
80102c47:	74 0d                	je     80102c56 <dirlookup+0x1f>
    panic("dirlookup not DIR");
80102c49:	83 ec 0c             	sub    $0xc,%esp
80102c4c:	68 2d 86 10 80       	push   $0x8010862d
80102c51:	e8 3b e4 ff ff       	call   80101091 <panic>

  for(off = 0; off < dp->size; off += sizeof(de)){
80102c56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102c5d:	eb 7a                	jmp    80102cd9 <dirlookup+0xa2>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80102c5f:	6a 10                	push   $0x10
80102c61:	ff 75 f4             	pushl  -0xc(%ebp)
80102c64:	8d 45 e0             	lea    -0x20(%ebp),%eax
80102c67:	50                   	push   %eax
80102c68:	ff 75 08             	pushl  0x8(%ebp)
80102c6b:	e8 bb fc ff ff       	call   8010292b <readi>
80102c70:	83 c4 10             	add    $0x10,%esp
80102c73:	83 f8 10             	cmp    $0x10,%eax
80102c76:	74 0d                	je     80102c85 <dirlookup+0x4e>
      panic("dirlink read");
80102c78:	83 ec 0c             	sub    $0xc,%esp
80102c7b:	68 3f 86 10 80       	push   $0x8010863f
80102c80:	e8 0c e4 ff ff       	call   80101091 <panic>
    if(de.inum == 0)
80102c85:	8b 45 e0             	mov    -0x20(%ebp),%eax
80102c88:	66 85 c0             	test   %ax,%ax
80102c8b:	75 02                	jne    80102c8f <dirlookup+0x58>
      continue;
80102c8d:	eb 46                	jmp    80102cd5 <dirlookup+0x9e>
    if(namecmp(name, de.name) == 0){
80102c8f:	83 ec 08             	sub    $0x8,%esp
80102c92:	8d 45 e0             	lea    -0x20(%ebp),%eax
80102c95:	83 c0 02             	add    $0x2,%eax
80102c98:	50                   	push   %eax
80102c99:	ff 75 0c             	pushl  0xc(%ebp)
80102c9c:	e8 7b ff ff ff       	call   80102c1c <namecmp>
80102ca1:	83 c4 10             	add    $0x10,%esp
80102ca4:	85 c0                	test   %eax,%eax
80102ca6:	75 2d                	jne    80102cd5 <dirlookup+0x9e>
      // entry matches path element
      if(poff)
80102ca8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80102cac:	74 08                	je     80102cb6 <dirlookup+0x7f>
        *poff = off;
80102cae:	8b 45 10             	mov    0x10(%ebp),%eax
80102cb1:	8b 55 f4             	mov    -0xc(%ebp),%edx
80102cb4:	89 10                	mov    %edx,(%eax)
      inum = de.inum;
80102cb6:	8b 45 e0             	mov    -0x20(%ebp),%eax
80102cb9:	0f b7 c0             	movzwl %ax,%eax
80102cbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
      return iget(dp->dev, inum);
80102cbf:	8b 45 08             	mov    0x8(%ebp),%eax
80102cc2:	8b 00                	mov    (%eax),%eax
80102cc4:	83 ec 08             	sub    $0x8,%esp
80102cc7:	ff 75 f0             	pushl  -0x10(%ebp)
80102cca:	50                   	push   %eax
80102ccb:	e8 e6 f5 ff ff       	call   801022b6 <iget>
80102cd0:	83 c4 10             	add    $0x10,%esp
80102cd3:	eb 18                	jmp    80102ced <dirlookup+0xb6>
  struct dirent de;

  if(dp->type != T_DIR)
    panic("dirlookup not DIR");

  for(off = 0; off < dp->size; off += sizeof(de)){
80102cd5:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
80102cd9:	8b 45 08             	mov    0x8(%ebp),%eax
80102cdc:	8b 40 18             	mov    0x18(%eax),%eax
80102cdf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80102ce2:	0f 87 77 ff ff ff    	ja     80102c5f <dirlookup+0x28>
      inum = de.inum;
      return iget(dp->dev, inum);
    }
  }

  return 0;
80102ce8:	b8 00 00 00 00       	mov    $0x0,%eax
}
80102ced:	c9                   	leave  
80102cee:	c3                   	ret    

80102cef <dirlink>:

// Write a new directory entry (name, inum) into the directory dp.
int
dirlink(struct inode *dp, char *name, uint inum)
{
80102cef:	55                   	push   %ebp
80102cf0:	89 e5                	mov    %esp,%ebp
80102cf2:	83 ec 28             	sub    $0x28,%esp
  int off;
  struct dirent de;
  struct inode *ip;

  // Check that name is not present.
  if((ip = dirlookup(dp, name, 0)) != 0){
80102cf5:	83 ec 04             	sub    $0x4,%esp
80102cf8:	6a 00                	push   $0x0
80102cfa:	ff 75 0c             	pushl  0xc(%ebp)
80102cfd:	ff 75 08             	pushl  0x8(%ebp)
80102d00:	e8 32 ff ff ff       	call   80102c37 <dirlookup>
80102d05:	83 c4 10             	add    $0x10,%esp
80102d08:	89 45 f0             	mov    %eax,-0x10(%ebp)
80102d0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80102d0f:	74 18                	je     80102d29 <dirlink+0x3a>
    iput(ip);
80102d11:	83 ec 0c             	sub    $0xc,%esp
80102d14:	ff 75 f0             	pushl  -0x10(%ebp)
80102d17:	e8 78 f8 ff ff       	call   80102594 <iput>
80102d1c:	83 c4 10             	add    $0x10,%esp
    return -1;
80102d1f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102d24:	e9 9a 00 00 00       	jmp    80102dc3 <dirlink+0xd4>
  }

  // Look for an empty dirent.
  for(off = 0; off < dp->size; off += sizeof(de)){
80102d29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102d30:	eb 3a                	jmp    80102d6c <dirlink+0x7d>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80102d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102d35:	6a 10                	push   $0x10
80102d37:	50                   	push   %eax
80102d38:	8d 45 e0             	lea    -0x20(%ebp),%eax
80102d3b:	50                   	push   %eax
80102d3c:	ff 75 08             	pushl  0x8(%ebp)
80102d3f:	e8 e7 fb ff ff       	call   8010292b <readi>
80102d44:	83 c4 10             	add    $0x10,%esp
80102d47:	83 f8 10             	cmp    $0x10,%eax
80102d4a:	74 0d                	je     80102d59 <dirlink+0x6a>
      panic("dirlink read");
80102d4c:	83 ec 0c             	sub    $0xc,%esp
80102d4f:	68 3f 86 10 80       	push   $0x8010863f
80102d54:	e8 38 e3 ff ff       	call   80101091 <panic>
    if(de.inum == 0)
80102d59:	8b 45 e0             	mov    -0x20(%ebp),%eax
80102d5c:	66 85 c0             	test   %ax,%ax
80102d5f:	75 02                	jne    80102d63 <dirlink+0x74>
      break;
80102d61:	eb 16                	jmp    80102d79 <dirlink+0x8a>
    iput(ip);
    return -1;
  }

  // Look for an empty dirent.
  for(off = 0; off < dp->size; off += sizeof(de)){
80102d63:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102d66:	83 c0 10             	add    $0x10,%eax
80102d69:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
80102d6f:	8b 45 08             	mov    0x8(%ebp),%eax
80102d72:	8b 40 18             	mov    0x18(%eax),%eax
80102d75:	39 c2                	cmp    %eax,%edx
80102d77:	72 b9                	jb     80102d32 <dirlink+0x43>
      panic("dirlink read");
    if(de.inum == 0)
      break;
  }

  strncpy(de.name, name, DIRSIZ);
80102d79:	83 ec 04             	sub    $0x4,%esp
80102d7c:	6a 0e                	push   $0xe
80102d7e:	ff 75 0c             	pushl  0xc(%ebp)
80102d81:	8d 45 e0             	lea    -0x20(%ebp),%eax
80102d84:	83 c0 02             	add    $0x2,%eax
80102d87:	50                   	push   %eax
80102d88:	e8 6e 31 00 00       	call   80105efb <strncpy>
80102d8d:	83 c4 10             	add    $0x10,%esp
  de.inum = inum;
80102d90:	8b 45 10             	mov    0x10(%ebp),%eax
80102d93:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80102d97:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102d9a:	6a 10                	push   $0x10
80102d9c:	50                   	push   %eax
80102d9d:	8d 45 e0             	lea    -0x20(%ebp),%eax
80102da0:	50                   	push   %eax
80102da1:	ff 75 08             	pushl  0x8(%ebp)
80102da4:	e8 e2 fc ff ff       	call   80102a8b <writei>
80102da9:	83 c4 10             	add    $0x10,%esp
80102dac:	83 f8 10             	cmp    $0x10,%eax
80102daf:	74 0d                	je     80102dbe <dirlink+0xcf>
    panic("dirlink");
80102db1:	83 ec 0c             	sub    $0xc,%esp
80102db4:	68 4c 86 10 80       	push   $0x8010864c
80102db9:	e8 d3 e2 ff ff       	call   80101091 <panic>
  
  return 0;
80102dbe:	b8 00 00 00 00       	mov    $0x0,%eax
}
80102dc3:	c9                   	leave  
80102dc4:	c3                   	ret    

80102dc5 <skipelem>:
//   skipelem("a", name) = "", setting name = "a"
//   skipelem("", name) = skipelem("////", name) = 0
//
static char*
skipelem(char *path, char *name)
{
80102dc5:	55                   	push   %ebp
80102dc6:	89 e5                	mov    %esp,%ebp
80102dc8:	83 ec 18             	sub    $0x18,%esp
  char *s;
  int len;

  while(*path == '/')
80102dcb:	eb 03                	jmp    80102dd0 <skipelem+0xb>
    path++;
80102dcd:	ff 45 08             	incl   0x8(%ebp)
skipelem(char *path, char *name)
{
  char *s;
  int len;

  while(*path == '/')
80102dd0:	8b 45 08             	mov    0x8(%ebp),%eax
80102dd3:	8a 00                	mov    (%eax),%al
80102dd5:	3c 2f                	cmp    $0x2f,%al
80102dd7:	74 f4                	je     80102dcd <skipelem+0x8>
    path++;
  if(*path == 0)
80102dd9:	8b 45 08             	mov    0x8(%ebp),%eax
80102ddc:	8a 00                	mov    (%eax),%al
80102dde:	84 c0                	test   %al,%al
80102de0:	75 07                	jne    80102de9 <skipelem+0x24>
    return 0;
80102de2:	b8 00 00 00 00       	mov    $0x0,%eax
80102de7:	eb 76                	jmp    80102e5f <skipelem+0x9a>
  s = path;
80102de9:	8b 45 08             	mov    0x8(%ebp),%eax
80102dec:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while(*path != '/' && *path != 0)
80102def:	eb 03                	jmp    80102df4 <skipelem+0x2f>
    path++;
80102df1:	ff 45 08             	incl   0x8(%ebp)
  while(*path == '/')
    path++;
  if(*path == 0)
    return 0;
  s = path;
  while(*path != '/' && *path != 0)
80102df4:	8b 45 08             	mov    0x8(%ebp),%eax
80102df7:	8a 00                	mov    (%eax),%al
80102df9:	3c 2f                	cmp    $0x2f,%al
80102dfb:	74 09                	je     80102e06 <skipelem+0x41>
80102dfd:	8b 45 08             	mov    0x8(%ebp),%eax
80102e00:	8a 00                	mov    (%eax),%al
80102e02:	84 c0                	test   %al,%al
80102e04:	75 eb                	jne    80102df1 <skipelem+0x2c>
    path++;
  len = path - s;
80102e06:	8b 55 08             	mov    0x8(%ebp),%edx
80102e09:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102e0c:	29 c2                	sub    %eax,%edx
80102e0e:	89 d0                	mov    %edx,%eax
80102e10:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(len >= DIRSIZ)
80102e13:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
80102e17:	7e 15                	jle    80102e2e <skipelem+0x69>
    memmove(name, s, DIRSIZ);
80102e19:	83 ec 04             	sub    $0x4,%esp
80102e1c:	6a 0e                	push   $0xe
80102e1e:	ff 75 f4             	pushl  -0xc(%ebp)
80102e21:	ff 75 0c             	pushl  0xc(%ebp)
80102e24:	e8 f0 2f 00 00       	call   80105e19 <memmove>
80102e29:	83 c4 10             	add    $0x10,%esp
80102e2c:	eb 20                	jmp    80102e4e <skipelem+0x89>
  else {
    memmove(name, s, len);
80102e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102e31:	83 ec 04             	sub    $0x4,%esp
80102e34:	50                   	push   %eax
80102e35:	ff 75 f4             	pushl  -0xc(%ebp)
80102e38:	ff 75 0c             	pushl  0xc(%ebp)
80102e3b:	e8 d9 2f 00 00       	call   80105e19 <memmove>
80102e40:	83 c4 10             	add    $0x10,%esp
    name[len] = 0;
80102e43:	8b 55 f0             	mov    -0x10(%ebp),%edx
80102e46:	8b 45 0c             	mov    0xc(%ebp),%eax
80102e49:	01 d0                	add    %edx,%eax
80102e4b:	c6 00 00             	movb   $0x0,(%eax)
  }
  while(*path == '/')
80102e4e:	eb 03                	jmp    80102e53 <skipelem+0x8e>
    path++;
80102e50:	ff 45 08             	incl   0x8(%ebp)
    memmove(name, s, DIRSIZ);
  else {
    memmove(name, s, len);
    name[len] = 0;
  }
  while(*path == '/')
80102e53:	8b 45 08             	mov    0x8(%ebp),%eax
80102e56:	8a 00                	mov    (%eax),%al
80102e58:	3c 2f                	cmp    $0x2f,%al
80102e5a:	74 f4                	je     80102e50 <skipelem+0x8b>
    path++;
  return path;
80102e5c:	8b 45 08             	mov    0x8(%ebp),%eax
}
80102e5f:	c9                   	leave  
80102e60:	c3                   	ret    

80102e61 <namex>:
// Look up and return the inode for a path name.
// If parent != 0, return the inode for the parent and copy the final
// path element into name, which must have room for DIRSIZ bytes.
static struct inode*
namex(char *path, int nameiparent, char *name)
{
80102e61:	55                   	push   %ebp
80102e62:	89 e5                	mov    %esp,%ebp
80102e64:	83 ec 18             	sub    $0x18,%esp
  struct inode *ip, *next;

  if(*path == '/')
80102e67:	8b 45 08             	mov    0x8(%ebp),%eax
80102e6a:	8a 00                	mov    (%eax),%al
80102e6c:	3c 2f                	cmp    $0x2f,%al
80102e6e:	75 14                	jne    80102e84 <namex+0x23>
    ip = iget(ROOTDEV, ROOTINO);
80102e70:	83 ec 08             	sub    $0x8,%esp
80102e73:	6a 01                	push   $0x1
80102e75:	6a 01                	push   $0x1
80102e77:	e8 3a f4 ff ff       	call   801022b6 <iget>
80102e7c:	83 c4 10             	add    $0x10,%esp
80102e7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102e82:	eb 18                	jmp    80102e9c <namex+0x3b>
  else
    ip = idup(proc->cwd);
80102e84:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80102e8a:	8b 40 68             	mov    0x68(%eax),%eax
80102e8d:	83 ec 0c             	sub    $0xc,%esp
80102e90:	50                   	push   %eax
80102e91:	e8 ff f4 ff ff       	call   80102395 <idup>
80102e96:	83 c4 10             	add    $0x10,%esp
80102e99:	89 45 f4             	mov    %eax,-0xc(%ebp)

  while((path = skipelem(path, name)) != 0){
80102e9c:	e9 9c 00 00 00       	jmp    80102f3d <namex+0xdc>
    ilock(ip);
80102ea1:	83 ec 0c             	sub    $0xc,%esp
80102ea4:	ff 75 f4             	pushl  -0xc(%ebp)
80102ea7:	e8 23 f5 ff ff       	call   801023cf <ilock>
80102eac:	83 c4 10             	add    $0x10,%esp
    if(ip->type != T_DIR){
80102eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102eb2:	8b 40 10             	mov    0x10(%eax),%eax
80102eb5:	66 83 f8 01          	cmp    $0x1,%ax
80102eb9:	74 18                	je     80102ed3 <namex+0x72>
      iunlockput(ip);
80102ebb:	83 ec 0c             	sub    $0xc,%esp
80102ebe:	ff 75 f4             	pushl  -0xc(%ebp)
80102ec1:	e8 bd f7 ff ff       	call   80102683 <iunlockput>
80102ec6:	83 c4 10             	add    $0x10,%esp
      return 0;
80102ec9:	b8 00 00 00 00       	mov    $0x0,%eax
80102ece:	e9 a6 00 00 00       	jmp    80102f79 <namex+0x118>
    }
    if(nameiparent && *path == '\0'){
80102ed3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80102ed7:	74 1f                	je     80102ef8 <namex+0x97>
80102ed9:	8b 45 08             	mov    0x8(%ebp),%eax
80102edc:	8a 00                	mov    (%eax),%al
80102ede:	84 c0                	test   %al,%al
80102ee0:	75 16                	jne    80102ef8 <namex+0x97>
      // Stop one level early.
      iunlock(ip);
80102ee2:	83 ec 0c             	sub    $0xc,%esp
80102ee5:	ff 75 f4             	pushl  -0xc(%ebp)
80102ee8:	e8 36 f6 ff ff       	call   80102523 <iunlock>
80102eed:	83 c4 10             	add    $0x10,%esp
      return ip;
80102ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102ef3:	e9 81 00 00 00       	jmp    80102f79 <namex+0x118>
    }
    if((next = dirlookup(ip, name, 0)) == 0){
80102ef8:	83 ec 04             	sub    $0x4,%esp
80102efb:	6a 00                	push   $0x0
80102efd:	ff 75 10             	pushl  0x10(%ebp)
80102f00:	ff 75 f4             	pushl  -0xc(%ebp)
80102f03:	e8 2f fd ff ff       	call   80102c37 <dirlookup>
80102f08:	83 c4 10             	add    $0x10,%esp
80102f0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
80102f0e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80102f12:	75 15                	jne    80102f29 <namex+0xc8>
      iunlockput(ip);
80102f14:	83 ec 0c             	sub    $0xc,%esp
80102f17:	ff 75 f4             	pushl  -0xc(%ebp)
80102f1a:	e8 64 f7 ff ff       	call   80102683 <iunlockput>
80102f1f:	83 c4 10             	add    $0x10,%esp
      return 0;
80102f22:	b8 00 00 00 00       	mov    $0x0,%eax
80102f27:	eb 50                	jmp    80102f79 <namex+0x118>
    }
    iunlockput(ip);
80102f29:	83 ec 0c             	sub    $0xc,%esp
80102f2c:	ff 75 f4             	pushl  -0xc(%ebp)
80102f2f:	e8 4f f7 ff ff       	call   80102683 <iunlockput>
80102f34:	83 c4 10             	add    $0x10,%esp
    ip = next;
80102f37:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102f3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(*path == '/')
    ip = iget(ROOTDEV, ROOTINO);
  else
    ip = idup(proc->cwd);

  while((path = skipelem(path, name)) != 0){
80102f3d:	83 ec 08             	sub    $0x8,%esp
80102f40:	ff 75 10             	pushl  0x10(%ebp)
80102f43:	ff 75 08             	pushl  0x8(%ebp)
80102f46:	e8 7a fe ff ff       	call   80102dc5 <skipelem>
80102f4b:	83 c4 10             	add    $0x10,%esp
80102f4e:	89 45 08             	mov    %eax,0x8(%ebp)
80102f51:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80102f55:	0f 85 46 ff ff ff    	jne    80102ea1 <namex+0x40>
      return 0;
    }
    iunlockput(ip);
    ip = next;
  }
  if(nameiparent){
80102f5b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80102f5f:	74 15                	je     80102f76 <namex+0x115>
    iput(ip);
80102f61:	83 ec 0c             	sub    $0xc,%esp
80102f64:	ff 75 f4             	pushl  -0xc(%ebp)
80102f67:	e8 28 f6 ff ff       	call   80102594 <iput>
80102f6c:	83 c4 10             	add    $0x10,%esp
    return 0;
80102f6f:	b8 00 00 00 00       	mov    $0x0,%eax
80102f74:	eb 03                	jmp    80102f79 <namex+0x118>
  }
  return ip;
80102f76:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80102f79:	c9                   	leave  
80102f7a:	c3                   	ret    

80102f7b <namei>:

struct inode*
namei(char *path)
{
80102f7b:	55                   	push   %ebp
80102f7c:	89 e5                	mov    %esp,%ebp
80102f7e:	83 ec 18             	sub    $0x18,%esp
  char name[DIRSIZ];
  return namex(path, 0, name);
80102f81:	83 ec 04             	sub    $0x4,%esp
80102f84:	8d 45 ea             	lea    -0x16(%ebp),%eax
80102f87:	50                   	push   %eax
80102f88:	6a 00                	push   $0x0
80102f8a:	ff 75 08             	pushl  0x8(%ebp)
80102f8d:	e8 cf fe ff ff       	call   80102e61 <namex>
80102f92:	83 c4 10             	add    $0x10,%esp
}
80102f95:	c9                   	leave  
80102f96:	c3                   	ret    

80102f97 <nameiparent>:

struct inode*
nameiparent(char *path, char *name)
{
80102f97:	55                   	push   %ebp
80102f98:	89 e5                	mov    %esp,%ebp
80102f9a:	83 ec 08             	sub    $0x8,%esp
  return namex(path, 1, name);
80102f9d:	83 ec 04             	sub    $0x4,%esp
80102fa0:	ff 75 0c             	pushl  0xc(%ebp)
80102fa3:	6a 01                	push   $0x1
80102fa5:	ff 75 08             	pushl  0x8(%ebp)
80102fa8:	e8 b4 fe ff ff       	call   80102e61 <namex>
80102fad:	83 c4 10             	add    $0x10,%esp
}
80102fb0:	c9                   	leave  
80102fb1:	c3                   	ret    

80102fb2 <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
80102fb2:	55                   	push   %ebp
80102fb3:	89 e5                	mov    %esp,%ebp
80102fb5:	83 ec 14             	sub    $0x14,%esp
80102fb8:	8b 45 08             	mov    0x8(%ebp),%eax
80102fbb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102fbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102fc2:	89 c2                	mov    %eax,%edx
80102fc4:	ec                   	in     (%dx),%al
80102fc5:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80102fc8:	8a 45 ff             	mov    -0x1(%ebp),%al
}
80102fcb:	c9                   	leave  
80102fcc:	c3                   	ret    

80102fcd <insl>:

static inline void
insl(int port, void *addr, int cnt)
{
80102fcd:	55                   	push   %ebp
80102fce:	89 e5                	mov    %esp,%ebp
80102fd0:	57                   	push   %edi
80102fd1:	53                   	push   %ebx
  asm volatile("cld; rep insl" :
80102fd2:	8b 55 08             	mov    0x8(%ebp),%edx
80102fd5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80102fd8:	8b 45 10             	mov    0x10(%ebp),%eax
80102fdb:	89 cb                	mov    %ecx,%ebx
80102fdd:	89 df                	mov    %ebx,%edi
80102fdf:	89 c1                	mov    %eax,%ecx
80102fe1:	fc                   	cld    
80102fe2:	f3 6d                	rep insl (%dx),%es:(%edi)
80102fe4:	89 c8                	mov    %ecx,%eax
80102fe6:	89 fb                	mov    %edi,%ebx
80102fe8:	89 5d 0c             	mov    %ebx,0xc(%ebp)
80102feb:	89 45 10             	mov    %eax,0x10(%ebp)
               "=D" (addr), "=c" (cnt) :
               "d" (port), "0" (addr), "1" (cnt) :
               "memory", "cc");
}
80102fee:	5b                   	pop    %ebx
80102fef:	5f                   	pop    %edi
80102ff0:	5d                   	pop    %ebp
80102ff1:	c3                   	ret    

80102ff2 <outb>:

static inline void
outb(ushort port, uchar data)
{
80102ff2:	55                   	push   %ebp
80102ff3:	89 e5                	mov    %esp,%ebp
80102ff5:	83 ec 08             	sub    $0x8,%esp
80102ff8:	8b 45 08             	mov    0x8(%ebp),%eax
80102ffb:	8b 55 0c             	mov    0xc(%ebp),%edx
80102ffe:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80103002:	88 55 f8             	mov    %dl,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103005:	8a 45 f8             	mov    -0x8(%ebp),%al
80103008:	8b 55 fc             	mov    -0x4(%ebp),%edx
8010300b:	ee                   	out    %al,(%dx)
}
8010300c:	c9                   	leave  
8010300d:	c3                   	ret    

8010300e <outsl>:
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
}

static inline void
outsl(int port, const void *addr, int cnt)
{
8010300e:	55                   	push   %ebp
8010300f:	89 e5                	mov    %esp,%ebp
80103011:	56                   	push   %esi
80103012:	53                   	push   %ebx
  asm volatile("cld; rep outsl" :
80103013:	8b 55 08             	mov    0x8(%ebp),%edx
80103016:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80103019:	8b 45 10             	mov    0x10(%ebp),%eax
8010301c:	89 cb                	mov    %ecx,%ebx
8010301e:	89 de                	mov    %ebx,%esi
80103020:	89 c1                	mov    %eax,%ecx
80103022:	fc                   	cld    
80103023:	f3 6f                	rep outsl %ds:(%esi),(%dx)
80103025:	89 c8                	mov    %ecx,%eax
80103027:	89 f3                	mov    %esi,%ebx
80103029:	89 5d 0c             	mov    %ebx,0xc(%ebp)
8010302c:	89 45 10             	mov    %eax,0x10(%ebp)
               "=S" (addr), "=c" (cnt) :
               "d" (port), "0" (addr), "1" (cnt) :
               "cc");
}
8010302f:	5b                   	pop    %ebx
80103030:	5e                   	pop    %esi
80103031:	5d                   	pop    %ebp
80103032:	c3                   	ret    

80103033 <idewait>:
static void idestart(struct buf*);

// Wait for IDE disk to become ready.
static int
idewait(int checkerr)
{
80103033:	55                   	push   %ebp
80103034:	89 e5                	mov    %esp,%ebp
80103036:	83 ec 10             	sub    $0x10,%esp
  int r;

  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY) 
80103039:	90                   	nop
8010303a:	68 f7 01 00 00       	push   $0x1f7
8010303f:	e8 6e ff ff ff       	call   80102fb2 <inb>
80103044:	83 c4 04             	add    $0x4,%esp
80103047:	0f b6 c0             	movzbl %al,%eax
8010304a:	89 45 fc             	mov    %eax,-0x4(%ebp)
8010304d:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103050:	25 c0 00 00 00       	and    $0xc0,%eax
80103055:	83 f8 40             	cmp    $0x40,%eax
80103058:	75 e0                	jne    8010303a <idewait+0x7>
    ;
  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
8010305a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
8010305e:	74 11                	je     80103071 <idewait+0x3e>
80103060:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103063:	83 e0 21             	and    $0x21,%eax
80103066:	85 c0                	test   %eax,%eax
80103068:	74 07                	je     80103071 <idewait+0x3e>
    return -1;
8010306a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010306f:	eb 05                	jmp    80103076 <idewait+0x43>
  return 0;
80103071:	b8 00 00 00 00       	mov    $0x0,%eax
}
80103076:	c9                   	leave  
80103077:	c3                   	ret    

80103078 <ideinit>:

void
ideinit(void)
{
80103078:	55                   	push   %ebp
80103079:	89 e5                	mov    %esp,%ebp
8010307b:	83 ec 18             	sub    $0x18,%esp
  int i;

  initlock(&idelock, "ide");
8010307e:	83 ec 08             	sub    $0x8,%esp
80103081:	68 54 86 10 80       	push   $0x80108654
80103086:	68 e0 e3 10 80       	push   $0x8010e3e0
8010308b:	e8 ea 29 00 00       	call   80105a7a <initlock>
80103090:	83 c4 10             	add    $0x10,%esp
  picenable(IRQ_IDE);
80103093:	83 ec 0c             	sub    $0xc,%esp
80103096:	6a 0e                	push   $0xe
80103098:	e8 6c 19 00 00       	call   80104a09 <picenable>
8010309d:	83 c4 10             	add    $0x10,%esp
  ioapicenable(IRQ_IDE, ncpu - 1);
801030a0:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
801030a5:	48                   	dec    %eax
801030a6:	83 ec 08             	sub    $0x8,%esp
801030a9:	50                   	push   %eax
801030aa:	6a 0e                	push   $0xe
801030ac:	e8 2b 04 00 00       	call   801034dc <ioapicenable>
801030b1:	83 c4 10             	add    $0x10,%esp
  idewait(0);
801030b4:	83 ec 0c             	sub    $0xc,%esp
801030b7:	6a 00                	push   $0x0
801030b9:	e8 75 ff ff ff       	call   80103033 <idewait>
801030be:	83 c4 10             	add    $0x10,%esp
  
  // Check if disk 1 is present
  outb(0x1f6, 0xe0 | (1<<4));
801030c1:	83 ec 08             	sub    $0x8,%esp
801030c4:	68 f0 00 00 00       	push   $0xf0
801030c9:	68 f6 01 00 00       	push   $0x1f6
801030ce:	e8 1f ff ff ff       	call   80102ff2 <outb>
801030d3:	83 c4 10             	add    $0x10,%esp
  for(i=0; i<1000; i++){
801030d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801030dd:	eb 23                	jmp    80103102 <ideinit+0x8a>
    if(inb(0x1f7) != 0){
801030df:	83 ec 0c             	sub    $0xc,%esp
801030e2:	68 f7 01 00 00       	push   $0x1f7
801030e7:	e8 c6 fe ff ff       	call   80102fb2 <inb>
801030ec:	83 c4 10             	add    $0x10,%esp
801030ef:	84 c0                	test   %al,%al
801030f1:	74 0c                	je     801030ff <ideinit+0x87>
      havedisk1 = 1;
801030f3:	c7 05 18 e4 10 80 01 	movl   $0x1,0x8010e418
801030fa:	00 00 00 
      break;
801030fd:	eb 0c                	jmp    8010310b <ideinit+0x93>
  ioapicenable(IRQ_IDE, ncpu - 1);
  idewait(0);
  
  // Check if disk 1 is present
  outb(0x1f6, 0xe0 | (1<<4));
  for(i=0; i<1000; i++){
801030ff:	ff 45 f4             	incl   -0xc(%ebp)
80103102:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
80103109:	7e d4                	jle    801030df <ideinit+0x67>
      break;
    }
  }
  
  // Switch back to disk 0.
  outb(0x1f6, 0xe0 | (0<<4));
8010310b:	83 ec 08             	sub    $0x8,%esp
8010310e:	68 e0 00 00 00       	push   $0xe0
80103113:	68 f6 01 00 00       	push   $0x1f6
80103118:	e8 d5 fe ff ff       	call   80102ff2 <outb>
8010311d:	83 c4 10             	add    $0x10,%esp
}
80103120:	c9                   	leave  
80103121:	c3                   	ret    

80103122 <idestart>:

// Start the request for b.  Caller must hold idelock.
static void
idestart(struct buf *b)
{
80103122:	55                   	push   %ebp
80103123:	89 e5                	mov    %esp,%ebp
80103125:	83 ec 08             	sub    $0x8,%esp
  if(b == 0)
80103128:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
8010312c:	75 0d                	jne    8010313b <idestart+0x19>
    panic("idestart");
8010312e:	83 ec 0c             	sub    $0xc,%esp
80103131:	68 58 86 10 80       	push   $0x80108658
80103136:	e8 56 df ff ff       	call   80101091 <panic>

  idewait(0);
8010313b:	83 ec 0c             	sub    $0xc,%esp
8010313e:	6a 00                	push   $0x0
80103140:	e8 ee fe ff ff       	call   80103033 <idewait>
80103145:	83 c4 10             	add    $0x10,%esp
  outb(0x3f6, 0);  // generate interrupt
80103148:	83 ec 08             	sub    $0x8,%esp
8010314b:	6a 00                	push   $0x0
8010314d:	68 f6 03 00 00       	push   $0x3f6
80103152:	e8 9b fe ff ff       	call   80102ff2 <outb>
80103157:	83 c4 10             	add    $0x10,%esp
  outb(0x1f2, 1);  // number of sectors
8010315a:	83 ec 08             	sub    $0x8,%esp
8010315d:	6a 01                	push   $0x1
8010315f:	68 f2 01 00 00       	push   $0x1f2
80103164:	e8 89 fe ff ff       	call   80102ff2 <outb>
80103169:	83 c4 10             	add    $0x10,%esp
  outb(0x1f3, b->sector & 0xff);
8010316c:	8b 45 08             	mov    0x8(%ebp),%eax
8010316f:	8b 40 08             	mov    0x8(%eax),%eax
80103172:	0f b6 c0             	movzbl %al,%eax
80103175:	83 ec 08             	sub    $0x8,%esp
80103178:	50                   	push   %eax
80103179:	68 f3 01 00 00       	push   $0x1f3
8010317e:	e8 6f fe ff ff       	call   80102ff2 <outb>
80103183:	83 c4 10             	add    $0x10,%esp
  outb(0x1f4, (b->sector >> 8) & 0xff);
80103186:	8b 45 08             	mov    0x8(%ebp),%eax
80103189:	8b 40 08             	mov    0x8(%eax),%eax
8010318c:	c1 e8 08             	shr    $0x8,%eax
8010318f:	0f b6 c0             	movzbl %al,%eax
80103192:	83 ec 08             	sub    $0x8,%esp
80103195:	50                   	push   %eax
80103196:	68 f4 01 00 00       	push   $0x1f4
8010319b:	e8 52 fe ff ff       	call   80102ff2 <outb>
801031a0:	83 c4 10             	add    $0x10,%esp
  outb(0x1f5, (b->sector >> 16) & 0xff);
801031a3:	8b 45 08             	mov    0x8(%ebp),%eax
801031a6:	8b 40 08             	mov    0x8(%eax),%eax
801031a9:	c1 e8 10             	shr    $0x10,%eax
801031ac:	0f b6 c0             	movzbl %al,%eax
801031af:	83 ec 08             	sub    $0x8,%esp
801031b2:	50                   	push   %eax
801031b3:	68 f5 01 00 00       	push   $0x1f5
801031b8:	e8 35 fe ff ff       	call   80102ff2 <outb>
801031bd:	83 c4 10             	add    $0x10,%esp
  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
801031c0:	8b 45 08             	mov    0x8(%ebp),%eax
801031c3:	8b 40 04             	mov    0x4(%eax),%eax
801031c6:	83 e0 01             	and    $0x1,%eax
801031c9:	c1 e0 04             	shl    $0x4,%eax
801031cc:	88 c2                	mov    %al,%dl
801031ce:	8b 45 08             	mov    0x8(%ebp),%eax
801031d1:	8b 40 08             	mov    0x8(%eax),%eax
801031d4:	c1 e8 18             	shr    $0x18,%eax
801031d7:	83 e0 0f             	and    $0xf,%eax
801031da:	09 d0                	or     %edx,%eax
801031dc:	83 c8 e0             	or     $0xffffffe0,%eax
801031df:	0f b6 c0             	movzbl %al,%eax
801031e2:	83 ec 08             	sub    $0x8,%esp
801031e5:	50                   	push   %eax
801031e6:	68 f6 01 00 00       	push   $0x1f6
801031eb:	e8 02 fe ff ff       	call   80102ff2 <outb>
801031f0:	83 c4 10             	add    $0x10,%esp
  if(b->flags & B_DIRTY){
801031f3:	8b 45 08             	mov    0x8(%ebp),%eax
801031f6:	8b 00                	mov    (%eax),%eax
801031f8:	83 e0 04             	and    $0x4,%eax
801031fb:	85 c0                	test   %eax,%eax
801031fd:	74 30                	je     8010322f <idestart+0x10d>
    outb(0x1f7, IDE_CMD_WRITE);
801031ff:	83 ec 08             	sub    $0x8,%esp
80103202:	6a 30                	push   $0x30
80103204:	68 f7 01 00 00       	push   $0x1f7
80103209:	e8 e4 fd ff ff       	call   80102ff2 <outb>
8010320e:	83 c4 10             	add    $0x10,%esp
    outsl(0x1f0, b->data, 512/4);
80103211:	8b 45 08             	mov    0x8(%ebp),%eax
80103214:	83 c0 18             	add    $0x18,%eax
80103217:	83 ec 04             	sub    $0x4,%esp
8010321a:	68 80 00 00 00       	push   $0x80
8010321f:	50                   	push   %eax
80103220:	68 f0 01 00 00       	push   $0x1f0
80103225:	e8 e4 fd ff ff       	call   8010300e <outsl>
8010322a:	83 c4 10             	add    $0x10,%esp
8010322d:	eb 12                	jmp    80103241 <idestart+0x11f>
  } else {
    outb(0x1f7, IDE_CMD_READ);
8010322f:	83 ec 08             	sub    $0x8,%esp
80103232:	6a 20                	push   $0x20
80103234:	68 f7 01 00 00       	push   $0x1f7
80103239:	e8 b4 fd ff ff       	call   80102ff2 <outb>
8010323e:	83 c4 10             	add    $0x10,%esp
  }
}
80103241:	c9                   	leave  
80103242:	c3                   	ret    

80103243 <ideintr>:

// Interrupt handler.
void
ideintr(void)
{
80103243:	55                   	push   %ebp
80103244:	89 e5                	mov    %esp,%ebp
80103246:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  // First queued buffer is the active request.
  acquire(&idelock);
80103249:	83 ec 0c             	sub    $0xc,%esp
8010324c:	68 e0 e3 10 80       	push   $0x8010e3e0
80103251:	e8 45 28 00 00       	call   80105a9b <acquire>
80103256:	83 c4 10             	add    $0x10,%esp
  if((b = idequeue) == 0){
80103259:	a1 14 e4 10 80       	mov    0x8010e414,%eax
8010325e:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103261:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80103265:	75 15                	jne    8010327c <ideintr+0x39>
    release(&idelock);
80103267:	83 ec 0c             	sub    $0xc,%esp
8010326a:	68 e0 e3 10 80       	push   $0x8010e3e0
8010326f:	e8 e1 28 00 00       	call   80105b55 <release>
80103274:	83 c4 10             	add    $0x10,%esp
    // cprintf("spurious IDE interrupt\n");
    return;
80103277:	e9 9a 00 00 00       	jmp    80103316 <ideintr+0xd3>
  }
  idequeue = b->qnext;
8010327c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010327f:	8b 40 14             	mov    0x14(%eax),%eax
80103282:	a3 14 e4 10 80       	mov    %eax,0x8010e414

  // Read data if needed.
  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
80103287:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010328a:	8b 00                	mov    (%eax),%eax
8010328c:	83 e0 04             	and    $0x4,%eax
8010328f:	85 c0                	test   %eax,%eax
80103291:	75 2d                	jne    801032c0 <ideintr+0x7d>
80103293:	83 ec 0c             	sub    $0xc,%esp
80103296:	6a 01                	push   $0x1
80103298:	e8 96 fd ff ff       	call   80103033 <idewait>
8010329d:	83 c4 10             	add    $0x10,%esp
801032a0:	85 c0                	test   %eax,%eax
801032a2:	78 1c                	js     801032c0 <ideintr+0x7d>
    insl(0x1f0, b->data, 512/4);
801032a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801032a7:	83 c0 18             	add    $0x18,%eax
801032aa:	83 ec 04             	sub    $0x4,%esp
801032ad:	68 80 00 00 00       	push   $0x80
801032b2:	50                   	push   %eax
801032b3:	68 f0 01 00 00       	push   $0x1f0
801032b8:	e8 10 fd ff ff       	call   80102fcd <insl>
801032bd:	83 c4 10             	add    $0x10,%esp
  
  // Wake process waiting for this buf.
  b->flags |= B_VALID;
801032c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801032c3:	8b 00                	mov    (%eax),%eax
801032c5:	83 c8 02             	or     $0x2,%eax
801032c8:	89 c2                	mov    %eax,%edx
801032ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
801032cd:	89 10                	mov    %edx,(%eax)
  b->flags &= ~B_DIRTY;
801032cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
801032d2:	8b 00                	mov    (%eax),%eax
801032d4:	83 e0 fb             	and    $0xfffffffb,%eax
801032d7:	89 c2                	mov    %eax,%edx
801032d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801032dc:	89 10                	mov    %edx,(%eax)
  wakeup(b);
801032de:	83 ec 0c             	sub    $0xc,%esp
801032e1:	ff 75 f4             	pushl  -0xc(%ebp)
801032e4:	e8 af 25 00 00       	call   80105898 <wakeup>
801032e9:	83 c4 10             	add    $0x10,%esp
  
  // Start disk on next buf in queue.
  if(idequeue != 0)
801032ec:	a1 14 e4 10 80       	mov    0x8010e414,%eax
801032f1:	85 c0                	test   %eax,%eax
801032f3:	74 11                	je     80103306 <ideintr+0xc3>
    idestart(idequeue);
801032f5:	a1 14 e4 10 80       	mov    0x8010e414,%eax
801032fa:	83 ec 0c             	sub    $0xc,%esp
801032fd:	50                   	push   %eax
801032fe:	e8 1f fe ff ff       	call   80103122 <idestart>
80103303:	83 c4 10             	add    $0x10,%esp

  release(&idelock);
80103306:	83 ec 0c             	sub    $0xc,%esp
80103309:	68 e0 e3 10 80       	push   $0x8010e3e0
8010330e:	e8 42 28 00 00       	call   80105b55 <release>
80103313:	83 c4 10             	add    $0x10,%esp
}
80103316:	c9                   	leave  
80103317:	c3                   	ret    

80103318 <iderw>:
// Sync buf with disk. 
// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
// Else if B_VALID is not set, read buf from disk, set B_VALID.
void
iderw(struct buf *b)
{
80103318:	55                   	push   %ebp
80103319:	89 e5                	mov    %esp,%ebp
8010331b:	83 ec 18             	sub    $0x18,%esp
  struct buf **pp;

  if(!(b->flags & B_BUSY))
8010331e:	8b 45 08             	mov    0x8(%ebp),%eax
80103321:	8b 00                	mov    (%eax),%eax
80103323:	83 e0 01             	and    $0x1,%eax
80103326:	85 c0                	test   %eax,%eax
80103328:	75 0d                	jne    80103337 <iderw+0x1f>
    panic("iderw: buf not busy");
8010332a:	83 ec 0c             	sub    $0xc,%esp
8010332d:	68 61 86 10 80       	push   $0x80108661
80103332:	e8 5a dd ff ff       	call   80101091 <panic>
  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
80103337:	8b 45 08             	mov    0x8(%ebp),%eax
8010333a:	8b 00                	mov    (%eax),%eax
8010333c:	83 e0 06             	and    $0x6,%eax
8010333f:	83 f8 02             	cmp    $0x2,%eax
80103342:	75 0d                	jne    80103351 <iderw+0x39>
    panic("iderw: nothing to do");
80103344:	83 ec 0c             	sub    $0xc,%esp
80103347:	68 75 86 10 80       	push   $0x80108675
8010334c:	e8 40 dd ff ff       	call   80101091 <panic>
  if(b->dev != 0 && !havedisk1)
80103351:	8b 45 08             	mov    0x8(%ebp),%eax
80103354:	8b 40 04             	mov    0x4(%eax),%eax
80103357:	85 c0                	test   %eax,%eax
80103359:	74 16                	je     80103371 <iderw+0x59>
8010335b:	a1 18 e4 10 80       	mov    0x8010e418,%eax
80103360:	85 c0                	test   %eax,%eax
80103362:	75 0d                	jne    80103371 <iderw+0x59>
    panic("iderw: ide disk 1 not present");
80103364:	83 ec 0c             	sub    $0xc,%esp
80103367:	68 8a 86 10 80       	push   $0x8010868a
8010336c:	e8 20 dd ff ff       	call   80101091 <panic>

  acquire(&idelock);  //DOC:acquire-lock
80103371:	83 ec 0c             	sub    $0xc,%esp
80103374:	68 e0 e3 10 80       	push   $0x8010e3e0
80103379:	e8 1d 27 00 00       	call   80105a9b <acquire>
8010337e:	83 c4 10             	add    $0x10,%esp

  // Append b to idequeue.
  b->qnext = 0;
80103381:	8b 45 08             	mov    0x8(%ebp),%eax
80103384:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
8010338b:	c7 45 f4 14 e4 10 80 	movl   $0x8010e414,-0xc(%ebp)
80103392:	eb 0b                	jmp    8010339f <iderw+0x87>
80103394:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103397:	8b 00                	mov    (%eax),%eax
80103399:	83 c0 14             	add    $0x14,%eax
8010339c:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010339f:	8b 45 f4             	mov    -0xc(%ebp),%eax
801033a2:	8b 00                	mov    (%eax),%eax
801033a4:	85 c0                	test   %eax,%eax
801033a6:	75 ec                	jne    80103394 <iderw+0x7c>
    ;
  *pp = b;
801033a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801033ab:	8b 55 08             	mov    0x8(%ebp),%edx
801033ae:	89 10                	mov    %edx,(%eax)
  
  // Start disk if necessary.
  if(idequeue == b)
801033b0:	a1 14 e4 10 80       	mov    0x8010e414,%eax
801033b5:	3b 45 08             	cmp    0x8(%ebp),%eax
801033b8:	75 0e                	jne    801033c8 <iderw+0xb0>
    idestart(b);
801033ba:	83 ec 0c             	sub    $0xc,%esp
801033bd:	ff 75 08             	pushl  0x8(%ebp)
801033c0:	e8 5d fd ff ff       	call   80103122 <idestart>
801033c5:	83 c4 10             	add    $0x10,%esp
  
  // Wait for request to finish.
  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
801033c8:	eb 13                	jmp    801033dd <iderw+0xc5>
    sleep(b, &idelock);
801033ca:	83 ec 08             	sub    $0x8,%esp
801033cd:	68 e0 e3 10 80       	push   $0x8010e3e0
801033d2:	ff 75 08             	pushl  0x8(%ebp)
801033d5:	e8 d5 23 00 00       	call   801057af <sleep>
801033da:	83 c4 10             	add    $0x10,%esp
  // Start disk if necessary.
  if(idequeue == b)
    idestart(b);
  
  // Wait for request to finish.
  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
801033dd:	8b 45 08             	mov    0x8(%ebp),%eax
801033e0:	8b 00                	mov    (%eax),%eax
801033e2:	83 e0 06             	and    $0x6,%eax
801033e5:	83 f8 02             	cmp    $0x2,%eax
801033e8:	75 e0                	jne    801033ca <iderw+0xb2>
    sleep(b, &idelock);
  }

  release(&idelock);
801033ea:	83 ec 0c             	sub    $0xc,%esp
801033ed:	68 e0 e3 10 80       	push   $0x8010e3e0
801033f2:	e8 5e 27 00 00       	call   80105b55 <release>
801033f7:	83 c4 10             	add    $0x10,%esp
}
801033fa:	c9                   	leave  
801033fb:	c3                   	ret    

801033fc <ioapicread>:
  uint data;
};

static uint
ioapicread(int reg)
{
801033fc:	55                   	push   %ebp
801033fd:	89 e5                	mov    %esp,%ebp
  ioapic->reg = reg;
801033ff:	a1 1c e4 10 80       	mov    0x8010e41c,%eax
80103404:	8b 55 08             	mov    0x8(%ebp),%edx
80103407:	89 10                	mov    %edx,(%eax)
  return ioapic->data;
80103409:	a1 1c e4 10 80       	mov    0x8010e41c,%eax
8010340e:	8b 40 10             	mov    0x10(%eax),%eax
}
80103411:	5d                   	pop    %ebp
80103412:	c3                   	ret    

80103413 <ioapicwrite>:

static void
ioapicwrite(int reg, uint data)
{
80103413:	55                   	push   %ebp
80103414:	89 e5                	mov    %esp,%ebp
  ioapic->reg = reg;
80103416:	a1 1c e4 10 80       	mov    0x8010e41c,%eax
8010341b:	8b 55 08             	mov    0x8(%ebp),%edx
8010341e:	89 10                	mov    %edx,(%eax)
  ioapic->data = data;
80103420:	a1 1c e4 10 80       	mov    0x8010e41c,%eax
80103425:	8b 55 0c             	mov    0xc(%ebp),%edx
80103428:	89 50 10             	mov    %edx,0x10(%eax)
}
8010342b:	5d                   	pop    %ebp
8010342c:	c3                   	ret    

8010342d <ioapicinit>:

void
ioapicinit(void)
{
8010342d:	55                   	push   %ebp
8010342e:	89 e5                	mov    %esp,%ebp
80103430:	83 ec 18             	sub    $0x18,%esp
  int i, id, maxintr;

  if(!ismp)
80103433:	a1 e0 ea 10 80       	mov    0x8010eae0,%eax
80103438:	85 c0                	test   %eax,%eax
8010343a:	75 05                	jne    80103441 <ioapicinit+0x14>
    return;
8010343c:	e9 99 00 00 00       	jmp    801034da <ioapicinit+0xad>

  ioapic = (volatile struct ioapic*) IO2V(IOAPIC);
80103441:	c7 05 1c e4 10 80 00 	movl   $0xfec00000,0x8010e41c
80103448:	00 c0 fe 
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
8010344b:	6a 01                	push   $0x1
8010344d:	e8 aa ff ff ff       	call   801033fc <ioapicread>
80103452:	83 c4 04             	add    $0x4,%esp
80103455:	c1 e8 10             	shr    $0x10,%eax
80103458:	25 ff 00 00 00       	and    $0xff,%eax
8010345d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  id = ioapicread(REG_ID) >> 24;
80103460:	6a 00                	push   $0x0
80103462:	e8 95 ff ff ff       	call   801033fc <ioapicread>
80103467:	83 c4 04             	add    $0x4,%esp
8010346a:	c1 e8 18             	shr    $0x18,%eax
8010346d:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if(id != ioapicid)
80103470:	a0 e8 ea 10 80       	mov    0x8010eae8,%al
80103475:	0f b6 c0             	movzbl %al,%eax
80103478:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8010347b:	74 10                	je     8010348d <ioapicinit+0x60>
    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
8010347d:	83 ec 0c             	sub    $0xc,%esp
80103480:	68 a8 86 10 80       	push   $0x801086a8
80103485:	e8 56 da ff ff       	call   80100ee0 <cprintf>
8010348a:	83 c4 10             	add    $0x10,%esp

  // Mark all interrupts edge-triggered, active high, disabled,
  // and not routed to any CPUs.
  for(i = 0; i <= maxintr; i++){
8010348d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103494:	eb 3c                	jmp    801034d2 <ioapicinit+0xa5>
    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
80103496:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103499:	83 c0 20             	add    $0x20,%eax
8010349c:	0d 00 00 01 00       	or     $0x10000,%eax
801034a1:	89 c2                	mov    %eax,%edx
801034a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801034a6:	83 c0 08             	add    $0x8,%eax
801034a9:	01 c0                	add    %eax,%eax
801034ab:	83 ec 08             	sub    $0x8,%esp
801034ae:	52                   	push   %edx
801034af:	50                   	push   %eax
801034b0:	e8 5e ff ff ff       	call   80103413 <ioapicwrite>
801034b5:	83 c4 10             	add    $0x10,%esp
    ioapicwrite(REG_TABLE+2*i+1, 0);
801034b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801034bb:	83 c0 08             	add    $0x8,%eax
801034be:	01 c0                	add    %eax,%eax
801034c0:	40                   	inc    %eax
801034c1:	83 ec 08             	sub    $0x8,%esp
801034c4:	6a 00                	push   $0x0
801034c6:	50                   	push   %eax
801034c7:	e8 47 ff ff ff       	call   80103413 <ioapicwrite>
801034cc:	83 c4 10             	add    $0x10,%esp
  if(id != ioapicid)
    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");

  // Mark all interrupts edge-triggered, active high, disabled,
  // and not routed to any CPUs.
  for(i = 0; i <= maxintr; i++){
801034cf:	ff 45 f4             	incl   -0xc(%ebp)
801034d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801034d5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
801034d8:	7e bc                	jle    80103496 <ioapicinit+0x69>
    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
    ioapicwrite(REG_TABLE+2*i+1, 0);
  }
}
801034da:	c9                   	leave  
801034db:	c3                   	ret    

801034dc <ioapicenable>:

void
ioapicenable(int irq, int cpunum)
{
801034dc:	55                   	push   %ebp
801034dd:	89 e5                	mov    %esp,%ebp
  if(!ismp)
801034df:	a1 e0 ea 10 80       	mov    0x8010eae0,%eax
801034e4:	85 c0                	test   %eax,%eax
801034e6:	75 02                	jne    801034ea <ioapicenable+0xe>
    return;
801034e8:	eb 35                	jmp    8010351f <ioapicenable+0x43>

  // Mark interrupt edge-triggered, active high,
  // enabled, and routed to the given cpunum,
  // which happens to be that cpu's APIC ID.
  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
801034ea:	8b 45 08             	mov    0x8(%ebp),%eax
801034ed:	83 c0 20             	add    $0x20,%eax
801034f0:	89 c2                	mov    %eax,%edx
801034f2:	8b 45 08             	mov    0x8(%ebp),%eax
801034f5:	83 c0 08             	add    $0x8,%eax
801034f8:	01 c0                	add    %eax,%eax
801034fa:	52                   	push   %edx
801034fb:	50                   	push   %eax
801034fc:	e8 12 ff ff ff       	call   80103413 <ioapicwrite>
80103501:	83 c4 08             	add    $0x8,%esp
  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
80103504:	8b 45 0c             	mov    0xc(%ebp),%eax
80103507:	c1 e0 18             	shl    $0x18,%eax
8010350a:	89 c2                	mov    %eax,%edx
8010350c:	8b 45 08             	mov    0x8(%ebp),%eax
8010350f:	83 c0 08             	add    $0x8,%eax
80103512:	01 c0                	add    %eax,%eax
80103514:	40                   	inc    %eax
80103515:	52                   	push   %edx
80103516:	50                   	push   %eax
80103517:	e8 f7 fe ff ff       	call   80103413 <ioapicwrite>
8010351c:	83 c4 08             	add    $0x8,%esp
}
8010351f:	c9                   	leave  
80103520:	c3                   	ret    

80103521 <v2p>:
#endif
#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked

#ifndef __ASSEMBLER__

static inline uintp v2p(void *a) { return ((uintp) (a)) - ((uintp)KERNBASE); }
80103521:	55                   	push   %ebp
80103522:	89 e5                	mov    %esp,%ebp
80103524:	8b 45 08             	mov    0x8(%ebp),%eax
80103527:	05 00 00 00 80       	add    $0x80000000,%eax
8010352c:	5d                   	pop    %ebp
8010352d:	c3                   	ret    

8010352e <kinit1>:
// the pages mapped by entrypgdir on free list.
// 2. main() calls kinit2() with the rest of the physical pages
// after installing a full page table that maps them on all cores.
void
kinit1(void *vstart, void *vend)
{
8010352e:	55                   	push   %ebp
8010352f:	89 e5                	mov    %esp,%ebp
80103531:	83 ec 08             	sub    $0x8,%esp
  initlock(&kmem.lock, "kmem");
80103534:	83 ec 08             	sub    $0x8,%esp
80103537:	68 da 86 10 80       	push   $0x801086da
8010353c:	68 20 e4 10 80       	push   $0x8010e420
80103541:	e8 34 25 00 00       	call   80105a7a <initlock>
80103546:	83 c4 10             	add    $0x10,%esp
  kmem.use_lock = 0;
80103549:	c7 05 54 e4 10 80 00 	movl   $0x0,0x8010e454
80103550:	00 00 00 
  freerange(vstart, vend);
80103553:	83 ec 08             	sub    $0x8,%esp
80103556:	ff 75 0c             	pushl  0xc(%ebp)
80103559:	ff 75 08             	pushl  0x8(%ebp)
8010355c:	e8 28 00 00 00       	call   80103589 <freerange>
80103561:	83 c4 10             	add    $0x10,%esp
}
80103564:	c9                   	leave  
80103565:	c3                   	ret    

80103566 <kinit2>:

void
kinit2(void *vstart, void *vend)
{
80103566:	55                   	push   %ebp
80103567:	89 e5                	mov    %esp,%ebp
80103569:	83 ec 08             	sub    $0x8,%esp
  freerange(vstart, vend);
8010356c:	83 ec 08             	sub    $0x8,%esp
8010356f:	ff 75 0c             	pushl  0xc(%ebp)
80103572:	ff 75 08             	pushl  0x8(%ebp)
80103575:	e8 0f 00 00 00       	call   80103589 <freerange>
8010357a:	83 c4 10             	add    $0x10,%esp
  kmem.use_lock = 1;
8010357d:	c7 05 54 e4 10 80 01 	movl   $0x1,0x8010e454
80103584:	00 00 00 
}
80103587:	c9                   	leave  
80103588:	c3                   	ret    

80103589 <freerange>:

void
freerange(void *vstart, void *vend)
{
80103589:	55                   	push   %ebp
8010358a:	89 e5                	mov    %esp,%ebp
8010358c:	83 ec 18             	sub    $0x18,%esp
  char *p;
  p = (char*)PGROUNDUP((uintp)vstart);
8010358f:	8b 45 08             	mov    0x8(%ebp),%eax
80103592:	05 ff 0f 00 00       	add    $0xfff,%eax
80103597:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010359c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
8010359f:	eb 15                	jmp    801035b6 <freerange+0x2d>
    kfree(p);
801035a1:	83 ec 0c             	sub    $0xc,%esp
801035a4:	ff 75 f4             	pushl  -0xc(%ebp)
801035a7:	e8 19 00 00 00       	call   801035c5 <kfree>
801035ac:	83 c4 10             	add    $0x10,%esp
void
freerange(void *vstart, void *vend)
{
  char *p;
  p = (char*)PGROUNDUP((uintp)vstart);
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
801035af:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
801035b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801035b9:	05 00 10 00 00       	add    $0x1000,%eax
801035be:	3b 45 0c             	cmp    0xc(%ebp),%eax
801035c1:	76 de                	jbe    801035a1 <freerange+0x18>
    kfree(p);
}
801035c3:	c9                   	leave  
801035c4:	c3                   	ret    

801035c5 <kfree>:
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; see kinit above.)
void
kfree(char *v)
{
801035c5:	55                   	push   %ebp
801035c6:	89 e5                	mov    %esp,%ebp
801035c8:	83 ec 18             	sub    $0x18,%esp
  struct run *r;

  if((uintp)v % PGSIZE || v < end || v2p(v) >= PHYSTOP)
801035cb:	8b 45 08             	mov    0x8(%ebp),%eax
801035ce:	25 ff 0f 00 00       	and    $0xfff,%eax
801035d3:	85 c0                	test   %eax,%eax
801035d5:	75 1b                	jne    801035f2 <kfree+0x2d>
801035d7:	81 7d 08 e0 22 11 80 	cmpl   $0x801122e0,0x8(%ebp)
801035de:	72 12                	jb     801035f2 <kfree+0x2d>
801035e0:	ff 75 08             	pushl  0x8(%ebp)
801035e3:	e8 39 ff ff ff       	call   80103521 <v2p>
801035e8:	83 c4 04             	add    $0x4,%esp
801035eb:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
801035f0:	76 0d                	jbe    801035ff <kfree+0x3a>
    panic("kfree");
801035f2:	83 ec 0c             	sub    $0xc,%esp
801035f5:	68 df 86 10 80       	push   $0x801086df
801035fa:	e8 92 da ff ff       	call   80101091 <panic>

  // Fill with junk to catch dangling refs.
  memset(v, 1, PGSIZE);
801035ff:	83 ec 04             	sub    $0x4,%esp
80103602:	68 00 10 00 00       	push   $0x1000
80103607:	6a 01                	push   $0x1
80103609:	ff 75 08             	pushl  0x8(%ebp)
8010360c:	e8 4f 27 00 00       	call   80105d60 <memset>
80103611:	83 c4 10             	add    $0x10,%esp

  if(kmem.use_lock)
80103614:	a1 54 e4 10 80       	mov    0x8010e454,%eax
80103619:	85 c0                	test   %eax,%eax
8010361b:	74 10                	je     8010362d <kfree+0x68>
    acquire(&kmem.lock);
8010361d:	83 ec 0c             	sub    $0xc,%esp
80103620:	68 20 e4 10 80       	push   $0x8010e420
80103625:	e8 71 24 00 00       	call   80105a9b <acquire>
8010362a:	83 c4 10             	add    $0x10,%esp
  r = (struct run*)v;
8010362d:	8b 45 08             	mov    0x8(%ebp),%eax
80103630:	89 45 f4             	mov    %eax,-0xc(%ebp)
  r->next = kmem.freelist;
80103633:	8b 15 58 e4 10 80    	mov    0x8010e458,%edx
80103639:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010363c:	89 10                	mov    %edx,(%eax)
  kmem.freelist = r;
8010363e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103641:	a3 58 e4 10 80       	mov    %eax,0x8010e458
  if(kmem.use_lock)
80103646:	a1 54 e4 10 80       	mov    0x8010e454,%eax
8010364b:	85 c0                	test   %eax,%eax
8010364d:	74 10                	je     8010365f <kfree+0x9a>
    release(&kmem.lock);
8010364f:	83 ec 0c             	sub    $0xc,%esp
80103652:	68 20 e4 10 80       	push   $0x8010e420
80103657:	e8 f9 24 00 00       	call   80105b55 <release>
8010365c:	83 c4 10             	add    $0x10,%esp
}
8010365f:	c9                   	leave  
80103660:	c3                   	ret    

80103661 <kalloc>:
// Allocate one 4096-byte page of physical memory.
// Returns a pointer that the kernel can use.
// Returns 0 if the memory cannot be allocated.
char*
kalloc(void)
{
80103661:	55                   	push   %ebp
80103662:	89 e5                	mov    %esp,%ebp
80103664:	83 ec 18             	sub    $0x18,%esp
  struct run *r;

  if(kmem.use_lock)
80103667:	a1 54 e4 10 80       	mov    0x8010e454,%eax
8010366c:	85 c0                	test   %eax,%eax
8010366e:	74 10                	je     80103680 <kalloc+0x1f>
    acquire(&kmem.lock);
80103670:	83 ec 0c             	sub    $0xc,%esp
80103673:	68 20 e4 10 80       	push   $0x8010e420
80103678:	e8 1e 24 00 00       	call   80105a9b <acquire>
8010367d:	83 c4 10             	add    $0x10,%esp
  r = kmem.freelist;
80103680:	a1 58 e4 10 80       	mov    0x8010e458,%eax
80103685:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(r)
80103688:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010368c:	74 0a                	je     80103698 <kalloc+0x37>
    kmem.freelist = r->next;
8010368e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103691:	8b 00                	mov    (%eax),%eax
80103693:	a3 58 e4 10 80       	mov    %eax,0x8010e458
  if(kmem.use_lock)
80103698:	a1 54 e4 10 80       	mov    0x8010e454,%eax
8010369d:	85 c0                	test   %eax,%eax
8010369f:	74 10                	je     801036b1 <kalloc+0x50>
    release(&kmem.lock);
801036a1:	83 ec 0c             	sub    $0xc,%esp
801036a4:	68 20 e4 10 80       	push   $0x8010e420
801036a9:	e8 a7 24 00 00       	call   80105b55 <release>
801036ae:	83 c4 10             	add    $0x10,%esp
  return (char*)r;
801036b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801036b4:	c9                   	leave  
801036b5:	c3                   	ret    

801036b6 <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
801036b6:	55                   	push   %ebp
801036b7:	89 e5                	mov    %esp,%ebp
801036b9:	83 ec 14             	sub    $0x14,%esp
801036bc:	8b 45 08             	mov    0x8(%ebp),%eax
801036bf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801036c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
801036c6:	89 c2                	mov    %eax,%edx
801036c8:	ec                   	in     (%dx),%al
801036c9:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
801036cc:	8a 45 ff             	mov    -0x1(%ebp),%al
}
801036cf:	c9                   	leave  
801036d0:	c3                   	ret    

801036d1 <kbdgetc>:
#include "defs.h"
#include "kbd.h"

int
kbdgetc(void)
{
801036d1:	55                   	push   %ebp
801036d2:	89 e5                	mov    %esp,%ebp
801036d4:	83 ec 10             	sub    $0x10,%esp
  static uchar *charcode[4] = {
    normalmap, shiftmap, ctlmap, ctlmap
  };
  uint st, data, c;

  st = inb(KBSTATP);
801036d7:	6a 64                	push   $0x64
801036d9:	e8 d8 ff ff ff       	call   801036b6 <inb>
801036de:	83 c4 04             	add    $0x4,%esp
801036e1:	0f b6 c0             	movzbl %al,%eax
801036e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if((st & KBS_DIB) == 0)
801036e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801036ea:	83 e0 01             	and    $0x1,%eax
801036ed:	85 c0                	test   %eax,%eax
801036ef:	75 0a                	jne    801036fb <kbdgetc+0x2a>
    return -1;
801036f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801036f6:	e9 1f 01 00 00       	jmp    8010381a <kbdgetc+0x149>
  data = inb(KBDATAP);
801036fb:	6a 60                	push   $0x60
801036fd:	e8 b4 ff ff ff       	call   801036b6 <inb>
80103702:	83 c4 04             	add    $0x4,%esp
80103705:	0f b6 c0             	movzbl %al,%eax
80103708:	89 45 fc             	mov    %eax,-0x4(%ebp)

  if(data == 0xE0){
8010370b:	81 7d fc e0 00 00 00 	cmpl   $0xe0,-0x4(%ebp)
80103712:	75 17                	jne    8010372b <kbdgetc+0x5a>
    shift |= E0ESC;
80103714:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
80103719:	83 c8 40             	or     $0x40,%eax
8010371c:	a3 5c e4 10 80       	mov    %eax,0x8010e45c
    return 0;
80103721:	b8 00 00 00 00       	mov    $0x0,%eax
80103726:	e9 ef 00 00 00       	jmp    8010381a <kbdgetc+0x149>
  } else if(data & 0x80){
8010372b:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010372e:	25 80 00 00 00       	and    $0x80,%eax
80103733:	85 c0                	test   %eax,%eax
80103735:	74 44                	je     8010377b <kbdgetc+0xaa>
    // Key released
    data = (shift & E0ESC ? data : data & 0x7F);
80103737:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
8010373c:	83 e0 40             	and    $0x40,%eax
8010373f:	85 c0                	test   %eax,%eax
80103741:	75 08                	jne    8010374b <kbdgetc+0x7a>
80103743:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103746:	83 e0 7f             	and    $0x7f,%eax
80103749:	eb 03                	jmp    8010374e <kbdgetc+0x7d>
8010374b:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010374e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    shift &= ~(shiftcode[data] | E0ESC);
80103751:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103754:	05 20 94 10 80       	add    $0x80109420,%eax
80103759:	8a 00                	mov    (%eax),%al
8010375b:	83 c8 40             	or     $0x40,%eax
8010375e:	0f b6 c0             	movzbl %al,%eax
80103761:	f7 d0                	not    %eax
80103763:	89 c2                	mov    %eax,%edx
80103765:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
8010376a:	21 d0                	and    %edx,%eax
8010376c:	a3 5c e4 10 80       	mov    %eax,0x8010e45c
    return 0;
80103771:	b8 00 00 00 00       	mov    $0x0,%eax
80103776:	e9 9f 00 00 00       	jmp    8010381a <kbdgetc+0x149>
  } else if(shift & E0ESC){
8010377b:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
80103780:	83 e0 40             	and    $0x40,%eax
80103783:	85 c0                	test   %eax,%eax
80103785:	74 14                	je     8010379b <kbdgetc+0xca>
    // Last character was an E0 escape; or with 0x80
    data |= 0x80;
80103787:	81 4d fc 80 00 00 00 	orl    $0x80,-0x4(%ebp)
    shift &= ~E0ESC;
8010378e:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
80103793:	83 e0 bf             	and    $0xffffffbf,%eax
80103796:	a3 5c e4 10 80       	mov    %eax,0x8010e45c
  }

  shift |= shiftcode[data];
8010379b:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010379e:	05 20 94 10 80       	add    $0x80109420,%eax
801037a3:	8a 00                	mov    (%eax),%al
801037a5:	0f b6 d0             	movzbl %al,%edx
801037a8:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
801037ad:	09 d0                	or     %edx,%eax
801037af:	a3 5c e4 10 80       	mov    %eax,0x8010e45c
  shift ^= togglecode[data];
801037b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
801037b7:	05 20 95 10 80       	add    $0x80109520,%eax
801037bc:	8a 00                	mov    (%eax),%al
801037be:	0f b6 d0             	movzbl %al,%edx
801037c1:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
801037c6:	31 d0                	xor    %edx,%eax
801037c8:	a3 5c e4 10 80       	mov    %eax,0x8010e45c
  c = charcode[shift & (CTL | SHIFT)][data];
801037cd:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
801037d2:	83 e0 03             	and    $0x3,%eax
801037d5:	8b 14 85 20 99 10 80 	mov    -0x7fef66e0(,%eax,4),%edx
801037dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
801037df:	01 d0                	add    %edx,%eax
801037e1:	8a 00                	mov    (%eax),%al
801037e3:	0f b6 c0             	movzbl %al,%eax
801037e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(shift & CAPSLOCK){
801037e9:	a1 5c e4 10 80       	mov    0x8010e45c,%eax
801037ee:	83 e0 08             	and    $0x8,%eax
801037f1:	85 c0                	test   %eax,%eax
801037f3:	74 22                	je     80103817 <kbdgetc+0x146>
    if('a' <= c && c <= 'z')
801037f5:	83 7d f8 60          	cmpl   $0x60,-0x8(%ebp)
801037f9:	76 0c                	jbe    80103807 <kbdgetc+0x136>
801037fb:	83 7d f8 7a          	cmpl   $0x7a,-0x8(%ebp)
801037ff:	77 06                	ja     80103807 <kbdgetc+0x136>
      c += 'A' - 'a';
80103801:	83 6d f8 20          	subl   $0x20,-0x8(%ebp)
80103805:	eb 10                	jmp    80103817 <kbdgetc+0x146>
    else if('A' <= c && c <= 'Z')
80103807:	83 7d f8 40          	cmpl   $0x40,-0x8(%ebp)
8010380b:	76 0a                	jbe    80103817 <kbdgetc+0x146>
8010380d:	83 7d f8 5a          	cmpl   $0x5a,-0x8(%ebp)
80103811:	77 04                	ja     80103817 <kbdgetc+0x146>
      c += 'a' - 'A';
80103813:	83 45 f8 20          	addl   $0x20,-0x8(%ebp)
  }
  return c;
80103817:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
8010381a:	c9                   	leave  
8010381b:	c3                   	ret    

8010381c <kbdintr>:

void
kbdintr(void)
{
8010381c:	55                   	push   %ebp
8010381d:	89 e5                	mov    %esp,%ebp
8010381f:	83 ec 08             	sub    $0x8,%esp
  consoleintr(kbdgetc);
80103822:	83 ec 0c             	sub    $0xc,%esp
80103825:	68 d1 36 10 80       	push   $0x801036d1
8010382a:	e8 c3 da ff ff       	call   801012f2 <consoleintr>
8010382f:	83 c4 10             	add    $0x10,%esp
}
80103832:	c9                   	leave  
80103833:	c3                   	ret    

80103834 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
80103834:	55                   	push   %ebp
80103835:	89 e5                	mov    %esp,%ebp
80103837:	83 ec 08             	sub    $0x8,%esp
8010383a:	8b 45 08             	mov    0x8(%ebp),%eax
8010383d:	8b 55 0c             	mov    0xc(%ebp),%edx
80103840:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80103844:	88 55 f8             	mov    %dl,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103847:	8a 45 f8             	mov    -0x8(%ebp),%al
8010384a:	8b 55 fc             	mov    -0x4(%ebp),%edx
8010384d:	ee                   	out    %al,(%dx)
}
8010384e:	c9                   	leave  
8010384f:	c3                   	ret    

80103850 <readeflags>:
  asm volatile("ltr %0" : : "r" (sel));
}

static inline uintp
readeflags(void)
{
80103850:	55                   	push   %ebp
80103851:	89 e5                	mov    %esp,%ebp
80103853:	83 ec 10             	sub    $0x10,%esp
  uintp eflags;
  asm volatile("pushf; pop %0" : "=r" (eflags));
80103856:	9c                   	pushf  
80103857:	58                   	pop    %eax
80103858:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return eflags;
8010385b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
8010385e:	c9                   	leave  
8010385f:	c3                   	ret    

80103860 <lapicw>:

volatile uint *lapic;  // Initialized in mp.c

static void
lapicw(int index, int value)
{
80103860:	55                   	push   %ebp
80103861:	89 e5                	mov    %esp,%ebp
  lapic[index] = value;
80103863:	a1 60 e4 10 80       	mov    0x8010e460,%eax
80103868:	8b 55 08             	mov    0x8(%ebp),%edx
8010386b:	c1 e2 02             	shl    $0x2,%edx
8010386e:	01 c2                	add    %eax,%edx
80103870:	8b 45 0c             	mov    0xc(%ebp),%eax
80103873:	89 02                	mov    %eax,(%edx)
  lapic[ID];  // wait for write to finish, by reading
80103875:	a1 60 e4 10 80       	mov    0x8010e460,%eax
8010387a:	83 c0 20             	add    $0x20,%eax
8010387d:	8b 00                	mov    (%eax),%eax
}
8010387f:	5d                   	pop    %ebp
80103880:	c3                   	ret    

80103881 <lapicinit>:
//PAGEBREAK!

void
lapicinit(void)
{
80103881:	55                   	push   %ebp
80103882:	89 e5                	mov    %esp,%ebp
  if(!lapic) 
80103884:	a1 60 e4 10 80       	mov    0x8010e460,%eax
80103889:	85 c0                	test   %eax,%eax
8010388b:	75 05                	jne    80103892 <lapicinit+0x11>
    return;
8010388d:	e9 09 01 00 00       	jmp    8010399b <lapicinit+0x11a>

  // Enable local APIC; set spurious interrupt vector.
  lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
80103892:	68 3f 01 00 00       	push   $0x13f
80103897:	6a 3c                	push   $0x3c
80103899:	e8 c2 ff ff ff       	call   80103860 <lapicw>
8010389e:	83 c4 08             	add    $0x8,%esp

  // The timer repeatedly counts down at bus frequency
  // from lapic[TICR] and then issues an interrupt.  
  // If xv6 cared more about precise timekeeping,
  // TICR would be calibrated using an external time source.
  lapicw(TDCR, X1);
801038a1:	6a 0b                	push   $0xb
801038a3:	68 f8 00 00 00       	push   $0xf8
801038a8:	e8 b3 ff ff ff       	call   80103860 <lapicw>
801038ad:	83 c4 08             	add    $0x8,%esp
  lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
801038b0:	68 20 00 02 00       	push   $0x20020
801038b5:	68 c8 00 00 00       	push   $0xc8
801038ba:	e8 a1 ff ff ff       	call   80103860 <lapicw>
801038bf:	83 c4 08             	add    $0x8,%esp
  lapicw(TICR, 10000000); 
801038c2:	68 80 96 98 00       	push   $0x989680
801038c7:	68 e0 00 00 00       	push   $0xe0
801038cc:	e8 8f ff ff ff       	call   80103860 <lapicw>
801038d1:	83 c4 08             	add    $0x8,%esp

  // Disable logical interrupt lines.
  lapicw(LINT0, MASKED);
801038d4:	68 00 00 01 00       	push   $0x10000
801038d9:	68 d4 00 00 00       	push   $0xd4
801038de:	e8 7d ff ff ff       	call   80103860 <lapicw>
801038e3:	83 c4 08             	add    $0x8,%esp
  lapicw(LINT1, MASKED);
801038e6:	68 00 00 01 00       	push   $0x10000
801038eb:	68 d8 00 00 00       	push   $0xd8
801038f0:	e8 6b ff ff ff       	call   80103860 <lapicw>
801038f5:	83 c4 08             	add    $0x8,%esp

  // Disable performance counter overflow interrupts
  // on machines that provide that interrupt entry.
  if(((lapic[VER]>>16) & 0xFF) >= 4)
801038f8:	a1 60 e4 10 80       	mov    0x8010e460,%eax
801038fd:	83 c0 30             	add    $0x30,%eax
80103900:	8b 00                	mov    (%eax),%eax
80103902:	c1 e8 10             	shr    $0x10,%eax
80103905:	0f b6 c0             	movzbl %al,%eax
80103908:	83 f8 03             	cmp    $0x3,%eax
8010390b:	76 12                	jbe    8010391f <lapicinit+0x9e>
    lapicw(PCINT, MASKED);
8010390d:	68 00 00 01 00       	push   $0x10000
80103912:	68 d0 00 00 00       	push   $0xd0
80103917:	e8 44 ff ff ff       	call   80103860 <lapicw>
8010391c:	83 c4 08             	add    $0x8,%esp

  // Map error interrupt to IRQ_ERROR.
  lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
8010391f:	6a 33                	push   $0x33
80103921:	68 dc 00 00 00       	push   $0xdc
80103926:	e8 35 ff ff ff       	call   80103860 <lapicw>
8010392b:	83 c4 08             	add    $0x8,%esp

  // Clear error status register (requires back-to-back writes).
  lapicw(ESR, 0);
8010392e:	6a 00                	push   $0x0
80103930:	68 a0 00 00 00       	push   $0xa0
80103935:	e8 26 ff ff ff       	call   80103860 <lapicw>
8010393a:	83 c4 08             	add    $0x8,%esp
  lapicw(ESR, 0);
8010393d:	6a 00                	push   $0x0
8010393f:	68 a0 00 00 00       	push   $0xa0
80103944:	e8 17 ff ff ff       	call   80103860 <lapicw>
80103949:	83 c4 08             	add    $0x8,%esp

  // Ack any outstanding interrupts.
  lapicw(EOI, 0);
8010394c:	6a 00                	push   $0x0
8010394e:	6a 2c                	push   $0x2c
80103950:	e8 0b ff ff ff       	call   80103860 <lapicw>
80103955:	83 c4 08             	add    $0x8,%esp

  // Send an Init Level De-Assert to synchronise arbitration ID's.
  lapicw(ICRHI, 0);
80103958:	6a 00                	push   $0x0
8010395a:	68 c4 00 00 00       	push   $0xc4
8010395f:	e8 fc fe ff ff       	call   80103860 <lapicw>
80103964:	83 c4 08             	add    $0x8,%esp
  lapicw(ICRLO, BCAST | INIT | LEVEL);
80103967:	68 00 85 08 00       	push   $0x88500
8010396c:	68 c0 00 00 00       	push   $0xc0
80103971:	e8 ea fe ff ff       	call   80103860 <lapicw>
80103976:	83 c4 08             	add    $0x8,%esp
  while(lapic[ICRLO] & DELIVS)
80103979:	90                   	nop
8010397a:	a1 60 e4 10 80       	mov    0x8010e460,%eax
8010397f:	05 00 03 00 00       	add    $0x300,%eax
80103984:	8b 00                	mov    (%eax),%eax
80103986:	25 00 10 00 00       	and    $0x1000,%eax
8010398b:	85 c0                	test   %eax,%eax
8010398d:	75 eb                	jne    8010397a <lapicinit+0xf9>
    ;

  // Enable interrupts on the APIC (but not on the processor).
  lapicw(TPR, 0);
8010398f:	6a 00                	push   $0x0
80103991:	6a 20                	push   $0x20
80103993:	e8 c8 fe ff ff       	call   80103860 <lapicw>
80103998:	83 c4 08             	add    $0x8,%esp
}
8010399b:	c9                   	leave  
8010399c:	c3                   	ret    

8010399d <cpunum>:
// This is only used during secondary processor startup.
// cpu->id is the fast way to get the cpu number, once the
// processor is fully started.
int
cpunum(void)
{
8010399d:	55                   	push   %ebp
8010399e:	89 e5                	mov    %esp,%ebp
801039a0:	83 ec 18             	sub    $0x18,%esp
  // Cannot call cpu when interrupts are enabled:
  // result not guaranteed to last long enough to be used!
  // Would prefer to panic but even printing is chancy here:
  // almost everything, including cprintf and panic, calls cpu,
  // often indirectly through acquire and release.
  if(readeflags()&FL_IF){
801039a3:	e8 a8 fe ff ff       	call   80103850 <readeflags>
801039a8:	25 00 02 00 00       	and    $0x200,%eax
801039ad:	85 c0                	test   %eax,%eax
801039af:	74 26                	je     801039d7 <cpunum+0x3a>
    static int n;
    if(n++ == 0)
801039b1:	a1 64 e4 10 80       	mov    0x8010e464,%eax
801039b6:	8d 50 01             	lea    0x1(%eax),%edx
801039b9:	89 15 64 e4 10 80    	mov    %edx,0x8010e464
801039bf:	85 c0                	test   %eax,%eax
801039c1:	75 14                	jne    801039d7 <cpunum+0x3a>
      cprintf("cpu called from %x with interrupts enabled\n",
801039c3:	8b 45 04             	mov    0x4(%ebp),%eax
801039c6:	83 ec 08             	sub    $0x8,%esp
801039c9:	50                   	push   %eax
801039ca:	68 e8 86 10 80       	push   $0x801086e8
801039cf:	e8 0c d5 ff ff       	call   80100ee0 <cprintf>
801039d4:	83 c4 10             	add    $0x10,%esp
        __builtin_return_address(0));
  }

  if(!lapic)
801039d7:	a1 60 e4 10 80       	mov    0x8010e460,%eax
801039dc:	85 c0                	test   %eax,%eax
801039de:	75 07                	jne    801039e7 <cpunum+0x4a>
    return 0;
801039e0:	b8 00 00 00 00       	mov    $0x0,%eax
801039e5:	eb 57                	jmp    80103a3e <cpunum+0xa1>

  id = lapic[ID]>>24;
801039e7:	a1 60 e4 10 80       	mov    0x8010e460,%eax
801039ec:	83 c0 20             	add    $0x20,%eax
801039ef:	8b 00                	mov    (%eax),%eax
801039f1:	c1 e8 18             	shr    $0x18,%eax
801039f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for (n = 0; n < ncpu; n++)
801039f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801039fe:	eb 2f                	jmp    80103a2f <cpunum+0x92>
    if (id == cpus[n].apicid)
80103a00:	8b 55 f4             	mov    -0xc(%ebp),%edx
80103a03:	89 d0                	mov    %edx,%eax
80103a05:	c1 e0 02             	shl    $0x2,%eax
80103a08:	01 d0                	add    %edx,%eax
80103a0a:	01 c0                	add    %eax,%eax
80103a0c:	01 d0                	add    %edx,%eax
80103a0e:	89 c1                	mov    %eax,%ecx
80103a10:	c1 e1 04             	shl    $0x4,%ecx
80103a13:	01 c8                	add    %ecx,%eax
80103a15:	01 d0                	add    %edx,%eax
80103a17:	05 00 e5 10 80       	add    $0x8010e500,%eax
80103a1c:	8a 40 01             	mov    0x1(%eax),%al
80103a1f:	0f b6 c0             	movzbl %al,%eax
80103a22:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80103a25:	75 05                	jne    80103a2c <cpunum+0x8f>
      return n;
80103a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103a2a:	eb 12                	jmp    80103a3e <cpunum+0xa1>

  if(!lapic)
    return 0;

  id = lapic[ID]>>24;
  for (n = 0; n < ncpu; n++)
80103a2c:	ff 45 f4             	incl   -0xc(%ebp)
80103a2f:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
80103a34:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80103a37:	7c c7                	jl     80103a00 <cpunum+0x63>
    if (id == cpus[n].apicid)
      return n;

  return 0;
80103a39:	b8 00 00 00 00       	mov    $0x0,%eax
}
80103a3e:	c9                   	leave  
80103a3f:	c3                   	ret    

80103a40 <lapiceoi>:

// Acknowledge interrupt.
void
lapiceoi(void)
{
80103a40:	55                   	push   %ebp
80103a41:	89 e5                	mov    %esp,%ebp
  if(lapic)
80103a43:	a1 60 e4 10 80       	mov    0x8010e460,%eax
80103a48:	85 c0                	test   %eax,%eax
80103a4a:	74 0c                	je     80103a58 <lapiceoi+0x18>
    lapicw(EOI, 0);
80103a4c:	6a 00                	push   $0x0
80103a4e:	6a 2c                	push   $0x2c
80103a50:	e8 0b fe ff ff       	call   80103860 <lapicw>
80103a55:	83 c4 08             	add    $0x8,%esp
}
80103a58:	c9                   	leave  
80103a59:	c3                   	ret    

80103a5a <microdelay>:

// Spin for a given number of microseconds.
// On real hardware would want to tune this dynamically.
void
microdelay(int us)
{
80103a5a:	55                   	push   %ebp
80103a5b:	89 e5                	mov    %esp,%ebp
}
80103a5d:	5d                   	pop    %ebp
80103a5e:	c3                   	ret    

80103a5f <lapicstartap>:

// Start additional processor running entry code at addr.
// See Appendix B of MultiProcessor Specification.
void
lapicstartap(uchar apicid, uint addr)
{
80103a5f:	55                   	push   %ebp
80103a60:	89 e5                	mov    %esp,%ebp
80103a62:	83 ec 14             	sub    $0x14,%esp
80103a65:	8b 45 08             	mov    0x8(%ebp),%eax
80103a68:	88 45 ec             	mov    %al,-0x14(%ebp)
  ushort *wrv;
  
  // "The BSP must initialize CMOS shutdown code to 0AH
  // and the warm reset vector (DWORD based at 40:67) to point at
  // the AP startup code prior to the [universal startup algorithm]."
  outb(IO_RTC, 0xF);  // offset 0xF is shutdown code
80103a6b:	6a 0f                	push   $0xf
80103a6d:	6a 70                	push   $0x70
80103a6f:	e8 c0 fd ff ff       	call   80103834 <outb>
80103a74:	83 c4 08             	add    $0x8,%esp
  outb(IO_RTC+1, 0x0A);
80103a77:	6a 0a                	push   $0xa
80103a79:	6a 71                	push   $0x71
80103a7b:	e8 b4 fd ff ff       	call   80103834 <outb>
80103a80:	83 c4 08             	add    $0x8,%esp
  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
80103a83:	c7 45 f8 67 04 00 80 	movl   $0x80000467,-0x8(%ebp)
  wrv[0] = 0;
80103a8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
80103a8d:	66 c7 00 00 00       	movw   $0x0,(%eax)
  wrv[1] = addr >> 4;
80103a92:	8b 45 f8             	mov    -0x8(%ebp),%eax
80103a95:	8d 50 02             	lea    0x2(%eax),%edx
80103a98:	8b 45 0c             	mov    0xc(%ebp),%eax
80103a9b:	c1 e8 04             	shr    $0x4,%eax
80103a9e:	66 89 02             	mov    %ax,(%edx)

  // "Universal startup algorithm."
  // Send INIT (level-triggered) interrupt to reset other CPU.
  lapicw(ICRHI, apicid<<24);
80103aa1:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
80103aa5:	c1 e0 18             	shl    $0x18,%eax
80103aa8:	50                   	push   %eax
80103aa9:	68 c4 00 00 00       	push   $0xc4
80103aae:	e8 ad fd ff ff       	call   80103860 <lapicw>
80103ab3:	83 c4 08             	add    $0x8,%esp
  lapicw(ICRLO, INIT | LEVEL | ASSERT);
80103ab6:	68 00 c5 00 00       	push   $0xc500
80103abb:	68 c0 00 00 00       	push   $0xc0
80103ac0:	e8 9b fd ff ff       	call   80103860 <lapicw>
80103ac5:	83 c4 08             	add    $0x8,%esp
  microdelay(200);
80103ac8:	68 c8 00 00 00       	push   $0xc8
80103acd:	e8 88 ff ff ff       	call   80103a5a <microdelay>
80103ad2:	83 c4 04             	add    $0x4,%esp
  lapicw(ICRLO, INIT | LEVEL);
80103ad5:	68 00 85 00 00       	push   $0x8500
80103ada:	68 c0 00 00 00       	push   $0xc0
80103adf:	e8 7c fd ff ff       	call   80103860 <lapicw>
80103ae4:	83 c4 08             	add    $0x8,%esp
  microdelay(100);    // should be 10ms, but too slow in Bochs!
80103ae7:	6a 64                	push   $0x64
80103ae9:	e8 6c ff ff ff       	call   80103a5a <microdelay>
80103aee:	83 c4 04             	add    $0x4,%esp
  // Send startup IPI (twice!) to enter code.
  // Regular hardware is supposed to only accept a STARTUP
  // when it is in the halted state due to an INIT.  So the second
  // should be ignored, but it is part of the official Intel algorithm.
  // Bochs complains about the second one.  Too bad for Bochs.
  for(i = 0; i < 2; i++){
80103af1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80103af8:	eb 3c                	jmp    80103b36 <lapicstartap+0xd7>
    lapicw(ICRHI, apicid<<24);
80103afa:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
80103afe:	c1 e0 18             	shl    $0x18,%eax
80103b01:	50                   	push   %eax
80103b02:	68 c4 00 00 00       	push   $0xc4
80103b07:	e8 54 fd ff ff       	call   80103860 <lapicw>
80103b0c:	83 c4 08             	add    $0x8,%esp
    lapicw(ICRLO, STARTUP | (addr>>12));
80103b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
80103b12:	c1 e8 0c             	shr    $0xc,%eax
80103b15:	80 cc 06             	or     $0x6,%ah
80103b18:	50                   	push   %eax
80103b19:	68 c0 00 00 00       	push   $0xc0
80103b1e:	e8 3d fd ff ff       	call   80103860 <lapicw>
80103b23:	83 c4 08             	add    $0x8,%esp
    microdelay(200);
80103b26:	68 c8 00 00 00       	push   $0xc8
80103b2b:	e8 2a ff ff ff       	call   80103a5a <microdelay>
80103b30:	83 c4 04             	add    $0x4,%esp
  // Send startup IPI (twice!) to enter code.
  // Regular hardware is supposed to only accept a STARTUP
  // when it is in the halted state due to an INIT.  So the second
  // should be ignored, but it is part of the official Intel algorithm.
  // Bochs complains about the second one.  Too bad for Bochs.
  for(i = 0; i < 2; i++){
80103b33:	ff 45 fc             	incl   -0x4(%ebp)
80103b36:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
80103b3a:	7e be                	jle    80103afa <lapicstartap+0x9b>
    lapicw(ICRHI, apicid<<24);
    lapicw(ICRLO, STARTUP | (addr>>12));
    microdelay(200);
  }
}
80103b3c:	c9                   	leave  
80103b3d:	c3                   	ret    

80103b3e <initlog>:

static void recover_from_log(void);

void
initlog(void)
{
80103b3e:	55                   	push   %ebp
80103b3f:	89 e5                	mov    %esp,%ebp
80103b41:	83 ec 18             	sub    $0x18,%esp
  if (sizeof(struct logheader) >= BSIZE)
    panic("initlog: too big logheader");

  struct superblock sb;
  initlock(&log.lock, "log");
80103b44:	83 ec 08             	sub    $0x8,%esp
80103b47:	68 14 87 10 80       	push   $0x80108714
80103b4c:	68 80 e4 10 80       	push   $0x8010e480
80103b51:	e8 24 1f 00 00       	call   80105a7a <initlock>
80103b56:	83 c4 10             	add    $0x10,%esp
  readsb(ROOTDEV, &sb);
80103b59:	83 ec 08             	sub    $0x8,%esp
80103b5c:	8d 45 e8             	lea    -0x18(%ebp),%eax
80103b5f:	50                   	push   %eax
80103b60:	6a 01                	push   $0x1
80103b62:	e8 d5 e2 ff ff       	call   80101e3c <readsb>
80103b67:	83 c4 10             	add    $0x10,%esp
  log.start = sb.size - sb.nlog;
80103b6a:	8b 55 e8             	mov    -0x18(%ebp),%edx
80103b6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103b70:	29 c2                	sub    %eax,%edx
80103b72:	89 d0                	mov    %edx,%eax
80103b74:	a3 b4 e4 10 80       	mov    %eax,0x8010e4b4
  log.size = sb.nlog;
80103b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103b7c:	a3 b8 e4 10 80       	mov    %eax,0x8010e4b8
  log.dev = ROOTDEV;
80103b81:	c7 05 c0 e4 10 80 01 	movl   $0x1,0x8010e4c0
80103b88:	00 00 00 
  recover_from_log();
80103b8b:	e8 a9 01 00 00       	call   80103d39 <recover_from_log>
}
80103b90:	c9                   	leave  
80103b91:	c3                   	ret    

80103b92 <install_trans>:

// Copy committed blocks from log to their home location
static void 
install_trans(void)
{
80103b92:	55                   	push   %ebp
80103b93:	89 e5                	mov    %esp,%ebp
80103b95:	83 ec 18             	sub    $0x18,%esp
  int tail;

  for (tail = 0; tail < log.lh.n; tail++) {
80103b98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103b9f:	e9 92 00 00 00       	jmp    80103c36 <install_trans+0xa4>
    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
80103ba4:	8b 15 b4 e4 10 80    	mov    0x8010e4b4,%edx
80103baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103bad:	01 d0                	add    %edx,%eax
80103baf:	40                   	inc    %eax
80103bb0:	89 c2                	mov    %eax,%edx
80103bb2:	a1 c0 e4 10 80       	mov    0x8010e4c0,%eax
80103bb7:	83 ec 08             	sub    $0x8,%esp
80103bba:	52                   	push   %edx
80103bbb:	50                   	push   %eax
80103bbc:	e8 b9 d0 ff ff       	call   80100c7a <bread>
80103bc1:	83 c4 10             	add    $0x10,%esp
80103bc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct buf *dbuf = bread(log.dev, log.lh.sector[tail]); // read dst
80103bc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103bca:	83 c0 10             	add    $0x10,%eax
80103bcd:	8b 04 85 88 e4 10 80 	mov    -0x7fef1b78(,%eax,4),%eax
80103bd4:	89 c2                	mov    %eax,%edx
80103bd6:	a1 c0 e4 10 80       	mov    0x8010e4c0,%eax
80103bdb:	83 ec 08             	sub    $0x8,%esp
80103bde:	52                   	push   %edx
80103bdf:	50                   	push   %eax
80103be0:	e8 95 d0 ff ff       	call   80100c7a <bread>
80103be5:	83 c4 10             	add    $0x10,%esp
80103be8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
80103beb:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103bee:	8d 50 18             	lea    0x18(%eax),%edx
80103bf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103bf4:	83 c0 18             	add    $0x18,%eax
80103bf7:	83 ec 04             	sub    $0x4,%esp
80103bfa:	68 00 02 00 00       	push   $0x200
80103bff:	52                   	push   %edx
80103c00:	50                   	push   %eax
80103c01:	e8 13 22 00 00       	call   80105e19 <memmove>
80103c06:	83 c4 10             	add    $0x10,%esp
    bwrite(dbuf);  // write dst to disk
80103c09:	83 ec 0c             	sub    $0xc,%esp
80103c0c:	ff 75 ec             	pushl  -0x14(%ebp)
80103c0f:	e8 9f d0 ff ff       	call   80100cb3 <bwrite>
80103c14:	83 c4 10             	add    $0x10,%esp
    brelse(lbuf); 
80103c17:	83 ec 0c             	sub    $0xc,%esp
80103c1a:	ff 75 f0             	pushl  -0x10(%ebp)
80103c1d:	e8 cf d0 ff ff       	call   80100cf1 <brelse>
80103c22:	83 c4 10             	add    $0x10,%esp
    brelse(dbuf);
80103c25:	83 ec 0c             	sub    $0xc,%esp
80103c28:	ff 75 ec             	pushl  -0x14(%ebp)
80103c2b:	e8 c1 d0 ff ff       	call   80100cf1 <brelse>
80103c30:	83 c4 10             	add    $0x10,%esp
static void 
install_trans(void)
{
  int tail;

  for (tail = 0; tail < log.lh.n; tail++) {
80103c33:	ff 45 f4             	incl   -0xc(%ebp)
80103c36:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103c3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80103c3e:	0f 8f 60 ff ff ff    	jg     80103ba4 <install_trans+0x12>
    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
    bwrite(dbuf);  // write dst to disk
    brelse(lbuf); 
    brelse(dbuf);
  }
}
80103c44:	c9                   	leave  
80103c45:	c3                   	ret    

80103c46 <read_head>:

// Read the log header from disk into the in-memory log header
static void
read_head(void)
{
80103c46:	55                   	push   %ebp
80103c47:	89 e5                	mov    %esp,%ebp
80103c49:	83 ec 18             	sub    $0x18,%esp
  struct buf *buf = bread(log.dev, log.start);
80103c4c:	a1 b4 e4 10 80       	mov    0x8010e4b4,%eax
80103c51:	89 c2                	mov    %eax,%edx
80103c53:	a1 c0 e4 10 80       	mov    0x8010e4c0,%eax
80103c58:	83 ec 08             	sub    $0x8,%esp
80103c5b:	52                   	push   %edx
80103c5c:	50                   	push   %eax
80103c5d:	e8 18 d0 ff ff       	call   80100c7a <bread>
80103c62:	83 c4 10             	add    $0x10,%esp
80103c65:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct logheader *lh = (struct logheader *) (buf->data);
80103c68:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103c6b:	83 c0 18             	add    $0x18,%eax
80103c6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int i;
  log.lh.n = lh->n;
80103c71:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103c74:	8b 00                	mov    (%eax),%eax
80103c76:	a3 c4 e4 10 80       	mov    %eax,0x8010e4c4
  for (i = 0; i < log.lh.n; i++) {
80103c7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103c82:	eb 1a                	jmp    80103c9e <read_head+0x58>
    log.lh.sector[i] = lh->sector[i];
80103c84:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103c87:	8b 55 f4             	mov    -0xc(%ebp),%edx
80103c8a:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
80103c8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
80103c91:	83 c2 10             	add    $0x10,%edx
80103c94:	89 04 95 88 e4 10 80 	mov    %eax,-0x7fef1b78(,%edx,4)
{
  struct buf *buf = bread(log.dev, log.start);
  struct logheader *lh = (struct logheader *) (buf->data);
  int i;
  log.lh.n = lh->n;
  for (i = 0; i < log.lh.n; i++) {
80103c9b:	ff 45 f4             	incl   -0xc(%ebp)
80103c9e:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103ca3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80103ca6:	7f dc                	jg     80103c84 <read_head+0x3e>
    log.lh.sector[i] = lh->sector[i];
  }
  brelse(buf);
80103ca8:	83 ec 0c             	sub    $0xc,%esp
80103cab:	ff 75 f0             	pushl  -0x10(%ebp)
80103cae:	e8 3e d0 ff ff       	call   80100cf1 <brelse>
80103cb3:	83 c4 10             	add    $0x10,%esp
}
80103cb6:	c9                   	leave  
80103cb7:	c3                   	ret    

80103cb8 <write_head>:
// Write in-memory log header to disk.
// This is the true point at which the
// current transaction commits.
static void
write_head(void)
{
80103cb8:	55                   	push   %ebp
80103cb9:	89 e5                	mov    %esp,%ebp
80103cbb:	83 ec 18             	sub    $0x18,%esp
  struct buf *buf = bread(log.dev, log.start);
80103cbe:	a1 b4 e4 10 80       	mov    0x8010e4b4,%eax
80103cc3:	89 c2                	mov    %eax,%edx
80103cc5:	a1 c0 e4 10 80       	mov    0x8010e4c0,%eax
80103cca:	83 ec 08             	sub    $0x8,%esp
80103ccd:	52                   	push   %edx
80103cce:	50                   	push   %eax
80103ccf:	e8 a6 cf ff ff       	call   80100c7a <bread>
80103cd4:	83 c4 10             	add    $0x10,%esp
80103cd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
  struct logheader *hb = (struct logheader *) (buf->data);
80103cda:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103cdd:	83 c0 18             	add    $0x18,%eax
80103ce0:	89 45 ec             	mov    %eax,-0x14(%ebp)
  int i;
  hb->n = log.lh.n;
80103ce3:	8b 15 c4 e4 10 80    	mov    0x8010e4c4,%edx
80103ce9:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103cec:	89 10                	mov    %edx,(%eax)
  for (i = 0; i < log.lh.n; i++) {
80103cee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103cf5:	eb 1a                	jmp    80103d11 <write_head+0x59>
    hb->sector[i] = log.lh.sector[i];
80103cf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103cfa:	83 c0 10             	add    $0x10,%eax
80103cfd:	8b 0c 85 88 e4 10 80 	mov    -0x7fef1b78(,%eax,4),%ecx
80103d04:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103d07:	8b 55 f4             	mov    -0xc(%ebp),%edx
80103d0a:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
{
  struct buf *buf = bread(log.dev, log.start);
  struct logheader *hb = (struct logheader *) (buf->data);
  int i;
  hb->n = log.lh.n;
  for (i = 0; i < log.lh.n; i++) {
80103d0e:	ff 45 f4             	incl   -0xc(%ebp)
80103d11:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103d16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80103d19:	7f dc                	jg     80103cf7 <write_head+0x3f>
    hb->sector[i] = log.lh.sector[i];
  }
  bwrite(buf);
80103d1b:	83 ec 0c             	sub    $0xc,%esp
80103d1e:	ff 75 f0             	pushl  -0x10(%ebp)
80103d21:	e8 8d cf ff ff       	call   80100cb3 <bwrite>
80103d26:	83 c4 10             	add    $0x10,%esp
  brelse(buf);
80103d29:	83 ec 0c             	sub    $0xc,%esp
80103d2c:	ff 75 f0             	pushl  -0x10(%ebp)
80103d2f:	e8 bd cf ff ff       	call   80100cf1 <brelse>
80103d34:	83 c4 10             	add    $0x10,%esp
}
80103d37:	c9                   	leave  
80103d38:	c3                   	ret    

80103d39 <recover_from_log>:

static void
recover_from_log(void)
{
80103d39:	55                   	push   %ebp
80103d3a:	89 e5                	mov    %esp,%ebp
80103d3c:	83 ec 08             	sub    $0x8,%esp
  read_head();      
80103d3f:	e8 02 ff ff ff       	call   80103c46 <read_head>
  install_trans(); // if committed, copy from log to disk
80103d44:	e8 49 fe ff ff       	call   80103b92 <install_trans>
  log.lh.n = 0;
80103d49:	c7 05 c4 e4 10 80 00 	movl   $0x0,0x8010e4c4
80103d50:	00 00 00 
  write_head(); // clear the log
80103d53:	e8 60 ff ff ff       	call   80103cb8 <write_head>
}
80103d58:	c9                   	leave  
80103d59:	c3                   	ret    

80103d5a <begin_trans>:

void
begin_trans(void)
{
80103d5a:	55                   	push   %ebp
80103d5b:	89 e5                	mov    %esp,%ebp
80103d5d:	83 ec 08             	sub    $0x8,%esp
  acquire(&log.lock);
80103d60:	83 ec 0c             	sub    $0xc,%esp
80103d63:	68 80 e4 10 80       	push   $0x8010e480
80103d68:	e8 2e 1d 00 00       	call   80105a9b <acquire>
80103d6d:	83 c4 10             	add    $0x10,%esp
  while (log.busy) {
80103d70:	eb 15                	jmp    80103d87 <begin_trans+0x2d>
    sleep(&log, &log.lock);
80103d72:	83 ec 08             	sub    $0x8,%esp
80103d75:	68 80 e4 10 80       	push   $0x8010e480
80103d7a:	68 80 e4 10 80       	push   $0x8010e480
80103d7f:	e8 2b 1a 00 00       	call   801057af <sleep>
80103d84:	83 c4 10             	add    $0x10,%esp

void
begin_trans(void)
{
  acquire(&log.lock);
  while (log.busy) {
80103d87:	a1 bc e4 10 80       	mov    0x8010e4bc,%eax
80103d8c:	85 c0                	test   %eax,%eax
80103d8e:	75 e2                	jne    80103d72 <begin_trans+0x18>
    sleep(&log, &log.lock);
  }
  log.busy = 1;
80103d90:	c7 05 bc e4 10 80 01 	movl   $0x1,0x8010e4bc
80103d97:	00 00 00 
  release(&log.lock);
80103d9a:	83 ec 0c             	sub    $0xc,%esp
80103d9d:	68 80 e4 10 80       	push   $0x8010e480
80103da2:	e8 ae 1d 00 00       	call   80105b55 <release>
80103da7:	83 c4 10             	add    $0x10,%esp
}
80103daa:	c9                   	leave  
80103dab:	c3                   	ret    

80103dac <commit_trans>:

void
commit_trans(void)
{
80103dac:	55                   	push   %ebp
80103dad:	89 e5                	mov    %esp,%ebp
80103daf:	83 ec 08             	sub    $0x8,%esp
  if (log.lh.n > 0) {
80103db2:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103db7:	85 c0                	test   %eax,%eax
80103db9:	7e 19                	jle    80103dd4 <commit_trans+0x28>
    write_head();    // Write header to disk -- the real commit
80103dbb:	e8 f8 fe ff ff       	call   80103cb8 <write_head>
    install_trans(); // Now install writes to home locations
80103dc0:	e8 cd fd ff ff       	call   80103b92 <install_trans>
    log.lh.n = 0; 
80103dc5:	c7 05 c4 e4 10 80 00 	movl   $0x0,0x8010e4c4
80103dcc:	00 00 00 
    write_head();    // Erase the transaction from the log
80103dcf:	e8 e4 fe ff ff       	call   80103cb8 <write_head>
  }
  
  acquire(&log.lock);
80103dd4:	83 ec 0c             	sub    $0xc,%esp
80103dd7:	68 80 e4 10 80       	push   $0x8010e480
80103ddc:	e8 ba 1c 00 00       	call   80105a9b <acquire>
80103de1:	83 c4 10             	add    $0x10,%esp
  log.busy = 0;
80103de4:	c7 05 bc e4 10 80 00 	movl   $0x0,0x8010e4bc
80103deb:	00 00 00 
  wakeup(&log);
80103dee:	83 ec 0c             	sub    $0xc,%esp
80103df1:	68 80 e4 10 80       	push   $0x8010e480
80103df6:	e8 9d 1a 00 00       	call   80105898 <wakeup>
80103dfb:	83 c4 10             	add    $0x10,%esp
  release(&log.lock);
80103dfe:	83 ec 0c             	sub    $0xc,%esp
80103e01:	68 80 e4 10 80       	push   $0x8010e480
80103e06:	e8 4a 1d 00 00       	call   80105b55 <release>
80103e0b:	83 c4 10             	add    $0x10,%esp
}
80103e0e:	c9                   	leave  
80103e0f:	c3                   	ret    

80103e10 <log_write>:
//   modify bp->data[]
//   log_write(bp)
//   brelse(bp)
void
log_write(struct buf *b)
{
80103e10:	55                   	push   %ebp
80103e11:	89 e5                	mov    %esp,%ebp
80103e13:	83 ec 18             	sub    $0x18,%esp
  int i;

  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
80103e16:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103e1b:	83 f8 09             	cmp    $0x9,%eax
80103e1e:	7f 10                	jg     80103e30 <log_write+0x20>
80103e20:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103e25:	8b 15 b8 e4 10 80    	mov    0x8010e4b8,%edx
80103e2b:	4a                   	dec    %edx
80103e2c:	39 d0                	cmp    %edx,%eax
80103e2e:	7c 0d                	jl     80103e3d <log_write+0x2d>
    panic("too big a transaction");
80103e30:	83 ec 0c             	sub    $0xc,%esp
80103e33:	68 18 87 10 80       	push   $0x80108718
80103e38:	e8 54 d2 ff ff       	call   80101091 <panic>
  if (!log.busy)
80103e3d:	a1 bc e4 10 80       	mov    0x8010e4bc,%eax
80103e42:	85 c0                	test   %eax,%eax
80103e44:	75 0d                	jne    80103e53 <log_write+0x43>
    panic("write outside of trans");
80103e46:	83 ec 0c             	sub    $0xc,%esp
80103e49:	68 2e 87 10 80       	push   $0x8010872e
80103e4e:	e8 3e d2 ff ff       	call   80101091 <panic>

  for (i = 0; i < log.lh.n; i++) {
80103e53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103e5a:	eb 1e                	jmp    80103e7a <log_write+0x6a>
    if (log.lh.sector[i] == b->sector)   // log absorbtion?
80103e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103e5f:	83 c0 10             	add    $0x10,%eax
80103e62:	8b 04 85 88 e4 10 80 	mov    -0x7fef1b78(,%eax,4),%eax
80103e69:	89 c2                	mov    %eax,%edx
80103e6b:	8b 45 08             	mov    0x8(%ebp),%eax
80103e6e:	8b 40 08             	mov    0x8(%eax),%eax
80103e71:	39 c2                	cmp    %eax,%edx
80103e73:	75 02                	jne    80103e77 <log_write+0x67>
      break;
80103e75:	eb 0d                	jmp    80103e84 <log_write+0x74>
  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
    panic("too big a transaction");
  if (!log.busy)
    panic("write outside of trans");

  for (i = 0; i < log.lh.n; i++) {
80103e77:	ff 45 f4             	incl   -0xc(%ebp)
80103e7a:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103e7f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80103e82:	7f d8                	jg     80103e5c <log_write+0x4c>
    if (log.lh.sector[i] == b->sector)   // log absorbtion?
      break;
  }
  log.lh.sector[i] = b->sector;
80103e84:	8b 45 08             	mov    0x8(%ebp),%eax
80103e87:	8b 40 08             	mov    0x8(%eax),%eax
80103e8a:	89 c2                	mov    %eax,%edx
80103e8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103e8f:	83 c0 10             	add    $0x10,%eax
80103e92:	89 14 85 88 e4 10 80 	mov    %edx,-0x7fef1b78(,%eax,4)
  struct buf *lbuf = bread(b->dev, log.start+i+1);
80103e99:	8b 15 b4 e4 10 80    	mov    0x8010e4b4,%edx
80103e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103ea2:	01 d0                	add    %edx,%eax
80103ea4:	40                   	inc    %eax
80103ea5:	89 c2                	mov    %eax,%edx
80103ea7:	8b 45 08             	mov    0x8(%ebp),%eax
80103eaa:	8b 40 04             	mov    0x4(%eax),%eax
80103ead:	83 ec 08             	sub    $0x8,%esp
80103eb0:	52                   	push   %edx
80103eb1:	50                   	push   %eax
80103eb2:	e8 c3 cd ff ff       	call   80100c7a <bread>
80103eb7:	83 c4 10             	add    $0x10,%esp
80103eba:	89 45 f0             	mov    %eax,-0x10(%ebp)
  memmove(lbuf->data, b->data, BSIZE);
80103ebd:	8b 45 08             	mov    0x8(%ebp),%eax
80103ec0:	8d 50 18             	lea    0x18(%eax),%edx
80103ec3:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103ec6:	83 c0 18             	add    $0x18,%eax
80103ec9:	83 ec 04             	sub    $0x4,%esp
80103ecc:	68 00 02 00 00       	push   $0x200
80103ed1:	52                   	push   %edx
80103ed2:	50                   	push   %eax
80103ed3:	e8 41 1f 00 00       	call   80105e19 <memmove>
80103ed8:	83 c4 10             	add    $0x10,%esp
  bwrite(lbuf);
80103edb:	83 ec 0c             	sub    $0xc,%esp
80103ede:	ff 75 f0             	pushl  -0x10(%ebp)
80103ee1:	e8 cd cd ff ff       	call   80100cb3 <bwrite>
80103ee6:	83 c4 10             	add    $0x10,%esp
  brelse(lbuf);
80103ee9:	83 ec 0c             	sub    $0xc,%esp
80103eec:	ff 75 f0             	pushl  -0x10(%ebp)
80103eef:	e8 fd cd ff ff       	call   80100cf1 <brelse>
80103ef4:	83 c4 10             	add    $0x10,%esp
  if (i == log.lh.n)
80103ef7:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103efc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80103eff:	75 0b                	jne    80103f0c <log_write+0xfc>
    log.lh.n++;
80103f01:	a1 c4 e4 10 80       	mov    0x8010e4c4,%eax
80103f06:	40                   	inc    %eax
80103f07:	a3 c4 e4 10 80       	mov    %eax,0x8010e4c4
  b->flags |= B_DIRTY; // XXX prevent eviction
80103f0c:	8b 45 08             	mov    0x8(%ebp),%eax
80103f0f:	8b 00                	mov    (%eax),%eax
80103f11:	83 c8 04             	or     $0x4,%eax
80103f14:	89 c2                	mov    %eax,%edx
80103f16:	8b 45 08             	mov    0x8(%ebp),%eax
80103f19:	89 10                	mov    %edx,(%eax)
}
80103f1b:	c9                   	leave  
80103f1c:	c3                   	ret    

80103f1d <v2p>:
80103f1d:	55                   	push   %ebp
80103f1e:	89 e5                	mov    %esp,%ebp
80103f20:	8b 45 08             	mov    0x8(%ebp),%eax
80103f23:	05 00 00 00 80       	add    $0x80000000,%eax
80103f28:	5d                   	pop    %ebp
80103f29:	c3                   	ret    

80103f2a <p2v>:
static inline void *p2v(uintp a) { return (void *) ((a) + ((uintp)KERNBASE)); }
80103f2a:	55                   	push   %ebp
80103f2b:	89 e5                	mov    %esp,%ebp
80103f2d:	8b 45 08             	mov    0x8(%ebp),%eax
80103f30:	05 00 00 00 80       	add    $0x80000000,%eax
80103f35:	5d                   	pop    %ebp
80103f36:	c3                   	ret    

80103f37 <xchg>:
  asm volatile("hlt");
}

static inline uint
xchg(volatile uint *addr, uintp newval)
{
80103f37:	55                   	push   %ebp
80103f38:	89 e5                	mov    %esp,%ebp
80103f3a:	83 ec 10             	sub    $0x10,%esp
  uint result;
  
  // The + in "+m" denotes a read-modify-write operand.
  asm volatile("lock; xchgl %0, %1" :
80103f3d:	8b 55 08             	mov    0x8(%ebp),%edx
80103f40:	8b 45 0c             	mov    0xc(%ebp),%eax
80103f43:	8b 4d 08             	mov    0x8(%ebp),%ecx
80103f46:	f0 87 02             	lock xchg %eax,(%edx)
80103f49:	89 45 fc             	mov    %eax,-0x4(%ebp)
               "+m" (*addr), "=a" (result) :
               "1" (newval) :
               "cc");
  return result;
80103f4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80103f4f:	c9                   	leave  
80103f50:	c3                   	ret    

80103f51 <main>:
// Bootstrap processor starts running C code here.
// Allocate a real stack and switch to it, first
// doing some setup required for memory allocator to work.
int
main(void)
{
80103f51:	8d 4c 24 04          	lea    0x4(%esp),%ecx
80103f55:	83 e4 f0             	and    $0xfffffff0,%esp
80103f58:	ff 71 fc             	pushl  -0x4(%ecx)
80103f5b:	55                   	push   %ebp
80103f5c:	89 e5                	mov    %esp,%ebp
80103f5e:	51                   	push   %ecx
80103f5f:	83 ec 04             	sub    $0x4,%esp
  uartearlyinit();
80103f62:	e8 d8 35 00 00       	call   8010753f <uartearlyinit>
  kinit1(end, P2V(4*1024*1024)); // phys page allocator
80103f67:	83 ec 08             	sub    $0x8,%esp
80103f6a:	68 00 00 40 80       	push   $0x80400000
80103f6f:	68 e0 22 11 80       	push   $0x801122e0
80103f74:	e8 b5 f5 ff ff       	call   8010352e <kinit1>
80103f79:	83 c4 10             	add    $0x10,%esp
  kvmalloc();      // kernel page table
80103f7c:	e8 2d 3e 00 00       	call   80107dae <kvmalloc>
  if (acpiinit()) // try to use acpi for machine info
80103f81:	e8 49 09 00 00       	call   801048cf <acpiinit>
80103f86:	85 c0                	test   %eax,%eax
80103f88:	74 05                	je     80103f8f <main+0x3e>
    mpinit();      // otherwise use bios MP tables
80103f8a:	e8 93 04 00 00       	call   80104422 <mpinit>
  lapicinit();
80103f8f:	e8 ed f8 ff ff       	call   80103881 <lapicinit>
  seginit();       // set up segments
80103f94:	e8 dc 37 00 00       	call   80107775 <seginit>
  cprintf("\ncpu%d: starting xv6\n\n", cpu->id);
80103f99:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80103f9f:	8a 00                	mov    (%eax),%al
80103fa1:	0f b6 c0             	movzbl %al,%eax
80103fa4:	83 ec 08             	sub    $0x8,%esp
80103fa7:	50                   	push   %eax
80103fa8:	68 45 87 10 80       	push   $0x80108745
80103fad:	e8 2e cf ff ff       	call   80100ee0 <cprintf>
80103fb2:	83 c4 10             	add    $0x10,%esp
  picinit();       // interrupt controller
80103fb5:	e8 7a 0a 00 00       	call   80104a34 <picinit>
  ioapicinit();    // another interrupt controller
80103fba:	e8 6e f4 ff ff       	call   8010342d <ioapicinit>
  consoleinit();   // I/O devices & their interrupts
80103fbf:	e8 41 d6 ff ff       	call   80101605 <consoleinit>
  uartinit();      // serial port
80103fc4:	e8 30 36 00 00       	call   801075f9 <uartinit>
  pinit();         // process table
80103fc9:	e8 65 0f 00 00       	call   80104f33 <pinit>
  tvinit();        // trap vectors
80103fce:	e8 5e 31 00 00       	call   80107131 <tvinit>
  binit();         // buffer cache
80103fd3:	e8 22 cb ff ff       	call   80100afa <binit>
  fileinit();      // file table
80103fd8:	e8 61 da ff ff       	call   80101a3e <fileinit>
  iinit();         // inode cache
80103fdd:	e8 21 e1 ff ff       	call   80102103 <iinit>
  ideinit();       // disk
80103fe2:	e8 91 f0 ff ff       	call   80103078 <ideinit>
  if(!ismp)
80103fe7:	a1 e0 ea 10 80       	mov    0x8010eae0,%eax
80103fec:	85 c0                	test   %eax,%eax
80103fee:	75 05                	jne    80103ff5 <main+0xa4>
    timerinit();   // uniprocessor timer
80103ff0:	e8 c8 30 00 00       	call   801070bd <timerinit>
  startothers();   // start other processors
80103ff5:	e8 7e 00 00 00       	call   80104078 <startothers>
  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
80103ffa:	83 ec 08             	sub    $0x8,%esp
80103ffd:	68 00 00 00 8e       	push   $0x8e000000
80104002:	68 00 00 40 80       	push   $0x80400000
80104007:	e8 5a f5 ff ff       	call   80103566 <kinit2>
8010400c:	83 c4 10             	add    $0x10,%esp
  userinit();      // first user process
8010400f:	e8 41 10 00 00       	call   80105055 <userinit>
  // Finish setting up this processor in mpmain.
  mpmain();
80104014:	e8 1a 00 00 00       	call   80104033 <mpmain>

80104019 <mpenter>:
}

// Other CPUs jump here from entryother.S.
void
mpenter(void)
{
80104019:	55                   	push   %ebp
8010401a:	89 e5                	mov    %esp,%ebp
8010401c:	83 ec 08             	sub    $0x8,%esp
  switchkvm(); 
8010401f:	e8 a1 3d 00 00       	call   80107dc5 <switchkvm>
  seginit();
80104024:	e8 4c 37 00 00       	call   80107775 <seginit>
  lapicinit();
80104029:	e8 53 f8 ff ff       	call   80103881 <lapicinit>
  mpmain();
8010402e:	e8 00 00 00 00       	call   80104033 <mpmain>

80104033 <mpmain>:
}

// Common CPU setup code.
static void
mpmain(void)
{
80104033:	55                   	push   %ebp
80104034:	89 e5                	mov    %esp,%ebp
80104036:	83 ec 08             	sub    $0x8,%esp
  cprintf("cpu%d: starting\n", cpu->id);
80104039:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010403f:	8a 00                	mov    (%eax),%al
80104041:	0f b6 c0             	movzbl %al,%eax
80104044:	83 ec 08             	sub    $0x8,%esp
80104047:	50                   	push   %eax
80104048:	68 5c 87 10 80       	push   $0x8010875c
8010404d:	e8 8e ce ff ff       	call   80100ee0 <cprintf>
80104052:	83 c4 10             	add    $0x10,%esp
  idtinit();       // load idt register
80104055:	e8 35 32 00 00       	call   8010728f <idtinit>
  xchg(&cpu->started, 1); // tell startothers() we're up
8010405a:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80104060:	05 a8 00 00 00       	add    $0xa8,%eax
80104065:	83 ec 08             	sub    $0x8,%esp
80104068:	6a 01                	push   $0x1
8010406a:	50                   	push   %eax
8010406b:	e8 c7 fe ff ff       	call   80103f37 <xchg>
80104070:	83 c4 10             	add    $0x10,%esp
  scheduler();     // start running processes
80104073:	e8 59 15 00 00       	call   801055d1 <scheduler>

80104078 <startothers>:
void entry32mp(void);

// Start the non-boot (AP) processors.
static void
startothers(void)
{
80104078:	55                   	push   %ebp
80104079:	89 e5                	mov    %esp,%ebp
8010407b:	53                   	push   %ebx
8010407c:	83 ec 14             	sub    $0x14,%esp
  char *stack;

  // Write entry code to unused memory at 0x7000.
  // The linker has placed the image of entryother.S in
  // _binary_entryother_start.
  code = p2v(0x7000);
8010407f:	68 00 70 00 00       	push   $0x7000
80104084:	e8 a1 fe ff ff       	call   80103f2a <p2v>
80104089:	83 c4 04             	add    $0x4,%esp
8010408c:	89 45 f0             	mov    %eax,-0x10(%ebp)
  memmove(code, _binary____bootblockother_entryother_start,
8010408f:	b8 8a 00 00 00       	mov    $0x8a,%eax
80104094:	83 ec 04             	sub    $0x4,%esp
80104097:	50                   	push   %eax
80104098:	68 0c b1 10 80       	push   $0x8010b10c
8010409d:	ff 75 f0             	pushl  -0x10(%ebp)
801040a0:	e8 74 1d 00 00       	call   80105e19 <memmove>
801040a5:	83 c4 10             	add    $0x10,%esp
  	(uintp)_binary____bootblockother_entryother_size);

  for(c = cpus; c < cpus+ncpu; c++){
801040a8:	c7 45 f4 00 e5 10 80 	movl   $0x8010e500,-0xc(%ebp)
801040af:	e9 9f 00 00 00       	jmp    80104153 <startothers+0xdb>
    if(c == cpus+cpunum())  // We've started already.
801040b4:	e8 e4 f8 ff ff       	call   8010399d <cpunum>
801040b9:	89 c2                	mov    %eax,%edx
801040bb:	89 d0                	mov    %edx,%eax
801040bd:	c1 e0 02             	shl    $0x2,%eax
801040c0:	01 d0                	add    %edx,%eax
801040c2:	01 c0                	add    %eax,%eax
801040c4:	01 d0                	add    %edx,%eax
801040c6:	89 c1                	mov    %eax,%ecx
801040c8:	c1 e1 04             	shl    $0x4,%ecx
801040cb:	01 c8                	add    %ecx,%eax
801040cd:	01 d0                	add    %edx,%eax
801040cf:	05 00 e5 10 80       	add    $0x8010e500,%eax
801040d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
801040d7:	75 02                	jne    801040db <startothers+0x63>
      continue;
801040d9:	eb 71                	jmp    8010414c <startothers+0xd4>

    // Tell entryother.S what stack to use, where to enter, and what 
    // pgdir to use. We cannot use kpgdir yet, because the AP processor
    // is running in low  memory, so we use entrypgdir for the APs too.
    stack = kalloc();
801040db:	e8 81 f5 ff ff       	call   80103661 <kalloc>
801040e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if X64
    *(uint32*)(code-4) = 0x8000; // just enough stack to get us to entry64mp
    *(uint32*)(code-8) = v2p(entry32mp);
    *(uint64*)(code-16) = (uint64) (stack + KSTACKSIZE);
#else
    *(void**)(code-4) = stack + KSTACKSIZE;
801040e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
801040e6:	83 e8 04             	sub    $0x4,%eax
801040e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
801040ec:	81 c2 00 10 00 00    	add    $0x1000,%edx
801040f2:	89 10                	mov    %edx,(%eax)
    *(void**)(code-8) = mpenter;
801040f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
801040f7:	83 e8 08             	sub    $0x8,%eax
801040fa:	c7 00 19 40 10 80    	movl   $0x80104019,(%eax)
    *(int**)(code-12) = (void *) v2p(entrypgdir);
80104100:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104103:	8d 58 f4             	lea    -0xc(%eax),%ebx
80104106:	83 ec 0c             	sub    $0xc,%esp
80104109:	68 00 a0 10 80       	push   $0x8010a000
8010410e:	e8 0a fe ff ff       	call   80103f1d <v2p>
80104113:	83 c4 10             	add    $0x10,%esp
80104116:	89 03                	mov    %eax,(%ebx)
#endif

    lapicstartap(c->apicid, v2p(code));
80104118:	83 ec 0c             	sub    $0xc,%esp
8010411b:	ff 75 f0             	pushl  -0x10(%ebp)
8010411e:	e8 fa fd ff ff       	call   80103f1d <v2p>
80104123:	83 c4 10             	add    $0x10,%esp
80104126:	89 c2                	mov    %eax,%edx
80104128:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010412b:	8a 40 01             	mov    0x1(%eax),%al
8010412e:	0f b6 c0             	movzbl %al,%eax
80104131:	83 ec 08             	sub    $0x8,%esp
80104134:	52                   	push   %edx
80104135:	50                   	push   %eax
80104136:	e8 24 f9 ff ff       	call   80103a5f <lapicstartap>
8010413b:	83 c4 10             	add    $0x10,%esp

    // wait for cpu to finish mpmain()
    while(c->started == 0)
8010413e:	90                   	nop
8010413f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104142:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
80104148:	85 c0                	test   %eax,%eax
8010414a:	74 f3                	je     8010413f <startothers+0xc7>
  // _binary_entryother_start.
  code = p2v(0x7000);
  memmove(code, _binary____bootblockother_entryother_start,
  	(uintp)_binary____bootblockother_entryother_size);

  for(c = cpus; c < cpus+ncpu; c++){
8010414c:	81 45 f4 bc 00 00 00 	addl   $0xbc,-0xc(%ebp)
80104153:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
80104158:	89 c2                	mov    %eax,%edx
8010415a:	89 d0                	mov    %edx,%eax
8010415c:	c1 e0 02             	shl    $0x2,%eax
8010415f:	01 d0                	add    %edx,%eax
80104161:	01 c0                	add    %eax,%eax
80104163:	01 d0                	add    %edx,%eax
80104165:	89 c1                	mov    %eax,%ecx
80104167:	c1 e1 04             	shl    $0x4,%ecx
8010416a:	01 c8                	add    %ecx,%eax
8010416c:	01 d0                	add    %edx,%eax
8010416e:	05 00 e5 10 80       	add    $0x8010e500,%eax
80104173:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80104176:	0f 87 38 ff ff ff    	ja     801040b4 <startothers+0x3c>

    // wait for cpu to finish mpmain()
    while(c->started == 0)
      ;
  }
}
8010417c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010417f:	c9                   	leave  
80104180:	c3                   	ret    

80104181 <p2v>:
80104181:	55                   	push   %ebp
80104182:	89 e5                	mov    %esp,%ebp
80104184:	8b 45 08             	mov    0x8(%ebp),%eax
80104187:	05 00 00 00 80       	add    $0x80000000,%eax
8010418c:	5d                   	pop    %ebp
8010418d:	c3                   	ret    

8010418e <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
8010418e:	55                   	push   %ebp
8010418f:	89 e5                	mov    %esp,%ebp
80104191:	83 ec 14             	sub    $0x14,%esp
80104194:	8b 45 08             	mov    0x8(%ebp),%eax
80104197:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010419b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010419e:	89 c2                	mov    %eax,%edx
801041a0:	ec                   	in     (%dx),%al
801041a1:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
801041a4:	8a 45 ff             	mov    -0x1(%ebp),%al
}
801041a7:	c9                   	leave  
801041a8:	c3                   	ret    

801041a9 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
801041a9:	55                   	push   %ebp
801041aa:	89 e5                	mov    %esp,%ebp
801041ac:	83 ec 08             	sub    $0x8,%esp
801041af:	8b 45 08             	mov    0x8(%ebp),%eax
801041b2:	8b 55 0c             	mov    0xc(%ebp),%edx
801041b5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
801041b9:	88 55 f8             	mov    %dl,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801041bc:	8a 45 f8             	mov    -0x8(%ebp),%al
801041bf:	8b 55 fc             	mov    -0x4(%ebp),%edx
801041c2:	ee                   	out    %al,(%dx)
}
801041c3:	c9                   	leave  
801041c4:	c3                   	ret    

801041c5 <mpbcpu>:
int ncpu;
uchar ioapicid;

int
mpbcpu(void)
{
801041c5:	55                   	push   %ebp
801041c6:	89 e5                	mov    %esp,%ebp
  return bcpu-cpus;
801041c8:	a1 ec ea 10 80       	mov    0x8010eaec,%eax
801041cd:	89 c2                	mov    %eax,%edx
801041cf:	b8 00 e5 10 80       	mov    $0x8010e500,%eax
801041d4:	29 c2                	sub    %eax,%edx
801041d6:	89 d0                	mov    %edx,%eax
801041d8:	c1 f8 02             	sar    $0x2,%eax
801041db:	89 c2                	mov    %eax,%edx
801041dd:	89 d0                	mov    %edx,%eax
801041df:	c1 e0 03             	shl    $0x3,%eax
801041e2:	01 d0                	add    %edx,%eax
801041e4:	c1 e0 03             	shl    $0x3,%eax
801041e7:	01 d0                	add    %edx,%eax
801041e9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
801041f0:	01 c8                	add    %ecx,%eax
801041f2:	c1 e0 03             	shl    $0x3,%eax
801041f5:	01 d0                	add    %edx,%eax
801041f7:	01 c0                	add    %eax,%eax
801041f9:	01 d0                	add    %edx,%eax
801041fb:	c1 e0 03             	shl    $0x3,%eax
801041fe:	01 d0                	add    %edx,%eax
80104200:	c1 e0 02             	shl    $0x2,%eax
80104203:	01 d0                	add    %edx,%eax
80104205:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
8010420c:	01 c8                	add    %ecx,%eax
8010420e:	01 c0                	add    %eax,%eax
80104210:	01 d0                	add    %edx,%eax
80104212:	01 c0                	add    %eax,%eax
80104214:	01 d0                	add    %edx,%eax
80104216:	89 c1                	mov    %eax,%ecx
80104218:	c1 e1 07             	shl    $0x7,%ecx
8010421b:	01 c8                	add    %ecx,%eax
8010421d:	01 c0                	add    %eax,%eax
8010421f:	01 d0                	add    %edx,%eax
}
80104221:	5d                   	pop    %ebp
80104222:	c3                   	ret    

80104223 <sum>:

static uchar
sum(uchar *addr, int len)
{
80104223:	55                   	push   %ebp
80104224:	89 e5                	mov    %esp,%ebp
80104226:	83 ec 10             	sub    $0x10,%esp
  int i, sum;
  
  sum = 0;
80104229:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  for(i=0; i<len; i++)
80104230:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80104237:	eb 13                	jmp    8010424c <sum+0x29>
    sum += addr[i];
80104239:	8b 55 fc             	mov    -0x4(%ebp),%edx
8010423c:	8b 45 08             	mov    0x8(%ebp),%eax
8010423f:	01 d0                	add    %edx,%eax
80104241:	8a 00                	mov    (%eax),%al
80104243:	0f b6 c0             	movzbl %al,%eax
80104246:	01 45 f8             	add    %eax,-0x8(%ebp)
sum(uchar *addr, int len)
{
  int i, sum;
  
  sum = 0;
  for(i=0; i<len; i++)
80104249:	ff 45 fc             	incl   -0x4(%ebp)
8010424c:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010424f:	3b 45 0c             	cmp    0xc(%ebp),%eax
80104252:	7c e5                	jl     80104239 <sum+0x16>
    sum += addr[i];
  return sum;
80104254:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
80104257:	c9                   	leave  
80104258:	c3                   	ret    

80104259 <mpsearch1>:

// Look for an MP structure in the len bytes at addr.
static struct mp*
mpsearch1(uint a, int len)
{
80104259:	55                   	push   %ebp
8010425a:	89 e5                	mov    %esp,%ebp
8010425c:	83 ec 18             	sub    $0x18,%esp
  uchar *e, *p, *addr;

  addr = p2v(a);
8010425f:	ff 75 08             	pushl  0x8(%ebp)
80104262:	e8 1a ff ff ff       	call   80104181 <p2v>
80104267:	83 c4 04             	add    $0x4,%esp
8010426a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  e = addr+len;
8010426d:	8b 55 0c             	mov    0xc(%ebp),%edx
80104270:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104273:	01 d0                	add    %edx,%eax
80104275:	89 45 ec             	mov    %eax,-0x14(%ebp)
  for(p = addr; p < e; p += sizeof(struct mp))
80104278:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010427b:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010427e:	eb 36                	jmp    801042b6 <mpsearch1+0x5d>
    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
80104280:	83 ec 04             	sub    $0x4,%esp
80104283:	6a 04                	push   $0x4
80104285:	68 70 87 10 80       	push   $0x80108770
8010428a:	ff 75 f4             	pushl  -0xc(%ebp)
8010428d:	e8 35 1b 00 00       	call   80105dc7 <memcmp>
80104292:	83 c4 10             	add    $0x10,%esp
80104295:	85 c0                	test   %eax,%eax
80104297:	75 19                	jne    801042b2 <mpsearch1+0x59>
80104299:	83 ec 08             	sub    $0x8,%esp
8010429c:	6a 10                	push   $0x10
8010429e:	ff 75 f4             	pushl  -0xc(%ebp)
801042a1:	e8 7d ff ff ff       	call   80104223 <sum>
801042a6:	83 c4 10             	add    $0x10,%esp
801042a9:	84 c0                	test   %al,%al
801042ab:	75 05                	jne    801042b2 <mpsearch1+0x59>
      return (struct mp*)p;
801042ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
801042b0:	eb 11                	jmp    801042c3 <mpsearch1+0x6a>
{
  uchar *e, *p, *addr;

  addr = p2v(a);
  e = addr+len;
  for(p = addr; p < e; p += sizeof(struct mp))
801042b2:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
801042b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801042b9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
801042bc:	72 c2                	jb     80104280 <mpsearch1+0x27>
    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
      return (struct mp*)p;
  return 0;
801042be:	b8 00 00 00 00       	mov    $0x0,%eax
}
801042c3:	c9                   	leave  
801042c4:	c3                   	ret    

801042c5 <mpsearch>:
// 1) in the first KB of the EBDA;
// 2) in the last KB of system base memory;
// 3) in the BIOS ROM between 0xE0000 and 0xFFFFF.
static struct mp*
mpsearch(void)
{
801042c5:	55                   	push   %ebp
801042c6:	89 e5                	mov    %esp,%ebp
801042c8:	83 ec 18             	sub    $0x18,%esp
  uchar *bda;
  uint p;
  struct mp *mp;

  bda = (uchar *) P2V(0x400);
801042cb:	c7 45 f4 00 04 00 80 	movl   $0x80000400,-0xc(%ebp)
  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
801042d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801042d5:	83 c0 0f             	add    $0xf,%eax
801042d8:	8a 00                	mov    (%eax),%al
801042da:	0f b6 c0             	movzbl %al,%eax
801042dd:	c1 e0 08             	shl    $0x8,%eax
801042e0:	89 c2                	mov    %eax,%edx
801042e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801042e5:	83 c0 0e             	add    $0xe,%eax
801042e8:	8a 00                	mov    (%eax),%al
801042ea:	0f b6 c0             	movzbl %al,%eax
801042ed:	09 d0                	or     %edx,%eax
801042ef:	c1 e0 04             	shl    $0x4,%eax
801042f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
801042f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801042f9:	74 21                	je     8010431c <mpsearch+0x57>
    if((mp = mpsearch1(p, 1024)))
801042fb:	83 ec 08             	sub    $0x8,%esp
801042fe:	68 00 04 00 00       	push   $0x400
80104303:	ff 75 f0             	pushl  -0x10(%ebp)
80104306:	e8 4e ff ff ff       	call   80104259 <mpsearch1>
8010430b:	83 c4 10             	add    $0x10,%esp
8010430e:	89 45 ec             	mov    %eax,-0x14(%ebp)
80104311:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80104315:	74 4f                	je     80104366 <mpsearch+0xa1>
      return mp;
80104317:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010431a:	eb 5f                	jmp    8010437b <mpsearch+0xb6>
  } else {
    p = ((bda[0x14]<<8)|bda[0x13])*1024;
8010431c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010431f:	83 c0 14             	add    $0x14,%eax
80104322:	8a 00                	mov    (%eax),%al
80104324:	0f b6 c0             	movzbl %al,%eax
80104327:	c1 e0 08             	shl    $0x8,%eax
8010432a:	89 c2                	mov    %eax,%edx
8010432c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010432f:	83 c0 13             	add    $0x13,%eax
80104332:	8a 00                	mov    (%eax),%al
80104334:	0f b6 c0             	movzbl %al,%eax
80104337:	09 d0                	or     %edx,%eax
80104339:	c1 e0 0a             	shl    $0xa,%eax
8010433c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if((mp = mpsearch1(p-1024, 1024)))
8010433f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104342:	2d 00 04 00 00       	sub    $0x400,%eax
80104347:	83 ec 08             	sub    $0x8,%esp
8010434a:	68 00 04 00 00       	push   $0x400
8010434f:	50                   	push   %eax
80104350:	e8 04 ff ff ff       	call   80104259 <mpsearch1>
80104355:	83 c4 10             	add    $0x10,%esp
80104358:	89 45 ec             	mov    %eax,-0x14(%ebp)
8010435b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
8010435f:	74 05                	je     80104366 <mpsearch+0xa1>
      return mp;
80104361:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104364:	eb 15                	jmp    8010437b <mpsearch+0xb6>
  }
  return mpsearch1(0xF0000, 0x10000);
80104366:	83 ec 08             	sub    $0x8,%esp
80104369:	68 00 00 01 00       	push   $0x10000
8010436e:	68 00 00 0f 00       	push   $0xf0000
80104373:	e8 e1 fe ff ff       	call   80104259 <mpsearch1>
80104378:	83 c4 10             	add    $0x10,%esp
}
8010437b:	c9                   	leave  
8010437c:	c3                   	ret    

8010437d <mpconfig>:
// Check for correct signature, calculate the checksum and,
// if correct, check the version.
// To do: check extended table checksum.
static struct mpconf*
mpconfig(struct mp **pmp)
{
8010437d:	55                   	push   %ebp
8010437e:	89 e5                	mov    %esp,%ebp
80104380:	83 ec 18             	sub    $0x18,%esp
  struct mpconf *conf;
  struct mp *mp;

  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
80104383:	e8 3d ff ff ff       	call   801042c5 <mpsearch>
80104388:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010438b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010438f:	74 0a                	je     8010439b <mpconfig+0x1e>
80104391:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104394:	8b 40 04             	mov    0x4(%eax),%eax
80104397:	85 c0                	test   %eax,%eax
80104399:	75 07                	jne    801043a2 <mpconfig+0x25>
    return 0;
8010439b:	b8 00 00 00 00       	mov    $0x0,%eax
801043a0:	eb 7e                	jmp    80104420 <mpconfig+0xa3>
  conf = (struct mpconf*) p2v((uintp) mp->physaddr);
801043a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801043a5:	8b 40 04             	mov    0x4(%eax),%eax
801043a8:	83 ec 0c             	sub    $0xc,%esp
801043ab:	50                   	push   %eax
801043ac:	e8 d0 fd ff ff       	call   80104181 <p2v>
801043b1:	83 c4 10             	add    $0x10,%esp
801043b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(memcmp(conf, "PCMP", 4) != 0)
801043b7:	83 ec 04             	sub    $0x4,%esp
801043ba:	6a 04                	push   $0x4
801043bc:	68 75 87 10 80       	push   $0x80108775
801043c1:	ff 75 f0             	pushl  -0x10(%ebp)
801043c4:	e8 fe 19 00 00       	call   80105dc7 <memcmp>
801043c9:	83 c4 10             	add    $0x10,%esp
801043cc:	85 c0                	test   %eax,%eax
801043ce:	74 07                	je     801043d7 <mpconfig+0x5a>
    return 0;
801043d0:	b8 00 00 00 00       	mov    $0x0,%eax
801043d5:	eb 49                	jmp    80104420 <mpconfig+0xa3>
  if(conf->version != 1 && conf->version != 4)
801043d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
801043da:	8a 40 06             	mov    0x6(%eax),%al
801043dd:	3c 01                	cmp    $0x1,%al
801043df:	74 11                	je     801043f2 <mpconfig+0x75>
801043e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
801043e4:	8a 40 06             	mov    0x6(%eax),%al
801043e7:	3c 04                	cmp    $0x4,%al
801043e9:	74 07                	je     801043f2 <mpconfig+0x75>
    return 0;
801043eb:	b8 00 00 00 00       	mov    $0x0,%eax
801043f0:	eb 2e                	jmp    80104420 <mpconfig+0xa3>
  if(sum((uchar*)conf, conf->length) != 0)
801043f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
801043f5:	8b 40 04             	mov    0x4(%eax),%eax
801043f8:	0f b7 c0             	movzwl %ax,%eax
801043fb:	83 ec 08             	sub    $0x8,%esp
801043fe:	50                   	push   %eax
801043ff:	ff 75 f0             	pushl  -0x10(%ebp)
80104402:	e8 1c fe ff ff       	call   80104223 <sum>
80104407:	83 c4 10             	add    $0x10,%esp
8010440a:	84 c0                	test   %al,%al
8010440c:	74 07                	je     80104415 <mpconfig+0x98>
    return 0;
8010440e:	b8 00 00 00 00       	mov    $0x0,%eax
80104413:	eb 0b                	jmp    80104420 <mpconfig+0xa3>
  *pmp = mp;
80104415:	8b 45 08             	mov    0x8(%ebp),%eax
80104418:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010441b:	89 10                	mov    %edx,(%eax)
  return conf;
8010441d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80104420:	c9                   	leave  
80104421:	c3                   	ret    

80104422 <mpinit>:

void
mpinit(void)
{
80104422:	55                   	push   %ebp
80104423:	89 e5                	mov    %esp,%ebp
80104425:	53                   	push   %ebx
80104426:	83 ec 24             	sub    $0x24,%esp
  struct mp *mp;
  struct mpconf *conf;
  struct mpproc *proc;
  struct mpioapic *ioapic;

  bcpu = &cpus[0];
80104429:	c7 05 ec ea 10 80 00 	movl   $0x8010e500,0x8010eaec
80104430:	e5 10 80 
  if((conf = mpconfig(&mp)) == 0)
80104433:	83 ec 0c             	sub    $0xc,%esp
80104436:	8d 45 e0             	lea    -0x20(%ebp),%eax
80104439:	50                   	push   %eax
8010443a:	e8 3e ff ff ff       	call   8010437d <mpconfig>
8010443f:	83 c4 10             	add    $0x10,%esp
80104442:	89 45 f0             	mov    %eax,-0x10(%ebp)
80104445:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80104449:	75 05                	jne    80104450 <mpinit+0x2e>
    return;
8010444b:	e9 b5 01 00 00       	jmp    80104605 <mpinit+0x1e3>
  ismp = 1;
80104450:	c7 05 e0 ea 10 80 01 	movl   $0x1,0x8010eae0
80104457:	00 00 00 
  lapic = IO2V((uintp)conf->lapicaddr);
8010445a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010445d:	8b 40 24             	mov    0x24(%eax),%eax
80104460:	a3 60 e4 10 80       	mov    %eax,0x8010e460
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
80104465:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104468:	83 c0 2c             	add    $0x2c,%eax
8010446b:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010446e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104471:	8b 40 04             	mov    0x4(%eax),%eax
80104474:	0f b7 d0             	movzwl %ax,%edx
80104477:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010447a:	01 d0                	add    %edx,%eax
8010447c:	89 45 ec             	mov    %eax,-0x14(%ebp)
8010447f:	e9 15 01 00 00       	jmp    80104599 <mpinit+0x177>
    switch(*p){
80104484:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104487:	8a 00                	mov    (%eax),%al
80104489:	0f b6 c0             	movzbl %al,%eax
8010448c:	83 f8 04             	cmp    $0x4,%eax
8010448f:	0f 87 e1 00 00 00    	ja     80104576 <mpinit+0x154>
80104495:	8b 04 85 b4 87 10 80 	mov    -0x7fef784c(,%eax,4),%eax
8010449c:	ff e0                	jmp    *%eax
    case MPPROC:
      proc = (struct mpproc*)p;
8010449e:	8b 45 f4             	mov    -0xc(%ebp),%eax
801044a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
      cprintf("mpinit ncpu=%d apicid=%d\n", ncpu, proc->apicid);
801044a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
801044a7:	8a 40 01             	mov    0x1(%eax),%al
801044aa:	0f b6 d0             	movzbl %al,%edx
801044ad:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
801044b2:	83 ec 04             	sub    $0x4,%esp
801044b5:	52                   	push   %edx
801044b6:	50                   	push   %eax
801044b7:	68 7a 87 10 80       	push   $0x8010877a
801044bc:	e8 1f ca ff ff       	call   80100ee0 <cprintf>
801044c1:	83 c4 10             	add    $0x10,%esp
      if(proc->flags & MPBOOT)
801044c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
801044c7:	8a 40 03             	mov    0x3(%eax),%al
801044ca:	0f b6 c0             	movzbl %al,%eax
801044cd:	83 e0 02             	and    $0x2,%eax
801044d0:	85 c0                	test   %eax,%eax
801044d2:	74 24                	je     801044f8 <mpinit+0xd6>
        bcpu = &cpus[ncpu];
801044d4:	8b 15 e4 ea 10 80    	mov    0x8010eae4,%edx
801044da:	89 d0                	mov    %edx,%eax
801044dc:	c1 e0 02             	shl    $0x2,%eax
801044df:	01 d0                	add    %edx,%eax
801044e1:	01 c0                	add    %eax,%eax
801044e3:	01 d0                	add    %edx,%eax
801044e5:	89 c1                	mov    %eax,%ecx
801044e7:	c1 e1 04             	shl    $0x4,%ecx
801044ea:	01 c8                	add    %ecx,%eax
801044ec:	01 d0                	add    %edx,%eax
801044ee:	05 00 e5 10 80       	add    $0x8010e500,%eax
801044f3:	a3 ec ea 10 80       	mov    %eax,0x8010eaec
      cpus[ncpu].id = ncpu;
801044f8:	8b 15 e4 ea 10 80    	mov    0x8010eae4,%edx
801044fe:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
80104503:	88 c1                	mov    %al,%cl
80104505:	89 d0                	mov    %edx,%eax
80104507:	c1 e0 02             	shl    $0x2,%eax
8010450a:	01 d0                	add    %edx,%eax
8010450c:	01 c0                	add    %eax,%eax
8010450e:	01 d0                	add    %edx,%eax
80104510:	89 c3                	mov    %eax,%ebx
80104512:	c1 e3 04             	shl    $0x4,%ebx
80104515:	01 d8                	add    %ebx,%eax
80104517:	01 d0                	add    %edx,%eax
80104519:	05 00 e5 10 80       	add    $0x8010e500,%eax
8010451e:	88 08                	mov    %cl,(%eax)
      cpus[ncpu].apicid = proc->apicid;
80104520:	8b 15 e4 ea 10 80    	mov    0x8010eae4,%edx
80104526:	8b 45 e8             	mov    -0x18(%ebp),%eax
80104529:	8a 48 01             	mov    0x1(%eax),%cl
8010452c:	89 d0                	mov    %edx,%eax
8010452e:	c1 e0 02             	shl    $0x2,%eax
80104531:	01 d0                	add    %edx,%eax
80104533:	01 c0                	add    %eax,%eax
80104535:	01 d0                	add    %edx,%eax
80104537:	89 c3                	mov    %eax,%ebx
80104539:	c1 e3 04             	shl    $0x4,%ebx
8010453c:	01 d8                	add    %ebx,%eax
8010453e:	01 d0                	add    %edx,%eax
80104540:	05 00 e5 10 80       	add    $0x8010e500,%eax
80104545:	88 48 01             	mov    %cl,0x1(%eax)
      ncpu++;
80104548:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
8010454d:	40                   	inc    %eax
8010454e:	a3 e4 ea 10 80       	mov    %eax,0x8010eae4
      p += sizeof(struct mpproc);
80104553:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
      continue;
80104557:	eb 40                	jmp    80104599 <mpinit+0x177>
    case MPIOAPIC:
      ioapic = (struct mpioapic*)p;
80104559:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010455c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
      ioapicid = ioapic->apicno;
8010455f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80104562:	8a 40 01             	mov    0x1(%eax),%al
80104565:	a2 e8 ea 10 80       	mov    %al,0x8010eae8
      p += sizeof(struct mpioapic);
8010456a:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
      continue;
8010456e:	eb 29                	jmp    80104599 <mpinit+0x177>
    case MPBUS:
    case MPIOINTR:
    case MPLINTR:
      p += 8;
80104570:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
      continue;
80104574:	eb 23                	jmp    80104599 <mpinit+0x177>
    default:
      cprintf("mpinit: unknown config type %x\n", *p);
80104576:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104579:	8a 00                	mov    (%eax),%al
8010457b:	0f b6 c0             	movzbl %al,%eax
8010457e:	83 ec 08             	sub    $0x8,%esp
80104581:	50                   	push   %eax
80104582:	68 94 87 10 80       	push   $0x80108794
80104587:	e8 54 c9 ff ff       	call   80100ee0 <cprintf>
8010458c:	83 c4 10             	add    $0x10,%esp
      ismp = 0;
8010458f:	c7 05 e0 ea 10 80 00 	movl   $0x0,0x8010eae0
80104596:	00 00 00 
  bcpu = &cpus[0];
  if((conf = mpconfig(&mp)) == 0)
    return;
  ismp = 1;
  lapic = IO2V((uintp)conf->lapicaddr);
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
80104599:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010459c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8010459f:	0f 82 df fe ff ff    	jb     80104484 <mpinit+0x62>
    default:
      cprintf("mpinit: unknown config type %x\n", *p);
      ismp = 0;
    }
  }
  if(!ismp){
801045a5:	a1 e0 ea 10 80       	mov    0x8010eae0,%eax
801045aa:	85 c0                	test   %eax,%eax
801045ac:	75 1d                	jne    801045cb <mpinit+0x1a9>
    // Didn't like what we found; fall back to no MP.
    ncpu = 1;
801045ae:	c7 05 e4 ea 10 80 01 	movl   $0x1,0x8010eae4
801045b5:	00 00 00 
    lapic = 0;
801045b8:	c7 05 60 e4 10 80 00 	movl   $0x0,0x8010e460
801045bf:	00 00 00 
    ioapicid = 0;
801045c2:	c6 05 e8 ea 10 80 00 	movb   $0x0,0x8010eae8
    return;
801045c9:	eb 3a                	jmp    80104605 <mpinit+0x1e3>
  }

  if(mp->imcrp){
801045cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
801045ce:	8a 40 0c             	mov    0xc(%eax),%al
801045d1:	84 c0                	test   %al,%al
801045d3:	74 30                	je     80104605 <mpinit+0x1e3>
    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
    // But it would on real hardware.
    outb(0x22, 0x70);   // Select IMCR
801045d5:	83 ec 08             	sub    $0x8,%esp
801045d8:	6a 70                	push   $0x70
801045da:	6a 22                	push   $0x22
801045dc:	e8 c8 fb ff ff       	call   801041a9 <outb>
801045e1:	83 c4 10             	add    $0x10,%esp
    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
801045e4:	83 ec 0c             	sub    $0xc,%esp
801045e7:	6a 23                	push   $0x23
801045e9:	e8 a0 fb ff ff       	call   8010418e <inb>
801045ee:	83 c4 10             	add    $0x10,%esp
801045f1:	83 c8 01             	or     $0x1,%eax
801045f4:	0f b6 c0             	movzbl %al,%eax
801045f7:	83 ec 08             	sub    $0x8,%esp
801045fa:	50                   	push   %eax
801045fb:	6a 23                	push   $0x23
801045fd:	e8 a7 fb ff ff       	call   801041a9 <outb>
80104602:	83 c4 10             	add    $0x10,%esp
  }
}
80104605:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104608:	c9                   	leave  
80104609:	c3                   	ret    

8010460a <p2v>:
8010460a:	55                   	push   %ebp
8010460b:	89 e5                	mov    %esp,%ebp
8010460d:	8b 45 08             	mov    0x8(%ebp),%eax
80104610:	05 00 00 00 80       	add    $0x80000000,%eax
80104615:	5d                   	pop    %ebp
80104616:	c3                   	ret    

80104617 <scan_rdsp>:
extern struct cpu cpus[NCPU];
extern int ismp;
extern int ncpu;
extern uchar ioapicid;

static struct acpi_rdsp *scan_rdsp(uint base, uint len) {
80104617:	55                   	push   %ebp
80104618:	89 e5                	mov    %esp,%ebp
8010461a:	83 ec 18             	sub    $0x18,%esp
  uchar *p;
  for (p = p2v(base); len >= sizeof(struct acpi_rdsp); len -= 4, p += 4) {
8010461d:	ff 75 08             	pushl  0x8(%ebp)
80104620:	e8 e5 ff ff ff       	call   8010460a <p2v>
80104625:	83 c4 04             	add    $0x4,%esp
80104628:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010462b:	eb 59                	jmp    80104686 <scan_rdsp+0x6f>
    if (memcmp(p, SIG_RDSP, 8) == 0) {
8010462d:	83 ec 04             	sub    $0x4,%esp
80104630:	6a 08                	push   $0x8
80104632:	68 c8 87 10 80       	push   $0x801087c8
80104637:	ff 75 f4             	pushl  -0xc(%ebp)
8010463a:	e8 88 17 00 00       	call   80105dc7 <memcmp>
8010463f:	83 c4 10             	add    $0x10,%esp
80104642:	85 c0                	test   %eax,%eax
80104644:	75 38                	jne    8010467e <scan_rdsp+0x67>
      uint sum, n;
      for (sum = 0, n = 0; n < 20; n++)
80104646:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8010464d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
80104654:	eb 13                	jmp    80104669 <scan_rdsp+0x52>
        sum += p[n];
80104656:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104659:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010465c:	01 d0                	add    %edx,%eax
8010465e:	8a 00                	mov    (%eax),%al
80104660:	0f b6 c0             	movzbl %al,%eax
80104663:	01 45 f0             	add    %eax,-0x10(%ebp)
static struct acpi_rdsp *scan_rdsp(uint base, uint len) {
  uchar *p;
  for (p = p2v(base); len >= sizeof(struct acpi_rdsp); len -= 4, p += 4) {
    if (memcmp(p, SIG_RDSP, 8) == 0) {
      uint sum, n;
      for (sum = 0, n = 0; n < 20; n++)
80104666:	ff 45 ec             	incl   -0x14(%ebp)
80104669:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
8010466d:	76 e7                	jbe    80104656 <scan_rdsp+0x3f>
        sum += p[n];
      if ((sum & 0xff) == 0)
8010466f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104672:	0f b6 c0             	movzbl %al,%eax
80104675:	85 c0                	test   %eax,%eax
80104677:	75 05                	jne    8010467e <scan_rdsp+0x67>
        return (struct acpi_rdsp *) p;
80104679:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010467c:	eb 13                	jmp    80104691 <scan_rdsp+0x7a>
extern int ncpu;
extern uchar ioapicid;

static struct acpi_rdsp *scan_rdsp(uint base, uint len) {
  uchar *p;
  for (p = p2v(base); len >= sizeof(struct acpi_rdsp); len -= 4, p += 4) {
8010467e:	83 6d 0c 04          	subl   $0x4,0xc(%ebp)
80104682:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
80104686:	83 7d 0c 1f          	cmpl   $0x1f,0xc(%ebp)
8010468a:	77 a1                	ja     8010462d <scan_rdsp+0x16>
        sum += p[n];
      if ((sum & 0xff) == 0)
        return (struct acpi_rdsp *) p;
    }
  }
  return (struct acpi_rdsp *) 0;  
8010468c:	b8 00 00 00 00       	mov    $0x0,%eax
}
80104691:	c9                   	leave  
80104692:	c3                   	ret    

80104693 <find_rdsp>:

static struct acpi_rdsp *find_rdsp(void) {
80104693:	55                   	push   %ebp
80104694:	89 e5                	mov    %esp,%ebp
80104696:	83 ec 18             	sub    $0x18,%esp
  struct acpi_rdsp *rdsp;
  uintp pa;
  pa = *((ushort*) P2V(0x40E)) << 4; // EBDA
80104699:	b8 0e 04 00 80       	mov    $0x8000040e,%eax
8010469e:	66 8b 00             	mov    (%eax),%ax
801046a1:	0f b7 c0             	movzwl %ax,%eax
801046a4:	c1 e0 04             	shl    $0x4,%eax
801046a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if (pa && (rdsp = scan_rdsp(pa, 1024)))
801046aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801046ae:	74 21                	je     801046d1 <find_rdsp+0x3e>
801046b0:	83 ec 08             	sub    $0x8,%esp
801046b3:	68 00 04 00 00       	push   $0x400
801046b8:	ff 75 f4             	pushl  -0xc(%ebp)
801046bb:	e8 57 ff ff ff       	call   80104617 <scan_rdsp>
801046c0:	83 c4 10             	add    $0x10,%esp
801046c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
801046c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801046ca:	74 05                	je     801046d1 <find_rdsp+0x3e>
    return rdsp;
801046cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801046cf:	eb 15                	jmp    801046e6 <find_rdsp+0x53>
  return scan_rdsp(0xE0000, 0x20000);
801046d1:	83 ec 08             	sub    $0x8,%esp
801046d4:	68 00 00 02 00       	push   $0x20000
801046d9:	68 00 00 0e 00       	push   $0xe0000
801046de:	e8 34 ff ff ff       	call   80104617 <scan_rdsp>
801046e3:	83 c4 10             	add    $0x10,%esp
} 
801046e6:	c9                   	leave  
801046e7:	c3                   	ret    

801046e8 <acpi_config_smp>:

static int acpi_config_smp(struct acpi_madt *madt) {
801046e8:	55                   	push   %ebp
801046e9:	89 e5                	mov    %esp,%ebp
801046eb:	53                   	push   %ebx
801046ec:	83 ec 24             	sub    $0x24,%esp
  uint32 lapic_addr;
  uint nioapic = 0;
801046ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  uchar *p, *e;

  if (!madt)
801046f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801046fa:	75 0a                	jne    80104706 <acpi_config_smp+0x1e>
    return -1;
801046fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104701:	e9 c4 01 00 00       	jmp    801048ca <acpi_config_smp+0x1e2>
  if (madt->header.length < sizeof(struct acpi_madt))
80104706:	8b 45 08             	mov    0x8(%ebp),%eax
80104709:	8b 40 04             	mov    0x4(%eax),%eax
8010470c:	83 f8 2b             	cmp    $0x2b,%eax
8010470f:	77 0a                	ja     8010471b <acpi_config_smp+0x33>
    return -1;
80104711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104716:	e9 af 01 00 00       	jmp    801048ca <acpi_config_smp+0x1e2>

  lapic_addr = madt->lapic_addr_phys;
8010471b:	8b 45 08             	mov    0x8(%ebp),%eax
8010471e:	8b 40 24             	mov    0x24(%eax),%eax
80104721:	89 45 ec             	mov    %eax,-0x14(%ebp)

  p = madt->table;
80104724:	8b 45 08             	mov    0x8(%ebp),%eax
80104727:	83 c0 2c             	add    $0x2c,%eax
8010472a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  e = p + madt->header.length - sizeof(struct acpi_madt);
8010472d:	8b 45 08             	mov    0x8(%ebp),%eax
80104730:	8b 40 04             	mov    0x4(%eax),%eax
80104733:	8d 50 d4             	lea    -0x2c(%eax),%edx
80104736:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104739:	01 d0                	add    %edx,%eax
8010473b:	89 45 e8             	mov    %eax,-0x18(%ebp)

  while (p < e) {
8010473e:	e9 54 01 00 00       	jmp    80104897 <acpi_config_smp+0x1af>
    uint len;
    if ((e - p) < 2)
80104743:	8b 55 e8             	mov    -0x18(%ebp),%edx
80104746:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104749:	29 c2                	sub    %eax,%edx
8010474b:	89 d0                	mov    %edx,%eax
8010474d:	83 f8 01             	cmp    $0x1,%eax
80104750:	7f 05                	jg     80104757 <acpi_config_smp+0x6f>
      break;
80104752:	e9 4c 01 00 00       	jmp    801048a3 <acpi_config_smp+0x1bb>
    len = p[1];
80104757:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010475a:	40                   	inc    %eax
8010475b:	8a 00                	mov    (%eax),%al
8010475d:	0f b6 c0             	movzbl %al,%eax
80104760:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if ((e - p) < len)
80104763:	8b 55 e8             	mov    -0x18(%ebp),%edx
80104766:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104769:	29 c2                	sub    %eax,%edx
8010476b:	89 d0                	mov    %edx,%eax
8010476d:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
80104770:	73 05                	jae    80104777 <acpi_config_smp+0x8f>
      break;
80104772:	e9 2c 01 00 00       	jmp    801048a3 <acpi_config_smp+0x1bb>
    switch (p[0]) {
80104777:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010477a:	8a 00                	mov    (%eax),%al
8010477c:	0f b6 c0             	movzbl %al,%eax
8010477f:	85 c0                	test   %eax,%eax
80104781:	74 0e                	je     80104791 <acpi_config_smp+0xa9>
80104783:	83 f8 01             	cmp    $0x1,%eax
80104786:	0f 84 a5 00 00 00    	je     80104831 <acpi_config_smp+0x149>
8010478c:	e9 00 01 00 00       	jmp    80104891 <acpi_config_smp+0x1a9>
    case TYPE_LAPIC: {
      struct madt_lapic *lapic = (void*) p;
80104791:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104794:	89 45 e0             	mov    %eax,-0x20(%ebp)
      if (len < sizeof(*lapic))
80104797:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
8010479b:	77 05                	ja     801047a2 <acpi_config_smp+0xba>
        break;
8010479d:	e9 ef 00 00 00       	jmp    80104891 <acpi_config_smp+0x1a9>
      if (!(lapic->flags & APIC_LAPIC_ENABLED))
801047a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
801047a5:	8b 40 04             	mov    0x4(%eax),%eax
801047a8:	83 e0 01             	and    $0x1,%eax
801047ab:	85 c0                	test   %eax,%eax
801047ad:	75 05                	jne    801047b4 <acpi_config_smp+0xcc>
        break;
801047af:	e9 dd 00 00 00       	jmp    80104891 <acpi_config_smp+0x1a9>
      cprintf("acpi: cpu#%d apicid %d\n", ncpu, lapic->apic_id);
801047b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
801047b7:	8a 40 03             	mov    0x3(%eax),%al
801047ba:	0f b6 d0             	movzbl %al,%edx
801047bd:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
801047c2:	83 ec 04             	sub    $0x4,%esp
801047c5:	52                   	push   %edx
801047c6:	50                   	push   %eax
801047c7:	68 d1 87 10 80       	push   $0x801087d1
801047cc:	e8 0f c7 ff ff       	call   80100ee0 <cprintf>
801047d1:	83 c4 10             	add    $0x10,%esp
      cpus[ncpu].id = ncpu;
801047d4:	8b 15 e4 ea 10 80    	mov    0x8010eae4,%edx
801047da:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
801047df:	88 c1                	mov    %al,%cl
801047e1:	89 d0                	mov    %edx,%eax
801047e3:	c1 e0 02             	shl    $0x2,%eax
801047e6:	01 d0                	add    %edx,%eax
801047e8:	01 c0                	add    %eax,%eax
801047ea:	01 d0                	add    %edx,%eax
801047ec:	89 c3                	mov    %eax,%ebx
801047ee:	c1 e3 04             	shl    $0x4,%ebx
801047f1:	01 d8                	add    %ebx,%eax
801047f3:	01 d0                	add    %edx,%eax
801047f5:	05 00 e5 10 80       	add    $0x8010e500,%eax
801047fa:	88 08                	mov    %cl,(%eax)
      cpus[ncpu].apicid = lapic->apic_id;
801047fc:	8b 15 e4 ea 10 80    	mov    0x8010eae4,%edx
80104802:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104805:	8a 48 03             	mov    0x3(%eax),%cl
80104808:	89 d0                	mov    %edx,%eax
8010480a:	c1 e0 02             	shl    $0x2,%eax
8010480d:	01 d0                	add    %edx,%eax
8010480f:	01 c0                	add    %eax,%eax
80104811:	01 d0                	add    %edx,%eax
80104813:	89 c3                	mov    %eax,%ebx
80104815:	c1 e3 04             	shl    $0x4,%ebx
80104818:	01 d8                	add    %ebx,%eax
8010481a:	01 d0                	add    %edx,%eax
8010481c:	05 00 e5 10 80       	add    $0x8010e500,%eax
80104821:	88 48 01             	mov    %cl,0x1(%eax)
      ncpu++;
80104824:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
80104829:	40                   	inc    %eax
8010482a:	a3 e4 ea 10 80       	mov    %eax,0x8010eae4
      break;
8010482f:	eb 60                	jmp    80104891 <acpi_config_smp+0x1a9>
    }
    case TYPE_IOAPIC: {
      struct madt_ioapic *ioapic = (void*) p;
80104831:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104834:	89 45 dc             	mov    %eax,-0x24(%ebp)
      if (len < sizeof(*ioapic))
80104837:	83 7d e4 0b          	cmpl   $0xb,-0x1c(%ebp)
8010483b:	77 02                	ja     8010483f <acpi_config_smp+0x157>
        break;
8010483d:	eb 52                	jmp    80104891 <acpi_config_smp+0x1a9>
      cprintf("acpi: ioapic#%d @%x id=%d base=%d\n",
8010483f:	8b 45 dc             	mov    -0x24(%ebp),%eax
80104842:	8b 48 08             	mov    0x8(%eax),%ecx
        nioapic, ioapic->addr, ioapic->id, ioapic->interrupt_base);
80104845:	8b 45 dc             	mov    -0x24(%ebp),%eax
80104848:	8a 40 02             	mov    0x2(%eax),%al
    }
    case TYPE_IOAPIC: {
      struct madt_ioapic *ioapic = (void*) p;
      if (len < sizeof(*ioapic))
        break;
      cprintf("acpi: ioapic#%d @%x id=%d base=%d\n",
8010484b:	0f b6 d0             	movzbl %al,%edx
8010484e:	8b 45 dc             	mov    -0x24(%ebp),%eax
80104851:	8b 40 04             	mov    0x4(%eax),%eax
80104854:	83 ec 0c             	sub    $0xc,%esp
80104857:	51                   	push   %ecx
80104858:	52                   	push   %edx
80104859:	50                   	push   %eax
8010485a:	ff 75 f4             	pushl  -0xc(%ebp)
8010485d:	68 ec 87 10 80       	push   $0x801087ec
80104862:	e8 79 c6 ff ff       	call   80100ee0 <cprintf>
80104867:	83 c4 20             	add    $0x20,%esp
        nioapic, ioapic->addr, ioapic->id, ioapic->interrupt_base);
      if (nioapic) {
8010486a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010486e:	74 12                	je     80104882 <acpi_config_smp+0x19a>
        cprintf("warning: multiple ioapics are not supported");
80104870:	83 ec 0c             	sub    $0xc,%esp
80104873:	68 10 88 10 80       	push   $0x80108810
80104878:	e8 63 c6 ff ff       	call   80100ee0 <cprintf>
8010487d:	83 c4 10             	add    $0x10,%esp
80104880:	eb 0b                	jmp    8010488d <acpi_config_smp+0x1a5>
      } else {
        ioapicid = ioapic->id;
80104882:	8b 45 dc             	mov    -0x24(%ebp),%eax
80104885:	8a 40 02             	mov    0x2(%eax),%al
80104888:	a2 e8 ea 10 80       	mov    %al,0x8010eae8
      }
      nioapic++;
8010488d:	ff 45 f4             	incl   -0xc(%ebp)
      break;
80104890:	90                   	nop
    }
    }
    p += len;
80104891:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80104894:	01 45 f0             	add    %eax,-0x10(%ebp)
  lapic_addr = madt->lapic_addr_phys;

  p = madt->table;
  e = p + madt->header.length - sizeof(struct acpi_madt);

  while (p < e) {
80104897:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010489a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
8010489d:	0f 82 a0 fe ff ff    	jb     80104743 <acpi_config_smp+0x5b>
    }
    }
    p += len;
  }

  if (ncpu) {
801048a3:	a1 e4 ea 10 80       	mov    0x8010eae4,%eax
801048a8:	85 c0                	test   %eax,%eax
801048aa:	74 19                	je     801048c5 <acpi_config_smp+0x1dd>
    ismp = 1;
801048ac:	c7 05 e0 ea 10 80 01 	movl   $0x1,0x8010eae0
801048b3:	00 00 00 
    lapic = IO2V(((uintp)lapic_addr));
801048b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
801048b9:	a3 60 e4 10 80       	mov    %eax,0x8010e460
    return 0;
801048be:	b8 00 00 00 00       	mov    $0x0,%eax
801048c3:	eb 05                	jmp    801048ca <acpi_config_smp+0x1e2>
  }

  return -1;
801048c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801048ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801048cd:	c9                   	leave  
801048ce:	c3                   	ret    

801048cf <acpiinit>:
#define PHYSLIMIT 0x80000000
#else
#define PHYSLIMIT 0x0E000000
#endif

int acpiinit(void) {
801048cf:	55                   	push   %ebp
801048d0:	89 e5                	mov    %esp,%ebp
801048d2:	83 ec 28             	sub    $0x28,%esp
  unsigned n, count;
  struct acpi_rdsp *rdsp;
  struct acpi_rsdt *rsdt;
  struct acpi_madt *madt = 0;
801048d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

  rdsp = find_rdsp();
801048dc:	e8 b2 fd ff ff       	call   80104693 <find_rdsp>
801048e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  if (rdsp->rsdt_addr_phys > PHYSLIMIT)
801048e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
801048e7:	8b 40 10             	mov    0x10(%eax),%eax
801048ea:	3d 00 00 00 0e       	cmp    $0xe000000,%eax
801048ef:	76 05                	jbe    801048f6 <acpiinit+0x27>
    goto notmapped;
801048f1:	e9 9a 00 00 00       	jmp    80104990 <acpiinit+0xc1>
  rsdt = p2v(rdsp->rsdt_addr_phys);
801048f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
801048f9:	8b 40 10             	mov    0x10(%eax),%eax
801048fc:	83 ec 0c             	sub    $0xc,%esp
801048ff:	50                   	push   %eax
80104900:	e8 05 fd ff ff       	call   8010460a <p2v>
80104905:	83 c4 10             	add    $0x10,%esp
80104908:	89 45 e8             	mov    %eax,-0x18(%ebp)
  count = (rsdt->header.length - sizeof(*rsdt)) / 4;
8010490b:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010490e:	8b 40 04             	mov    0x4(%eax),%eax
80104911:	83 e8 24             	sub    $0x24,%eax
80104914:	c1 e8 02             	shr    $0x2,%eax
80104917:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  for (n = 0; n < count; n++) {
8010491a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80104921:	eb 55                	jmp    80104978 <acpiinit+0xa9>
    struct acpi_desc_header *hdr = p2v(rsdt->entry[n]);
80104923:	8b 45 e8             	mov    -0x18(%ebp),%eax
80104926:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104929:	83 c2 08             	add    $0x8,%edx
8010492c:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
80104930:	83 ec 0c             	sub    $0xc,%esp
80104933:	50                   	push   %eax
80104934:	e8 d1 fc ff ff       	call   8010460a <p2v>
80104939:	83 c4 10             	add    $0x10,%esp
8010493c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (rsdt->entry[n] > PHYSLIMIT)
8010493f:	8b 45 e8             	mov    -0x18(%ebp),%eax
80104942:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104945:	83 c2 08             	add    $0x8,%edx
80104948:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
8010494c:	3d 00 00 00 0e       	cmp    $0xe000000,%eax
80104951:	76 02                	jbe    80104955 <acpiinit+0x86>
      goto notmapped;
80104953:	eb 3b                	jmp    80104990 <acpiinit+0xc1>
    memmove(creator, hdr->creator_id, 4); creator[4] = 0;
    cprintf("acpi: %s %s %s %x %s %x\n",
      sig, id, tableid, hdr->oem_revision,
      creator, hdr->creator_revision);
#endif
    if (!memcmp(hdr->signature, SIG_MADT, 4))
80104955:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104958:	83 ec 04             	sub    $0x4,%esp
8010495b:	6a 04                	push   $0x4
8010495d:	68 3c 88 10 80       	push   $0x8010883c
80104962:	50                   	push   %eax
80104963:	e8 5f 14 00 00       	call   80105dc7 <memcmp>
80104968:	83 c4 10             	add    $0x10,%esp
8010496b:	85 c0                	test   %eax,%eax
8010496d:	75 06                	jne    80104975 <acpiinit+0xa6>
      madt = (void*) hdr;
8010496f:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104972:	89 45 f0             	mov    %eax,-0x10(%ebp)
  rdsp = find_rdsp();
  if (rdsp->rsdt_addr_phys > PHYSLIMIT)
    goto notmapped;
  rsdt = p2v(rdsp->rsdt_addr_phys);
  count = (rsdt->header.length - sizeof(*rsdt)) / 4;
  for (n = 0; n < count; n++) {
80104975:	ff 45 f4             	incl   -0xc(%ebp)
80104978:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010497b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
8010497e:	72 a3                	jb     80104923 <acpiinit+0x54>
#endif
    if (!memcmp(hdr->signature, SIG_MADT, 4))
      madt = (void*) hdr;
  }

  return acpi_config_smp(madt);
80104980:	83 ec 0c             	sub    $0xc,%esp
80104983:	ff 75 f0             	pushl  -0x10(%ebp)
80104986:	e8 5d fd ff ff       	call   801046e8 <acpi_config_smp>
8010498b:	83 c4 10             	add    $0x10,%esp
8010498e:	eb 1a                	jmp    801049aa <acpiinit+0xdb>

notmapped:
  cprintf("acpi: tables above 0x%x not mapped.\n", PHYSLIMIT);
80104990:	83 ec 08             	sub    $0x8,%esp
80104993:	68 00 00 00 0e       	push   $0xe000000
80104998:	68 44 88 10 80       	push   $0x80108844
8010499d:	e8 3e c5 ff ff       	call   80100ee0 <cprintf>
801049a2:	83 c4 10             	add    $0x10,%esp
  return -1;
801049a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801049aa:	c9                   	leave  
801049ab:	c3                   	ret    

801049ac <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
801049ac:	55                   	push   %ebp
801049ad:	89 e5                	mov    %esp,%ebp
801049af:	83 ec 08             	sub    $0x8,%esp
801049b2:	8b 45 08             	mov    0x8(%ebp),%eax
801049b5:	8b 55 0c             	mov    0xc(%ebp),%edx
801049b8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
801049bc:	88 55 f8             	mov    %dl,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801049bf:	8a 45 f8             	mov    -0x8(%ebp),%al
801049c2:	8b 55 fc             	mov    -0x4(%ebp),%edx
801049c5:	ee                   	out    %al,(%dx)
}
801049c6:	c9                   	leave  
801049c7:	c3                   	ret    

801049c8 <picsetmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static ushort irqmask = 0xFFFF & ~(1<<IRQ_SLAVE);

static void
picsetmask(ushort mask)
{
801049c8:	55                   	push   %ebp
801049c9:	89 e5                	mov    %esp,%ebp
801049cb:	83 ec 04             	sub    $0x4,%esp
801049ce:	8b 45 08             	mov    0x8(%ebp),%eax
801049d1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  irqmask = mask;
801049d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
801049d8:	66 a3 00 b0 10 80    	mov    %ax,0x8010b000
  outb(IO_PIC1+1, mask);
801049de:	8b 45 fc             	mov    -0x4(%ebp),%eax
801049e1:	0f b6 c0             	movzbl %al,%eax
801049e4:	50                   	push   %eax
801049e5:	6a 21                	push   $0x21
801049e7:	e8 c0 ff ff ff       	call   801049ac <outb>
801049ec:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2+1, mask >> 8);
801049ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
801049f2:	66 c1 e8 08          	shr    $0x8,%ax
801049f6:	0f b6 c0             	movzbl %al,%eax
801049f9:	50                   	push   %eax
801049fa:	68 a1 00 00 00       	push   $0xa1
801049ff:	e8 a8 ff ff ff       	call   801049ac <outb>
80104a04:	83 c4 08             	add    $0x8,%esp
}
80104a07:	c9                   	leave  
80104a08:	c3                   	ret    

80104a09 <picenable>:

void
picenable(int irq)
{
80104a09:	55                   	push   %ebp
80104a0a:	89 e5                	mov    %esp,%ebp
  picsetmask(irqmask & ~(1<<irq));
80104a0c:	8b 45 08             	mov    0x8(%ebp),%eax
80104a0f:	ba 01 00 00 00       	mov    $0x1,%edx
80104a14:	88 c1                	mov    %al,%cl
80104a16:	d3 e2                	shl    %cl,%edx
80104a18:	89 d0                	mov    %edx,%eax
80104a1a:	f7 d0                	not    %eax
80104a1c:	89 c2                	mov    %eax,%edx
80104a1e:	66 a1 00 b0 10 80    	mov    0x8010b000,%ax
80104a24:	21 d0                	and    %edx,%eax
80104a26:	0f b7 c0             	movzwl %ax,%eax
80104a29:	50                   	push   %eax
80104a2a:	e8 99 ff ff ff       	call   801049c8 <picsetmask>
80104a2f:	83 c4 04             	add    $0x4,%esp
}
80104a32:	c9                   	leave  
80104a33:	c3                   	ret    

80104a34 <picinit>:

// Initialize the 8259A interrupt controllers.
void
picinit(void)
{
80104a34:	55                   	push   %ebp
80104a35:	89 e5                	mov    %esp,%ebp
  // mask all interrupts
  outb(IO_PIC1+1, 0xFF);
80104a37:	68 ff 00 00 00       	push   $0xff
80104a3c:	6a 21                	push   $0x21
80104a3e:	e8 69 ff ff ff       	call   801049ac <outb>
80104a43:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2+1, 0xFF);
80104a46:	68 ff 00 00 00       	push   $0xff
80104a4b:	68 a1 00 00 00       	push   $0xa1
80104a50:	e8 57 ff ff ff       	call   801049ac <outb>
80104a55:	83 c4 08             	add    $0x8,%esp

  // ICW1:  0001g0hi
  //    g:  0 = edge triggering, 1 = level triggering
  //    h:  0 = cascaded PICs, 1 = master only
  //    i:  0 = no ICW4, 1 = ICW4 required
  outb(IO_PIC1, 0x11);
80104a58:	6a 11                	push   $0x11
80104a5a:	6a 20                	push   $0x20
80104a5c:	e8 4b ff ff ff       	call   801049ac <outb>
80104a61:	83 c4 08             	add    $0x8,%esp

  // ICW2:  Vector offset
  outb(IO_PIC1+1, T_IRQ0);
80104a64:	6a 20                	push   $0x20
80104a66:	6a 21                	push   $0x21
80104a68:	e8 3f ff ff ff       	call   801049ac <outb>
80104a6d:	83 c4 08             	add    $0x8,%esp

  // ICW3:  (master PIC) bit mask of IR lines connected to slaves
  //        (slave PIC) 3-bit # of slave's connection to master
  outb(IO_PIC1+1, 1<<IRQ_SLAVE);
80104a70:	6a 04                	push   $0x4
80104a72:	6a 21                	push   $0x21
80104a74:	e8 33 ff ff ff       	call   801049ac <outb>
80104a79:	83 c4 08             	add    $0x8,%esp
  //    m:  0 = slave PIC, 1 = master PIC
  //      (ignored when b is 0, as the master/slave role
  //      can be hardwired).
  //    a:  1 = Automatic EOI mode
  //    p:  0 = MCS-80/85 mode, 1 = intel x86 mode
  outb(IO_PIC1+1, 0x3);
80104a7c:	6a 03                	push   $0x3
80104a7e:	6a 21                	push   $0x21
80104a80:	e8 27 ff ff ff       	call   801049ac <outb>
80104a85:	83 c4 08             	add    $0x8,%esp

  // Set up slave (8259A-2)
  outb(IO_PIC2, 0x11);                  // ICW1
80104a88:	6a 11                	push   $0x11
80104a8a:	68 a0 00 00 00       	push   $0xa0
80104a8f:	e8 18 ff ff ff       	call   801049ac <outb>
80104a94:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2+1, T_IRQ0 + 8);      // ICW2
80104a97:	6a 28                	push   $0x28
80104a99:	68 a1 00 00 00       	push   $0xa1
80104a9e:	e8 09 ff ff ff       	call   801049ac <outb>
80104aa3:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2+1, IRQ_SLAVE);           // ICW3
80104aa6:	6a 02                	push   $0x2
80104aa8:	68 a1 00 00 00       	push   $0xa1
80104aad:	e8 fa fe ff ff       	call   801049ac <outb>
80104ab2:	83 c4 08             	add    $0x8,%esp
  // NB Automatic EOI mode doesn't tend to work on the slave.
  // Linux source code says it's "to be investigated".
  outb(IO_PIC2+1, 0x3);                 // ICW4
80104ab5:	6a 03                	push   $0x3
80104ab7:	68 a1 00 00 00       	push   $0xa1
80104abc:	e8 eb fe ff ff       	call   801049ac <outb>
80104ac1:	83 c4 08             	add    $0x8,%esp

  // OCW3:  0ef01prs
  //   ef:  0x = NOP, 10 = clear specific mask, 11 = set specific mask
  //    p:  0 = no polling, 1 = polling mode
  //   rs:  0x = NOP, 10 = read IRR, 11 = read ISR
  outb(IO_PIC1, 0x68);             // clear specific mask
80104ac4:	6a 68                	push   $0x68
80104ac6:	6a 20                	push   $0x20
80104ac8:	e8 df fe ff ff       	call   801049ac <outb>
80104acd:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC1, 0x0a);             // read IRR by default
80104ad0:	6a 0a                	push   $0xa
80104ad2:	6a 20                	push   $0x20
80104ad4:	e8 d3 fe ff ff       	call   801049ac <outb>
80104ad9:	83 c4 08             	add    $0x8,%esp

  outb(IO_PIC2, 0x68);             // OCW3
80104adc:	6a 68                	push   $0x68
80104ade:	68 a0 00 00 00       	push   $0xa0
80104ae3:	e8 c4 fe ff ff       	call   801049ac <outb>
80104ae8:	83 c4 08             	add    $0x8,%esp
  outb(IO_PIC2, 0x0a);             // OCW3
80104aeb:	6a 0a                	push   $0xa
80104aed:	68 a0 00 00 00       	push   $0xa0
80104af2:	e8 b5 fe ff ff       	call   801049ac <outb>
80104af7:	83 c4 08             	add    $0x8,%esp

  if(irqmask != 0xFFFF)
80104afa:	66 a1 00 b0 10 80    	mov    0x8010b000,%ax
80104b00:	66 83 f8 ff          	cmp    $0xffff,%ax
80104b04:	74 12                	je     80104b18 <picinit+0xe4>
    picsetmask(irqmask);
80104b06:	66 a1 00 b0 10 80    	mov    0x8010b000,%ax
80104b0c:	0f b7 c0             	movzwl %ax,%eax
80104b0f:	50                   	push   %eax
80104b10:	e8 b3 fe ff ff       	call   801049c8 <picsetmask>
80104b15:	83 c4 04             	add    $0x4,%esp
}
80104b18:	c9                   	leave  
80104b19:	c3                   	ret    

80104b1a <pipealloc>:
  int writeopen;  // write fd is still open
};

int
pipealloc(struct file **f0, struct file **f1)
{
80104b1a:	55                   	push   %ebp
80104b1b:	89 e5                	mov    %esp,%ebp
80104b1d:	83 ec 18             	sub    $0x18,%esp
  struct pipe *p;

  p = 0;
80104b20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  *f0 = *f1 = 0;
80104b27:	8b 45 0c             	mov    0xc(%ebp),%eax
80104b2a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
80104b30:	8b 45 0c             	mov    0xc(%ebp),%eax
80104b33:	8b 10                	mov    (%eax),%edx
80104b35:	8b 45 08             	mov    0x8(%ebp),%eax
80104b38:	89 10                	mov    %edx,(%eax)
  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
80104b3a:	e8 1c cf ff ff       	call   80101a5b <filealloc>
80104b3f:	89 c2                	mov    %eax,%edx
80104b41:	8b 45 08             	mov    0x8(%ebp),%eax
80104b44:	89 10                	mov    %edx,(%eax)
80104b46:	8b 45 08             	mov    0x8(%ebp),%eax
80104b49:	8b 00                	mov    (%eax),%eax
80104b4b:	85 c0                	test   %eax,%eax
80104b4d:	0f 84 cb 00 00 00    	je     80104c1e <pipealloc+0x104>
80104b53:	e8 03 cf ff ff       	call   80101a5b <filealloc>
80104b58:	89 c2                	mov    %eax,%edx
80104b5a:	8b 45 0c             	mov    0xc(%ebp),%eax
80104b5d:	89 10                	mov    %edx,(%eax)
80104b5f:	8b 45 0c             	mov    0xc(%ebp),%eax
80104b62:	8b 00                	mov    (%eax),%eax
80104b64:	85 c0                	test   %eax,%eax
80104b66:	0f 84 b2 00 00 00    	je     80104c1e <pipealloc+0x104>
    goto bad;
  if((p = (struct pipe*)kalloc()) == 0)
80104b6c:	e8 f0 ea ff ff       	call   80103661 <kalloc>
80104b71:	89 45 f4             	mov    %eax,-0xc(%ebp)
80104b74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80104b78:	75 05                	jne    80104b7f <pipealloc+0x65>
    goto bad;
80104b7a:	e9 9f 00 00 00       	jmp    80104c1e <pipealloc+0x104>
  p->readopen = 1;
80104b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b82:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
80104b89:	00 00 00 
  p->writeopen = 1;
80104b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b8f:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
80104b96:	00 00 00 
  p->nwrite = 0;
80104b99:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b9c:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
80104ba3:	00 00 00 
  p->nread = 0;
80104ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104ba9:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
80104bb0:	00 00 00 
  initlock(&p->lock, "pipe");
80104bb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104bb6:	83 ec 08             	sub    $0x8,%esp
80104bb9:	68 69 88 10 80       	push   $0x80108869
80104bbe:	50                   	push   %eax
80104bbf:	e8 b6 0e 00 00       	call   80105a7a <initlock>
80104bc4:	83 c4 10             	add    $0x10,%esp
  (*f0)->type = FD_PIPE;
80104bc7:	8b 45 08             	mov    0x8(%ebp),%eax
80104bca:	8b 00                	mov    (%eax),%eax
80104bcc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  (*f0)->readable = 1;
80104bd2:	8b 45 08             	mov    0x8(%ebp),%eax
80104bd5:	8b 00                	mov    (%eax),%eax
80104bd7:	c6 40 08 01          	movb   $0x1,0x8(%eax)
  (*f0)->writable = 0;
80104bdb:	8b 45 08             	mov    0x8(%ebp),%eax
80104bde:	8b 00                	mov    (%eax),%eax
80104be0:	c6 40 09 00          	movb   $0x0,0x9(%eax)
  (*f0)->pipe = p;
80104be4:	8b 45 08             	mov    0x8(%ebp),%eax
80104be7:	8b 00                	mov    (%eax),%eax
80104be9:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104bec:	89 50 0c             	mov    %edx,0xc(%eax)
  (*f1)->type = FD_PIPE;
80104bef:	8b 45 0c             	mov    0xc(%ebp),%eax
80104bf2:	8b 00                	mov    (%eax),%eax
80104bf4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  (*f1)->readable = 0;
80104bfa:	8b 45 0c             	mov    0xc(%ebp),%eax
80104bfd:	8b 00                	mov    (%eax),%eax
80104bff:	c6 40 08 00          	movb   $0x0,0x8(%eax)
  (*f1)->writable = 1;
80104c03:	8b 45 0c             	mov    0xc(%ebp),%eax
80104c06:	8b 00                	mov    (%eax),%eax
80104c08:	c6 40 09 01          	movb   $0x1,0x9(%eax)
  (*f1)->pipe = p;
80104c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
80104c0f:	8b 00                	mov    (%eax),%eax
80104c11:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104c14:	89 50 0c             	mov    %edx,0xc(%eax)
  return 0;
80104c17:	b8 00 00 00 00       	mov    $0x0,%eax
80104c1c:	eb 4d                	jmp    80104c6b <pipealloc+0x151>

//PAGEBREAK: 20
 bad:
  if(p)
80104c1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80104c22:	74 0e                	je     80104c32 <pipealloc+0x118>
    kfree((char*)p);
80104c24:	83 ec 0c             	sub    $0xc,%esp
80104c27:	ff 75 f4             	pushl  -0xc(%ebp)
80104c2a:	e8 96 e9 ff ff       	call   801035c5 <kfree>
80104c2f:	83 c4 10             	add    $0x10,%esp
  if(*f0)
80104c32:	8b 45 08             	mov    0x8(%ebp),%eax
80104c35:	8b 00                	mov    (%eax),%eax
80104c37:	85 c0                	test   %eax,%eax
80104c39:	74 11                	je     80104c4c <pipealloc+0x132>
    fileclose(*f0);
80104c3b:	8b 45 08             	mov    0x8(%ebp),%eax
80104c3e:	8b 00                	mov    (%eax),%eax
80104c40:	83 ec 0c             	sub    $0xc,%esp
80104c43:	50                   	push   %eax
80104c44:	e8 cf ce ff ff       	call   80101b18 <fileclose>
80104c49:	83 c4 10             	add    $0x10,%esp
  if(*f1)
80104c4c:	8b 45 0c             	mov    0xc(%ebp),%eax
80104c4f:	8b 00                	mov    (%eax),%eax
80104c51:	85 c0                	test   %eax,%eax
80104c53:	74 11                	je     80104c66 <pipealloc+0x14c>
    fileclose(*f1);
80104c55:	8b 45 0c             	mov    0xc(%ebp),%eax
80104c58:	8b 00                	mov    (%eax),%eax
80104c5a:	83 ec 0c             	sub    $0xc,%esp
80104c5d:	50                   	push   %eax
80104c5e:	e8 b5 ce ff ff       	call   80101b18 <fileclose>
80104c63:	83 c4 10             	add    $0x10,%esp
  return -1;
80104c66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104c6b:	c9                   	leave  
80104c6c:	c3                   	ret    

80104c6d <pipeclose>:

void
pipeclose(struct pipe *p, int writable)
{
80104c6d:	55                   	push   %ebp
80104c6e:	89 e5                	mov    %esp,%ebp
80104c70:	83 ec 08             	sub    $0x8,%esp
  acquire(&p->lock);
80104c73:	8b 45 08             	mov    0x8(%ebp),%eax
80104c76:	83 ec 0c             	sub    $0xc,%esp
80104c79:	50                   	push   %eax
80104c7a:	e8 1c 0e 00 00       	call   80105a9b <acquire>
80104c7f:	83 c4 10             	add    $0x10,%esp
  if(writable){
80104c82:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80104c86:	74 23                	je     80104cab <pipeclose+0x3e>
    p->writeopen = 0;
80104c88:	8b 45 08             	mov    0x8(%ebp),%eax
80104c8b:	c7 80 40 02 00 00 00 	movl   $0x0,0x240(%eax)
80104c92:	00 00 00 
    wakeup(&p->nread);
80104c95:	8b 45 08             	mov    0x8(%ebp),%eax
80104c98:	05 34 02 00 00       	add    $0x234,%eax
80104c9d:	83 ec 0c             	sub    $0xc,%esp
80104ca0:	50                   	push   %eax
80104ca1:	e8 f2 0b 00 00       	call   80105898 <wakeup>
80104ca6:	83 c4 10             	add    $0x10,%esp
80104ca9:	eb 21                	jmp    80104ccc <pipeclose+0x5f>
  } else {
    p->readopen = 0;
80104cab:	8b 45 08             	mov    0x8(%ebp),%eax
80104cae:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%eax)
80104cb5:	00 00 00 
    wakeup(&p->nwrite);
80104cb8:	8b 45 08             	mov    0x8(%ebp),%eax
80104cbb:	05 38 02 00 00       	add    $0x238,%eax
80104cc0:	83 ec 0c             	sub    $0xc,%esp
80104cc3:	50                   	push   %eax
80104cc4:	e8 cf 0b 00 00       	call   80105898 <wakeup>
80104cc9:	83 c4 10             	add    $0x10,%esp
  }
  if(p->readopen == 0 && p->writeopen == 0){
80104ccc:	8b 45 08             	mov    0x8(%ebp),%eax
80104ccf:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
80104cd5:	85 c0                	test   %eax,%eax
80104cd7:	75 2c                	jne    80104d05 <pipeclose+0x98>
80104cd9:	8b 45 08             	mov    0x8(%ebp),%eax
80104cdc:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
80104ce2:	85 c0                	test   %eax,%eax
80104ce4:	75 1f                	jne    80104d05 <pipeclose+0x98>
    release(&p->lock);
80104ce6:	8b 45 08             	mov    0x8(%ebp),%eax
80104ce9:	83 ec 0c             	sub    $0xc,%esp
80104cec:	50                   	push   %eax
80104ced:	e8 63 0e 00 00       	call   80105b55 <release>
80104cf2:	83 c4 10             	add    $0x10,%esp
    kfree((char*)p);
80104cf5:	83 ec 0c             	sub    $0xc,%esp
80104cf8:	ff 75 08             	pushl  0x8(%ebp)
80104cfb:	e8 c5 e8 ff ff       	call   801035c5 <kfree>
80104d00:	83 c4 10             	add    $0x10,%esp
80104d03:	eb 0f                	jmp    80104d14 <pipeclose+0xa7>
  } else
    release(&p->lock);
80104d05:	8b 45 08             	mov    0x8(%ebp),%eax
80104d08:	83 ec 0c             	sub    $0xc,%esp
80104d0b:	50                   	push   %eax
80104d0c:	e8 44 0e 00 00       	call   80105b55 <release>
80104d11:	83 c4 10             	add    $0x10,%esp
}
80104d14:	c9                   	leave  
80104d15:	c3                   	ret    

80104d16 <pipewrite>:

//PAGEBREAK: 40
int
pipewrite(struct pipe *p, char *addr, int n)
{
80104d16:	55                   	push   %ebp
80104d17:	89 e5                	mov    %esp,%ebp
80104d19:	83 ec 18             	sub    $0x18,%esp
  int i;

  acquire(&p->lock);
80104d1c:	8b 45 08             	mov    0x8(%ebp),%eax
80104d1f:	83 ec 0c             	sub    $0xc,%esp
80104d22:	50                   	push   %eax
80104d23:	e8 73 0d 00 00       	call   80105a9b <acquire>
80104d28:	83 c4 10             	add    $0x10,%esp
  for(i = 0; i < n; i++){
80104d2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80104d32:	e9 ad 00 00 00       	jmp    80104de4 <pipewrite+0xce>
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
80104d37:	eb 60                	jmp    80104d99 <pipewrite+0x83>
      if(p->readopen == 0 || proc->killed){
80104d39:	8b 45 08             	mov    0x8(%ebp),%eax
80104d3c:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
80104d42:	85 c0                	test   %eax,%eax
80104d44:	74 0d                	je     80104d53 <pipewrite+0x3d>
80104d46:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104d4c:	8b 40 24             	mov    0x24(%eax),%eax
80104d4f:	85 c0                	test   %eax,%eax
80104d51:	74 19                	je     80104d6c <pipewrite+0x56>
        release(&p->lock);
80104d53:	8b 45 08             	mov    0x8(%ebp),%eax
80104d56:	83 ec 0c             	sub    $0xc,%esp
80104d59:	50                   	push   %eax
80104d5a:	e8 f6 0d 00 00       	call   80105b55 <release>
80104d5f:	83 c4 10             	add    $0x10,%esp
        return -1;
80104d62:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104d67:	e9 aa 00 00 00       	jmp    80104e16 <pipewrite+0x100>
      }
      wakeup(&p->nread);
80104d6c:	8b 45 08             	mov    0x8(%ebp),%eax
80104d6f:	05 34 02 00 00       	add    $0x234,%eax
80104d74:	83 ec 0c             	sub    $0xc,%esp
80104d77:	50                   	push   %eax
80104d78:	e8 1b 0b 00 00       	call   80105898 <wakeup>
80104d7d:	83 c4 10             	add    $0x10,%esp
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
80104d80:	8b 45 08             	mov    0x8(%ebp),%eax
80104d83:	8b 55 08             	mov    0x8(%ebp),%edx
80104d86:	81 c2 38 02 00 00    	add    $0x238,%edx
80104d8c:	83 ec 08             	sub    $0x8,%esp
80104d8f:	50                   	push   %eax
80104d90:	52                   	push   %edx
80104d91:	e8 19 0a 00 00       	call   801057af <sleep>
80104d96:	83 c4 10             	add    $0x10,%esp
{
  int i;

  acquire(&p->lock);
  for(i = 0; i < n; i++){
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
80104d99:	8b 45 08             	mov    0x8(%ebp),%eax
80104d9c:	8b 90 38 02 00 00    	mov    0x238(%eax),%edx
80104da2:	8b 45 08             	mov    0x8(%ebp),%eax
80104da5:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
80104dab:	05 00 02 00 00       	add    $0x200,%eax
80104db0:	39 c2                	cmp    %eax,%edx
80104db2:	74 85                	je     80104d39 <pipewrite+0x23>
        return -1;
      }
      wakeup(&p->nread);
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
    }
    p->data[p->nwrite++ % PIPESIZE] = addr[i];
80104db4:	8b 45 08             	mov    0x8(%ebp),%eax
80104db7:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
80104dbd:	8d 48 01             	lea    0x1(%eax),%ecx
80104dc0:	8b 55 08             	mov    0x8(%ebp),%edx
80104dc3:	89 8a 38 02 00 00    	mov    %ecx,0x238(%edx)
80104dc9:	25 ff 01 00 00       	and    $0x1ff,%eax
80104dce:	89 c1                	mov    %eax,%ecx
80104dd0:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104dd3:	8b 45 0c             	mov    0xc(%ebp),%eax
80104dd6:	01 d0                	add    %edx,%eax
80104dd8:	8a 10                	mov    (%eax),%dl
80104dda:	8b 45 08             	mov    0x8(%ebp),%eax
80104ddd:	88 54 08 34          	mov    %dl,0x34(%eax,%ecx,1)
pipewrite(struct pipe *p, char *addr, int n)
{
  int i;

  acquire(&p->lock);
  for(i = 0; i < n; i++){
80104de1:	ff 45 f4             	incl   -0xc(%ebp)
80104de4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104de7:	3b 45 10             	cmp    0x10(%ebp),%eax
80104dea:	0f 8c 47 ff ff ff    	jl     80104d37 <pipewrite+0x21>
      wakeup(&p->nread);
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
    }
    p->data[p->nwrite++ % PIPESIZE] = addr[i];
  }
  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
80104df0:	8b 45 08             	mov    0x8(%ebp),%eax
80104df3:	05 34 02 00 00       	add    $0x234,%eax
80104df8:	83 ec 0c             	sub    $0xc,%esp
80104dfb:	50                   	push   %eax
80104dfc:	e8 97 0a 00 00       	call   80105898 <wakeup>
80104e01:	83 c4 10             	add    $0x10,%esp
  release(&p->lock);
80104e04:	8b 45 08             	mov    0x8(%ebp),%eax
80104e07:	83 ec 0c             	sub    $0xc,%esp
80104e0a:	50                   	push   %eax
80104e0b:	e8 45 0d 00 00       	call   80105b55 <release>
80104e10:	83 c4 10             	add    $0x10,%esp
  return n;
80104e13:	8b 45 10             	mov    0x10(%ebp),%eax
}
80104e16:	c9                   	leave  
80104e17:	c3                   	ret    

80104e18 <piperead>:

int
piperead(struct pipe *p, char *addr, int n)
{
80104e18:	55                   	push   %ebp
80104e19:	89 e5                	mov    %esp,%ebp
80104e1b:	53                   	push   %ebx
80104e1c:	83 ec 14             	sub    $0x14,%esp
  int i;

  acquire(&p->lock);
80104e1f:	8b 45 08             	mov    0x8(%ebp),%eax
80104e22:	83 ec 0c             	sub    $0xc,%esp
80104e25:	50                   	push   %eax
80104e26:	e8 70 0c 00 00       	call   80105a9b <acquire>
80104e2b:	83 c4 10             	add    $0x10,%esp
  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
80104e2e:	eb 3f                	jmp    80104e6f <piperead+0x57>
    if(proc->killed){
80104e30:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80104e36:	8b 40 24             	mov    0x24(%eax),%eax
80104e39:	85 c0                	test   %eax,%eax
80104e3b:	74 19                	je     80104e56 <piperead+0x3e>
      release(&p->lock);
80104e3d:	8b 45 08             	mov    0x8(%ebp),%eax
80104e40:	83 ec 0c             	sub    $0xc,%esp
80104e43:	50                   	push   %eax
80104e44:	e8 0c 0d 00 00       	call   80105b55 <release>
80104e49:	83 c4 10             	add    $0x10,%esp
      return -1;
80104e4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104e51:	e9 bc 00 00 00       	jmp    80104f12 <piperead+0xfa>
    }
    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
80104e56:	8b 45 08             	mov    0x8(%ebp),%eax
80104e59:	8b 55 08             	mov    0x8(%ebp),%edx
80104e5c:	81 c2 34 02 00 00    	add    $0x234,%edx
80104e62:	83 ec 08             	sub    $0x8,%esp
80104e65:	50                   	push   %eax
80104e66:	52                   	push   %edx
80104e67:	e8 43 09 00 00       	call   801057af <sleep>
80104e6c:	83 c4 10             	add    $0x10,%esp
piperead(struct pipe *p, char *addr, int n)
{
  int i;

  acquire(&p->lock);
  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
80104e6f:	8b 45 08             	mov    0x8(%ebp),%eax
80104e72:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
80104e78:	8b 45 08             	mov    0x8(%ebp),%eax
80104e7b:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
80104e81:	39 c2                	cmp    %eax,%edx
80104e83:	75 0d                	jne    80104e92 <piperead+0x7a>
80104e85:	8b 45 08             	mov    0x8(%ebp),%eax
80104e88:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
80104e8e:	85 c0                	test   %eax,%eax
80104e90:	75 9e                	jne    80104e30 <piperead+0x18>
      release(&p->lock);
      return -1;
    }
    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
  }
  for(i = 0; i < n; i++){  //DOC: piperead-copy
80104e92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80104e99:	eb 49                	jmp    80104ee4 <piperead+0xcc>
    if(p->nread == p->nwrite)
80104e9b:	8b 45 08             	mov    0x8(%ebp),%eax
80104e9e:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
80104ea4:	8b 45 08             	mov    0x8(%ebp),%eax
80104ea7:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
80104ead:	39 c2                	cmp    %eax,%edx
80104eaf:	75 02                	jne    80104eb3 <piperead+0x9b>
      break;
80104eb1:	eb 39                	jmp    80104eec <piperead+0xd4>
    addr[i] = p->data[p->nread++ % PIPESIZE];
80104eb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
80104eb9:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
80104ebc:	8b 45 08             	mov    0x8(%ebp),%eax
80104ebf:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
80104ec5:	8d 48 01             	lea    0x1(%eax),%ecx
80104ec8:	8b 55 08             	mov    0x8(%ebp),%edx
80104ecb:	89 8a 34 02 00 00    	mov    %ecx,0x234(%edx)
80104ed1:	25 ff 01 00 00       	and    $0x1ff,%eax
80104ed6:	89 c2                	mov    %eax,%edx
80104ed8:	8b 45 08             	mov    0x8(%ebp),%eax
80104edb:	8a 44 10 34          	mov    0x34(%eax,%edx,1),%al
80104edf:	88 03                	mov    %al,(%ebx)
      release(&p->lock);
      return -1;
    }
    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
  }
  for(i = 0; i < n; i++){  //DOC: piperead-copy
80104ee1:	ff 45 f4             	incl   -0xc(%ebp)
80104ee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104ee7:	3b 45 10             	cmp    0x10(%ebp),%eax
80104eea:	7c af                	jl     80104e9b <piperead+0x83>
    if(p->nread == p->nwrite)
      break;
    addr[i] = p->data[p->nread++ % PIPESIZE];
  }
  wakeup(&p->nwrite);  //DOC: piperead-wakeup
80104eec:	8b 45 08             	mov    0x8(%ebp),%eax
80104eef:	05 38 02 00 00       	add    $0x238,%eax
80104ef4:	83 ec 0c             	sub    $0xc,%esp
80104ef7:	50                   	push   %eax
80104ef8:	e8 9b 09 00 00       	call   80105898 <wakeup>
80104efd:	83 c4 10             	add    $0x10,%esp
  release(&p->lock);
80104f00:	8b 45 08             	mov    0x8(%ebp),%eax
80104f03:	83 ec 0c             	sub    $0xc,%esp
80104f06:	50                   	push   %eax
80104f07:	e8 49 0c 00 00       	call   80105b55 <release>
80104f0c:	83 c4 10             	add    $0x10,%esp
  return i;
80104f0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80104f12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104f15:	c9                   	leave  
80104f16:	c3                   	ret    

80104f17 <readeflags>:
  asm volatile("ltr %0" : : "r" (sel));
}

static inline uintp
readeflags(void)
{
80104f17:	55                   	push   %ebp
80104f18:	89 e5                	mov    %esp,%ebp
80104f1a:	83 ec 10             	sub    $0x10,%esp
  uintp eflags;
  asm volatile("pushf; pop %0" : "=r" (eflags));
80104f1d:	9c                   	pushf  
80104f1e:	58                   	pop    %eax
80104f1f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return eflags;
80104f22:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80104f25:	c9                   	leave  
80104f26:	c3                   	ret    

80104f27 <sti>:
  asm volatile("cli");
}

static inline void
sti(void)
{
80104f27:	55                   	push   %ebp
80104f28:	89 e5                	mov    %esp,%ebp
  asm volatile("sti");
80104f2a:	fb                   	sti    
}
80104f2b:	5d                   	pop    %ebp
80104f2c:	c3                   	ret    

80104f2d <hlt>:

static inline void
hlt(void)
{
80104f2d:	55                   	push   %ebp
80104f2e:	89 e5                	mov    %esp,%ebp
  asm volatile("hlt");
80104f30:	f4                   	hlt    
}
80104f31:	5d                   	pop    %ebp
80104f32:	c3                   	ret    

80104f33 <pinit>:

static void wakeup1(void *chan);

void
pinit(void)
{
80104f33:	55                   	push   %ebp
80104f34:	89 e5                	mov    %esp,%ebp
80104f36:	83 ec 08             	sub    $0x8,%esp
  initlock(&ptable.lock, "ptable");
80104f39:	83 ec 08             	sub    $0x8,%esp
80104f3c:	68 6e 88 10 80       	push   $0x8010886e
80104f41:	68 00 eb 10 80       	push   $0x8010eb00
80104f46:	e8 2f 0b 00 00       	call   80105a7a <initlock>
80104f4b:	83 c4 10             	add    $0x10,%esp
}
80104f4e:	c9                   	leave  
80104f4f:	c3                   	ret    

80104f50 <allocproc>:
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
80104f50:	55                   	push   %ebp
80104f51:	89 e5                	mov    %esp,%ebp
80104f53:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);
80104f56:	83 ec 0c             	sub    $0xc,%esp
80104f59:	68 00 eb 10 80       	push   $0x8010eb00
80104f5e:	e8 38 0b 00 00       	call   80105a9b <acquire>
80104f63:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104f66:	c7 45 f4 34 eb 10 80 	movl   $0x8010eb34,-0xc(%ebp)
80104f6d:	eb 56                	jmp    80104fc5 <allocproc+0x75>
    if(p->state == UNUSED)
80104f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104f72:	8b 40 0c             	mov    0xc(%eax),%eax
80104f75:	85 c0                	test   %eax,%eax
80104f77:	75 48                	jne    80104fc1 <allocproc+0x71>
      goto found;
80104f79:	90                   	nop
  release(&ptable.lock);
  return 0;

found:
  p->state = EMBRYO;
80104f7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104f7d:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
  p->pid = nextpid++;
80104f84:	a1 04 b0 10 80       	mov    0x8010b004,%eax
80104f89:	8d 50 01             	lea    0x1(%eax),%edx
80104f8c:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
80104f92:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104f95:	89 42 10             	mov    %eax,0x10(%edx)
  release(&ptable.lock);
80104f98:	83 ec 0c             	sub    $0xc,%esp
80104f9b:	68 00 eb 10 80       	push   $0x8010eb00
80104fa0:	e8 b0 0b 00 00       	call   80105b55 <release>
80104fa5:	83 c4 10             	add    $0x10,%esp

  // Allocate kernel stack.
  if((p->kstack = kalloc()) == 0){
80104fa8:	e8 b4 e6 ff ff       	call   80103661 <kalloc>
80104fad:	89 c2                	mov    %eax,%edx
80104faf:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104fb2:	89 50 08             	mov    %edx,0x8(%eax)
80104fb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104fb8:	8b 40 08             	mov    0x8(%eax),%eax
80104fbb:	85 c0                	test   %eax,%eax
80104fbd:	75 37                	jne    80104ff6 <allocproc+0xa6>
80104fbf:	eb 24                	jmp    80104fe5 <allocproc+0x95>
{
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104fc1:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
80104fc5:	81 7d f4 34 0a 11 80 	cmpl   $0x80110a34,-0xc(%ebp)
80104fcc:	72 a1                	jb     80104f6f <allocproc+0x1f>
    if(p->state == UNUSED)
      goto found;
  release(&ptable.lock);
80104fce:	83 ec 0c             	sub    $0xc,%esp
80104fd1:	68 00 eb 10 80       	push   $0x8010eb00
80104fd6:	e8 7a 0b 00 00       	call   80105b55 <release>
80104fdb:	83 c4 10             	add    $0x10,%esp
  return 0;
80104fde:	b8 00 00 00 00       	mov    $0x0,%eax
80104fe3:	eb 6e                	jmp    80105053 <allocproc+0x103>
  p->pid = nextpid++;
  release(&ptable.lock);

  // Allocate kernel stack.
  if((p->kstack = kalloc()) == 0){
    p->state = UNUSED;
80104fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104fe8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    return 0;
80104fef:	b8 00 00 00 00       	mov    $0x0,%eax
80104ff4:	eb 5d                	jmp    80105053 <allocproc+0x103>
  }
  sp = p->kstack + KSTACKSIZE;
80104ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104ff9:	8b 40 08             	mov    0x8(%eax),%eax
80104ffc:	05 00 10 00 00       	add    $0x1000,%eax
80105001:	89 45 f0             	mov    %eax,-0x10(%ebp)
  
  // Leave room for trap frame.
  sp -= sizeof *p->tf;
80105004:	83 6d f0 4c          	subl   $0x4c,-0x10(%ebp)
  p->tf = (struct trapframe*)sp;
80105008:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010500b:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010500e:	89 50 18             	mov    %edx,0x18(%eax)
  
  // Set up new context to start executing at forkret,
  // which returns to trapret.
  sp -= sizeof(uintp);
80105011:	83 6d f0 04          	subl   $0x4,-0x10(%ebp)
  *(uintp*)sp = (uintp)trapret;
80105015:	ba 7d 00 10 80       	mov    $0x8010007d,%edx
8010501a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010501d:	89 10                	mov    %edx,(%eax)

  sp -= sizeof *p->context;
8010501f:	83 6d f0 14          	subl   $0x14,-0x10(%ebp)
  p->context = (struct context*)sp;
80105023:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105026:	8b 55 f0             	mov    -0x10(%ebp),%edx
80105029:	89 50 1c             	mov    %edx,0x1c(%eax)
  memset(p->context, 0, sizeof *p->context);
8010502c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010502f:	8b 40 1c             	mov    0x1c(%eax),%eax
80105032:	83 ec 04             	sub    $0x4,%esp
80105035:	6a 14                	push   $0x14
80105037:	6a 00                	push   $0x0
80105039:	50                   	push   %eax
8010503a:	e8 21 0d 00 00       	call   80105d60 <memset>
8010503f:	83 c4 10             	add    $0x10,%esp
  p->context->eip = (uintp)forkret;
80105042:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105045:	8b 40 1c             	mov    0x1c(%eax),%eax
80105048:	ba 7f 57 10 80       	mov    $0x8010577f,%edx
8010504d:	89 50 10             	mov    %edx,0x10(%eax)

  return p;
80105050:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80105053:	c9                   	leave  
80105054:	c3                   	ret    

80105055 <userinit>:

//PAGEBREAK: 32
// Set up first user process.
void
userinit(void)
{
80105055:	55                   	push   %ebp
80105056:	89 e5                	mov    %esp,%ebp
80105058:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;
  extern char _binary____initcode_initcode_start[];
  extern char _binary____initcode_initcode_size[];
  
  p = allocproc();
8010505b:	e8 f0 fe ff ff       	call   80104f50 <allocproc>
80105060:	89 45 f4             	mov    %eax,-0xc(%ebp)
  initproc = p;
80105063:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105066:	a3 34 0a 11 80       	mov    %eax,0x80110a34
  if((p->pgdir = setupkvm()) == 0)
8010506b:	e8 8c 2c 00 00       	call   80107cfc <setupkvm>
80105070:	89 c2                	mov    %eax,%edx
80105072:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105075:	89 50 04             	mov    %edx,0x4(%eax)
80105078:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010507b:	8b 40 04             	mov    0x4(%eax),%eax
8010507e:	85 c0                	test   %eax,%eax
80105080:	75 0d                	jne    8010508f <userinit+0x3a>
    panic("userinit: out of memory?");
80105082:	83 ec 0c             	sub    $0xc,%esp
80105085:	68 75 88 10 80       	push   $0x80108875
8010508a:	e8 02 c0 ff ff       	call   80101091 <panic>
  inituvm(p->pgdir, _binary____initcode_initcode_start,
8010508f:	ba 2c 00 00 00       	mov    $0x2c,%edx
80105094:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105097:	8b 40 04             	mov    0x4(%eax),%eax
8010509a:	83 ec 04             	sub    $0x4,%esp
8010509d:	52                   	push   %edx
8010509e:	68 e0 b0 10 80       	push   $0x8010b0e0
801050a3:	50                   	push   %eax
801050a4:	e8 9c 2e 00 00       	call   80107f45 <inituvm>
801050a9:	83 c4 10             	add    $0x10,%esp
  	(uintp)_binary____initcode_initcode_size);
  p->sz = PGSIZE;
801050ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
801050af:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
  memset(p->tf, 0, sizeof(*p->tf));
801050b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801050b8:	8b 40 18             	mov    0x18(%eax),%eax
801050bb:	83 ec 04             	sub    $0x4,%esp
801050be:	6a 4c                	push   $0x4c
801050c0:	6a 00                	push   $0x0
801050c2:	50                   	push   %eax
801050c3:	e8 98 0c 00 00       	call   80105d60 <memset>
801050c8:	83 c4 10             	add    $0x10,%esp
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
801050cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801050ce:	8b 40 18             	mov    0x18(%eax),%eax
801050d1:	66 c7 40 3c 23 00    	movw   $0x23,0x3c(%eax)
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
801050d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801050da:	8b 40 18             	mov    0x18(%eax),%eax
801050dd:	66 c7 40 2c 2b 00    	movw   $0x2b,0x2c(%eax)
#ifndef X64
  p->tf->es = p->tf->ds;
801050e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801050e6:	8b 50 18             	mov    0x18(%eax),%edx
801050e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801050ec:	8b 40 18             	mov    0x18(%eax),%eax
801050ef:	8b 40 2c             	mov    0x2c(%eax),%eax
801050f2:	66 89 42 28          	mov    %ax,0x28(%edx)
  p->tf->ss = p->tf->ds;
801050f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801050f9:	8b 50 18             	mov    0x18(%eax),%edx
801050fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801050ff:	8b 40 18             	mov    0x18(%eax),%eax
80105102:	8b 40 2c             	mov    0x2c(%eax),%eax
80105105:	66 89 42 48          	mov    %ax,0x48(%edx)
#endif
  p->tf->eflags = FL_IF;
80105109:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010510c:	8b 40 18             	mov    0x18(%eax),%eax
8010510f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
  p->tf->esp = PGSIZE;
80105116:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105119:	8b 40 18             	mov    0x18(%eax),%eax
8010511c:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
  p->tf->eip = 0;  // beginning of initcode.S
80105123:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105126:	8b 40 18             	mov    0x18(%eax),%eax
80105129:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)

  safestrcpy(p->name, "initcode", sizeof(p->name));
80105130:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105133:	83 c0 6c             	add    $0x6c,%eax
80105136:	83 ec 04             	sub    $0x4,%esp
80105139:	6a 10                	push   $0x10
8010513b:	68 8e 88 10 80       	push   $0x8010888e
80105140:	50                   	push   %eax
80105141:	e8 0b 0e 00 00       	call   80105f51 <safestrcpy>
80105146:	83 c4 10             	add    $0x10,%esp
  p->cwd = namei("/");
80105149:	83 ec 0c             	sub    $0xc,%esp
8010514c:	68 97 88 10 80       	push   $0x80108897
80105151:	e8 25 de ff ff       	call   80102f7b <namei>
80105156:	83 c4 10             	add    $0x10,%esp
80105159:	89 c2                	mov    %eax,%edx
8010515b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010515e:	89 50 68             	mov    %edx,0x68(%eax)

  p->state = RUNNABLE;
80105161:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105164:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
}
8010516b:	c9                   	leave  
8010516c:	c3                   	ret    

8010516d <growproc>:

// Grow current process's memory by n bytes.
// Return 0 on success, -1 on failure.
int
growproc(int n)
{
8010516d:	55                   	push   %ebp
8010516e:	89 e5                	mov    %esp,%ebp
80105170:	83 ec 18             	sub    $0x18,%esp
  uint sz;
  
  sz = proc->sz;
80105173:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105179:	8b 00                	mov    (%eax),%eax
8010517b:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(n > 0){
8010517e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80105182:	7e 31                	jle    801051b5 <growproc+0x48>
    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
80105184:	8b 55 08             	mov    0x8(%ebp),%edx
80105187:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010518a:	01 c2                	add    %eax,%edx
8010518c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105192:	8b 40 04             	mov    0x4(%eax),%eax
80105195:	83 ec 04             	sub    $0x4,%esp
80105198:	52                   	push   %edx
80105199:	ff 75 f4             	pushl  -0xc(%ebp)
8010519c:	50                   	push   %eax
8010519d:	e8 ef 2e 00 00       	call   80108091 <allocuvm>
801051a2:	83 c4 10             	add    $0x10,%esp
801051a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
801051a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801051ac:	75 3e                	jne    801051ec <growproc+0x7f>
      return -1;
801051ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801051b3:	eb 59                	jmp    8010520e <growproc+0xa1>
  } else if(n < 0){
801051b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801051b9:	79 31                	jns    801051ec <growproc+0x7f>
    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
801051bb:	8b 55 08             	mov    0x8(%ebp),%edx
801051be:	8b 45 f4             	mov    -0xc(%ebp),%eax
801051c1:	01 c2                	add    %eax,%edx
801051c3:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801051c9:	8b 40 04             	mov    0x4(%eax),%eax
801051cc:	83 ec 04             	sub    $0x4,%esp
801051cf:	52                   	push   %edx
801051d0:	ff 75 f4             	pushl  -0xc(%ebp)
801051d3:	50                   	push   %eax
801051d4:	e8 81 2f 00 00       	call   8010815a <deallocuvm>
801051d9:	83 c4 10             	add    $0x10,%esp
801051dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
801051df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801051e3:	75 07                	jne    801051ec <growproc+0x7f>
      return -1;
801051e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801051ea:	eb 22                	jmp    8010520e <growproc+0xa1>
  }
  proc->sz = sz;
801051ec:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801051f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
801051f5:	89 10                	mov    %edx,(%eax)
  switchuvm(proc);
801051f7:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801051fd:	83 ec 0c             	sub    $0xc,%esp
80105200:	50                   	push   %eax
80105201:	e8 db 2b 00 00       	call   80107de1 <switchuvm>
80105206:	83 c4 10             	add    $0x10,%esp
  return 0;
80105209:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010520e:	c9                   	leave  
8010520f:	c3                   	ret    

80105210 <fork>:
// Create a new process copying p as the parent.
// Sets up stack to return as if from system call.
// Caller must set state of returned proc to RUNNABLE.
int
fork(void)
{
80105210:	55                   	push   %ebp
80105211:	89 e5                	mov    %esp,%ebp
80105213:	57                   	push   %edi
80105214:	56                   	push   %esi
80105215:	53                   	push   %ebx
80105216:	83 ec 1c             	sub    $0x1c,%esp
  int i, pid;
  struct proc *np;

  // Allocate process.
  if((np = allocproc()) == 0)
80105219:	e8 32 fd ff ff       	call   80104f50 <allocproc>
8010521e:	89 45 e0             	mov    %eax,-0x20(%ebp)
80105221:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
80105225:	75 0a                	jne    80105231 <fork+0x21>
    return -1;
80105227:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010522c:	e9 47 01 00 00       	jmp    80105378 <fork+0x168>

  // Copy process state from p.
  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
80105231:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105237:	8b 10                	mov    (%eax),%edx
80105239:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010523f:	8b 40 04             	mov    0x4(%eax),%eax
80105242:	83 ec 08             	sub    $0x8,%esp
80105245:	52                   	push   %edx
80105246:	50                   	push   %eax
80105247:	e8 a9 30 00 00       	call   801082f5 <copyuvm>
8010524c:	83 c4 10             	add    $0x10,%esp
8010524f:	89 c2                	mov    %eax,%edx
80105251:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105254:	89 50 04             	mov    %edx,0x4(%eax)
80105257:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010525a:	8b 40 04             	mov    0x4(%eax),%eax
8010525d:	85 c0                	test   %eax,%eax
8010525f:	75 30                	jne    80105291 <fork+0x81>
    kfree(np->kstack);
80105261:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105264:	8b 40 08             	mov    0x8(%eax),%eax
80105267:	83 ec 0c             	sub    $0xc,%esp
8010526a:	50                   	push   %eax
8010526b:	e8 55 e3 ff ff       	call   801035c5 <kfree>
80105270:	83 c4 10             	add    $0x10,%esp
    np->kstack = 0;
80105273:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105276:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    np->state = UNUSED;
8010527d:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105280:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    return -1;
80105287:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010528c:	e9 e7 00 00 00       	jmp    80105378 <fork+0x168>
  }
  np->sz = proc->sz;
80105291:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105297:	8b 10                	mov    (%eax),%edx
80105299:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010529c:	89 10                	mov    %edx,(%eax)
  np->parent = proc;
8010529e:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
801052a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
801052a8:	89 50 14             	mov    %edx,0x14(%eax)
  *np->tf = *proc->tf;
801052ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
801052ae:	8b 50 18             	mov    0x18(%eax),%edx
801052b1:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801052b7:	8b 40 18             	mov    0x18(%eax),%eax
801052ba:	89 c3                	mov    %eax,%ebx
801052bc:	b8 13 00 00 00       	mov    $0x13,%eax
801052c1:	89 d7                	mov    %edx,%edi
801052c3:	89 de                	mov    %ebx,%esi
801052c5:	89 c1                	mov    %eax,%ecx
801052c7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;
801052c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
801052cc:	8b 40 18             	mov    0x18(%eax),%eax
801052cf:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

  for(i = 0; i < NOFILE; i++)
801052d6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
801052dd:	eb 42                	jmp    80105321 <fork+0x111>
    if(proc->ofile[i])
801052df:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801052e5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801052e8:	83 c2 08             	add    $0x8,%edx
801052eb:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
801052ef:	85 c0                	test   %eax,%eax
801052f1:	74 2b                	je     8010531e <fork+0x10e>
      np->ofile[i] = filedup(proc->ofile[i]);
801052f3:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801052f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801052fc:	83 c2 08             	add    $0x8,%edx
801052ff:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
80105303:	83 ec 0c             	sub    $0xc,%esp
80105306:	50                   	push   %eax
80105307:	e8 bb c7 ff ff       	call   80101ac7 <filedup>
8010530c:	83 c4 10             	add    $0x10,%esp
8010530f:	89 c2                	mov    %eax,%edx
80105311:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105314:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80105317:	83 c1 08             	add    $0x8,%ecx
8010531a:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
  *np->tf = *proc->tf;

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;

  for(i = 0; i < NOFILE; i++)
8010531e:	ff 45 e4             	incl   -0x1c(%ebp)
80105321:	83 7d e4 0f          	cmpl   $0xf,-0x1c(%ebp)
80105325:	7e b8                	jle    801052df <fork+0xcf>
    if(proc->ofile[i])
      np->ofile[i] = filedup(proc->ofile[i]);
  np->cwd = idup(proc->cwd);
80105327:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010532d:	8b 40 68             	mov    0x68(%eax),%eax
80105330:	83 ec 0c             	sub    $0xc,%esp
80105333:	50                   	push   %eax
80105334:	e8 5c d0 ff ff       	call   80102395 <idup>
80105339:	83 c4 10             	add    $0x10,%esp
8010533c:	89 c2                	mov    %eax,%edx
8010533e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105341:	89 50 68             	mov    %edx,0x68(%eax)
 
  pid = np->pid;
80105344:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105347:	8b 40 10             	mov    0x10(%eax),%eax
8010534a:	89 45 dc             	mov    %eax,-0x24(%ebp)
  np->state = RUNNABLE;
8010534d:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105350:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  safestrcpy(np->name, proc->name, sizeof(proc->name));
80105357:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010535d:	8d 50 6c             	lea    0x6c(%eax),%edx
80105360:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105363:	83 c0 6c             	add    $0x6c,%eax
80105366:	83 ec 04             	sub    $0x4,%esp
80105369:	6a 10                	push   $0x10
8010536b:	52                   	push   %edx
8010536c:	50                   	push   %eax
8010536d:	e8 df 0b 00 00       	call   80105f51 <safestrcpy>
80105372:	83 c4 10             	add    $0x10,%esp
  return pid;
80105375:	8b 45 dc             	mov    -0x24(%ebp),%eax
}
80105378:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010537b:	5b                   	pop    %ebx
8010537c:	5e                   	pop    %esi
8010537d:	5f                   	pop    %edi
8010537e:	5d                   	pop    %ebp
8010537f:	c3                   	ret    

80105380 <exit>:
// Exit the current process.  Does not return.
// An exited process remains in the zombie state
// until its parent calls wait() to find out it exited.
void
exit(void)
{
80105380:	55                   	push   %ebp
80105381:	89 e5                	mov    %esp,%ebp
80105383:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;
  int fd;

  if(proc == initproc)
80105386:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
8010538d:	a1 34 0a 11 80       	mov    0x80110a34,%eax
80105392:	39 c2                	cmp    %eax,%edx
80105394:	75 0d                	jne    801053a3 <exit+0x23>
    panic("init exiting");
80105396:	83 ec 0c             	sub    $0xc,%esp
80105399:	68 99 88 10 80       	push   $0x80108899
8010539e:	e8 ee bc ff ff       	call   80101091 <panic>

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
801053a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
801053aa:	eb 47                	jmp    801053f3 <exit+0x73>
    if(proc->ofile[fd]){
801053ac:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801053b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
801053b5:	83 c2 08             	add    $0x8,%edx
801053b8:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
801053bc:	85 c0                	test   %eax,%eax
801053be:	74 30                	je     801053f0 <exit+0x70>
      fileclose(proc->ofile[fd]);
801053c0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801053c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
801053c9:	83 c2 08             	add    $0x8,%edx
801053cc:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
801053d0:	83 ec 0c             	sub    $0xc,%esp
801053d3:	50                   	push   %eax
801053d4:	e8 3f c7 ff ff       	call   80101b18 <fileclose>
801053d9:	83 c4 10             	add    $0x10,%esp
      proc->ofile[fd] = 0;
801053dc:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801053e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
801053e5:	83 c2 08             	add    $0x8,%edx
801053e8:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
801053ef:	00 

  if(proc == initproc)
    panic("init exiting");

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
801053f0:	ff 45 f0             	incl   -0x10(%ebp)
801053f3:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
801053f7:	7e b3                	jle    801053ac <exit+0x2c>
      fileclose(proc->ofile[fd]);
      proc->ofile[fd] = 0;
    }
  }

  iput(proc->cwd);
801053f9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801053ff:	8b 40 68             	mov    0x68(%eax),%eax
80105402:	83 ec 0c             	sub    $0xc,%esp
80105405:	50                   	push   %eax
80105406:	e8 89 d1 ff ff       	call   80102594 <iput>
8010540b:	83 c4 10             	add    $0x10,%esp
  proc->cwd = 0;
8010540e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105414:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)

  acquire(&ptable.lock);
8010541b:	83 ec 0c             	sub    $0xc,%esp
8010541e:	68 00 eb 10 80       	push   $0x8010eb00
80105423:	e8 73 06 00 00       	call   80105a9b <acquire>
80105428:	83 c4 10             	add    $0x10,%esp

  // Parent might be sleeping in wait().
  wakeup1(proc->parent);
8010542b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105431:	8b 40 14             	mov    0x14(%eax),%eax
80105434:	83 ec 0c             	sub    $0xc,%esp
80105437:	50                   	push   %eax
80105438:	e8 1d 04 00 00       	call   8010585a <wakeup1>
8010543d:	83 c4 10             	add    $0x10,%esp

  // Pass abandoned children to init.
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105440:	c7 45 f4 34 eb 10 80 	movl   $0x8010eb34,-0xc(%ebp)
80105447:	eb 3c                	jmp    80105485 <exit+0x105>
    if(p->parent == proc){
80105449:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010544c:	8b 50 14             	mov    0x14(%eax),%edx
8010544f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105455:	39 c2                	cmp    %eax,%edx
80105457:	75 28                	jne    80105481 <exit+0x101>
      p->parent = initproc;
80105459:	8b 15 34 0a 11 80    	mov    0x80110a34,%edx
8010545f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105462:	89 50 14             	mov    %edx,0x14(%eax)
      if(p->state == ZOMBIE)
80105465:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105468:	8b 40 0c             	mov    0xc(%eax),%eax
8010546b:	83 f8 05             	cmp    $0x5,%eax
8010546e:	75 11                	jne    80105481 <exit+0x101>
        wakeup1(initproc);
80105470:	a1 34 0a 11 80       	mov    0x80110a34,%eax
80105475:	83 ec 0c             	sub    $0xc,%esp
80105478:	50                   	push   %eax
80105479:	e8 dc 03 00 00       	call   8010585a <wakeup1>
8010547e:	83 c4 10             	add    $0x10,%esp

  // Parent might be sleeping in wait().
  wakeup1(proc->parent);

  // Pass abandoned children to init.
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105481:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
80105485:	81 7d f4 34 0a 11 80 	cmpl   $0x80110a34,-0xc(%ebp)
8010548c:	72 bb                	jb     80105449 <exit+0xc9>
        wakeup1(initproc);
    }
  }

  // Jump into the scheduler, never to return.
  proc->state = ZOMBIE;
8010548e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105494:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
  sched();
8010549b:	e8 ea 01 00 00       	call   8010568a <sched>
  panic("zombie exit");
801054a0:	83 ec 0c             	sub    $0xc,%esp
801054a3:	68 a6 88 10 80       	push   $0x801088a6
801054a8:	e8 e4 bb ff ff       	call   80101091 <panic>

801054ad <wait>:

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait(void)
{
801054ad:	55                   	push   %ebp
801054ae:	89 e5                	mov    %esp,%ebp
801054b0:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;
  int havekids, pid;

  acquire(&ptable.lock);
801054b3:	83 ec 0c             	sub    $0xc,%esp
801054b6:	68 00 eb 10 80       	push   $0x8010eb00
801054bb:	e8 db 05 00 00       	call   80105a9b <acquire>
801054c0:	83 c4 10             	add    $0x10,%esp
  for(;;){
    // Scan through table looking for zombie children.
    havekids = 0;
801054c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
801054ca:	c7 45 f4 34 eb 10 80 	movl   $0x8010eb34,-0xc(%ebp)
801054d1:	e9 a6 00 00 00       	jmp    8010557c <wait+0xcf>
      if(p->parent != proc)
801054d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801054d9:	8b 50 14             	mov    0x14(%eax),%edx
801054dc:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801054e2:	39 c2                	cmp    %eax,%edx
801054e4:	74 05                	je     801054eb <wait+0x3e>
        continue;
801054e6:	e9 8d 00 00 00       	jmp    80105578 <wait+0xcb>
      havekids = 1;
801054eb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
      if(p->state == ZOMBIE){
801054f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801054f5:	8b 40 0c             	mov    0xc(%eax),%eax
801054f8:	83 f8 05             	cmp    $0x5,%eax
801054fb:	75 7b                	jne    80105578 <wait+0xcb>
        // Found one.
        pid = p->pid;
801054fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105500:	8b 40 10             	mov    0x10(%eax),%eax
80105503:	89 45 ec             	mov    %eax,-0x14(%ebp)
        kfree(p->kstack);
80105506:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105509:	8b 40 08             	mov    0x8(%eax),%eax
8010550c:	83 ec 0c             	sub    $0xc,%esp
8010550f:	50                   	push   %eax
80105510:	e8 b0 e0 ff ff       	call   801035c5 <kfree>
80105515:	83 c4 10             	add    $0x10,%esp
        p->kstack = 0;
80105518:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010551b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        freevm(p->pgdir);
80105522:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105525:	8b 40 04             	mov    0x4(%eax),%eax
80105528:	83 ec 0c             	sub    $0xc,%esp
8010552b:	50                   	push   %eax
8010552c:	e8 e6 2c 00 00       	call   80108217 <freevm>
80105531:	83 c4 10             	add    $0x10,%esp
        p->state = UNUSED;
80105534:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105537:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        p->pid = 0;
8010553e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105541:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        p->parent = 0;
80105548:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010554b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        p->name[0] = 0;
80105552:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105555:	c6 40 6c 00          	movb   $0x0,0x6c(%eax)
        p->killed = 0;
80105559:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010555c:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
        release(&ptable.lock);
80105563:	83 ec 0c             	sub    $0xc,%esp
80105566:	68 00 eb 10 80       	push   $0x8010eb00
8010556b:	e8 e5 05 00 00       	call   80105b55 <release>
80105570:	83 c4 10             	add    $0x10,%esp
        return pid;
80105573:	8b 45 ec             	mov    -0x14(%ebp),%eax
80105576:	eb 57                	jmp    801055cf <wait+0x122>

  acquire(&ptable.lock);
  for(;;){
    // Scan through table looking for zombie children.
    havekids = 0;
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105578:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
8010557c:	81 7d f4 34 0a 11 80 	cmpl   $0x80110a34,-0xc(%ebp)
80105583:	0f 82 4d ff ff ff    	jb     801054d6 <wait+0x29>
        return pid;
      }
    }

    // No point waiting if we don't have any children.
    if(!havekids || proc->killed){
80105589:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010558d:	74 0d                	je     8010559c <wait+0xef>
8010558f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105595:	8b 40 24             	mov    0x24(%eax),%eax
80105598:	85 c0                	test   %eax,%eax
8010559a:	74 17                	je     801055b3 <wait+0x106>
      release(&ptable.lock);
8010559c:	83 ec 0c             	sub    $0xc,%esp
8010559f:	68 00 eb 10 80       	push   $0x8010eb00
801055a4:	e8 ac 05 00 00       	call   80105b55 <release>
801055a9:	83 c4 10             	add    $0x10,%esp
      return -1;
801055ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801055b1:	eb 1c                	jmp    801055cf <wait+0x122>
    }

    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
    sleep(proc, &ptable.lock);  //DOC: wait-sleep
801055b3:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801055b9:	83 ec 08             	sub    $0x8,%esp
801055bc:	68 00 eb 10 80       	push   $0x8010eb00
801055c1:	50                   	push   %eax
801055c2:	e8 e8 01 00 00       	call   801057af <sleep>
801055c7:	83 c4 10             	add    $0x10,%esp
  }
801055ca:	e9 f4 fe ff ff       	jmp    801054c3 <wait+0x16>
}
801055cf:	c9                   	leave  
801055d0:	c3                   	ret    

801055d1 <scheduler>:
//  - swtch to start running that process
//  - eventually that process transfers control
//      via swtch back to the scheduler.
void
scheduler(void)
{
801055d1:	55                   	push   %ebp
801055d2:	89 e5                	mov    %esp,%ebp
801055d4:	83 ec 18             	sub    $0x18,%esp
  struct proc *p = 0;
801055d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

  for(;;){
    // Enable interrupts on this processor.
    sti();
801055de:	e8 44 f9 ff ff       	call   80104f27 <sti>

    // no runnable processes? (did we hit the end of the table last time?)
    // if so, wait for irq before trying again.
    if (p == &ptable.proc[NPROC])
801055e3:	81 7d f4 34 0a 11 80 	cmpl   $0x80110a34,-0xc(%ebp)
801055ea:	75 05                	jne    801055f1 <scheduler+0x20>
      hlt();
801055ec:	e8 3c f9 ff ff       	call   80104f2d <hlt>

    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
801055f1:	83 ec 0c             	sub    $0xc,%esp
801055f4:	68 00 eb 10 80       	push   $0x8010eb00
801055f9:	e8 9d 04 00 00       	call   80105a9b <acquire>
801055fe:	83 c4 10             	add    $0x10,%esp
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105601:	c7 45 f4 34 eb 10 80 	movl   $0x8010eb34,-0xc(%ebp)
80105608:	eb 62                	jmp    8010566c <scheduler+0x9b>
      if(p->state != RUNNABLE)
8010560a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010560d:	8b 40 0c             	mov    0xc(%eax),%eax
80105610:	83 f8 03             	cmp    $0x3,%eax
80105613:	74 02                	je     80105617 <scheduler+0x46>
        continue;
80105615:	eb 51                	jmp    80105668 <scheduler+0x97>

      // Switch to chosen process.  It is the process's job
      // to release ptable.lock and then reacquire it
      // before jumping back to us.
      proc = p;
80105617:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010561a:	65 a3 04 00 00 00    	mov    %eax,%gs:0x4
      switchuvm(p);
80105620:	83 ec 0c             	sub    $0xc,%esp
80105623:	ff 75 f4             	pushl  -0xc(%ebp)
80105626:	e8 b6 27 00 00       	call   80107de1 <switchuvm>
8010562b:	83 c4 10             	add    $0x10,%esp
      p->state = RUNNING;
8010562e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105631:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)
      swtch(&cpu->scheduler, proc->context);
80105638:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010563e:	8b 40 1c             	mov    0x1c(%eax),%eax
80105641:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80105648:	83 c2 04             	add    $0x4,%edx
8010564b:	83 ec 08             	sub    $0x8,%esp
8010564e:	50                   	push   %eax
8010564f:	52                   	push   %edx
80105650:	e8 f3 a9 ff ff       	call   80100048 <swtch>
80105655:	83 c4 10             	add    $0x10,%esp
      switchkvm();
80105658:	e8 68 27 00 00       	call   80107dc5 <switchkvm>

      // Process is done running for now.
      // It should have changed its p->state before coming back.
      proc = 0;
8010565d:	65 c7 05 04 00 00 00 	movl   $0x0,%gs:0x4
80105664:	00 00 00 00 
    if (p == &ptable.proc[NPROC])
      hlt();

    // Loop over process table looking for process to run.
    acquire(&ptable.lock);
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105668:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
8010566c:	81 7d f4 34 0a 11 80 	cmpl   $0x80110a34,-0xc(%ebp)
80105673:	72 95                	jb     8010560a <scheduler+0x39>

      // Process is done running for now.
      // It should have changed its p->state before coming back.
      proc = 0;
    }
    release(&ptable.lock);
80105675:	83 ec 0c             	sub    $0xc,%esp
80105678:	68 00 eb 10 80       	push   $0x8010eb00
8010567d:	e8 d3 04 00 00       	call   80105b55 <release>
80105682:	83 c4 10             	add    $0x10,%esp

  }
80105685:	e9 54 ff ff ff       	jmp    801055de <scheduler+0xd>

8010568a <sched>:

// Enter scheduler.  Must hold only ptable.lock
// and have changed proc->state.
void
sched(void)
{
8010568a:	55                   	push   %ebp
8010568b:	89 e5                	mov    %esp,%ebp
8010568d:	83 ec 18             	sub    $0x18,%esp
  int intena;

  if(!holding(&ptable.lock))
80105690:	83 ec 0c             	sub    $0xc,%esp
80105693:	68 00 eb 10 80       	push   $0x8010eb00
80105698:	e8 99 05 00 00       	call   80105c36 <holding>
8010569d:	83 c4 10             	add    $0x10,%esp
801056a0:	85 c0                	test   %eax,%eax
801056a2:	75 0d                	jne    801056b1 <sched+0x27>
    panic("sched ptable.lock");
801056a4:	83 ec 0c             	sub    $0xc,%esp
801056a7:	68 b2 88 10 80       	push   $0x801088b2
801056ac:	e8 e0 b9 ff ff       	call   80101091 <panic>
  if(cpu->ncli != 1)
801056b1:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
801056b7:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
801056bd:	83 f8 01             	cmp    $0x1,%eax
801056c0:	74 0d                	je     801056cf <sched+0x45>
    panic("sched locks");
801056c2:	83 ec 0c             	sub    $0xc,%esp
801056c5:	68 c4 88 10 80       	push   $0x801088c4
801056ca:	e8 c2 b9 ff ff       	call   80101091 <panic>
  if(proc->state == RUNNING)
801056cf:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801056d5:	8b 40 0c             	mov    0xc(%eax),%eax
801056d8:	83 f8 04             	cmp    $0x4,%eax
801056db:	75 0d                	jne    801056ea <sched+0x60>
    panic("sched running");
801056dd:	83 ec 0c             	sub    $0xc,%esp
801056e0:	68 d0 88 10 80       	push   $0x801088d0
801056e5:	e8 a7 b9 ff ff       	call   80101091 <panic>
  if(readeflags()&FL_IF)
801056ea:	e8 28 f8 ff ff       	call   80104f17 <readeflags>
801056ef:	25 00 02 00 00       	and    $0x200,%eax
801056f4:	85 c0                	test   %eax,%eax
801056f6:	74 0d                	je     80105705 <sched+0x7b>
    panic("sched interruptible");
801056f8:	83 ec 0c             	sub    $0xc,%esp
801056fb:	68 de 88 10 80       	push   $0x801088de
80105700:	e8 8c b9 ff ff       	call   80101091 <panic>
  intena = cpu->intena;
80105705:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010570b:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
80105711:	89 45 f4             	mov    %eax,-0xc(%ebp)
  swtch(&proc->context, cpu->scheduler);
80105714:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010571a:	8b 40 04             	mov    0x4(%eax),%eax
8010571d:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
80105724:	83 c2 1c             	add    $0x1c,%edx
80105727:	83 ec 08             	sub    $0x8,%esp
8010572a:	50                   	push   %eax
8010572b:	52                   	push   %edx
8010572c:	e8 17 a9 ff ff       	call   80100048 <swtch>
80105731:	83 c4 10             	add    $0x10,%esp
  cpu->intena = intena;
80105734:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010573a:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010573d:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
80105743:	c9                   	leave  
80105744:	c3                   	ret    

80105745 <yield>:

// Give up the CPU for one scheduling round.
void
yield(void)
{
80105745:	55                   	push   %ebp
80105746:	89 e5                	mov    %esp,%ebp
80105748:	83 ec 08             	sub    $0x8,%esp
  acquire(&ptable.lock);  //DOC: yieldlock
8010574b:	83 ec 0c             	sub    $0xc,%esp
8010574e:	68 00 eb 10 80       	push   $0x8010eb00
80105753:	e8 43 03 00 00       	call   80105a9b <acquire>
80105758:	83 c4 10             	add    $0x10,%esp
  proc->state = RUNNABLE;
8010575b:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105761:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  sched();
80105768:	e8 1d ff ff ff       	call   8010568a <sched>
  release(&ptable.lock);
8010576d:	83 ec 0c             	sub    $0xc,%esp
80105770:	68 00 eb 10 80       	push   $0x8010eb00
80105775:	e8 db 03 00 00       	call   80105b55 <release>
8010577a:	83 c4 10             	add    $0x10,%esp
}
8010577d:	c9                   	leave  
8010577e:	c3                   	ret    

8010577f <forkret>:

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
8010577f:	55                   	push   %ebp
80105780:	89 e5                	mov    %esp,%ebp
80105782:	83 ec 08             	sub    $0x8,%esp
  static int first = 1;
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);
80105785:	83 ec 0c             	sub    $0xc,%esp
80105788:	68 00 eb 10 80       	push   $0x8010eb00
8010578d:	e8 c3 03 00 00       	call   80105b55 <release>
80105792:	83 c4 10             	add    $0x10,%esp

  if (first) {
80105795:	a1 08 b0 10 80       	mov    0x8010b008,%eax
8010579a:	85 c0                	test   %eax,%eax
8010579c:	74 0f                	je     801057ad <forkret+0x2e>
    // Some initialization functions must be run in the context
    // of a regular process (e.g., they call sleep), and thus cannot 
    // be run from main().
    first = 0;
8010579e:	c7 05 08 b0 10 80 00 	movl   $0x0,0x8010b008
801057a5:	00 00 00 
    initlog();
801057a8:	e8 91 e3 ff ff       	call   80103b3e <initlog>
  }
  
  // Return to "caller", actually trapret (see allocproc).
}
801057ad:	c9                   	leave  
801057ae:	c3                   	ret    

801057af <sleep>:

// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void
sleep(void *chan, struct spinlock *lk)
{
801057af:	55                   	push   %ebp
801057b0:	89 e5                	mov    %esp,%ebp
801057b2:	83 ec 08             	sub    $0x8,%esp
  if(proc == 0)
801057b5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801057bb:	85 c0                	test   %eax,%eax
801057bd:	75 0d                	jne    801057cc <sleep+0x1d>
    panic("sleep");
801057bf:	83 ec 0c             	sub    $0xc,%esp
801057c2:	68 f2 88 10 80       	push   $0x801088f2
801057c7:	e8 c5 b8 ff ff       	call   80101091 <panic>

  if(lk == 0)
801057cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
801057d0:	75 0d                	jne    801057df <sleep+0x30>
    panic("sleep without lk");
801057d2:	83 ec 0c             	sub    $0xc,%esp
801057d5:	68 f8 88 10 80       	push   $0x801088f8
801057da:	e8 b2 b8 ff ff       	call   80101091 <panic>
  // change p->state and then call sched.
  // Once we hold ptable.lock, we can be
  // guaranteed that we won't miss any wakeup
  // (wakeup runs with ptable.lock locked),
  // so it's okay to release lk.
  if(lk != &ptable.lock){  //DOC: sleeplock0
801057df:	81 7d 0c 00 eb 10 80 	cmpl   $0x8010eb00,0xc(%ebp)
801057e6:	74 1e                	je     80105806 <sleep+0x57>
    acquire(&ptable.lock);  //DOC: sleeplock1
801057e8:	83 ec 0c             	sub    $0xc,%esp
801057eb:	68 00 eb 10 80       	push   $0x8010eb00
801057f0:	e8 a6 02 00 00       	call   80105a9b <acquire>
801057f5:	83 c4 10             	add    $0x10,%esp
    release(lk);
801057f8:	83 ec 0c             	sub    $0xc,%esp
801057fb:	ff 75 0c             	pushl  0xc(%ebp)
801057fe:	e8 52 03 00 00       	call   80105b55 <release>
80105803:	83 c4 10             	add    $0x10,%esp
  }

  // Go to sleep.
  proc->chan = chan;
80105806:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010580c:	8b 55 08             	mov    0x8(%ebp),%edx
8010580f:	89 50 20             	mov    %edx,0x20(%eax)
  proc->state = SLEEPING;
80105812:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105818:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
  sched();
8010581f:	e8 66 fe ff ff       	call   8010568a <sched>

  // Tidy up.
  proc->chan = 0;
80105824:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010582a:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)

  // Reacquire original lock.
  if(lk != &ptable.lock){  //DOC: sleeplock2
80105831:	81 7d 0c 00 eb 10 80 	cmpl   $0x8010eb00,0xc(%ebp)
80105838:	74 1e                	je     80105858 <sleep+0xa9>
    release(&ptable.lock);
8010583a:	83 ec 0c             	sub    $0xc,%esp
8010583d:	68 00 eb 10 80       	push   $0x8010eb00
80105842:	e8 0e 03 00 00       	call   80105b55 <release>
80105847:	83 c4 10             	add    $0x10,%esp
    acquire(lk);
8010584a:	83 ec 0c             	sub    $0xc,%esp
8010584d:	ff 75 0c             	pushl  0xc(%ebp)
80105850:	e8 46 02 00 00       	call   80105a9b <acquire>
80105855:	83 c4 10             	add    $0x10,%esp
  }
}
80105858:	c9                   	leave  
80105859:	c3                   	ret    

8010585a <wakeup1>:
//PAGEBREAK!
// Wake up all processes sleeping on chan.
// The ptable lock must be held.
static void
wakeup1(void *chan)
{
8010585a:	55                   	push   %ebp
8010585b:	89 e5                	mov    %esp,%ebp
8010585d:	83 ec 10             	sub    $0x10,%esp
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80105860:	c7 45 fc 34 eb 10 80 	movl   $0x8010eb34,-0x4(%ebp)
80105867:	eb 24                	jmp    8010588d <wakeup1+0x33>
    if(p->state == SLEEPING && p->chan == chan)
80105869:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010586c:	8b 40 0c             	mov    0xc(%eax),%eax
8010586f:	83 f8 02             	cmp    $0x2,%eax
80105872:	75 15                	jne    80105889 <wakeup1+0x2f>
80105874:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105877:	8b 40 20             	mov    0x20(%eax),%eax
8010587a:	3b 45 08             	cmp    0x8(%ebp),%eax
8010587d:	75 0a                	jne    80105889 <wakeup1+0x2f>
      p->state = RUNNABLE;
8010587f:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105882:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
static void
wakeup1(void *chan)
{
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80105889:	83 45 fc 7c          	addl   $0x7c,-0x4(%ebp)
8010588d:	81 7d fc 34 0a 11 80 	cmpl   $0x80110a34,-0x4(%ebp)
80105894:	72 d3                	jb     80105869 <wakeup1+0xf>
    if(p->state == SLEEPING && p->chan == chan)
      p->state = RUNNABLE;
}
80105896:	c9                   	leave  
80105897:	c3                   	ret    

80105898 <wakeup>:

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
80105898:	55                   	push   %ebp
80105899:	89 e5                	mov    %esp,%ebp
8010589b:	83 ec 08             	sub    $0x8,%esp
  acquire(&ptable.lock);
8010589e:	83 ec 0c             	sub    $0xc,%esp
801058a1:	68 00 eb 10 80       	push   $0x8010eb00
801058a6:	e8 f0 01 00 00       	call   80105a9b <acquire>
801058ab:	83 c4 10             	add    $0x10,%esp
  wakeup1(chan);
801058ae:	83 ec 0c             	sub    $0xc,%esp
801058b1:	ff 75 08             	pushl  0x8(%ebp)
801058b4:	e8 a1 ff ff ff       	call   8010585a <wakeup1>
801058b9:	83 c4 10             	add    $0x10,%esp
  release(&ptable.lock);
801058bc:	83 ec 0c             	sub    $0xc,%esp
801058bf:	68 00 eb 10 80       	push   $0x8010eb00
801058c4:	e8 8c 02 00 00       	call   80105b55 <release>
801058c9:	83 c4 10             	add    $0x10,%esp
}
801058cc:	c9                   	leave  
801058cd:	c3                   	ret    

801058ce <kill>:
// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
801058ce:	55                   	push   %ebp
801058cf:	89 e5                	mov    %esp,%ebp
801058d1:	83 ec 18             	sub    $0x18,%esp
  struct proc *p;

  acquire(&ptable.lock);
801058d4:	83 ec 0c             	sub    $0xc,%esp
801058d7:	68 00 eb 10 80       	push   $0x8010eb00
801058dc:	e8 ba 01 00 00       	call   80105a9b <acquire>
801058e1:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
801058e4:	c7 45 f4 34 eb 10 80 	movl   $0x8010eb34,-0xc(%ebp)
801058eb:	eb 45                	jmp    80105932 <kill+0x64>
    if(p->pid == pid){
801058ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
801058f0:	8b 40 10             	mov    0x10(%eax),%eax
801058f3:	3b 45 08             	cmp    0x8(%ebp),%eax
801058f6:	75 36                	jne    8010592e <kill+0x60>
      p->killed = 1;
801058f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801058fb:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
      // Wake process from sleep if necessary.
      if(p->state == SLEEPING)
80105902:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105905:	8b 40 0c             	mov    0xc(%eax),%eax
80105908:	83 f8 02             	cmp    $0x2,%eax
8010590b:	75 0a                	jne    80105917 <kill+0x49>
        p->state = RUNNABLE;
8010590d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105910:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
      release(&ptable.lock);
80105917:	83 ec 0c             	sub    $0xc,%esp
8010591a:	68 00 eb 10 80       	push   $0x8010eb00
8010591f:	e8 31 02 00 00       	call   80105b55 <release>
80105924:	83 c4 10             	add    $0x10,%esp
      return 0;
80105927:	b8 00 00 00 00       	mov    $0x0,%eax
8010592c:	eb 22                	jmp    80105950 <kill+0x82>
kill(int pid)
{
  struct proc *p;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
8010592e:	83 45 f4 7c          	addl   $0x7c,-0xc(%ebp)
80105932:	81 7d f4 34 0a 11 80 	cmpl   $0x80110a34,-0xc(%ebp)
80105939:	72 b2                	jb     801058ed <kill+0x1f>
        p->state = RUNNABLE;
      release(&ptable.lock);
      return 0;
    }
  }
  release(&ptable.lock);
8010593b:	83 ec 0c             	sub    $0xc,%esp
8010593e:	68 00 eb 10 80       	push   $0x8010eb00
80105943:	e8 0d 02 00 00       	call   80105b55 <release>
80105948:	83 c4 10             	add    $0x10,%esp
  return -1;
8010594b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105950:	c9                   	leave  
80105951:	c3                   	ret    

80105952 <procdump>:
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
80105952:	55                   	push   %ebp
80105953:	89 e5                	mov    %esp,%ebp
80105955:	83 ec 48             	sub    $0x48,%esp
  int i;
  struct proc *p;
  char *state;
  uintp pc[10];
  
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105958:	c7 45 f0 34 eb 10 80 	movl   $0x8010eb34,-0x10(%ebp)
8010595f:	e9 d1 00 00 00       	jmp    80105a35 <procdump+0xe3>
    if(p->state == UNUSED)
80105964:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105967:	8b 40 0c             	mov    0xc(%eax),%eax
8010596a:	85 c0                	test   %eax,%eax
8010596c:	75 05                	jne    80105973 <procdump+0x21>
      continue;
8010596e:	e9 be 00 00 00       	jmp    80105a31 <procdump+0xdf>
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
80105973:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105976:	8b 40 0c             	mov    0xc(%eax),%eax
80105979:	83 f8 05             	cmp    $0x5,%eax
8010597c:	77 23                	ja     801059a1 <procdump+0x4f>
8010597e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105981:	8b 40 0c             	mov    0xc(%eax),%eax
80105984:	8b 04 85 0c b0 10 80 	mov    -0x7fef4ff4(,%eax,4),%eax
8010598b:	85 c0                	test   %eax,%eax
8010598d:	74 12                	je     801059a1 <procdump+0x4f>
      state = states[p->state];
8010598f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105992:	8b 40 0c             	mov    0xc(%eax),%eax
80105995:	8b 04 85 0c b0 10 80 	mov    -0x7fef4ff4(,%eax,4),%eax
8010599c:	89 45 ec             	mov    %eax,-0x14(%ebp)
8010599f:	eb 07                	jmp    801059a8 <procdump+0x56>
    else
      state = "???";
801059a1:	c7 45 ec 09 89 10 80 	movl   $0x80108909,-0x14(%ebp)
    cprintf("%d %s %s", p->pid, state, p->name);
801059a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
801059ab:	8d 50 6c             	lea    0x6c(%eax),%edx
801059ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
801059b1:	8b 40 10             	mov    0x10(%eax),%eax
801059b4:	52                   	push   %edx
801059b5:	ff 75 ec             	pushl  -0x14(%ebp)
801059b8:	50                   	push   %eax
801059b9:	68 0d 89 10 80       	push   $0x8010890d
801059be:	e8 1d b5 ff ff       	call   80100ee0 <cprintf>
801059c3:	83 c4 10             	add    $0x10,%esp
    if(p->state == SLEEPING){
801059c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
801059c9:	8b 40 0c             	mov    0xc(%eax),%eax
801059cc:	83 f8 02             	cmp    $0x2,%eax
801059cf:	75 50                	jne    80105a21 <procdump+0xcf>
      getstackpcs((uintp*)p->context->ebp, pc);
801059d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
801059d4:	8b 40 1c             	mov    0x1c(%eax),%eax
801059d7:	8b 40 0c             	mov    0xc(%eax),%eax
801059da:	89 c2                	mov    %eax,%edx
801059dc:	83 ec 08             	sub    $0x8,%esp
801059df:	8d 45 c4             	lea    -0x3c(%ebp),%eax
801059e2:	50                   	push   %eax
801059e3:	52                   	push   %edx
801059e4:	e8 df 01 00 00       	call   80105bc8 <getstackpcs>
801059e9:	83 c4 10             	add    $0x10,%esp
      for(i=0; i<10 && pc[i] != 0; i++)
801059ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801059f3:	eb 1b                	jmp    80105a10 <procdump+0xbe>
        cprintf(" %p", pc[i]);
801059f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801059f8:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
801059fc:	83 ec 08             	sub    $0x8,%esp
801059ff:	50                   	push   %eax
80105a00:	68 16 89 10 80       	push   $0x80108916
80105a05:	e8 d6 b4 ff ff       	call   80100ee0 <cprintf>
80105a0a:	83 c4 10             	add    $0x10,%esp
    else
      state = "???";
    cprintf("%d %s %s", p->pid, state, p->name);
    if(p->state == SLEEPING){
      getstackpcs((uintp*)p->context->ebp, pc);
      for(i=0; i<10 && pc[i] != 0; i++)
80105a0d:	ff 45 f4             	incl   -0xc(%ebp)
80105a10:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
80105a14:	7f 0b                	jg     80105a21 <procdump+0xcf>
80105a16:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105a19:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
80105a1d:	85 c0                	test   %eax,%eax
80105a1f:	75 d4                	jne    801059f5 <procdump+0xa3>
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
80105a21:	83 ec 0c             	sub    $0xc,%esp
80105a24:	68 1a 89 10 80       	push   $0x8010891a
80105a29:	e8 b2 b4 ff ff       	call   80100ee0 <cprintf>
80105a2e:	83 c4 10             	add    $0x10,%esp
  int i;
  struct proc *p;
  char *state;
  uintp pc[10];
  
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80105a31:	83 45 f0 7c          	addl   $0x7c,-0x10(%ebp)
80105a35:	81 7d f0 34 0a 11 80 	cmpl   $0x80110a34,-0x10(%ebp)
80105a3c:	0f 82 22 ff ff ff    	jb     80105964 <procdump+0x12>
      for(i=0; i<10 && pc[i] != 0; i++)
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
  }
}
80105a42:	c9                   	leave  
80105a43:	c3                   	ret    

80105a44 <readeflags>:
  asm volatile("ltr %0" : : "r" (sel));
}

static inline uintp
readeflags(void)
{
80105a44:	55                   	push   %ebp
80105a45:	89 e5                	mov    %esp,%ebp
80105a47:	83 ec 10             	sub    $0x10,%esp
  uintp eflags;
  asm volatile("pushf; pop %0" : "=r" (eflags));
80105a4a:	9c                   	pushf  
80105a4b:	58                   	pop    %eax
80105a4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return eflags;
80105a4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80105a52:	c9                   	leave  
80105a53:	c3                   	ret    

80105a54 <cli>:
  asm volatile("movw %0, %%gs" : : "r" (v));
}

static inline void
cli(void)
{
80105a54:	55                   	push   %ebp
80105a55:	89 e5                	mov    %esp,%ebp
  asm volatile("cli");
80105a57:	fa                   	cli    
}
80105a58:	5d                   	pop    %ebp
80105a59:	c3                   	ret    

80105a5a <sti>:

static inline void
sti(void)
{
80105a5a:	55                   	push   %ebp
80105a5b:	89 e5                	mov    %esp,%ebp
  asm volatile("sti");
80105a5d:	fb                   	sti    
}
80105a5e:	5d                   	pop    %ebp
80105a5f:	c3                   	ret    

80105a60 <xchg>:
  asm volatile("hlt");
}

static inline uint
xchg(volatile uint *addr, uintp newval)
{
80105a60:	55                   	push   %ebp
80105a61:	89 e5                	mov    %esp,%ebp
80105a63:	83 ec 10             	sub    $0x10,%esp
  uint result;
  
  // The + in "+m" denotes a read-modify-write operand.
  asm volatile("lock; xchgl %0, %1" :
80105a66:	8b 55 08             	mov    0x8(%ebp),%edx
80105a69:	8b 45 0c             	mov    0xc(%ebp),%eax
80105a6c:	8b 4d 08             	mov    0x8(%ebp),%ecx
80105a6f:	f0 87 02             	lock xchg %eax,(%edx)
80105a72:	89 45 fc             	mov    %eax,-0x4(%ebp)
               "+m" (*addr), "=a" (result) :
               "1" (newval) :
               "cc");
  return result;
80105a75:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80105a78:	c9                   	leave  
80105a79:	c3                   	ret    

80105a7a <initlock>:
#include "proc.h"
#include "spinlock.h"

void
initlock(struct spinlock *lk, char *name)
{
80105a7a:	55                   	push   %ebp
80105a7b:	89 e5                	mov    %esp,%ebp
  lk->name = name;
80105a7d:	8b 45 08             	mov    0x8(%ebp),%eax
80105a80:	8b 55 0c             	mov    0xc(%ebp),%edx
80105a83:	89 50 04             	mov    %edx,0x4(%eax)
  lk->locked = 0;
80105a86:	8b 45 08             	mov    0x8(%ebp),%eax
80105a89:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  lk->cpu = 0;
80105a8f:	8b 45 08             	mov    0x8(%ebp),%eax
80105a92:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
80105a99:	5d                   	pop    %ebp
80105a9a:	c3                   	ret    

80105a9b <acquire>:
// Loops (spins) until the lock is acquired.
// Holding a lock for a long time may cause
// other CPUs to waste time spinning to acquire it.
void
acquire(struct spinlock *lk)
{
80105a9b:	55                   	push   %ebp
80105a9c:	89 e5                	mov    %esp,%ebp
80105a9e:	83 ec 18             	sub    $0x18,%esp
  pushcli(); // disable interrupts to avoid deadlock.
80105aa1:	e8 ba 01 00 00       	call   80105c60 <pushcli>
  if(holding(lk)) {
80105aa6:	8b 45 08             	mov    0x8(%ebp),%eax
80105aa9:	83 ec 0c             	sub    $0xc,%esp
80105aac:	50                   	push   %eax
80105aad:	e8 84 01 00 00       	call   80105c36 <holding>
80105ab2:	83 c4 10             	add    $0x10,%esp
80105ab5:	85 c0                	test   %eax,%eax
80105ab7:	74 61                	je     80105b1a <acquire+0x7f>
    int i;
    cprintf("lock '%s':\n", lk->name);
80105ab9:	8b 45 08             	mov    0x8(%ebp),%eax
80105abc:	8b 40 04             	mov    0x4(%eax),%eax
80105abf:	83 ec 08             	sub    $0x8,%esp
80105ac2:	50                   	push   %eax
80105ac3:	68 46 89 10 80       	push   $0x80108946
80105ac8:	e8 13 b4 ff ff       	call   80100ee0 <cprintf>
80105acd:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 10; i++)
80105ad0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80105ad7:	eb 1e                	jmp    80105af7 <acquire+0x5c>
      cprintf(" %p", lk->pcs[i]);
80105ad9:	8b 45 08             	mov    0x8(%ebp),%eax
80105adc:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105adf:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
80105ae3:	83 ec 08             	sub    $0x8,%esp
80105ae6:	50                   	push   %eax
80105ae7:	68 52 89 10 80       	push   $0x80108952
80105aec:	e8 ef b3 ff ff       	call   80100ee0 <cprintf>
80105af1:	83 c4 10             	add    $0x10,%esp
{
  pushcli(); // disable interrupts to avoid deadlock.
  if(holding(lk)) {
    int i;
    cprintf("lock '%s':\n", lk->name);
    for (i = 0; i < 10; i++)
80105af4:	ff 45 f4             	incl   -0xc(%ebp)
80105af7:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
80105afb:	7e dc                	jle    80105ad9 <acquire+0x3e>
      cprintf(" %p", lk->pcs[i]);
    cprintf("\n");
80105afd:	83 ec 0c             	sub    $0xc,%esp
80105b00:	68 56 89 10 80       	push   $0x80108956
80105b05:	e8 d6 b3 ff ff       	call   80100ee0 <cprintf>
80105b0a:	83 c4 10             	add    $0x10,%esp
    panic("acquire");
80105b0d:	83 ec 0c             	sub    $0xc,%esp
80105b10:	68 58 89 10 80       	push   $0x80108958
80105b15:	e8 77 b5 ff ff       	call   80101091 <panic>
  }

  // The xchg is atomic.
  // It also serializes, so that reads after acquire are not
  // reordered before it. 
  while(xchg(&lk->locked, 1) != 0)
80105b1a:	90                   	nop
80105b1b:	8b 45 08             	mov    0x8(%ebp),%eax
80105b1e:	83 ec 08             	sub    $0x8,%esp
80105b21:	6a 01                	push   $0x1
80105b23:	50                   	push   %eax
80105b24:	e8 37 ff ff ff       	call   80105a60 <xchg>
80105b29:	83 c4 10             	add    $0x10,%esp
80105b2c:	85 c0                	test   %eax,%eax
80105b2e:	75 eb                	jne    80105b1b <acquire+0x80>
    ;

  // Record info about lock acquisition for debugging.
  lk->cpu = cpu;
80105b30:	8b 45 08             	mov    0x8(%ebp),%eax
80105b33:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80105b3a:	89 50 08             	mov    %edx,0x8(%eax)
  getcallerpcs(&lk, lk->pcs);
80105b3d:	8b 45 08             	mov    0x8(%ebp),%eax
80105b40:	83 c0 0c             	add    $0xc,%eax
80105b43:	83 ec 08             	sub    $0x8,%esp
80105b46:	50                   	push   %eax
80105b47:	8d 45 08             	lea    0x8(%ebp),%eax
80105b4a:	50                   	push   %eax
80105b4b:	e8 56 00 00 00       	call   80105ba6 <getcallerpcs>
80105b50:	83 c4 10             	add    $0x10,%esp
}
80105b53:	c9                   	leave  
80105b54:	c3                   	ret    

80105b55 <release>:

// Release the lock.
void
release(struct spinlock *lk)
{
80105b55:	55                   	push   %ebp
80105b56:	89 e5                	mov    %esp,%ebp
80105b58:	83 ec 08             	sub    $0x8,%esp
  if(!holding(lk))
80105b5b:	83 ec 0c             	sub    $0xc,%esp
80105b5e:	ff 75 08             	pushl  0x8(%ebp)
80105b61:	e8 d0 00 00 00       	call   80105c36 <holding>
80105b66:	83 c4 10             	add    $0x10,%esp
80105b69:	85 c0                	test   %eax,%eax
80105b6b:	75 0d                	jne    80105b7a <release+0x25>
    panic("release");
80105b6d:	83 ec 0c             	sub    $0xc,%esp
80105b70:	68 60 89 10 80       	push   $0x80108960
80105b75:	e8 17 b5 ff ff       	call   80101091 <panic>

  lk->pcs[0] = 0;
80105b7a:	8b 45 08             	mov    0x8(%ebp),%eax
80105b7d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
  lk->cpu = 0;
80105b84:	8b 45 08             	mov    0x8(%ebp),%eax
80105b87:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  // But the 2007 Intel 64 Architecture Memory Ordering White
  // Paper says that Intel 64 and IA-32 will not move a load
  // after a store. So lock->locked = 0 would work here.
  // The xchg being asm volatile ensures gcc emits it after
  // the above assignments (and after the critical section).
  xchg(&lk->locked, 0);
80105b8e:	8b 45 08             	mov    0x8(%ebp),%eax
80105b91:	83 ec 08             	sub    $0x8,%esp
80105b94:	6a 00                	push   $0x0
80105b96:	50                   	push   %eax
80105b97:	e8 c4 fe ff ff       	call   80105a60 <xchg>
80105b9c:	83 c4 10             	add    $0x10,%esp

  popcli();
80105b9f:	e8 00 01 00 00       	call   80105ca4 <popcli>
}
80105ba4:	c9                   	leave  
80105ba5:	c3                   	ret    

80105ba6 <getcallerpcs>:

// Record the current call stack in pcs[] by following the %ebp chain.
void
getcallerpcs(void *v, uintp pcs[])
{
80105ba6:	55                   	push   %ebp
80105ba7:	89 e5                	mov    %esp,%ebp
80105ba9:	83 ec 18             	sub    $0x18,%esp
  uintp *ebp;
#if X64
  asm volatile("mov %%rbp, %0" : "=r" (ebp));  
#else
  ebp = (uintp*)v - 2;
80105bac:	8b 45 08             	mov    0x8(%ebp),%eax
80105baf:	83 e8 08             	sub    $0x8,%eax
80105bb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
#endif
  getstackpcs(ebp, pcs);
80105bb5:	83 ec 08             	sub    $0x8,%esp
80105bb8:	ff 75 0c             	pushl  0xc(%ebp)
80105bbb:	ff 75 f4             	pushl  -0xc(%ebp)
80105bbe:	e8 05 00 00 00       	call   80105bc8 <getstackpcs>
80105bc3:	83 c4 10             	add    $0x10,%esp
}
80105bc6:	c9                   	leave  
80105bc7:	c3                   	ret    

80105bc8 <getstackpcs>:

void
getstackpcs(uintp *ebp, uintp pcs[])
{
80105bc8:	55                   	push   %ebp
80105bc9:	89 e5                	mov    %esp,%ebp
80105bcb:	83 ec 10             	sub    $0x10,%esp
  int i;
  
  for(i = 0; i < 10; i++){
80105bce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80105bd5:	eb 37                	jmp    80105c0e <getstackpcs+0x46>
    if(ebp == 0 || ebp < (uintp*)KERNBASE || ebp == (uintp*)0xffffffff)
80105bd7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80105bdb:	74 37                	je     80105c14 <getstackpcs+0x4c>
80105bdd:	81 7d 08 ff ff ff 7f 	cmpl   $0x7fffffff,0x8(%ebp)
80105be4:	76 2e                	jbe    80105c14 <getstackpcs+0x4c>
80105be6:	83 7d 08 ff          	cmpl   $0xffffffff,0x8(%ebp)
80105bea:	74 28                	je     80105c14 <getstackpcs+0x4c>
      break;
    pcs[i] = ebp[1];     // saved %eip
80105bec:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105bef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80105bf6:	8b 45 0c             	mov    0xc(%ebp),%eax
80105bf9:	01 c2                	add    %eax,%edx
80105bfb:	8b 45 08             	mov    0x8(%ebp),%eax
80105bfe:	8b 40 04             	mov    0x4(%eax),%eax
80105c01:	89 02                	mov    %eax,(%edx)
    ebp = (uintp*)ebp[0]; // saved %ebp
80105c03:	8b 45 08             	mov    0x8(%ebp),%eax
80105c06:	8b 00                	mov    (%eax),%eax
80105c08:	89 45 08             	mov    %eax,0x8(%ebp)
void
getstackpcs(uintp *ebp, uintp pcs[])
{
  int i;
  
  for(i = 0; i < 10; i++){
80105c0b:	ff 45 fc             	incl   -0x4(%ebp)
80105c0e:	83 7d fc 09          	cmpl   $0x9,-0x4(%ebp)
80105c12:	7e c3                	jle    80105bd7 <getstackpcs+0xf>
    if(ebp == 0 || ebp < (uintp*)KERNBASE || ebp == (uintp*)0xffffffff)
      break;
    pcs[i] = ebp[1];     // saved %eip
    ebp = (uintp*)ebp[0]; // saved %ebp
  }
  for(; i < 10; i++)
80105c14:	eb 18                	jmp    80105c2e <getstackpcs+0x66>
    pcs[i] = 0;
80105c16:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105c19:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80105c20:	8b 45 0c             	mov    0xc(%ebp),%eax
80105c23:	01 d0                	add    %edx,%eax
80105c25:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if(ebp == 0 || ebp < (uintp*)KERNBASE || ebp == (uintp*)0xffffffff)
      break;
    pcs[i] = ebp[1];     // saved %eip
    ebp = (uintp*)ebp[0]; // saved %ebp
  }
  for(; i < 10; i++)
80105c2b:	ff 45 fc             	incl   -0x4(%ebp)
80105c2e:	83 7d fc 09          	cmpl   $0x9,-0x4(%ebp)
80105c32:	7e e2                	jle    80105c16 <getstackpcs+0x4e>
    pcs[i] = 0;
}
80105c34:	c9                   	leave  
80105c35:	c3                   	ret    

80105c36 <holding>:

// Check whether this cpu is holding the lock.
int
holding(struct spinlock *lock)
{
80105c36:	55                   	push   %ebp
80105c37:	89 e5                	mov    %esp,%ebp
  return lock->locked && lock->cpu == cpu;
80105c39:	8b 45 08             	mov    0x8(%ebp),%eax
80105c3c:	8b 00                	mov    (%eax),%eax
80105c3e:	85 c0                	test   %eax,%eax
80105c40:	74 17                	je     80105c59 <holding+0x23>
80105c42:	8b 45 08             	mov    0x8(%ebp),%eax
80105c45:	8b 50 08             	mov    0x8(%eax),%edx
80105c48:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80105c4e:	39 c2                	cmp    %eax,%edx
80105c50:	75 07                	jne    80105c59 <holding+0x23>
80105c52:	b8 01 00 00 00       	mov    $0x1,%eax
80105c57:	eb 05                	jmp    80105c5e <holding+0x28>
80105c59:	b8 00 00 00 00       	mov    $0x0,%eax
}
80105c5e:	5d                   	pop    %ebp
80105c5f:	c3                   	ret    

80105c60 <pushcli>:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void
pushcli(void)
{
80105c60:	55                   	push   %ebp
80105c61:	89 e5                	mov    %esp,%ebp
80105c63:	83 ec 10             	sub    $0x10,%esp
  int eflags;
  
  eflags = readeflags();
80105c66:	e8 d9 fd ff ff       	call   80105a44 <readeflags>
80105c6b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  cli();
80105c6e:	e8 e1 fd ff ff       	call   80105a54 <cli>
  if(cpu->ncli++ == 0)
80105c73:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80105c7a:	8b 82 ac 00 00 00    	mov    0xac(%edx),%eax
80105c80:	8d 48 01             	lea    0x1(%eax),%ecx
80105c83:	89 8a ac 00 00 00    	mov    %ecx,0xac(%edx)
80105c89:	85 c0                	test   %eax,%eax
80105c8b:	75 15                	jne    80105ca2 <pushcli+0x42>
    cpu->intena = eflags & FL_IF;
80105c8d:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80105c93:	8b 55 fc             	mov    -0x4(%ebp),%edx
80105c96:	81 e2 00 02 00 00    	and    $0x200,%edx
80105c9c:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
}
80105ca2:	c9                   	leave  
80105ca3:	c3                   	ret    

80105ca4 <popcli>:

void
popcli(void)
{
80105ca4:	55                   	push   %ebp
80105ca5:	89 e5                	mov    %esp,%ebp
80105ca7:	83 ec 08             	sub    $0x8,%esp
  if(readeflags()&FL_IF)
80105caa:	e8 95 fd ff ff       	call   80105a44 <readeflags>
80105caf:	25 00 02 00 00       	and    $0x200,%eax
80105cb4:	85 c0                	test   %eax,%eax
80105cb6:	74 0d                	je     80105cc5 <popcli+0x21>
    panic("popcli - interruptible");
80105cb8:	83 ec 0c             	sub    $0xc,%esp
80105cbb:	68 68 89 10 80       	push   $0x80108968
80105cc0:	e8 cc b3 ff ff       	call   80101091 <panic>
  if(--cpu->ncli < 0)
80105cc5:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80105ccb:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
80105cd1:	4a                   	dec    %edx
80105cd2:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
80105cd8:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
80105cde:	85 c0                	test   %eax,%eax
80105ce0:	79 0d                	jns    80105cef <popcli+0x4b>
    panic("popcli");
80105ce2:	83 ec 0c             	sub    $0xc,%esp
80105ce5:	68 7f 89 10 80       	push   $0x8010897f
80105cea:	e8 a2 b3 ff ff       	call   80101091 <panic>
  if(cpu->ncli == 0 && cpu->intena)
80105cef:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80105cf5:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
80105cfb:	85 c0                	test   %eax,%eax
80105cfd:	75 15                	jne    80105d14 <popcli+0x70>
80105cff:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80105d05:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
80105d0b:	85 c0                	test   %eax,%eax
80105d0d:	74 05                	je     80105d14 <popcli+0x70>
    sti();
80105d0f:	e8 46 fd ff ff       	call   80105a5a <sti>
}
80105d14:	c9                   	leave  
80105d15:	c3                   	ret    

80105d16 <stosb>:
               "cc");
}

static inline void
stosb(void *addr, int data, int cnt)
{
80105d16:	55                   	push   %ebp
80105d17:	89 e5                	mov    %esp,%ebp
80105d19:	57                   	push   %edi
80105d1a:	53                   	push   %ebx
  asm volatile("cld; rep stosb" :
80105d1b:	8b 4d 08             	mov    0x8(%ebp),%ecx
80105d1e:	8b 55 10             	mov    0x10(%ebp),%edx
80105d21:	8b 45 0c             	mov    0xc(%ebp),%eax
80105d24:	89 cb                	mov    %ecx,%ebx
80105d26:	89 df                	mov    %ebx,%edi
80105d28:	89 d1                	mov    %edx,%ecx
80105d2a:	fc                   	cld    
80105d2b:	f3 aa                	rep stos %al,%es:(%edi)
80105d2d:	89 ca                	mov    %ecx,%edx
80105d2f:	89 fb                	mov    %edi,%ebx
80105d31:	89 5d 08             	mov    %ebx,0x8(%ebp)
80105d34:	89 55 10             	mov    %edx,0x10(%ebp)
               "=D" (addr), "=c" (cnt) :
               "0" (addr), "1" (cnt), "a" (data) :
               "memory", "cc");
}
80105d37:	5b                   	pop    %ebx
80105d38:	5f                   	pop    %edi
80105d39:	5d                   	pop    %ebp
80105d3a:	c3                   	ret    

80105d3b <stosl>:

static inline void
stosl(void *addr, int data, int cnt)
{
80105d3b:	55                   	push   %ebp
80105d3c:	89 e5                	mov    %esp,%ebp
80105d3e:	57                   	push   %edi
80105d3f:	53                   	push   %ebx
  asm volatile("cld; rep stosl" :
80105d40:	8b 4d 08             	mov    0x8(%ebp),%ecx
80105d43:	8b 55 10             	mov    0x10(%ebp),%edx
80105d46:	8b 45 0c             	mov    0xc(%ebp),%eax
80105d49:	89 cb                	mov    %ecx,%ebx
80105d4b:	89 df                	mov    %ebx,%edi
80105d4d:	89 d1                	mov    %edx,%ecx
80105d4f:	fc                   	cld    
80105d50:	f3 ab                	rep stos %eax,%es:(%edi)
80105d52:	89 ca                	mov    %ecx,%edx
80105d54:	89 fb                	mov    %edi,%ebx
80105d56:	89 5d 08             	mov    %ebx,0x8(%ebp)
80105d59:	89 55 10             	mov    %edx,0x10(%ebp)
               "=D" (addr), "=c" (cnt) :
               "0" (addr), "1" (cnt), "a" (data) :
               "memory", "cc");
}
80105d5c:	5b                   	pop    %ebx
80105d5d:	5f                   	pop    %edi
80105d5e:	5d                   	pop    %ebp
80105d5f:	c3                   	ret    

80105d60 <memset>:
#include "types.h"
#include "x86.h"

void*
memset(void *dst, int c, uint n)
{
80105d60:	55                   	push   %ebp
80105d61:	89 e5                	mov    %esp,%ebp
  if ((uintp)dst%4 == 0 && n%4 == 0){
80105d63:	8b 45 08             	mov    0x8(%ebp),%eax
80105d66:	83 e0 03             	and    $0x3,%eax
80105d69:	85 c0                	test   %eax,%eax
80105d6b:	75 43                	jne    80105db0 <memset+0x50>
80105d6d:	8b 45 10             	mov    0x10(%ebp),%eax
80105d70:	83 e0 03             	and    $0x3,%eax
80105d73:	85 c0                	test   %eax,%eax
80105d75:	75 39                	jne    80105db0 <memset+0x50>
    c &= 0xFF;
80105d77:	81 65 0c ff 00 00 00 	andl   $0xff,0xc(%ebp)
    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
80105d7e:	8b 45 10             	mov    0x10(%ebp),%eax
80105d81:	c1 e8 02             	shr    $0x2,%eax
80105d84:	89 c2                	mov    %eax,%edx
80105d86:	8b 45 0c             	mov    0xc(%ebp),%eax
80105d89:	c1 e0 18             	shl    $0x18,%eax
80105d8c:	89 c1                	mov    %eax,%ecx
80105d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
80105d91:	c1 e0 10             	shl    $0x10,%eax
80105d94:	09 c1                	or     %eax,%ecx
80105d96:	8b 45 0c             	mov    0xc(%ebp),%eax
80105d99:	c1 e0 08             	shl    $0x8,%eax
80105d9c:	09 c8                	or     %ecx,%eax
80105d9e:	0b 45 0c             	or     0xc(%ebp),%eax
80105da1:	52                   	push   %edx
80105da2:	50                   	push   %eax
80105da3:	ff 75 08             	pushl  0x8(%ebp)
80105da6:	e8 90 ff ff ff       	call   80105d3b <stosl>
80105dab:	83 c4 0c             	add    $0xc,%esp
80105dae:	eb 12                	jmp    80105dc2 <memset+0x62>
  } else
    stosb(dst, c, n);
80105db0:	8b 45 10             	mov    0x10(%ebp),%eax
80105db3:	50                   	push   %eax
80105db4:	ff 75 0c             	pushl  0xc(%ebp)
80105db7:	ff 75 08             	pushl  0x8(%ebp)
80105dba:	e8 57 ff ff ff       	call   80105d16 <stosb>
80105dbf:	83 c4 0c             	add    $0xc,%esp
  return dst;
80105dc2:	8b 45 08             	mov    0x8(%ebp),%eax
}
80105dc5:	c9                   	leave  
80105dc6:	c3                   	ret    

80105dc7 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
80105dc7:	55                   	push   %ebp
80105dc8:	89 e5                	mov    %esp,%ebp
80105dca:	83 ec 10             	sub    $0x10,%esp
  const uchar *s1, *s2;
  
  s1 = v1;
80105dcd:	8b 45 08             	mov    0x8(%ebp),%eax
80105dd0:	89 45 fc             	mov    %eax,-0x4(%ebp)
  s2 = v2;
80105dd3:	8b 45 0c             	mov    0xc(%ebp),%eax
80105dd6:	89 45 f8             	mov    %eax,-0x8(%ebp)
  while(n-- > 0){
80105dd9:	eb 2a                	jmp    80105e05 <memcmp+0x3e>
    if(*s1 != *s2)
80105ddb:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105dde:	8a 10                	mov    (%eax),%dl
80105de0:	8b 45 f8             	mov    -0x8(%ebp),%eax
80105de3:	8a 00                	mov    (%eax),%al
80105de5:	38 c2                	cmp    %al,%dl
80105de7:	74 16                	je     80105dff <memcmp+0x38>
      return *s1 - *s2;
80105de9:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105dec:	8a 00                	mov    (%eax),%al
80105dee:	0f b6 d0             	movzbl %al,%edx
80105df1:	8b 45 f8             	mov    -0x8(%ebp),%eax
80105df4:	8a 00                	mov    (%eax),%al
80105df6:	0f b6 c0             	movzbl %al,%eax
80105df9:	29 c2                	sub    %eax,%edx
80105dfb:	89 d0                	mov    %edx,%eax
80105dfd:	eb 18                	jmp    80105e17 <memcmp+0x50>
    s1++, s2++;
80105dff:	ff 45 fc             	incl   -0x4(%ebp)
80105e02:	ff 45 f8             	incl   -0x8(%ebp)
{
  const uchar *s1, *s2;
  
  s1 = v1;
  s2 = v2;
  while(n-- > 0){
80105e05:	8b 45 10             	mov    0x10(%ebp),%eax
80105e08:	8d 50 ff             	lea    -0x1(%eax),%edx
80105e0b:	89 55 10             	mov    %edx,0x10(%ebp)
80105e0e:	85 c0                	test   %eax,%eax
80105e10:	75 c9                	jne    80105ddb <memcmp+0x14>
    if(*s1 != *s2)
      return *s1 - *s2;
    s1++, s2++;
  }

  return 0;
80105e12:	b8 00 00 00 00       	mov    $0x0,%eax
}
80105e17:	c9                   	leave  
80105e18:	c3                   	ret    

80105e19 <memmove>:

void*
memmove(void *dst, const void *src, uint n)
{
80105e19:	55                   	push   %ebp
80105e1a:	89 e5                	mov    %esp,%ebp
80105e1c:	83 ec 10             	sub    $0x10,%esp
  const char *s;
  char *d;

  s = src;
80105e1f:	8b 45 0c             	mov    0xc(%ebp),%eax
80105e22:	89 45 fc             	mov    %eax,-0x4(%ebp)
  d = dst;
80105e25:	8b 45 08             	mov    0x8(%ebp),%eax
80105e28:	89 45 f8             	mov    %eax,-0x8(%ebp)
  if(s < d && s + n > d){
80105e2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105e2e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80105e31:	73 3a                	jae    80105e6d <memmove+0x54>
80105e33:	8b 55 fc             	mov    -0x4(%ebp),%edx
80105e36:	8b 45 10             	mov    0x10(%ebp),%eax
80105e39:	01 d0                	add    %edx,%eax
80105e3b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80105e3e:	76 2d                	jbe    80105e6d <memmove+0x54>
    s += n;
80105e40:	8b 45 10             	mov    0x10(%ebp),%eax
80105e43:	01 45 fc             	add    %eax,-0x4(%ebp)
    d += n;
80105e46:	8b 45 10             	mov    0x10(%ebp),%eax
80105e49:	01 45 f8             	add    %eax,-0x8(%ebp)
    while(n-- > 0)
80105e4c:	eb 10                	jmp    80105e5e <memmove+0x45>
      *--d = *--s;
80105e4e:	ff 4d f8             	decl   -0x8(%ebp)
80105e51:	ff 4d fc             	decl   -0x4(%ebp)
80105e54:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105e57:	8a 10                	mov    (%eax),%dl
80105e59:	8b 45 f8             	mov    -0x8(%ebp),%eax
80105e5c:	88 10                	mov    %dl,(%eax)
  s = src;
  d = dst;
  if(s < d && s + n > d){
    s += n;
    d += n;
    while(n-- > 0)
80105e5e:	8b 45 10             	mov    0x10(%ebp),%eax
80105e61:	8d 50 ff             	lea    -0x1(%eax),%edx
80105e64:	89 55 10             	mov    %edx,0x10(%ebp)
80105e67:	85 c0                	test   %eax,%eax
80105e69:	75 e3                	jne    80105e4e <memmove+0x35>
  const char *s;
  char *d;

  s = src;
  d = dst;
  if(s < d && s + n > d){
80105e6b:	eb 25                	jmp    80105e92 <memmove+0x79>
    s += n;
    d += n;
    while(n-- > 0)
      *--d = *--s;
  } else
    while(n-- > 0)
80105e6d:	eb 16                	jmp    80105e85 <memmove+0x6c>
      *d++ = *s++;
80105e6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
80105e72:	8d 50 01             	lea    0x1(%eax),%edx
80105e75:	89 55 f8             	mov    %edx,-0x8(%ebp)
80105e78:	8b 55 fc             	mov    -0x4(%ebp),%edx
80105e7b:	8d 4a 01             	lea    0x1(%edx),%ecx
80105e7e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
80105e81:	8a 12                	mov    (%edx),%dl
80105e83:	88 10                	mov    %dl,(%eax)
    s += n;
    d += n;
    while(n-- > 0)
      *--d = *--s;
  } else
    while(n-- > 0)
80105e85:	8b 45 10             	mov    0x10(%ebp),%eax
80105e88:	8d 50 ff             	lea    -0x1(%eax),%edx
80105e8b:	89 55 10             	mov    %edx,0x10(%ebp)
80105e8e:	85 c0                	test   %eax,%eax
80105e90:	75 dd                	jne    80105e6f <memmove+0x56>
      *d++ = *s++;

  return dst;
80105e92:	8b 45 08             	mov    0x8(%ebp),%eax
}
80105e95:	c9                   	leave  
80105e96:	c3                   	ret    

80105e97 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void*
memcpy(void *dst, const void *src, uint n)
{
80105e97:	55                   	push   %ebp
80105e98:	89 e5                	mov    %esp,%ebp
  return memmove(dst, src, n);
80105e9a:	ff 75 10             	pushl  0x10(%ebp)
80105e9d:	ff 75 0c             	pushl  0xc(%ebp)
80105ea0:	ff 75 08             	pushl  0x8(%ebp)
80105ea3:	e8 71 ff ff ff       	call   80105e19 <memmove>
80105ea8:	83 c4 0c             	add    $0xc,%esp
}
80105eab:	c9                   	leave  
80105eac:	c3                   	ret    

80105ead <strncmp>:

int
strncmp(const char *p, const char *q, uint n)
{
80105ead:	55                   	push   %ebp
80105eae:	89 e5                	mov    %esp,%ebp
  while(n > 0 && *p && *p == *q)
80105eb0:	eb 09                	jmp    80105ebb <strncmp+0xe>
    n--, p++, q++;
80105eb2:	ff 4d 10             	decl   0x10(%ebp)
80105eb5:	ff 45 08             	incl   0x8(%ebp)
80105eb8:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint n)
{
  while(n > 0 && *p && *p == *q)
80105ebb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80105ebf:	74 17                	je     80105ed8 <strncmp+0x2b>
80105ec1:	8b 45 08             	mov    0x8(%ebp),%eax
80105ec4:	8a 00                	mov    (%eax),%al
80105ec6:	84 c0                	test   %al,%al
80105ec8:	74 0e                	je     80105ed8 <strncmp+0x2b>
80105eca:	8b 45 08             	mov    0x8(%ebp),%eax
80105ecd:	8a 10                	mov    (%eax),%dl
80105ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
80105ed2:	8a 00                	mov    (%eax),%al
80105ed4:	38 c2                	cmp    %al,%dl
80105ed6:	74 da                	je     80105eb2 <strncmp+0x5>
    n--, p++, q++;
  if(n == 0)
80105ed8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80105edc:	75 07                	jne    80105ee5 <strncmp+0x38>
    return 0;
80105ede:	b8 00 00 00 00       	mov    $0x0,%eax
80105ee3:	eb 14                	jmp    80105ef9 <strncmp+0x4c>
  return (uchar)*p - (uchar)*q;
80105ee5:	8b 45 08             	mov    0x8(%ebp),%eax
80105ee8:	8a 00                	mov    (%eax),%al
80105eea:	0f b6 d0             	movzbl %al,%edx
80105eed:	8b 45 0c             	mov    0xc(%ebp),%eax
80105ef0:	8a 00                	mov    (%eax),%al
80105ef2:	0f b6 c0             	movzbl %al,%eax
80105ef5:	29 c2                	sub    %eax,%edx
80105ef7:	89 d0                	mov    %edx,%eax
}
80105ef9:	5d                   	pop    %ebp
80105efa:	c3                   	ret    

80105efb <strncpy>:

char*
strncpy(char *s, const char *t, int n)
{
80105efb:	55                   	push   %ebp
80105efc:	89 e5                	mov    %esp,%ebp
80105efe:	83 ec 10             	sub    $0x10,%esp
  char *os;
  
  os = s;
80105f01:	8b 45 08             	mov    0x8(%ebp),%eax
80105f04:	89 45 fc             	mov    %eax,-0x4(%ebp)
  while(n-- > 0 && (*s++ = *t++) != 0)
80105f07:	90                   	nop
80105f08:	8b 45 10             	mov    0x10(%ebp),%eax
80105f0b:	8d 50 ff             	lea    -0x1(%eax),%edx
80105f0e:	89 55 10             	mov    %edx,0x10(%ebp)
80105f11:	85 c0                	test   %eax,%eax
80105f13:	7e 1c                	jle    80105f31 <strncpy+0x36>
80105f15:	8b 45 08             	mov    0x8(%ebp),%eax
80105f18:	8d 50 01             	lea    0x1(%eax),%edx
80105f1b:	89 55 08             	mov    %edx,0x8(%ebp)
80105f1e:	8b 55 0c             	mov    0xc(%ebp),%edx
80105f21:	8d 4a 01             	lea    0x1(%edx),%ecx
80105f24:	89 4d 0c             	mov    %ecx,0xc(%ebp)
80105f27:	8a 12                	mov    (%edx),%dl
80105f29:	88 10                	mov    %dl,(%eax)
80105f2b:	8a 00                	mov    (%eax),%al
80105f2d:	84 c0                	test   %al,%al
80105f2f:	75 d7                	jne    80105f08 <strncpy+0xd>
    ;
  while(n-- > 0)
80105f31:	eb 0c                	jmp    80105f3f <strncpy+0x44>
    *s++ = 0;
80105f33:	8b 45 08             	mov    0x8(%ebp),%eax
80105f36:	8d 50 01             	lea    0x1(%eax),%edx
80105f39:	89 55 08             	mov    %edx,0x8(%ebp)
80105f3c:	c6 00 00             	movb   $0x0,(%eax)
  char *os;
  
  os = s;
  while(n-- > 0 && (*s++ = *t++) != 0)
    ;
  while(n-- > 0)
80105f3f:	8b 45 10             	mov    0x10(%ebp),%eax
80105f42:	8d 50 ff             	lea    -0x1(%eax),%edx
80105f45:	89 55 10             	mov    %edx,0x10(%ebp)
80105f48:	85 c0                	test   %eax,%eax
80105f4a:	7f e7                	jg     80105f33 <strncpy+0x38>
    *s++ = 0;
  return os;
80105f4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80105f4f:	c9                   	leave  
80105f50:	c3                   	ret    

80105f51 <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char*
safestrcpy(char *s, const char *t, int n)
{
80105f51:	55                   	push   %ebp
80105f52:	89 e5                	mov    %esp,%ebp
80105f54:	83 ec 10             	sub    $0x10,%esp
  char *os;
  
  os = s;
80105f57:	8b 45 08             	mov    0x8(%ebp),%eax
80105f5a:	89 45 fc             	mov    %eax,-0x4(%ebp)
  if(n <= 0)
80105f5d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80105f61:	7f 05                	jg     80105f68 <safestrcpy+0x17>
    return os;
80105f63:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105f66:	eb 2e                	jmp    80105f96 <safestrcpy+0x45>
  while(--n > 0 && (*s++ = *t++) != 0)
80105f68:	ff 4d 10             	decl   0x10(%ebp)
80105f6b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80105f6f:	7e 1c                	jle    80105f8d <safestrcpy+0x3c>
80105f71:	8b 45 08             	mov    0x8(%ebp),%eax
80105f74:	8d 50 01             	lea    0x1(%eax),%edx
80105f77:	89 55 08             	mov    %edx,0x8(%ebp)
80105f7a:	8b 55 0c             	mov    0xc(%ebp),%edx
80105f7d:	8d 4a 01             	lea    0x1(%edx),%ecx
80105f80:	89 4d 0c             	mov    %ecx,0xc(%ebp)
80105f83:	8a 12                	mov    (%edx),%dl
80105f85:	88 10                	mov    %dl,(%eax)
80105f87:	8a 00                	mov    (%eax),%al
80105f89:	84 c0                	test   %al,%al
80105f8b:	75 db                	jne    80105f68 <safestrcpy+0x17>
    ;
  *s = 0;
80105f8d:	8b 45 08             	mov    0x8(%ebp),%eax
80105f90:	c6 00 00             	movb   $0x0,(%eax)
  return os;
80105f93:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80105f96:	c9                   	leave  
80105f97:	c3                   	ret    

80105f98 <strlen>:

int
strlen(const char *s)
{
80105f98:	55                   	push   %ebp
80105f99:	89 e5                	mov    %esp,%ebp
80105f9b:	83 ec 10             	sub    $0x10,%esp
  int n;

  for(n = 0; s[n]; n++)
80105f9e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80105fa5:	eb 03                	jmp    80105faa <strlen+0x12>
80105fa7:	ff 45 fc             	incl   -0x4(%ebp)
80105faa:	8b 55 fc             	mov    -0x4(%ebp),%edx
80105fad:	8b 45 08             	mov    0x8(%ebp),%eax
80105fb0:	01 d0                	add    %edx,%eax
80105fb2:	8a 00                	mov    (%eax),%al
80105fb4:	84 c0                	test   %al,%al
80105fb6:	75 ef                	jne    80105fa7 <strlen+0xf>
    ;
  return n;
80105fb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80105fbb:	c9                   	leave  
80105fbc:	c3                   	ret    

80105fbd <fetchint>:
// to a saved program counter, and then the first argument.

// Fetch the int at addr from the current process.
int
fetchint(uintp addr, int *ip)
{
80105fbd:	55                   	push   %ebp
80105fbe:	89 e5                	mov    %esp,%ebp
  if(addr >= proc->sz || addr+sizeof(int) > proc->sz)
80105fc0:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105fc6:	8b 00                	mov    (%eax),%eax
80105fc8:	3b 45 08             	cmp    0x8(%ebp),%eax
80105fcb:	76 12                	jbe    80105fdf <fetchint+0x22>
80105fcd:	8b 45 08             	mov    0x8(%ebp),%eax
80105fd0:	8d 50 04             	lea    0x4(%eax),%edx
80105fd3:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80105fd9:	8b 00                	mov    (%eax),%eax
80105fdb:	39 c2                	cmp    %eax,%edx
80105fdd:	76 07                	jbe    80105fe6 <fetchint+0x29>
    return -1;
80105fdf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105fe4:	eb 0f                	jmp    80105ff5 <fetchint+0x38>
  *ip = *(int*)(addr);
80105fe6:	8b 45 08             	mov    0x8(%ebp),%eax
80105fe9:	8b 10                	mov    (%eax),%edx
80105feb:	8b 45 0c             	mov    0xc(%ebp),%eax
80105fee:	89 10                	mov    %edx,(%eax)
  return 0;
80105ff0:	b8 00 00 00 00       	mov    $0x0,%eax
}
80105ff5:	5d                   	pop    %ebp
80105ff6:	c3                   	ret    

80105ff7 <fetchuintp>:

int
fetchuintp(uintp addr, uintp *ip)
{
80105ff7:	55                   	push   %ebp
80105ff8:	89 e5                	mov    %esp,%ebp
  if(addr >= proc->sz || addr+sizeof(uintp) > proc->sz)
80105ffa:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106000:	8b 00                	mov    (%eax),%eax
80106002:	3b 45 08             	cmp    0x8(%ebp),%eax
80106005:	76 12                	jbe    80106019 <fetchuintp+0x22>
80106007:	8b 45 08             	mov    0x8(%ebp),%eax
8010600a:	8d 50 04             	lea    0x4(%eax),%edx
8010600d:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106013:	8b 00                	mov    (%eax),%eax
80106015:	39 c2                	cmp    %eax,%edx
80106017:	76 07                	jbe    80106020 <fetchuintp+0x29>
    return -1;
80106019:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010601e:	eb 0f                	jmp    8010602f <fetchuintp+0x38>
  *ip = *(uintp*)(addr);
80106020:	8b 45 08             	mov    0x8(%ebp),%eax
80106023:	8b 10                	mov    (%eax),%edx
80106025:	8b 45 0c             	mov    0xc(%ebp),%eax
80106028:	89 10                	mov    %edx,(%eax)
  return 0;
8010602a:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010602f:	5d                   	pop    %ebp
80106030:	c3                   	ret    

80106031 <fetchstr>:
// Fetch the nul-terminated string at addr from the current process.
// Doesn't actually copy the string - just sets *pp to point at it.
// Returns length of string, not including nul.
int
fetchstr(uintp addr, char **pp)
{
80106031:	55                   	push   %ebp
80106032:	89 e5                	mov    %esp,%ebp
80106034:	83 ec 10             	sub    $0x10,%esp
  char *s, *ep;

  if(addr >= proc->sz)
80106037:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010603d:	8b 00                	mov    (%eax),%eax
8010603f:	3b 45 08             	cmp    0x8(%ebp),%eax
80106042:	77 07                	ja     8010604b <fetchstr+0x1a>
    return -1;
80106044:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106049:	eb 44                	jmp    8010608f <fetchstr+0x5e>
  *pp = (char*)addr;
8010604b:	8b 55 08             	mov    0x8(%ebp),%edx
8010604e:	8b 45 0c             	mov    0xc(%ebp),%eax
80106051:	89 10                	mov    %edx,(%eax)
  ep = (char*)proc->sz;
80106053:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106059:	8b 00                	mov    (%eax),%eax
8010605b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  for(s = *pp; s < ep; s++)
8010605e:	8b 45 0c             	mov    0xc(%ebp),%eax
80106061:	8b 00                	mov    (%eax),%eax
80106063:	89 45 fc             	mov    %eax,-0x4(%ebp)
80106066:	eb 1a                	jmp    80106082 <fetchstr+0x51>
    if(*s == 0)
80106068:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010606b:	8a 00                	mov    (%eax),%al
8010606d:	84 c0                	test   %al,%al
8010606f:	75 0e                	jne    8010607f <fetchstr+0x4e>
      return s - *pp;
80106071:	8b 55 fc             	mov    -0x4(%ebp),%edx
80106074:	8b 45 0c             	mov    0xc(%ebp),%eax
80106077:	8b 00                	mov    (%eax),%eax
80106079:	29 c2                	sub    %eax,%edx
8010607b:	89 d0                	mov    %edx,%eax
8010607d:	eb 10                	jmp    8010608f <fetchstr+0x5e>

  if(addr >= proc->sz)
    return -1;
  *pp = (char*)addr;
  ep = (char*)proc->sz;
  for(s = *pp; s < ep; s++)
8010607f:	ff 45 fc             	incl   -0x4(%ebp)
80106082:	8b 45 fc             	mov    -0x4(%ebp),%eax
80106085:	3b 45 f8             	cmp    -0x8(%ebp),%eax
80106088:	72 de                	jb     80106068 <fetchstr+0x37>
    if(*s == 0)
      return s - *pp;
  return -1;
8010608a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010608f:	c9                   	leave  
80106090:	c3                   	ret    

80106091 <argint>:
}
#else
// Fetch the nth 32-bit system call argument.
int
argint(int n, int *ip)
{
80106091:	55                   	push   %ebp
80106092:	89 e5                	mov    %esp,%ebp
  return fetchint(proc->tf->esp + 4 + 4*n, ip);
80106094:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010609a:	8b 40 18             	mov    0x18(%eax),%eax
8010609d:	8b 40 44             	mov    0x44(%eax),%eax
801060a0:	8b 55 08             	mov    0x8(%ebp),%edx
801060a3:	c1 e2 02             	shl    $0x2,%edx
801060a6:	01 d0                	add    %edx,%eax
801060a8:	83 c0 04             	add    $0x4,%eax
801060ab:	ff 75 0c             	pushl  0xc(%ebp)
801060ae:	50                   	push   %eax
801060af:	e8 09 ff ff ff       	call   80105fbd <fetchint>
801060b4:	83 c4 08             	add    $0x8,%esp
}
801060b7:	c9                   	leave  
801060b8:	c3                   	ret    

801060b9 <arguintp>:

int
arguintp(int n, uintp *ip)
{
801060b9:	55                   	push   %ebp
801060ba:	89 e5                	mov    %esp,%ebp
  return fetchuintp(proc->tf->esp + sizeof(uintp) + sizeof(uintp)*n, ip);
801060bc:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801060c2:	8b 40 18             	mov    0x18(%eax),%eax
801060c5:	8b 40 44             	mov    0x44(%eax),%eax
801060c8:	8b 55 08             	mov    0x8(%ebp),%edx
801060cb:	c1 e2 02             	shl    $0x2,%edx
801060ce:	01 d0                	add    %edx,%eax
801060d0:	83 c0 04             	add    $0x4,%eax
801060d3:	ff 75 0c             	pushl  0xc(%ebp)
801060d6:	50                   	push   %eax
801060d7:	e8 1b ff ff ff       	call   80105ff7 <fetchuintp>
801060dc:	83 c4 08             	add    $0x8,%esp
}
801060df:	c9                   	leave  
801060e0:	c3                   	ret    

801060e1 <argptr>:
// Fetch the nth word-sized system call argument as a pointer
// to a block of memory of size n bytes.  Check that the pointer
// lies within the process address space.
int
argptr(int n, char **pp, int size)
{
801060e1:	55                   	push   %ebp
801060e2:	89 e5                	mov    %esp,%ebp
801060e4:	83 ec 10             	sub    $0x10,%esp
  uintp i;

  if(arguintp(n, &i) < 0)
801060e7:	8d 45 fc             	lea    -0x4(%ebp),%eax
801060ea:	50                   	push   %eax
801060eb:	ff 75 08             	pushl  0x8(%ebp)
801060ee:	e8 c6 ff ff ff       	call   801060b9 <arguintp>
801060f3:	83 c4 08             	add    $0x8,%esp
801060f6:	85 c0                	test   %eax,%eax
801060f8:	79 07                	jns    80106101 <argptr+0x20>
    return -1;
801060fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801060ff:	eb 39                	jmp    8010613a <argptr+0x59>
  if(i >= proc->sz || i+size > proc->sz)
80106101:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106107:	8b 10                	mov    (%eax),%edx
80106109:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010610c:	39 c2                	cmp    %eax,%edx
8010610e:	76 14                	jbe    80106124 <argptr+0x43>
80106110:	8b 55 fc             	mov    -0x4(%ebp),%edx
80106113:	8b 45 10             	mov    0x10(%ebp),%eax
80106116:	01 c2                	add    %eax,%edx
80106118:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010611e:	8b 00                	mov    (%eax),%eax
80106120:	39 c2                	cmp    %eax,%edx
80106122:	76 07                	jbe    8010612b <argptr+0x4a>
    return -1;
80106124:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106129:	eb 0f                	jmp    8010613a <argptr+0x59>
  *pp = (char*)i;
8010612b:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010612e:	89 c2                	mov    %eax,%edx
80106130:	8b 45 0c             	mov    0xc(%ebp),%eax
80106133:	89 10                	mov    %edx,(%eax)
  return 0;
80106135:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010613a:	c9                   	leave  
8010613b:	c3                   	ret    

8010613c <argstr>:
// Check that the pointer is valid and the string is nul-terminated.
// (There is no shared writable memory, so the string can't change
// between this check and being used by the kernel.)
int
argstr(int n, char **pp)
{
8010613c:	55                   	push   %ebp
8010613d:	89 e5                	mov    %esp,%ebp
8010613f:	83 ec 10             	sub    $0x10,%esp
  uintp addr;
  if(arguintp(n, &addr) < 0)
80106142:	8d 45 fc             	lea    -0x4(%ebp),%eax
80106145:	50                   	push   %eax
80106146:	ff 75 08             	pushl  0x8(%ebp)
80106149:	e8 6b ff ff ff       	call   801060b9 <arguintp>
8010614e:	83 c4 08             	add    $0x8,%esp
80106151:	85 c0                	test   %eax,%eax
80106153:	79 07                	jns    8010615c <argstr+0x20>
    return -1;
80106155:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010615a:	eb 0f                	jmp    8010616b <argstr+0x2f>
  return fetchstr(addr, pp);
8010615c:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010615f:	ff 75 0c             	pushl  0xc(%ebp)
80106162:	50                   	push   %eax
80106163:	e8 c9 fe ff ff       	call   80106031 <fetchstr>
80106168:	83 c4 08             	add    $0x8,%esp
}
8010616b:	c9                   	leave  
8010616c:	c3                   	ret    

8010616d <syscall>:
[SYS_close]   sys_close,
};

void
syscall(void)
{
8010616d:	55                   	push   %ebp
8010616e:	89 e5                	mov    %esp,%ebp
80106170:	53                   	push   %ebx
80106171:	83 ec 14             	sub    $0x14,%esp
  int num;

  num = proc->tf->eax;
80106174:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010617a:	8b 40 18             	mov    0x18(%eax),%eax
8010617d:	8b 40 1c             	mov    0x1c(%eax),%eax
80106180:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
80106183:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106187:	7e 30                	jle    801061b9 <syscall+0x4c>
80106189:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010618c:	83 f8 15             	cmp    $0x15,%eax
8010618f:	77 28                	ja     801061b9 <syscall+0x4c>
80106191:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106194:	8b 04 85 40 b0 10 80 	mov    -0x7fef4fc0(,%eax,4),%eax
8010619b:	85 c0                	test   %eax,%eax
8010619d:	74 1a                	je     801061b9 <syscall+0x4c>
    proc->tf->eax = syscalls[num]();
8010619f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801061a5:	8b 58 18             	mov    0x18(%eax),%ebx
801061a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801061ab:	8b 04 85 40 b0 10 80 	mov    -0x7fef4fc0(,%eax,4),%eax
801061b2:	ff d0                	call   *%eax
801061b4:	89 43 1c             	mov    %eax,0x1c(%ebx)
801061b7:	eb 34                	jmp    801061ed <syscall+0x80>
  } else {
    cprintf("%d %s: unknown sys call %d\n",
            proc->pid, proc->name, num);
801061b9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801061bf:	8d 50 6c             	lea    0x6c(%eax),%edx
801061c2:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax

  num = proc->tf->eax;
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
    proc->tf->eax = syscalls[num]();
  } else {
    cprintf("%d %s: unknown sys call %d\n",
801061c8:	8b 40 10             	mov    0x10(%eax),%eax
801061cb:	ff 75 f4             	pushl  -0xc(%ebp)
801061ce:	52                   	push   %edx
801061cf:	50                   	push   %eax
801061d0:	68 86 89 10 80       	push   $0x80108986
801061d5:	e8 06 ad ff ff       	call   80100ee0 <cprintf>
801061da:	83 c4 10             	add    $0x10,%esp
            proc->pid, proc->name, num);
    proc->tf->eax = -1;
801061dd:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801061e3:	8b 40 18             	mov    0x18(%eax),%eax
801061e6:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
  }
}
801061ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801061f0:	c9                   	leave  
801061f1:	c3                   	ret    

801061f2 <argfd>:

// Fetch the nth word-sized system call argument as a file descriptor
// and return both the descriptor and the corresponding struct file.
static int
argfd(int n, int *pfd, struct file **pf)
{
801061f2:	55                   	push   %ebp
801061f3:	89 e5                	mov    %esp,%ebp
801061f5:	83 ec 18             	sub    $0x18,%esp
  int fd;
  struct file *f;

  if(argint(n, &fd) < 0)
801061f8:	83 ec 08             	sub    $0x8,%esp
801061fb:	8d 45 f0             	lea    -0x10(%ebp),%eax
801061fe:	50                   	push   %eax
801061ff:	ff 75 08             	pushl  0x8(%ebp)
80106202:	e8 8a fe ff ff       	call   80106091 <argint>
80106207:	83 c4 10             	add    $0x10,%esp
8010620a:	85 c0                	test   %eax,%eax
8010620c:	79 07                	jns    80106215 <argfd+0x23>
    return -1;
8010620e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106213:	eb 50                	jmp    80106265 <argfd+0x73>
  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
80106215:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106218:	85 c0                	test   %eax,%eax
8010621a:	78 21                	js     8010623d <argfd+0x4b>
8010621c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010621f:	83 f8 0f             	cmp    $0xf,%eax
80106222:	7f 19                	jg     8010623d <argfd+0x4b>
80106224:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010622a:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010622d:	83 c2 08             	add    $0x8,%edx
80106230:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
80106234:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106237:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010623b:	75 07                	jne    80106244 <argfd+0x52>
    return -1;
8010623d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106242:	eb 21                	jmp    80106265 <argfd+0x73>
  if(pfd)
80106244:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80106248:	74 08                	je     80106252 <argfd+0x60>
    *pfd = fd;
8010624a:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010624d:	8b 45 0c             	mov    0xc(%ebp),%eax
80106250:	89 10                	mov    %edx,(%eax)
  if(pf)
80106252:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80106256:	74 08                	je     80106260 <argfd+0x6e>
    *pf = f;
80106258:	8b 45 10             	mov    0x10(%ebp),%eax
8010625b:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010625e:	89 10                	mov    %edx,(%eax)
  return 0;
80106260:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106265:	c9                   	leave  
80106266:	c3                   	ret    

80106267 <fdalloc>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
static int
fdalloc(struct file *f)
{
80106267:	55                   	push   %ebp
80106268:	89 e5                	mov    %esp,%ebp
8010626a:	83 ec 10             	sub    $0x10,%esp
  int fd;

  for(fd = 0; fd < NOFILE; fd++){
8010626d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80106274:	eb 2f                	jmp    801062a5 <fdalloc+0x3e>
    if(proc->ofile[fd] == 0){
80106276:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010627c:	8b 55 fc             	mov    -0x4(%ebp),%edx
8010627f:	83 c2 08             	add    $0x8,%edx
80106282:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
80106286:	85 c0                	test   %eax,%eax
80106288:	75 18                	jne    801062a2 <fdalloc+0x3b>
      proc->ofile[fd] = f;
8010628a:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106290:	8b 55 fc             	mov    -0x4(%ebp),%edx
80106293:	8d 4a 08             	lea    0x8(%edx),%ecx
80106296:	8b 55 08             	mov    0x8(%ebp),%edx
80106299:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
      return fd;
8010629d:	8b 45 fc             	mov    -0x4(%ebp),%eax
801062a0:	eb 0e                	jmp    801062b0 <fdalloc+0x49>
static int
fdalloc(struct file *f)
{
  int fd;

  for(fd = 0; fd < NOFILE; fd++){
801062a2:	ff 45 fc             	incl   -0x4(%ebp)
801062a5:	83 7d fc 0f          	cmpl   $0xf,-0x4(%ebp)
801062a9:	7e cb                	jle    80106276 <fdalloc+0xf>
    if(proc->ofile[fd] == 0){
      proc->ofile[fd] = f;
      return fd;
    }
  }
  return -1;
801062ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801062b0:	c9                   	leave  
801062b1:	c3                   	ret    

801062b2 <sys_dup>:

int
sys_dup(void)
{
801062b2:	55                   	push   %ebp
801062b3:	89 e5                	mov    %esp,%ebp
801062b5:	83 ec 18             	sub    $0x18,%esp
  struct file *f;
  int fd;
  
  if(argfd(0, 0, &f) < 0)
801062b8:	83 ec 04             	sub    $0x4,%esp
801062bb:	8d 45 f0             	lea    -0x10(%ebp),%eax
801062be:	50                   	push   %eax
801062bf:	6a 00                	push   $0x0
801062c1:	6a 00                	push   $0x0
801062c3:	e8 2a ff ff ff       	call   801061f2 <argfd>
801062c8:	83 c4 10             	add    $0x10,%esp
801062cb:	85 c0                	test   %eax,%eax
801062cd:	79 07                	jns    801062d6 <sys_dup+0x24>
    return -1;
801062cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801062d4:	eb 31                	jmp    80106307 <sys_dup+0x55>
  if((fd=fdalloc(f)) < 0)
801062d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
801062d9:	83 ec 0c             	sub    $0xc,%esp
801062dc:	50                   	push   %eax
801062dd:	e8 85 ff ff ff       	call   80106267 <fdalloc>
801062e2:	83 c4 10             	add    $0x10,%esp
801062e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
801062e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801062ec:	79 07                	jns    801062f5 <sys_dup+0x43>
    return -1;
801062ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801062f3:	eb 12                	jmp    80106307 <sys_dup+0x55>
  filedup(f);
801062f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
801062f8:	83 ec 0c             	sub    $0xc,%esp
801062fb:	50                   	push   %eax
801062fc:	e8 c6 b7 ff ff       	call   80101ac7 <filedup>
80106301:	83 c4 10             	add    $0x10,%esp
  return fd;
80106304:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80106307:	c9                   	leave  
80106308:	c3                   	ret    

80106309 <sys_read>:

int
sys_read(void)
{
80106309:	55                   	push   %ebp
8010630a:	89 e5                	mov    %esp,%ebp
8010630c:	83 ec 18             	sub    $0x18,%esp
  struct file *f;
  int n;
  char *p;

  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
8010630f:	83 ec 04             	sub    $0x4,%esp
80106312:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106315:	50                   	push   %eax
80106316:	6a 00                	push   $0x0
80106318:	6a 00                	push   $0x0
8010631a:	e8 d3 fe ff ff       	call   801061f2 <argfd>
8010631f:	83 c4 10             	add    $0x10,%esp
80106322:	85 c0                	test   %eax,%eax
80106324:	78 2e                	js     80106354 <sys_read+0x4b>
80106326:	83 ec 08             	sub    $0x8,%esp
80106329:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010632c:	50                   	push   %eax
8010632d:	6a 02                	push   $0x2
8010632f:	e8 5d fd ff ff       	call   80106091 <argint>
80106334:	83 c4 10             	add    $0x10,%esp
80106337:	85 c0                	test   %eax,%eax
80106339:	78 19                	js     80106354 <sys_read+0x4b>
8010633b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010633e:	83 ec 04             	sub    $0x4,%esp
80106341:	50                   	push   %eax
80106342:	8d 45 ec             	lea    -0x14(%ebp),%eax
80106345:	50                   	push   %eax
80106346:	6a 01                	push   $0x1
80106348:	e8 94 fd ff ff       	call   801060e1 <argptr>
8010634d:	83 c4 10             	add    $0x10,%esp
80106350:	85 c0                	test   %eax,%eax
80106352:	79 07                	jns    8010635b <sys_read+0x52>
    return -1;
80106354:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106359:	eb 17                	jmp    80106372 <sys_read+0x69>
  return fileread(f, p, n);
8010635b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
8010635e:	8b 55 ec             	mov    -0x14(%ebp),%edx
80106361:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106364:	83 ec 04             	sub    $0x4,%esp
80106367:	51                   	push   %ecx
80106368:	52                   	push   %edx
80106369:	50                   	push   %eax
8010636a:	e8 dc b8 ff ff       	call   80101c4b <fileread>
8010636f:	83 c4 10             	add    $0x10,%esp
}
80106372:	c9                   	leave  
80106373:	c3                   	ret    

80106374 <sys_write>:

int
sys_write(void)
{
80106374:	55                   	push   %ebp
80106375:	89 e5                	mov    %esp,%ebp
80106377:	83 ec 18             	sub    $0x18,%esp
  struct file *f;
  int n;
  char *p;

  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
8010637a:	83 ec 04             	sub    $0x4,%esp
8010637d:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106380:	50                   	push   %eax
80106381:	6a 00                	push   $0x0
80106383:	6a 00                	push   $0x0
80106385:	e8 68 fe ff ff       	call   801061f2 <argfd>
8010638a:	83 c4 10             	add    $0x10,%esp
8010638d:	85 c0                	test   %eax,%eax
8010638f:	78 2e                	js     801063bf <sys_write+0x4b>
80106391:	83 ec 08             	sub    $0x8,%esp
80106394:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106397:	50                   	push   %eax
80106398:	6a 02                	push   $0x2
8010639a:	e8 f2 fc ff ff       	call   80106091 <argint>
8010639f:	83 c4 10             	add    $0x10,%esp
801063a2:	85 c0                	test   %eax,%eax
801063a4:	78 19                	js     801063bf <sys_write+0x4b>
801063a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
801063a9:	83 ec 04             	sub    $0x4,%esp
801063ac:	50                   	push   %eax
801063ad:	8d 45 ec             	lea    -0x14(%ebp),%eax
801063b0:	50                   	push   %eax
801063b1:	6a 01                	push   $0x1
801063b3:	e8 29 fd ff ff       	call   801060e1 <argptr>
801063b8:	83 c4 10             	add    $0x10,%esp
801063bb:	85 c0                	test   %eax,%eax
801063bd:	79 07                	jns    801063c6 <sys_write+0x52>
    return -1;
801063bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801063c4:	eb 17                	jmp    801063dd <sys_write+0x69>
  return filewrite(f, p, n);
801063c6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
801063c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
801063cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801063cf:	83 ec 04             	sub    $0x4,%esp
801063d2:	51                   	push   %ecx
801063d3:	52                   	push   %edx
801063d4:	50                   	push   %eax
801063d5:	e8 28 b9 ff ff       	call   80101d02 <filewrite>
801063da:	83 c4 10             	add    $0x10,%esp
}
801063dd:	c9                   	leave  
801063de:	c3                   	ret    

801063df <sys_close>:

int
sys_close(void)
{
801063df:	55                   	push   %ebp
801063e0:	89 e5                	mov    %esp,%ebp
801063e2:	83 ec 18             	sub    $0x18,%esp
  int fd;
  struct file *f;
  
  if(argfd(0, &fd, &f) < 0)
801063e5:	83 ec 04             	sub    $0x4,%esp
801063e8:	8d 45 f0             	lea    -0x10(%ebp),%eax
801063eb:	50                   	push   %eax
801063ec:	8d 45 f4             	lea    -0xc(%ebp),%eax
801063ef:	50                   	push   %eax
801063f0:	6a 00                	push   $0x0
801063f2:	e8 fb fd ff ff       	call   801061f2 <argfd>
801063f7:	83 c4 10             	add    $0x10,%esp
801063fa:	85 c0                	test   %eax,%eax
801063fc:	79 07                	jns    80106405 <sys_close+0x26>
    return -1;
801063fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106403:	eb 28                	jmp    8010642d <sys_close+0x4e>
  proc->ofile[fd] = 0;
80106405:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010640b:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010640e:	83 c2 08             	add    $0x8,%edx
80106411:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
80106418:	00 
  fileclose(f);
80106419:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010641c:	83 ec 0c             	sub    $0xc,%esp
8010641f:	50                   	push   %eax
80106420:	e8 f3 b6 ff ff       	call   80101b18 <fileclose>
80106425:	83 c4 10             	add    $0x10,%esp
  return 0;
80106428:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010642d:	c9                   	leave  
8010642e:	c3                   	ret    

8010642f <sys_fstat>:

int
sys_fstat(void)
{
8010642f:	55                   	push   %ebp
80106430:	89 e5                	mov    %esp,%ebp
80106432:	83 ec 18             	sub    $0x18,%esp
  struct file *f;
  struct stat *st;
  
  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
80106435:	83 ec 04             	sub    $0x4,%esp
80106438:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010643b:	50                   	push   %eax
8010643c:	6a 00                	push   $0x0
8010643e:	6a 00                	push   $0x0
80106440:	e8 ad fd ff ff       	call   801061f2 <argfd>
80106445:	83 c4 10             	add    $0x10,%esp
80106448:	85 c0                	test   %eax,%eax
8010644a:	78 17                	js     80106463 <sys_fstat+0x34>
8010644c:	83 ec 04             	sub    $0x4,%esp
8010644f:	6a 14                	push   $0x14
80106451:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106454:	50                   	push   %eax
80106455:	6a 01                	push   $0x1
80106457:	e8 85 fc ff ff       	call   801060e1 <argptr>
8010645c:	83 c4 10             	add    $0x10,%esp
8010645f:	85 c0                	test   %eax,%eax
80106461:	79 07                	jns    8010646a <sys_fstat+0x3b>
    return -1;
80106463:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106468:	eb 13                	jmp    8010647d <sys_fstat+0x4e>
  return filestat(f, st);
8010646a:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010646d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106470:	83 ec 08             	sub    $0x8,%esp
80106473:	52                   	push   %edx
80106474:	50                   	push   %eax
80106475:	e8 7a b7 ff ff       	call   80101bf4 <filestat>
8010647a:	83 c4 10             	add    $0x10,%esp
}
8010647d:	c9                   	leave  
8010647e:	c3                   	ret    

8010647f <sys_link>:

// Create the path new as a link to the same inode as old.
int
sys_link(void)
{
8010647f:	55                   	push   %ebp
80106480:	89 e5                	mov    %esp,%ebp
80106482:	83 ec 28             	sub    $0x28,%esp
  char name[DIRSIZ], *new, *old;
  struct inode *dp, *ip;

  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
80106485:	83 ec 08             	sub    $0x8,%esp
80106488:	8d 45 d8             	lea    -0x28(%ebp),%eax
8010648b:	50                   	push   %eax
8010648c:	6a 00                	push   $0x0
8010648e:	e8 a9 fc ff ff       	call   8010613c <argstr>
80106493:	83 c4 10             	add    $0x10,%esp
80106496:	85 c0                	test   %eax,%eax
80106498:	78 15                	js     801064af <sys_link+0x30>
8010649a:	83 ec 08             	sub    $0x8,%esp
8010649d:	8d 45 dc             	lea    -0x24(%ebp),%eax
801064a0:	50                   	push   %eax
801064a1:	6a 01                	push   $0x1
801064a3:	e8 94 fc ff ff       	call   8010613c <argstr>
801064a8:	83 c4 10             	add    $0x10,%esp
801064ab:	85 c0                	test   %eax,%eax
801064ad:	79 0a                	jns    801064b9 <sys_link+0x3a>
    return -1;
801064af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801064b4:	e9 5b 01 00 00       	jmp    80106614 <sys_link+0x195>
  if((ip = namei(old)) == 0)
801064b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
801064bc:	83 ec 0c             	sub    $0xc,%esp
801064bf:	50                   	push   %eax
801064c0:	e8 b6 ca ff ff       	call   80102f7b <namei>
801064c5:	83 c4 10             	add    $0x10,%esp
801064c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
801064cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801064cf:	75 0a                	jne    801064db <sys_link+0x5c>
    return -1;
801064d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801064d6:	e9 39 01 00 00       	jmp    80106614 <sys_link+0x195>

  begin_trans();
801064db:	e8 7a d8 ff ff       	call   80103d5a <begin_trans>

  ilock(ip);
801064e0:	83 ec 0c             	sub    $0xc,%esp
801064e3:	ff 75 f4             	pushl  -0xc(%ebp)
801064e6:	e8 e4 be ff ff       	call   801023cf <ilock>
801064eb:	83 c4 10             	add    $0x10,%esp
  if(ip->type == T_DIR){
801064ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
801064f1:	8b 40 10             	mov    0x10(%eax),%eax
801064f4:	66 83 f8 01          	cmp    $0x1,%ax
801064f8:	75 1d                	jne    80106517 <sys_link+0x98>
    iunlockput(ip);
801064fa:	83 ec 0c             	sub    $0xc,%esp
801064fd:	ff 75 f4             	pushl  -0xc(%ebp)
80106500:	e8 7e c1 ff ff       	call   80102683 <iunlockput>
80106505:	83 c4 10             	add    $0x10,%esp
    commit_trans();
80106508:	e8 9f d8 ff ff       	call   80103dac <commit_trans>
    return -1;
8010650d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106512:	e9 fd 00 00 00       	jmp    80106614 <sys_link+0x195>
  }

  ip->nlink++;
80106517:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010651a:	66 8b 40 16          	mov    0x16(%eax),%ax
8010651e:	40                   	inc    %eax
8010651f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106522:	66 89 42 16          	mov    %ax,0x16(%edx)
  iupdate(ip);
80106526:	83 ec 0c             	sub    $0xc,%esp
80106529:	ff 75 f4             	pushl  -0xc(%ebp)
8010652c:	e8 cd bc ff ff       	call   801021fe <iupdate>
80106531:	83 c4 10             	add    $0x10,%esp
  iunlock(ip);
80106534:	83 ec 0c             	sub    $0xc,%esp
80106537:	ff 75 f4             	pushl  -0xc(%ebp)
8010653a:	e8 e4 bf ff ff       	call   80102523 <iunlock>
8010653f:	83 c4 10             	add    $0x10,%esp

  if((dp = nameiparent(new, name)) == 0)
80106542:	8b 45 dc             	mov    -0x24(%ebp),%eax
80106545:	83 ec 08             	sub    $0x8,%esp
80106548:	8d 55 e2             	lea    -0x1e(%ebp),%edx
8010654b:	52                   	push   %edx
8010654c:	50                   	push   %eax
8010654d:	e8 45 ca ff ff       	call   80102f97 <nameiparent>
80106552:	83 c4 10             	add    $0x10,%esp
80106555:	89 45 f0             	mov    %eax,-0x10(%ebp)
80106558:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010655c:	75 02                	jne    80106560 <sys_link+0xe1>
    goto bad;
8010655e:	eb 71                	jmp    801065d1 <sys_link+0x152>
  ilock(dp);
80106560:	83 ec 0c             	sub    $0xc,%esp
80106563:	ff 75 f0             	pushl  -0x10(%ebp)
80106566:	e8 64 be ff ff       	call   801023cf <ilock>
8010656b:	83 c4 10             	add    $0x10,%esp
  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
8010656e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106571:	8b 10                	mov    (%eax),%edx
80106573:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106576:	8b 00                	mov    (%eax),%eax
80106578:	39 c2                	cmp    %eax,%edx
8010657a:	75 1d                	jne    80106599 <sys_link+0x11a>
8010657c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010657f:	8b 40 04             	mov    0x4(%eax),%eax
80106582:	83 ec 04             	sub    $0x4,%esp
80106585:	50                   	push   %eax
80106586:	8d 45 e2             	lea    -0x1e(%ebp),%eax
80106589:	50                   	push   %eax
8010658a:	ff 75 f0             	pushl  -0x10(%ebp)
8010658d:	e8 5d c7 ff ff       	call   80102cef <dirlink>
80106592:	83 c4 10             	add    $0x10,%esp
80106595:	85 c0                	test   %eax,%eax
80106597:	79 10                	jns    801065a9 <sys_link+0x12a>
    iunlockput(dp);
80106599:	83 ec 0c             	sub    $0xc,%esp
8010659c:	ff 75 f0             	pushl  -0x10(%ebp)
8010659f:	e8 df c0 ff ff       	call   80102683 <iunlockput>
801065a4:	83 c4 10             	add    $0x10,%esp
    goto bad;
801065a7:	eb 28                	jmp    801065d1 <sys_link+0x152>
  }
  iunlockput(dp);
801065a9:	83 ec 0c             	sub    $0xc,%esp
801065ac:	ff 75 f0             	pushl  -0x10(%ebp)
801065af:	e8 cf c0 ff ff       	call   80102683 <iunlockput>
801065b4:	83 c4 10             	add    $0x10,%esp
  iput(ip);
801065b7:	83 ec 0c             	sub    $0xc,%esp
801065ba:	ff 75 f4             	pushl  -0xc(%ebp)
801065bd:	e8 d2 bf ff ff       	call   80102594 <iput>
801065c2:	83 c4 10             	add    $0x10,%esp

  commit_trans();
801065c5:	e8 e2 d7 ff ff       	call   80103dac <commit_trans>

  return 0;
801065ca:	b8 00 00 00 00       	mov    $0x0,%eax
801065cf:	eb 43                	jmp    80106614 <sys_link+0x195>

bad:
  ilock(ip);
801065d1:	83 ec 0c             	sub    $0xc,%esp
801065d4:	ff 75 f4             	pushl  -0xc(%ebp)
801065d7:	e8 f3 bd ff ff       	call   801023cf <ilock>
801065dc:	83 c4 10             	add    $0x10,%esp
  ip->nlink--;
801065df:	8b 45 f4             	mov    -0xc(%ebp),%eax
801065e2:	66 8b 40 16          	mov    0x16(%eax),%ax
801065e6:	48                   	dec    %eax
801065e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
801065ea:	66 89 42 16          	mov    %ax,0x16(%edx)
  iupdate(ip);
801065ee:	83 ec 0c             	sub    $0xc,%esp
801065f1:	ff 75 f4             	pushl  -0xc(%ebp)
801065f4:	e8 05 bc ff ff       	call   801021fe <iupdate>
801065f9:	83 c4 10             	add    $0x10,%esp
  iunlockput(ip);
801065fc:	83 ec 0c             	sub    $0xc,%esp
801065ff:	ff 75 f4             	pushl  -0xc(%ebp)
80106602:	e8 7c c0 ff ff       	call   80102683 <iunlockput>
80106607:	83 c4 10             	add    $0x10,%esp
  commit_trans();
8010660a:	e8 9d d7 ff ff       	call   80103dac <commit_trans>
  return -1;
8010660f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106614:	c9                   	leave  
80106615:	c3                   	ret    

80106616 <isdirempty>:

// Is the directory dp empty except for "." and ".." ?
static int
isdirempty(struct inode *dp)
{
80106616:	55                   	push   %ebp
80106617:	89 e5                	mov    %esp,%ebp
80106619:	83 ec 28             	sub    $0x28,%esp
  int off;
  struct dirent de;

  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
8010661c:	c7 45 f4 20 00 00 00 	movl   $0x20,-0xc(%ebp)
80106623:	eb 3f                	jmp    80106664 <isdirempty+0x4e>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80106625:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106628:	6a 10                	push   $0x10
8010662a:	50                   	push   %eax
8010662b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010662e:	50                   	push   %eax
8010662f:	ff 75 08             	pushl  0x8(%ebp)
80106632:	e8 f4 c2 ff ff       	call   8010292b <readi>
80106637:	83 c4 10             	add    $0x10,%esp
8010663a:	83 f8 10             	cmp    $0x10,%eax
8010663d:	74 0d                	je     8010664c <isdirempty+0x36>
      panic("isdirempty: readi");
8010663f:	83 ec 0c             	sub    $0xc,%esp
80106642:	68 a2 89 10 80       	push   $0x801089a2
80106647:	e8 45 aa ff ff       	call   80101091 <panic>
    if(de.inum != 0)
8010664c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010664f:	66 85 c0             	test   %ax,%ax
80106652:	74 07                	je     8010665b <isdirempty+0x45>
      return 0;
80106654:	b8 00 00 00 00       	mov    $0x0,%eax
80106659:	eb 1b                	jmp    80106676 <isdirempty+0x60>
isdirempty(struct inode *dp)
{
  int off;
  struct dirent de;

  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
8010665b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010665e:	83 c0 10             	add    $0x10,%eax
80106661:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106664:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106667:	8b 45 08             	mov    0x8(%ebp),%eax
8010666a:	8b 40 18             	mov    0x18(%eax),%eax
8010666d:	39 c2                	cmp    %eax,%edx
8010666f:	72 b4                	jb     80106625 <isdirempty+0xf>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
      panic("isdirempty: readi");
    if(de.inum != 0)
      return 0;
  }
  return 1;
80106671:	b8 01 00 00 00       	mov    $0x1,%eax
}
80106676:	c9                   	leave  
80106677:	c3                   	ret    

80106678 <sys_unlink>:

//PAGEBREAK!
int
sys_unlink(void)
{
80106678:	55                   	push   %ebp
80106679:	89 e5                	mov    %esp,%ebp
8010667b:	83 ec 38             	sub    $0x38,%esp
  struct inode *ip, *dp;
  struct dirent de;
  char name[DIRSIZ], *path;
  uint off;

  if(argstr(0, &path) < 0)
8010667e:	83 ec 08             	sub    $0x8,%esp
80106681:	8d 45 cc             	lea    -0x34(%ebp),%eax
80106684:	50                   	push   %eax
80106685:	6a 00                	push   $0x0
80106687:	e8 b0 fa ff ff       	call   8010613c <argstr>
8010668c:	83 c4 10             	add    $0x10,%esp
8010668f:	85 c0                	test   %eax,%eax
80106691:	79 0a                	jns    8010669d <sys_unlink+0x25>
    return -1;
80106693:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106698:	e9 ad 01 00 00       	jmp    8010684a <sys_unlink+0x1d2>
  if((dp = nameiparent(path, name)) == 0)
8010669d:	8b 45 cc             	mov    -0x34(%ebp),%eax
801066a0:	83 ec 08             	sub    $0x8,%esp
801066a3:	8d 55 d2             	lea    -0x2e(%ebp),%edx
801066a6:	52                   	push   %edx
801066a7:	50                   	push   %eax
801066a8:	e8 ea c8 ff ff       	call   80102f97 <nameiparent>
801066ad:	83 c4 10             	add    $0x10,%esp
801066b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
801066b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801066b7:	75 0a                	jne    801066c3 <sys_unlink+0x4b>
    return -1;
801066b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801066be:	e9 87 01 00 00       	jmp    8010684a <sys_unlink+0x1d2>

  begin_trans();
801066c3:	e8 92 d6 ff ff       	call   80103d5a <begin_trans>

  ilock(dp);
801066c8:	83 ec 0c             	sub    $0xc,%esp
801066cb:	ff 75 f4             	pushl  -0xc(%ebp)
801066ce:	e8 fc bc ff ff       	call   801023cf <ilock>
801066d3:	83 c4 10             	add    $0x10,%esp

  // Cannot unlink "." or "..".
  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
801066d6:	83 ec 08             	sub    $0x8,%esp
801066d9:	68 b4 89 10 80       	push   $0x801089b4
801066de:	8d 45 d2             	lea    -0x2e(%ebp),%eax
801066e1:	50                   	push   %eax
801066e2:	e8 35 c5 ff ff       	call   80102c1c <namecmp>
801066e7:	83 c4 10             	add    $0x10,%esp
801066ea:	85 c0                	test   %eax,%eax
801066ec:	0f 84 40 01 00 00    	je     80106832 <sys_unlink+0x1ba>
801066f2:	83 ec 08             	sub    $0x8,%esp
801066f5:	68 b6 89 10 80       	push   $0x801089b6
801066fa:	8d 45 d2             	lea    -0x2e(%ebp),%eax
801066fd:	50                   	push   %eax
801066fe:	e8 19 c5 ff ff       	call   80102c1c <namecmp>
80106703:	83 c4 10             	add    $0x10,%esp
80106706:	85 c0                	test   %eax,%eax
80106708:	0f 84 24 01 00 00    	je     80106832 <sys_unlink+0x1ba>
    goto bad;

  if((ip = dirlookup(dp, name, &off)) == 0)
8010670e:	83 ec 04             	sub    $0x4,%esp
80106711:	8d 45 c8             	lea    -0x38(%ebp),%eax
80106714:	50                   	push   %eax
80106715:	8d 45 d2             	lea    -0x2e(%ebp),%eax
80106718:	50                   	push   %eax
80106719:	ff 75 f4             	pushl  -0xc(%ebp)
8010671c:	e8 16 c5 ff ff       	call   80102c37 <dirlookup>
80106721:	83 c4 10             	add    $0x10,%esp
80106724:	89 45 f0             	mov    %eax,-0x10(%ebp)
80106727:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010672b:	75 05                	jne    80106732 <sys_unlink+0xba>
    goto bad;
8010672d:	e9 00 01 00 00       	jmp    80106832 <sys_unlink+0x1ba>
  ilock(ip);
80106732:	83 ec 0c             	sub    $0xc,%esp
80106735:	ff 75 f0             	pushl  -0x10(%ebp)
80106738:	e8 92 bc ff ff       	call   801023cf <ilock>
8010673d:	83 c4 10             	add    $0x10,%esp

  if(ip->nlink < 1)
80106740:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106743:	66 8b 40 16          	mov    0x16(%eax),%ax
80106747:	66 85 c0             	test   %ax,%ax
8010674a:	7f 0d                	jg     80106759 <sys_unlink+0xe1>
    panic("unlink: nlink < 1");
8010674c:	83 ec 0c             	sub    $0xc,%esp
8010674f:	68 b9 89 10 80       	push   $0x801089b9
80106754:	e8 38 a9 ff ff       	call   80101091 <panic>
  if(ip->type == T_DIR && !isdirempty(ip)){
80106759:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010675c:	8b 40 10             	mov    0x10(%eax),%eax
8010675f:	66 83 f8 01          	cmp    $0x1,%ax
80106763:	75 25                	jne    8010678a <sys_unlink+0x112>
80106765:	83 ec 0c             	sub    $0xc,%esp
80106768:	ff 75 f0             	pushl  -0x10(%ebp)
8010676b:	e8 a6 fe ff ff       	call   80106616 <isdirempty>
80106770:	83 c4 10             	add    $0x10,%esp
80106773:	85 c0                	test   %eax,%eax
80106775:	75 13                	jne    8010678a <sys_unlink+0x112>
    iunlockput(ip);
80106777:	83 ec 0c             	sub    $0xc,%esp
8010677a:	ff 75 f0             	pushl  -0x10(%ebp)
8010677d:	e8 01 bf ff ff       	call   80102683 <iunlockput>
80106782:	83 c4 10             	add    $0x10,%esp
    goto bad;
80106785:	e9 a8 00 00 00       	jmp    80106832 <sys_unlink+0x1ba>
  }

  memset(&de, 0, sizeof(de));
8010678a:	83 ec 04             	sub    $0x4,%esp
8010678d:	6a 10                	push   $0x10
8010678f:	6a 00                	push   $0x0
80106791:	8d 45 e0             	lea    -0x20(%ebp),%eax
80106794:	50                   	push   %eax
80106795:	e8 c6 f5 ff ff       	call   80105d60 <memset>
8010679a:	83 c4 10             	add    $0x10,%esp
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
8010679d:	8b 45 c8             	mov    -0x38(%ebp),%eax
801067a0:	6a 10                	push   $0x10
801067a2:	50                   	push   %eax
801067a3:	8d 45 e0             	lea    -0x20(%ebp),%eax
801067a6:	50                   	push   %eax
801067a7:	ff 75 f4             	pushl  -0xc(%ebp)
801067aa:	e8 dc c2 ff ff       	call   80102a8b <writei>
801067af:	83 c4 10             	add    $0x10,%esp
801067b2:	83 f8 10             	cmp    $0x10,%eax
801067b5:	74 0d                	je     801067c4 <sys_unlink+0x14c>
    panic("unlink: writei");
801067b7:	83 ec 0c             	sub    $0xc,%esp
801067ba:	68 cb 89 10 80       	push   $0x801089cb
801067bf:	e8 cd a8 ff ff       	call   80101091 <panic>
  if(ip->type == T_DIR){
801067c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
801067c7:	8b 40 10             	mov    0x10(%eax),%eax
801067ca:	66 83 f8 01          	cmp    $0x1,%ax
801067ce:	75 1d                	jne    801067ed <sys_unlink+0x175>
    dp->nlink--;
801067d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067d3:	66 8b 40 16          	mov    0x16(%eax),%ax
801067d7:	48                   	dec    %eax
801067d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
801067db:	66 89 42 16          	mov    %ax,0x16(%edx)
    iupdate(dp);
801067df:	83 ec 0c             	sub    $0xc,%esp
801067e2:	ff 75 f4             	pushl  -0xc(%ebp)
801067e5:	e8 14 ba ff ff       	call   801021fe <iupdate>
801067ea:	83 c4 10             	add    $0x10,%esp
  }
  iunlockput(dp);
801067ed:	83 ec 0c             	sub    $0xc,%esp
801067f0:	ff 75 f4             	pushl  -0xc(%ebp)
801067f3:	e8 8b be ff ff       	call   80102683 <iunlockput>
801067f8:	83 c4 10             	add    $0x10,%esp

  ip->nlink--;
801067fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
801067fe:	66 8b 40 16          	mov    0x16(%eax),%ax
80106802:	48                   	dec    %eax
80106803:	8b 55 f0             	mov    -0x10(%ebp),%edx
80106806:	66 89 42 16          	mov    %ax,0x16(%edx)
  iupdate(ip);
8010680a:	83 ec 0c             	sub    $0xc,%esp
8010680d:	ff 75 f0             	pushl  -0x10(%ebp)
80106810:	e8 e9 b9 ff ff       	call   801021fe <iupdate>
80106815:	83 c4 10             	add    $0x10,%esp
  iunlockput(ip);
80106818:	83 ec 0c             	sub    $0xc,%esp
8010681b:	ff 75 f0             	pushl  -0x10(%ebp)
8010681e:	e8 60 be ff ff       	call   80102683 <iunlockput>
80106823:	83 c4 10             	add    $0x10,%esp

  commit_trans();
80106826:	e8 81 d5 ff ff       	call   80103dac <commit_trans>

  return 0;
8010682b:	b8 00 00 00 00       	mov    $0x0,%eax
80106830:	eb 18                	jmp    8010684a <sys_unlink+0x1d2>

bad:
  iunlockput(dp);
80106832:	83 ec 0c             	sub    $0xc,%esp
80106835:	ff 75 f4             	pushl  -0xc(%ebp)
80106838:	e8 46 be ff ff       	call   80102683 <iunlockput>
8010683d:	83 c4 10             	add    $0x10,%esp
  commit_trans();
80106840:	e8 67 d5 ff ff       	call   80103dac <commit_trans>
  return -1;
80106845:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010684a:	c9                   	leave  
8010684b:	c3                   	ret    

8010684c <create>:

static struct inode*
create(char *path, short type, short major, short minor)
{
8010684c:	55                   	push   %ebp
8010684d:	89 e5                	mov    %esp,%ebp
8010684f:	83 ec 38             	sub    $0x38,%esp
80106852:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80106855:	8b 55 10             	mov    0x10(%ebp),%edx
80106858:	8b 45 14             	mov    0x14(%ebp),%eax
8010685b:	66 89 4d d4          	mov    %cx,-0x2c(%ebp)
8010685f:	66 89 55 d0          	mov    %dx,-0x30(%ebp)
80106863:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
  uint off;
  struct inode *ip, *dp;
  char name[DIRSIZ];

  if((dp = nameiparent(path, name)) == 0)
80106867:	83 ec 08             	sub    $0x8,%esp
8010686a:	8d 45 de             	lea    -0x22(%ebp),%eax
8010686d:	50                   	push   %eax
8010686e:	ff 75 08             	pushl  0x8(%ebp)
80106871:	e8 21 c7 ff ff       	call   80102f97 <nameiparent>
80106876:	83 c4 10             	add    $0x10,%esp
80106879:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010687c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106880:	75 0a                	jne    8010688c <create+0x40>
    return 0;
80106882:	b8 00 00 00 00       	mov    $0x0,%eax
80106887:	e9 89 01 00 00       	jmp    80106a15 <create+0x1c9>
  ilock(dp);
8010688c:	83 ec 0c             	sub    $0xc,%esp
8010688f:	ff 75 f4             	pushl  -0xc(%ebp)
80106892:	e8 38 bb ff ff       	call   801023cf <ilock>
80106897:	83 c4 10             	add    $0x10,%esp

  if((ip = dirlookup(dp, name, &off)) != 0){
8010689a:	83 ec 04             	sub    $0x4,%esp
8010689d:	8d 45 ec             	lea    -0x14(%ebp),%eax
801068a0:	50                   	push   %eax
801068a1:	8d 45 de             	lea    -0x22(%ebp),%eax
801068a4:	50                   	push   %eax
801068a5:	ff 75 f4             	pushl  -0xc(%ebp)
801068a8:	e8 8a c3 ff ff       	call   80102c37 <dirlookup>
801068ad:	83 c4 10             	add    $0x10,%esp
801068b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
801068b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801068b7:	74 4f                	je     80106908 <create+0xbc>
    iunlockput(dp);
801068b9:	83 ec 0c             	sub    $0xc,%esp
801068bc:	ff 75 f4             	pushl  -0xc(%ebp)
801068bf:	e8 bf bd ff ff       	call   80102683 <iunlockput>
801068c4:	83 c4 10             	add    $0x10,%esp
    ilock(ip);
801068c7:	83 ec 0c             	sub    $0xc,%esp
801068ca:	ff 75 f0             	pushl  -0x10(%ebp)
801068cd:	e8 fd ba ff ff       	call   801023cf <ilock>
801068d2:	83 c4 10             	add    $0x10,%esp
    if(type == T_FILE && ip->type == T_FILE)
801068d5:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
801068da:	75 14                	jne    801068f0 <create+0xa4>
801068dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801068df:	8b 40 10             	mov    0x10(%eax),%eax
801068e2:	66 83 f8 02          	cmp    $0x2,%ax
801068e6:	75 08                	jne    801068f0 <create+0xa4>
      return ip;
801068e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
801068eb:	e9 25 01 00 00       	jmp    80106a15 <create+0x1c9>
    iunlockput(ip);
801068f0:	83 ec 0c             	sub    $0xc,%esp
801068f3:	ff 75 f0             	pushl  -0x10(%ebp)
801068f6:	e8 88 bd ff ff       	call   80102683 <iunlockput>
801068fb:	83 c4 10             	add    $0x10,%esp
    return 0;
801068fe:	b8 00 00 00 00       	mov    $0x0,%eax
80106903:	e9 0d 01 00 00       	jmp    80106a15 <create+0x1c9>
  }

  if((ip = ialloc(dp->dev, type)) == 0)
80106908:	0f bf 55 d4          	movswl -0x2c(%ebp),%edx
8010690c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010690f:	8b 00                	mov    (%eax),%eax
80106911:	83 ec 08             	sub    $0x8,%esp
80106914:	52                   	push   %edx
80106915:	50                   	push   %eax
80106916:	e8 05 b8 ff ff       	call   80102120 <ialloc>
8010691b:	83 c4 10             	add    $0x10,%esp
8010691e:	89 45 f0             	mov    %eax,-0x10(%ebp)
80106921:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106925:	75 0d                	jne    80106934 <create+0xe8>
    panic("create: ialloc");
80106927:	83 ec 0c             	sub    $0xc,%esp
8010692a:	68 da 89 10 80       	push   $0x801089da
8010692f:	e8 5d a7 ff ff       	call   80101091 <panic>

  ilock(ip);
80106934:	83 ec 0c             	sub    $0xc,%esp
80106937:	ff 75 f0             	pushl  -0x10(%ebp)
8010693a:	e8 90 ba ff ff       	call   801023cf <ilock>
8010693f:	83 c4 10             	add    $0x10,%esp
  ip->major = major;
80106942:	8b 55 f0             	mov    -0x10(%ebp),%edx
80106945:	8b 45 d0             	mov    -0x30(%ebp),%eax
80106948:	66 89 42 12          	mov    %ax,0x12(%edx)
  ip->minor = minor;
8010694c:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010694f:	8b 45 cc             	mov    -0x34(%ebp),%eax
80106952:	66 89 42 14          	mov    %ax,0x14(%edx)
  ip->nlink = 1;
80106956:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106959:	66 c7 40 16 01 00    	movw   $0x1,0x16(%eax)
  iupdate(ip);
8010695f:	83 ec 0c             	sub    $0xc,%esp
80106962:	ff 75 f0             	pushl  -0x10(%ebp)
80106965:	e8 94 b8 ff ff       	call   801021fe <iupdate>
8010696a:	83 c4 10             	add    $0x10,%esp

  if(type == T_DIR){  // Create . and .. entries.
8010696d:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
80106972:	75 66                	jne    801069da <create+0x18e>
    dp->nlink++;  // for ".."
80106974:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106977:	66 8b 40 16          	mov    0x16(%eax),%ax
8010697b:	40                   	inc    %eax
8010697c:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010697f:	66 89 42 16          	mov    %ax,0x16(%edx)
    iupdate(dp);
80106983:	83 ec 0c             	sub    $0xc,%esp
80106986:	ff 75 f4             	pushl  -0xc(%ebp)
80106989:	e8 70 b8 ff ff       	call   801021fe <iupdate>
8010698e:	83 c4 10             	add    $0x10,%esp
    // No ip->nlink++ for ".": avoid cyclic ref count.
    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
80106991:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106994:	8b 40 04             	mov    0x4(%eax),%eax
80106997:	83 ec 04             	sub    $0x4,%esp
8010699a:	50                   	push   %eax
8010699b:	68 b4 89 10 80       	push   $0x801089b4
801069a0:	ff 75 f0             	pushl  -0x10(%ebp)
801069a3:	e8 47 c3 ff ff       	call   80102cef <dirlink>
801069a8:	83 c4 10             	add    $0x10,%esp
801069ab:	85 c0                	test   %eax,%eax
801069ad:	78 1e                	js     801069cd <create+0x181>
801069af:	8b 45 f4             	mov    -0xc(%ebp),%eax
801069b2:	8b 40 04             	mov    0x4(%eax),%eax
801069b5:	83 ec 04             	sub    $0x4,%esp
801069b8:	50                   	push   %eax
801069b9:	68 b6 89 10 80       	push   $0x801089b6
801069be:	ff 75 f0             	pushl  -0x10(%ebp)
801069c1:	e8 29 c3 ff ff       	call   80102cef <dirlink>
801069c6:	83 c4 10             	add    $0x10,%esp
801069c9:	85 c0                	test   %eax,%eax
801069cb:	79 0d                	jns    801069da <create+0x18e>
      panic("create dots");
801069cd:	83 ec 0c             	sub    $0xc,%esp
801069d0:	68 e9 89 10 80       	push   $0x801089e9
801069d5:	e8 b7 a6 ff ff       	call   80101091 <panic>
  }

  if(dirlink(dp, name, ip->inum) < 0)
801069da:	8b 45 f0             	mov    -0x10(%ebp),%eax
801069dd:	8b 40 04             	mov    0x4(%eax),%eax
801069e0:	83 ec 04             	sub    $0x4,%esp
801069e3:	50                   	push   %eax
801069e4:	8d 45 de             	lea    -0x22(%ebp),%eax
801069e7:	50                   	push   %eax
801069e8:	ff 75 f4             	pushl  -0xc(%ebp)
801069eb:	e8 ff c2 ff ff       	call   80102cef <dirlink>
801069f0:	83 c4 10             	add    $0x10,%esp
801069f3:	85 c0                	test   %eax,%eax
801069f5:	79 0d                	jns    80106a04 <create+0x1b8>
    panic("create: dirlink");
801069f7:	83 ec 0c             	sub    $0xc,%esp
801069fa:	68 f5 89 10 80       	push   $0x801089f5
801069ff:	e8 8d a6 ff ff       	call   80101091 <panic>

  iunlockput(dp);
80106a04:	83 ec 0c             	sub    $0xc,%esp
80106a07:	ff 75 f4             	pushl  -0xc(%ebp)
80106a0a:	e8 74 bc ff ff       	call   80102683 <iunlockput>
80106a0f:	83 c4 10             	add    $0x10,%esp

  return ip;
80106a12:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80106a15:	c9                   	leave  
80106a16:	c3                   	ret    

80106a17 <sys_open>:

int
sys_open(void)
{
80106a17:	55                   	push   %ebp
80106a18:	89 e5                	mov    %esp,%ebp
80106a1a:	83 ec 28             	sub    $0x28,%esp
  char *path;
  int fd, omode;
  struct file *f;
  struct inode *ip;

  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
80106a1d:	83 ec 08             	sub    $0x8,%esp
80106a20:	8d 45 e8             	lea    -0x18(%ebp),%eax
80106a23:	50                   	push   %eax
80106a24:	6a 00                	push   $0x0
80106a26:	e8 11 f7 ff ff       	call   8010613c <argstr>
80106a2b:	83 c4 10             	add    $0x10,%esp
80106a2e:	85 c0                	test   %eax,%eax
80106a30:	78 15                	js     80106a47 <sys_open+0x30>
80106a32:	83 ec 08             	sub    $0x8,%esp
80106a35:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80106a38:	50                   	push   %eax
80106a39:	6a 01                	push   $0x1
80106a3b:	e8 51 f6 ff ff       	call   80106091 <argint>
80106a40:	83 c4 10             	add    $0x10,%esp
80106a43:	85 c0                	test   %eax,%eax
80106a45:	79 0a                	jns    80106a51 <sys_open+0x3a>
    return -1;
80106a47:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106a4c:	e9 4c 01 00 00       	jmp    80106b9d <sys_open+0x186>
  if(omode & O_CREATE){
80106a51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106a54:	25 00 02 00 00       	and    $0x200,%eax
80106a59:	85 c0                	test   %eax,%eax
80106a5b:	74 2f                	je     80106a8c <sys_open+0x75>
    begin_trans();
80106a5d:	e8 f8 d2 ff ff       	call   80103d5a <begin_trans>
    ip = create(path, T_FILE, 0, 0);
80106a62:	8b 45 e8             	mov    -0x18(%ebp),%eax
80106a65:	6a 00                	push   $0x0
80106a67:	6a 00                	push   $0x0
80106a69:	6a 02                	push   $0x2
80106a6b:	50                   	push   %eax
80106a6c:	e8 db fd ff ff       	call   8010684c <create>
80106a71:	83 c4 10             	add    $0x10,%esp
80106a74:	89 45 f4             	mov    %eax,-0xc(%ebp)
    commit_trans();
80106a77:	e8 30 d3 ff ff       	call   80103dac <commit_trans>
    if(ip == 0)
80106a7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106a80:	75 65                	jne    80106ae7 <sys_open+0xd0>
      return -1;
80106a82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106a87:	e9 11 01 00 00       	jmp    80106b9d <sys_open+0x186>
  } else {
    if((ip = namei(path)) == 0)
80106a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
80106a8f:	83 ec 0c             	sub    $0xc,%esp
80106a92:	50                   	push   %eax
80106a93:	e8 e3 c4 ff ff       	call   80102f7b <namei>
80106a98:	83 c4 10             	add    $0x10,%esp
80106a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106a9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106aa2:	75 0a                	jne    80106aae <sys_open+0x97>
      return -1;
80106aa4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106aa9:	e9 ef 00 00 00       	jmp    80106b9d <sys_open+0x186>
    ilock(ip);
80106aae:	83 ec 0c             	sub    $0xc,%esp
80106ab1:	ff 75 f4             	pushl  -0xc(%ebp)
80106ab4:	e8 16 b9 ff ff       	call   801023cf <ilock>
80106ab9:	83 c4 10             	add    $0x10,%esp
    if(ip->type == T_DIR && omode != O_RDONLY){
80106abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106abf:	8b 40 10             	mov    0x10(%eax),%eax
80106ac2:	66 83 f8 01          	cmp    $0x1,%ax
80106ac6:	75 1f                	jne    80106ae7 <sys_open+0xd0>
80106ac8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106acb:	85 c0                	test   %eax,%eax
80106acd:	74 18                	je     80106ae7 <sys_open+0xd0>
      iunlockput(ip);
80106acf:	83 ec 0c             	sub    $0xc,%esp
80106ad2:	ff 75 f4             	pushl  -0xc(%ebp)
80106ad5:	e8 a9 bb ff ff       	call   80102683 <iunlockput>
80106ada:	83 c4 10             	add    $0x10,%esp
      return -1;
80106add:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106ae2:	e9 b6 00 00 00       	jmp    80106b9d <sys_open+0x186>
    }
  }

  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
80106ae7:	e8 6f af ff ff       	call   80101a5b <filealloc>
80106aec:	89 45 f0             	mov    %eax,-0x10(%ebp)
80106aef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106af3:	74 17                	je     80106b0c <sys_open+0xf5>
80106af5:	83 ec 0c             	sub    $0xc,%esp
80106af8:	ff 75 f0             	pushl  -0x10(%ebp)
80106afb:	e8 67 f7 ff ff       	call   80106267 <fdalloc>
80106b00:	83 c4 10             	add    $0x10,%esp
80106b03:	89 45 ec             	mov    %eax,-0x14(%ebp)
80106b06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80106b0a:	79 29                	jns    80106b35 <sys_open+0x11e>
    if(f)
80106b0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106b10:	74 0e                	je     80106b20 <sys_open+0x109>
      fileclose(f);
80106b12:	83 ec 0c             	sub    $0xc,%esp
80106b15:	ff 75 f0             	pushl  -0x10(%ebp)
80106b18:	e8 fb af ff ff       	call   80101b18 <fileclose>
80106b1d:	83 c4 10             	add    $0x10,%esp
    iunlockput(ip);
80106b20:	83 ec 0c             	sub    $0xc,%esp
80106b23:	ff 75 f4             	pushl  -0xc(%ebp)
80106b26:	e8 58 bb ff ff       	call   80102683 <iunlockput>
80106b2b:	83 c4 10             	add    $0x10,%esp
    return -1;
80106b2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106b33:	eb 68                	jmp    80106b9d <sys_open+0x186>
  }
  iunlock(ip);
80106b35:	83 ec 0c             	sub    $0xc,%esp
80106b38:	ff 75 f4             	pushl  -0xc(%ebp)
80106b3b:	e8 e3 b9 ff ff       	call   80102523 <iunlock>
80106b40:	83 c4 10             	add    $0x10,%esp

  f->type = FD_INODE;
80106b43:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106b46:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  f->ip = ip;
80106b4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106b4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106b52:	89 50 10             	mov    %edx,0x10(%eax)
  f->off = 0;
80106b55:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106b58:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
  f->readable = !(omode & O_WRONLY);
80106b5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106b62:	83 e0 01             	and    $0x1,%eax
80106b65:	85 c0                	test   %eax,%eax
80106b67:	0f 94 c0             	sete   %al
80106b6a:	88 c2                	mov    %al,%dl
80106b6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106b6f:	88 50 08             	mov    %dl,0x8(%eax)
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
80106b72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106b75:	83 e0 01             	and    $0x1,%eax
80106b78:	85 c0                	test   %eax,%eax
80106b7a:	75 0a                	jne    80106b86 <sys_open+0x16f>
80106b7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106b7f:	83 e0 02             	and    $0x2,%eax
80106b82:	85 c0                	test   %eax,%eax
80106b84:	74 07                	je     80106b8d <sys_open+0x176>
80106b86:	b8 01 00 00 00       	mov    $0x1,%eax
80106b8b:	eb 05                	jmp    80106b92 <sys_open+0x17b>
80106b8d:	b8 00 00 00 00       	mov    $0x0,%eax
80106b92:	88 c2                	mov    %al,%dl
80106b94:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106b97:	88 50 09             	mov    %dl,0x9(%eax)
  return fd;
80106b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
80106b9d:	c9                   	leave  
80106b9e:	c3                   	ret    

80106b9f <sys_mkdir>:

int
sys_mkdir(void)
{
80106b9f:	55                   	push   %ebp
80106ba0:	89 e5                	mov    %esp,%ebp
80106ba2:	83 ec 18             	sub    $0x18,%esp
  char *path;
  struct inode *ip;

  begin_trans();
80106ba5:	e8 b0 d1 ff ff       	call   80103d5a <begin_trans>
  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
80106baa:	83 ec 08             	sub    $0x8,%esp
80106bad:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106bb0:	50                   	push   %eax
80106bb1:	6a 00                	push   $0x0
80106bb3:	e8 84 f5 ff ff       	call   8010613c <argstr>
80106bb8:	83 c4 10             	add    $0x10,%esp
80106bbb:	85 c0                	test   %eax,%eax
80106bbd:	78 1b                	js     80106bda <sys_mkdir+0x3b>
80106bbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106bc2:	6a 00                	push   $0x0
80106bc4:	6a 00                	push   $0x0
80106bc6:	6a 01                	push   $0x1
80106bc8:	50                   	push   %eax
80106bc9:	e8 7e fc ff ff       	call   8010684c <create>
80106bce:	83 c4 10             	add    $0x10,%esp
80106bd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106bd4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106bd8:	75 0c                	jne    80106be6 <sys_mkdir+0x47>
    commit_trans();
80106bda:	e8 cd d1 ff ff       	call   80103dac <commit_trans>
    return -1;
80106bdf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106be4:	eb 18                	jmp    80106bfe <sys_mkdir+0x5f>
  }
  iunlockput(ip);
80106be6:	83 ec 0c             	sub    $0xc,%esp
80106be9:	ff 75 f4             	pushl  -0xc(%ebp)
80106bec:	e8 92 ba ff ff       	call   80102683 <iunlockput>
80106bf1:	83 c4 10             	add    $0x10,%esp
  commit_trans();
80106bf4:	e8 b3 d1 ff ff       	call   80103dac <commit_trans>
  return 0;
80106bf9:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106bfe:	c9                   	leave  
80106bff:	c3                   	ret    

80106c00 <sys_mknod>:

int
sys_mknod(void)
{
80106c00:	55                   	push   %ebp
80106c01:	89 e5                	mov    %esp,%ebp
80106c03:	83 ec 28             	sub    $0x28,%esp
  struct inode *ip;
  char *path;
  int len;
  int major, minor;
  
  begin_trans();
80106c06:	e8 4f d1 ff ff       	call   80103d5a <begin_trans>
  if((len=argstr(0, &path)) < 0 ||
80106c0b:	83 ec 08             	sub    $0x8,%esp
80106c0e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80106c11:	50                   	push   %eax
80106c12:	6a 00                	push   $0x0
80106c14:	e8 23 f5 ff ff       	call   8010613c <argstr>
80106c19:	83 c4 10             	add    $0x10,%esp
80106c1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106c1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106c23:	78 4f                	js     80106c74 <sys_mknod+0x74>
     argint(1, &major) < 0 ||
80106c25:	83 ec 08             	sub    $0x8,%esp
80106c28:	8d 45 e8             	lea    -0x18(%ebp),%eax
80106c2b:	50                   	push   %eax
80106c2c:	6a 01                	push   $0x1
80106c2e:	e8 5e f4 ff ff       	call   80106091 <argint>
80106c33:	83 c4 10             	add    $0x10,%esp
  char *path;
  int len;
  int major, minor;
  
  begin_trans();
  if((len=argstr(0, &path)) < 0 ||
80106c36:	85 c0                	test   %eax,%eax
80106c38:	78 3a                	js     80106c74 <sys_mknod+0x74>
     argint(1, &major) < 0 ||
     argint(2, &minor) < 0 ||
80106c3a:	83 ec 08             	sub    $0x8,%esp
80106c3d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80106c40:	50                   	push   %eax
80106c41:	6a 02                	push   $0x2
80106c43:	e8 49 f4 ff ff       	call   80106091 <argint>
80106c48:	83 c4 10             	add    $0x10,%esp
  int len;
  int major, minor;
  
  begin_trans();
  if((len=argstr(0, &path)) < 0 ||
     argint(1, &major) < 0 ||
80106c4b:	85 c0                	test   %eax,%eax
80106c4d:	78 25                	js     80106c74 <sys_mknod+0x74>
     argint(2, &minor) < 0 ||
     (ip = create(path, T_DEV, major, minor)) == 0){
80106c4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106c52:	0f bf c8             	movswl %ax,%ecx
80106c55:	8b 45 e8             	mov    -0x18(%ebp),%eax
80106c58:	0f bf d0             	movswl %ax,%edx
80106c5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  int major, minor;
  
  begin_trans();
  if((len=argstr(0, &path)) < 0 ||
     argint(1, &major) < 0 ||
     argint(2, &minor) < 0 ||
80106c5e:	51                   	push   %ecx
80106c5f:	52                   	push   %edx
80106c60:	6a 03                	push   $0x3
80106c62:	50                   	push   %eax
80106c63:	e8 e4 fb ff ff       	call   8010684c <create>
80106c68:	83 c4 10             	add    $0x10,%esp
80106c6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
80106c6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106c72:	75 0c                	jne    80106c80 <sys_mknod+0x80>
     (ip = create(path, T_DEV, major, minor)) == 0){
    commit_trans();
80106c74:	e8 33 d1 ff ff       	call   80103dac <commit_trans>
    return -1;
80106c79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106c7e:	eb 18                	jmp    80106c98 <sys_mknod+0x98>
  }
  iunlockput(ip);
80106c80:	83 ec 0c             	sub    $0xc,%esp
80106c83:	ff 75 f0             	pushl  -0x10(%ebp)
80106c86:	e8 f8 b9 ff ff       	call   80102683 <iunlockput>
80106c8b:	83 c4 10             	add    $0x10,%esp
  commit_trans();
80106c8e:	e8 19 d1 ff ff       	call   80103dac <commit_trans>
  return 0;
80106c93:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106c98:	c9                   	leave  
80106c99:	c3                   	ret    

80106c9a <sys_chdir>:

int
sys_chdir(void)
{
80106c9a:	55                   	push   %ebp
80106c9b:	89 e5                	mov    %esp,%ebp
80106c9d:	83 ec 18             	sub    $0x18,%esp
  char *path;
  struct inode *ip;

  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0)
80106ca0:	83 ec 08             	sub    $0x8,%esp
80106ca3:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106ca6:	50                   	push   %eax
80106ca7:	6a 00                	push   $0x0
80106ca9:	e8 8e f4 ff ff       	call   8010613c <argstr>
80106cae:	83 c4 10             	add    $0x10,%esp
80106cb1:	85 c0                	test   %eax,%eax
80106cb3:	78 18                	js     80106ccd <sys_chdir+0x33>
80106cb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106cb8:	83 ec 0c             	sub    $0xc,%esp
80106cbb:	50                   	push   %eax
80106cbc:	e8 ba c2 ff ff       	call   80102f7b <namei>
80106cc1:	83 c4 10             	add    $0x10,%esp
80106cc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106cc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106ccb:	75 07                	jne    80106cd4 <sys_chdir+0x3a>
    return -1;
80106ccd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106cd2:	eb 63                	jmp    80106d37 <sys_chdir+0x9d>
  ilock(ip);
80106cd4:	83 ec 0c             	sub    $0xc,%esp
80106cd7:	ff 75 f4             	pushl  -0xc(%ebp)
80106cda:	e8 f0 b6 ff ff       	call   801023cf <ilock>
80106cdf:	83 c4 10             	add    $0x10,%esp
  if(ip->type != T_DIR){
80106ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106ce5:	8b 40 10             	mov    0x10(%eax),%eax
80106ce8:	66 83 f8 01          	cmp    $0x1,%ax
80106cec:	74 15                	je     80106d03 <sys_chdir+0x69>
    iunlockput(ip);
80106cee:	83 ec 0c             	sub    $0xc,%esp
80106cf1:	ff 75 f4             	pushl  -0xc(%ebp)
80106cf4:	e8 8a b9 ff ff       	call   80102683 <iunlockput>
80106cf9:	83 c4 10             	add    $0x10,%esp
    return -1;
80106cfc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106d01:	eb 34                	jmp    80106d37 <sys_chdir+0x9d>
  }
  iunlock(ip);
80106d03:	83 ec 0c             	sub    $0xc,%esp
80106d06:	ff 75 f4             	pushl  -0xc(%ebp)
80106d09:	e8 15 b8 ff ff       	call   80102523 <iunlock>
80106d0e:	83 c4 10             	add    $0x10,%esp
  iput(proc->cwd);
80106d11:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106d17:	8b 40 68             	mov    0x68(%eax),%eax
80106d1a:	83 ec 0c             	sub    $0xc,%esp
80106d1d:	50                   	push   %eax
80106d1e:	e8 71 b8 ff ff       	call   80102594 <iput>
80106d23:	83 c4 10             	add    $0x10,%esp
  proc->cwd = ip;
80106d26:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106d2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106d2f:	89 50 68             	mov    %edx,0x68(%eax)
  return 0;
80106d32:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106d37:	c9                   	leave  
80106d38:	c3                   	ret    

80106d39 <sys_exec>:

int
sys_exec(void)
{
80106d39:	55                   	push   %ebp
80106d3a:	89 e5                	mov    %esp,%ebp
80106d3c:	81 ec 98 00 00 00    	sub    $0x98,%esp
  char *path, *argv[MAXARG];
  int i;
  uintp uargv, uarg;

  if(argstr(0, &path) < 0 || arguintp(1, &uargv) < 0){
80106d42:	83 ec 08             	sub    $0x8,%esp
80106d45:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106d48:	50                   	push   %eax
80106d49:	6a 00                	push   $0x0
80106d4b:	e8 ec f3 ff ff       	call   8010613c <argstr>
80106d50:	83 c4 10             	add    $0x10,%esp
80106d53:	85 c0                	test   %eax,%eax
80106d55:	78 18                	js     80106d6f <sys_exec+0x36>
80106d57:	83 ec 08             	sub    $0x8,%esp
80106d5a:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
80106d60:	50                   	push   %eax
80106d61:	6a 01                	push   $0x1
80106d63:	e8 51 f3 ff ff       	call   801060b9 <arguintp>
80106d68:	83 c4 10             	add    $0x10,%esp
80106d6b:	85 c0                	test   %eax,%eax
80106d6d:	79 0a                	jns    80106d79 <sys_exec+0x40>
    return -1;
80106d6f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106d74:	e9 c7 00 00 00       	jmp    80106e40 <sys_exec+0x107>
  }
  memset(argv, 0, sizeof(argv));
80106d79:	83 ec 04             	sub    $0x4,%esp
80106d7c:	68 80 00 00 00       	push   $0x80
80106d81:	6a 00                	push   $0x0
80106d83:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
80106d89:	50                   	push   %eax
80106d8a:	e8 d1 ef ff ff       	call   80105d60 <memset>
80106d8f:	83 c4 10             	add    $0x10,%esp
  for(i=0;; i++){
80106d92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if(i >= NELEM(argv))
80106d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106d9c:	83 f8 1f             	cmp    $0x1f,%eax
80106d9f:	76 0a                	jbe    80106dab <sys_exec+0x72>
      return -1;
80106da1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106da6:	e9 95 00 00 00       	jmp    80106e40 <sys_exec+0x107>
    if(fetchuintp(uargv+sizeof(uintp)*i, &uarg) < 0)
80106dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106dae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80106db5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
80106dbb:	01 c2                	add    %eax,%edx
80106dbd:	83 ec 08             	sub    $0x8,%esp
80106dc0:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
80106dc6:	50                   	push   %eax
80106dc7:	52                   	push   %edx
80106dc8:	e8 2a f2 ff ff       	call   80105ff7 <fetchuintp>
80106dcd:	83 c4 10             	add    $0x10,%esp
80106dd0:	85 c0                	test   %eax,%eax
80106dd2:	79 07                	jns    80106ddb <sys_exec+0xa2>
      return -1;
80106dd4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106dd9:	eb 65                	jmp    80106e40 <sys_exec+0x107>
    if(uarg == 0){
80106ddb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
80106de1:	85 c0                	test   %eax,%eax
80106de3:	75 27                	jne    80106e0c <sys_exec+0xd3>
      argv[i] = 0;
80106de5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106de8:	c7 84 85 70 ff ff ff 	movl   $0x0,-0x90(%ebp,%eax,4)
80106def:	00 00 00 00 
      break;
80106df3:	90                   	nop
    }
    if(fetchstr(uarg, &argv[i]) < 0)
      return -1;
  }
  return exec(path, argv);
80106df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106df7:	83 ec 08             	sub    $0x8,%esp
80106dfa:	8d 95 70 ff ff ff    	lea    -0x90(%ebp),%edx
80106e00:	52                   	push   %edx
80106e01:	50                   	push   %eax
80106e02:	e8 6a a8 ff ff       	call   80101671 <exec>
80106e07:	83 c4 10             	add    $0x10,%esp
80106e0a:	eb 34                	jmp    80106e40 <sys_exec+0x107>
      return -1;
    if(uarg == 0){
      argv[i] = 0;
      break;
    }
    if(fetchstr(uarg, &argv[i]) < 0)
80106e0c:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
80106e12:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106e15:	c1 e2 02             	shl    $0x2,%edx
80106e18:	01 c2                	add    %eax,%edx
80106e1a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
80106e20:	83 ec 08             	sub    $0x8,%esp
80106e23:	52                   	push   %edx
80106e24:	50                   	push   %eax
80106e25:	e8 07 f2 ff ff       	call   80106031 <fetchstr>
80106e2a:	83 c4 10             	add    $0x10,%esp
80106e2d:	85 c0                	test   %eax,%eax
80106e2f:	79 07                	jns    80106e38 <sys_exec+0xff>
      return -1;
80106e31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106e36:	eb 08                	jmp    80106e40 <sys_exec+0x107>

  if(argstr(0, &path) < 0 || arguintp(1, &uargv) < 0){
    return -1;
  }
  memset(argv, 0, sizeof(argv));
  for(i=0;; i++){
80106e38:	ff 45 f4             	incl   -0xc(%ebp)
      argv[i] = 0;
      break;
    }
    if(fetchstr(uarg, &argv[i]) < 0)
      return -1;
  }
80106e3b:	e9 59 ff ff ff       	jmp    80106d99 <sys_exec+0x60>
  return exec(path, argv);
}
80106e40:	c9                   	leave  
80106e41:	c3                   	ret    

80106e42 <sys_pipe>:

int
sys_pipe(void)
{
80106e42:	55                   	push   %ebp
80106e43:	89 e5                	mov    %esp,%ebp
80106e45:	83 ec 28             	sub    $0x28,%esp
  int *fd;
  struct file *rf, *wf;
  int fd0, fd1;

  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
80106e48:	83 ec 04             	sub    $0x4,%esp
80106e4b:	6a 08                	push   $0x8
80106e4d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80106e50:	50                   	push   %eax
80106e51:	6a 00                	push   $0x0
80106e53:	e8 89 f2 ff ff       	call   801060e1 <argptr>
80106e58:	83 c4 10             	add    $0x10,%esp
80106e5b:	85 c0                	test   %eax,%eax
80106e5d:	79 0a                	jns    80106e69 <sys_pipe+0x27>
    return -1;
80106e5f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106e64:	e9 af 00 00 00       	jmp    80106f18 <sys_pipe+0xd6>
  if(pipealloc(&rf, &wf) < 0)
80106e69:	83 ec 08             	sub    $0x8,%esp
80106e6c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80106e6f:	50                   	push   %eax
80106e70:	8d 45 e8             	lea    -0x18(%ebp),%eax
80106e73:	50                   	push   %eax
80106e74:	e8 a1 dc ff ff       	call   80104b1a <pipealloc>
80106e79:	83 c4 10             	add    $0x10,%esp
80106e7c:	85 c0                	test   %eax,%eax
80106e7e:	79 0a                	jns    80106e8a <sys_pipe+0x48>
    return -1;
80106e80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106e85:	e9 8e 00 00 00       	jmp    80106f18 <sys_pipe+0xd6>
  fd0 = -1;
80106e8a:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
80106e91:	8b 45 e8             	mov    -0x18(%ebp),%eax
80106e94:	83 ec 0c             	sub    $0xc,%esp
80106e97:	50                   	push   %eax
80106e98:	e8 ca f3 ff ff       	call   80106267 <fdalloc>
80106e9d:	83 c4 10             	add    $0x10,%esp
80106ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106ea3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106ea7:	78 18                	js     80106ec1 <sys_pipe+0x7f>
80106ea9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106eac:	83 ec 0c             	sub    $0xc,%esp
80106eaf:	50                   	push   %eax
80106eb0:	e8 b2 f3 ff ff       	call   80106267 <fdalloc>
80106eb5:	83 c4 10             	add    $0x10,%esp
80106eb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
80106ebb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106ebf:	79 3f                	jns    80106f00 <sys_pipe+0xbe>
    if(fd0 >= 0)
80106ec1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106ec5:	78 14                	js     80106edb <sys_pipe+0x99>
      proc->ofile[fd0] = 0;
80106ec7:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106ecd:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106ed0:	83 c2 08             	add    $0x8,%edx
80106ed3:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
80106eda:	00 
    fileclose(rf);
80106edb:	8b 45 e8             	mov    -0x18(%ebp),%eax
80106ede:	83 ec 0c             	sub    $0xc,%esp
80106ee1:	50                   	push   %eax
80106ee2:	e8 31 ac ff ff       	call   80101b18 <fileclose>
80106ee7:	83 c4 10             	add    $0x10,%esp
    fileclose(wf);
80106eea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80106eed:	83 ec 0c             	sub    $0xc,%esp
80106ef0:	50                   	push   %eax
80106ef1:	e8 22 ac ff ff       	call   80101b18 <fileclose>
80106ef6:	83 c4 10             	add    $0x10,%esp
    return -1;
80106ef9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106efe:	eb 18                	jmp    80106f18 <sys_pipe+0xd6>
  }
  fd[0] = fd0;
80106f00:	8b 45 ec             	mov    -0x14(%ebp),%eax
80106f03:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106f06:	89 10                	mov    %edx,(%eax)
  fd[1] = fd1;
80106f08:	8b 45 ec             	mov    -0x14(%ebp),%eax
80106f0b:	8d 50 04             	lea    0x4(%eax),%edx
80106f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106f11:	89 02                	mov    %eax,(%edx)
  return 0;
80106f13:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106f18:	c9                   	leave  
80106f19:	c3                   	ret    

80106f1a <sys_fork>:
#include "mmu.h"
#include "proc.h"

int
sys_fork(void)
{
80106f1a:	55                   	push   %ebp
80106f1b:	89 e5                	mov    %esp,%ebp
80106f1d:	83 ec 08             	sub    $0x8,%esp
  return fork();
80106f20:	e8 eb e2 ff ff       	call   80105210 <fork>
}
80106f25:	c9                   	leave  
80106f26:	c3                   	ret    

80106f27 <sys_exit>:

int
sys_exit(void)
{
80106f27:	55                   	push   %ebp
80106f28:	89 e5                	mov    %esp,%ebp
80106f2a:	83 ec 08             	sub    $0x8,%esp
  exit();
80106f2d:	e8 4e e4 ff ff       	call   80105380 <exit>
  return 0;  // not reached
80106f32:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106f37:	c9                   	leave  
80106f38:	c3                   	ret    

80106f39 <sys_wait>:

int
sys_wait(void)
{
80106f39:	55                   	push   %ebp
80106f3a:	89 e5                	mov    %esp,%ebp
80106f3c:	83 ec 08             	sub    $0x8,%esp
  return wait();
80106f3f:	e8 69 e5 ff ff       	call   801054ad <wait>
}
80106f44:	c9                   	leave  
80106f45:	c3                   	ret    

80106f46 <sys_kill>:

int
sys_kill(void)
{
80106f46:	55                   	push   %ebp
80106f47:	89 e5                	mov    %esp,%ebp
80106f49:	83 ec 18             	sub    $0x18,%esp
  int pid;

  if(argint(0, &pid) < 0)
80106f4c:	83 ec 08             	sub    $0x8,%esp
80106f4f:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106f52:	50                   	push   %eax
80106f53:	6a 00                	push   $0x0
80106f55:	e8 37 f1 ff ff       	call   80106091 <argint>
80106f5a:	83 c4 10             	add    $0x10,%esp
80106f5d:	85 c0                	test   %eax,%eax
80106f5f:	79 07                	jns    80106f68 <sys_kill+0x22>
    return -1;
80106f61:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106f66:	eb 0f                	jmp    80106f77 <sys_kill+0x31>
  return kill(pid);
80106f68:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106f6b:	83 ec 0c             	sub    $0xc,%esp
80106f6e:	50                   	push   %eax
80106f6f:	e8 5a e9 ff ff       	call   801058ce <kill>
80106f74:	83 c4 10             	add    $0x10,%esp
}
80106f77:	c9                   	leave  
80106f78:	c3                   	ret    

80106f79 <sys_getpid>:

int
sys_getpid(void)
{
80106f79:	55                   	push   %ebp
80106f7a:	89 e5                	mov    %esp,%ebp
  return proc->pid;
80106f7c:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106f82:	8b 40 10             	mov    0x10(%eax),%eax
}
80106f85:	5d                   	pop    %ebp
80106f86:	c3                   	ret    

80106f87 <sys_sbrk>:

uintp
sys_sbrk(void)
{
80106f87:	55                   	push   %ebp
80106f88:	89 e5                	mov    %esp,%ebp
80106f8a:	83 ec 18             	sub    $0x18,%esp
  uintp addr;
  uintp n;

  if(arguintp(0, &n) < 0)
80106f8d:	83 ec 08             	sub    $0x8,%esp
80106f90:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106f93:	50                   	push   %eax
80106f94:	6a 00                	push   $0x0
80106f96:	e8 1e f1 ff ff       	call   801060b9 <arguintp>
80106f9b:	83 c4 10             	add    $0x10,%esp
80106f9e:	85 c0                	test   %eax,%eax
80106fa0:	79 07                	jns    80106fa9 <sys_sbrk+0x22>
    return -1;
80106fa2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106fa7:	eb 28                	jmp    80106fd1 <sys_sbrk+0x4a>
  addr = proc->sz;
80106fa9:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80106faf:	8b 00                	mov    (%eax),%eax
80106fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(growproc(n) < 0)
80106fb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106fb7:	83 ec 0c             	sub    $0xc,%esp
80106fba:	50                   	push   %eax
80106fbb:	e8 ad e1 ff ff       	call   8010516d <growproc>
80106fc0:	83 c4 10             	add    $0x10,%esp
80106fc3:	85 c0                	test   %eax,%eax
80106fc5:	79 07                	jns    80106fce <sys_sbrk+0x47>
    return -1;
80106fc7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106fcc:	eb 03                	jmp    80106fd1 <sys_sbrk+0x4a>
  return addr;
80106fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80106fd1:	c9                   	leave  
80106fd2:	c3                   	ret    

80106fd3 <sys_sleep>:

int
sys_sleep(void)
{
80106fd3:	55                   	push   %ebp
80106fd4:	89 e5                	mov    %esp,%ebp
80106fd6:	83 ec 18             	sub    $0x18,%esp
  int n;
  uint ticks0;
  
  if(argint(0, &n) < 0)
80106fd9:	83 ec 08             	sub    $0x8,%esp
80106fdc:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106fdf:	50                   	push   %eax
80106fe0:	6a 00                	push   $0x0
80106fe2:	e8 aa f0 ff ff       	call   80106091 <argint>
80106fe7:	83 c4 10             	add    $0x10,%esp
80106fea:	85 c0                	test   %eax,%eax
80106fec:	79 07                	jns    80106ff5 <sys_sleep+0x22>
    return -1;
80106fee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106ff3:	eb 77                	jmp    8010706c <sys_sleep+0x99>
  acquire(&tickslock);
80106ff5:	83 ec 0c             	sub    $0xc,%esp
80106ff8:	68 40 12 11 80       	push   $0x80111240
80106ffd:	e8 99 ea ff ff       	call   80105a9b <acquire>
80107002:	83 c4 10             	add    $0x10,%esp
  ticks0 = ticks;
80107005:	a1 74 12 11 80       	mov    0x80111274,%eax
8010700a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while(ticks - ticks0 < n){
8010700d:	eb 39                	jmp    80107048 <sys_sleep+0x75>
    if(proc->killed){
8010700f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80107015:	8b 40 24             	mov    0x24(%eax),%eax
80107018:	85 c0                	test   %eax,%eax
8010701a:	74 17                	je     80107033 <sys_sleep+0x60>
      release(&tickslock);
8010701c:	83 ec 0c             	sub    $0xc,%esp
8010701f:	68 40 12 11 80       	push   $0x80111240
80107024:	e8 2c eb ff ff       	call   80105b55 <release>
80107029:	83 c4 10             	add    $0x10,%esp
      return -1;
8010702c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107031:	eb 39                	jmp    8010706c <sys_sleep+0x99>
    }
    sleep(&ticks, &tickslock);
80107033:	83 ec 08             	sub    $0x8,%esp
80107036:	68 40 12 11 80       	push   $0x80111240
8010703b:	68 74 12 11 80       	push   $0x80111274
80107040:	e8 6a e7 ff ff       	call   801057af <sleep>
80107045:	83 c4 10             	add    $0x10,%esp
  
  if(argint(0, &n) < 0)
    return -1;
  acquire(&tickslock);
  ticks0 = ticks;
  while(ticks - ticks0 < n){
80107048:	a1 74 12 11 80       	mov    0x80111274,%eax
8010704d:	2b 45 f4             	sub    -0xc(%ebp),%eax
80107050:	8b 55 f0             	mov    -0x10(%ebp),%edx
80107053:	39 d0                	cmp    %edx,%eax
80107055:	72 b8                	jb     8010700f <sys_sleep+0x3c>
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
  }
  release(&tickslock);
80107057:	83 ec 0c             	sub    $0xc,%esp
8010705a:	68 40 12 11 80       	push   $0x80111240
8010705f:	e8 f1 ea ff ff       	call   80105b55 <release>
80107064:	83 c4 10             	add    $0x10,%esp
  return 0;
80107067:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010706c:	c9                   	leave  
8010706d:	c3                   	ret    

8010706e <sys_uptime>:

// return how many clock tick interrupts have occurred
// since start.
int
sys_uptime(void)
{
8010706e:	55                   	push   %ebp
8010706f:	89 e5                	mov    %esp,%ebp
80107071:	83 ec 18             	sub    $0x18,%esp
  uint xticks;
  
  acquire(&tickslock);
80107074:	83 ec 0c             	sub    $0xc,%esp
80107077:	68 40 12 11 80       	push   $0x80111240
8010707c:	e8 1a ea ff ff       	call   80105a9b <acquire>
80107081:	83 c4 10             	add    $0x10,%esp
  xticks = ticks;
80107084:	a1 74 12 11 80       	mov    0x80111274,%eax
80107089:	89 45 f4             	mov    %eax,-0xc(%ebp)
  release(&tickslock);
8010708c:	83 ec 0c             	sub    $0xc,%esp
8010708f:	68 40 12 11 80       	push   $0x80111240
80107094:	e8 bc ea ff ff       	call   80105b55 <release>
80107099:	83 c4 10             	add    $0x10,%esp
  return xticks;
8010709c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
8010709f:	c9                   	leave  
801070a0:	c3                   	ret    

801070a1 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
801070a1:	55                   	push   %ebp
801070a2:	89 e5                	mov    %esp,%ebp
801070a4:	83 ec 08             	sub    $0x8,%esp
801070a7:	8b 45 08             	mov    0x8(%ebp),%eax
801070aa:	8b 55 0c             	mov    0xc(%ebp),%edx
801070ad:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
801070b1:	88 55 f8             	mov    %dl,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
801070b4:	8a 45 f8             	mov    -0x8(%ebp),%al
801070b7:	8b 55 fc             	mov    -0x4(%ebp),%edx
801070ba:	ee                   	out    %al,(%dx)
}
801070bb:	c9                   	leave  
801070bc:	c3                   	ret    

801070bd <timerinit>:
#define TIMER_RATEGEN   0x04    // mode 2, rate generator
#define TIMER_16BIT     0x30    // r/w counter 16 bits, LSB first

void
timerinit(void)
{
801070bd:	55                   	push   %ebp
801070be:	89 e5                	mov    %esp,%ebp
801070c0:	83 ec 08             	sub    $0x8,%esp
  // Interrupt 100 times/sec.
  outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
801070c3:	6a 34                	push   $0x34
801070c5:	6a 43                	push   $0x43
801070c7:	e8 d5 ff ff ff       	call   801070a1 <outb>
801070cc:	83 c4 08             	add    $0x8,%esp
  outb(IO_TIMER1, TIMER_DIV(100) % 256);
801070cf:	68 9c 00 00 00       	push   $0x9c
801070d4:	6a 40                	push   $0x40
801070d6:	e8 c6 ff ff ff       	call   801070a1 <outb>
801070db:	83 c4 08             	add    $0x8,%esp
  outb(IO_TIMER1, TIMER_DIV(100) / 256);
801070de:	6a 2e                	push   $0x2e
801070e0:	6a 40                	push   $0x40
801070e2:	e8 ba ff ff ff       	call   801070a1 <outb>
801070e7:	83 c4 08             	add    $0x8,%esp
  picenable(IRQ_TIMER);
801070ea:	83 ec 0c             	sub    $0xc,%esp
801070ed:	6a 00                	push   $0x0
801070ef:	e8 15 d9 ff ff       	call   80104a09 <picenable>
801070f4:	83 c4 10             	add    $0x10,%esp
}
801070f7:	c9                   	leave  
801070f8:	c3                   	ret    

801070f9 <lidt>:

struct gatedesc;

static inline void
lidt(struct gatedesc *p, int size)
{
801070f9:	55                   	push   %ebp
801070fa:	89 e5                	mov    %esp,%ebp
801070fc:	83 ec 10             	sub    $0x10,%esp
  volatile ushort pd[5];

  pd[0] = size-1;
801070ff:	8b 45 0c             	mov    0xc(%ebp),%eax
80107102:	48                   	dec    %eax
80107103:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
  pd[1] = (uintp)p;
80107107:	8b 45 08             	mov    0x8(%ebp),%eax
8010710a:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  pd[2] = (uintp)p >> 16;
8010710e:	8b 45 08             	mov    0x8(%ebp),%eax
80107111:	c1 e8 10             	shr    $0x10,%eax
80107114:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
#if X64
  pd[3] = (uintp)p >> 32;
  pd[4] = (uintp)p >> 48;
#endif
  asm volatile("lidt (%0)" : : "r" (pd));
80107118:	8d 45 f6             	lea    -0xa(%ebp),%eax
8010711b:	0f 01 18             	lidtl  (%eax)
}
8010711e:	c9                   	leave  
8010711f:	c3                   	ret    

80107120 <rcr2>:
  return result;
}

static inline uintp
rcr2(void)
{
80107120:	55                   	push   %ebp
80107121:	89 e5                	mov    %esp,%ebp
80107123:	83 ec 10             	sub    $0x10,%esp
  uintp val;
  asm volatile("mov %%cr2,%0" : "=r" (val));
80107126:	0f 20 d0             	mov    %cr2,%eax
80107129:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return val;
8010712c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
8010712f:	c9                   	leave  
80107130:	c3                   	ret    

80107131 <tvinit>:
uint ticks;

#ifndef X64
void
tvinit(void)
{
80107131:	55                   	push   %ebp
80107132:	89 e5                	mov    %esp,%ebp
80107134:	83 ec 18             	sub    $0x18,%esp
  int i;

  for(i = 0; i < 256; i++)
80107137:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010713e:	e9 b8 00 00 00       	jmp    801071fb <tvinit+0xca>
    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
80107143:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107146:	8b 04 85 00 90 10 80 	mov    -0x7fef7000(,%eax,4),%eax
8010714d:	8b 55 f4             	mov    -0xc(%ebp),%edx
80107150:	66 89 04 d5 40 0a 11 	mov    %ax,-0x7feef5c0(,%edx,8)
80107157:	80 
80107158:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010715b:	66 c7 04 c5 42 0a 11 	movw   $0x8,-0x7feef5be(,%eax,8)
80107162:	80 08 00 
80107165:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107168:	8a 14 c5 44 0a 11 80 	mov    -0x7feef5bc(,%eax,8),%dl
8010716f:	83 e2 e0             	and    $0xffffffe0,%edx
80107172:	88 14 c5 44 0a 11 80 	mov    %dl,-0x7feef5bc(,%eax,8)
80107179:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010717c:	8a 14 c5 44 0a 11 80 	mov    -0x7feef5bc(,%eax,8),%dl
80107183:	83 e2 1f             	and    $0x1f,%edx
80107186:	88 14 c5 44 0a 11 80 	mov    %dl,-0x7feef5bc(,%eax,8)
8010718d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107190:	8a 14 c5 45 0a 11 80 	mov    -0x7feef5bb(,%eax,8),%dl
80107197:	83 e2 f0             	and    $0xfffffff0,%edx
8010719a:	83 ca 0e             	or     $0xe,%edx
8010719d:	88 14 c5 45 0a 11 80 	mov    %dl,-0x7feef5bb(,%eax,8)
801071a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801071a7:	8a 14 c5 45 0a 11 80 	mov    -0x7feef5bb(,%eax,8),%dl
801071ae:	83 e2 ef             	and    $0xffffffef,%edx
801071b1:	88 14 c5 45 0a 11 80 	mov    %dl,-0x7feef5bb(,%eax,8)
801071b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801071bb:	8a 14 c5 45 0a 11 80 	mov    -0x7feef5bb(,%eax,8),%dl
801071c2:	83 e2 9f             	and    $0xffffff9f,%edx
801071c5:	88 14 c5 45 0a 11 80 	mov    %dl,-0x7feef5bb(,%eax,8)
801071cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801071cf:	8a 14 c5 45 0a 11 80 	mov    -0x7feef5bb(,%eax,8),%dl
801071d6:	83 ca 80             	or     $0xffffff80,%edx
801071d9:	88 14 c5 45 0a 11 80 	mov    %dl,-0x7feef5bb(,%eax,8)
801071e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801071e3:	8b 04 85 00 90 10 80 	mov    -0x7fef7000(,%eax,4),%eax
801071ea:	c1 e8 10             	shr    $0x10,%eax
801071ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
801071f0:	66 89 04 d5 46 0a 11 	mov    %ax,-0x7feef5ba(,%edx,8)
801071f7:	80 
void
tvinit(void)
{
  int i;

  for(i = 0; i < 256; i++)
801071f8:	ff 45 f4             	incl   -0xc(%ebp)
801071fb:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
80107202:	0f 8e 3b ff ff ff    	jle    80107143 <tvinit+0x12>
    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
80107208:	a1 00 91 10 80       	mov    0x80109100,%eax
8010720d:	66 a3 40 0c 11 80    	mov    %ax,0x80110c40
80107213:	66 c7 05 42 0c 11 80 	movw   $0x8,0x80110c42
8010721a:	08 00 
8010721c:	a0 44 0c 11 80       	mov    0x80110c44,%al
80107221:	83 e0 e0             	and    $0xffffffe0,%eax
80107224:	a2 44 0c 11 80       	mov    %al,0x80110c44
80107229:	a0 44 0c 11 80       	mov    0x80110c44,%al
8010722e:	83 e0 1f             	and    $0x1f,%eax
80107231:	a2 44 0c 11 80       	mov    %al,0x80110c44
80107236:	a0 45 0c 11 80       	mov    0x80110c45,%al
8010723b:	83 c8 0f             	or     $0xf,%eax
8010723e:	a2 45 0c 11 80       	mov    %al,0x80110c45
80107243:	a0 45 0c 11 80       	mov    0x80110c45,%al
80107248:	83 e0 ef             	and    $0xffffffef,%eax
8010724b:	a2 45 0c 11 80       	mov    %al,0x80110c45
80107250:	a0 45 0c 11 80       	mov    0x80110c45,%al
80107255:	83 c8 60             	or     $0x60,%eax
80107258:	a2 45 0c 11 80       	mov    %al,0x80110c45
8010725d:	a0 45 0c 11 80       	mov    0x80110c45,%al
80107262:	83 c8 80             	or     $0xffffff80,%eax
80107265:	a2 45 0c 11 80       	mov    %al,0x80110c45
8010726a:	a1 00 91 10 80       	mov    0x80109100,%eax
8010726f:	c1 e8 10             	shr    $0x10,%eax
80107272:	66 a3 46 0c 11 80    	mov    %ax,0x80110c46
  
  initlock(&tickslock, "time");
80107278:	83 ec 08             	sub    $0x8,%esp
8010727b:	68 08 8a 10 80       	push   $0x80108a08
80107280:	68 40 12 11 80       	push   $0x80111240
80107285:	e8 f0 e7 ff ff       	call   80105a7a <initlock>
8010728a:	83 c4 10             	add    $0x10,%esp
}
8010728d:	c9                   	leave  
8010728e:	c3                   	ret    

8010728f <idtinit>:

void
idtinit(void)
{
8010728f:	55                   	push   %ebp
80107290:	89 e5                	mov    %esp,%ebp
  lidt(idt, sizeof(idt));
80107292:	68 00 08 00 00       	push   $0x800
80107297:	68 40 0a 11 80       	push   $0x80110a40
8010729c:	e8 58 fe ff ff       	call   801070f9 <lidt>
801072a1:	83 c4 08             	add    $0x8,%esp
}
801072a4:	c9                   	leave  
801072a5:	c3                   	ret    

801072a6 <trap>:
#endif

//PAGEBREAK: 41
void
trap(struct trapframe *tf)
{
801072a6:	55                   	push   %ebp
801072a7:	89 e5                	mov    %esp,%ebp
801072a9:	57                   	push   %edi
801072aa:	56                   	push   %esi
801072ab:	53                   	push   %ebx
801072ac:	83 ec 1c             	sub    $0x1c,%esp
  if(tf->trapno == T_SYSCALL){
801072af:	8b 45 08             	mov    0x8(%ebp),%eax
801072b2:	8b 40 30             	mov    0x30(%eax),%eax
801072b5:	83 f8 40             	cmp    $0x40,%eax
801072b8:	75 3f                	jne    801072f9 <trap+0x53>
    if(proc->killed)
801072ba:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801072c0:	8b 40 24             	mov    0x24(%eax),%eax
801072c3:	85 c0                	test   %eax,%eax
801072c5:	74 05                	je     801072cc <trap+0x26>
      exit();
801072c7:	e8 b4 e0 ff ff       	call   80105380 <exit>
    proc->tf = tf;
801072cc:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801072d2:	8b 55 08             	mov    0x8(%ebp),%edx
801072d5:	89 50 18             	mov    %edx,0x18(%eax)
    syscall();
801072d8:	e8 90 ee ff ff       	call   8010616d <syscall>
    if(proc->killed)
801072dd:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801072e3:	8b 40 24             	mov    0x24(%eax),%eax
801072e6:	85 c0                	test   %eax,%eax
801072e8:	74 0a                	je     801072f4 <trap+0x4e>
      exit();
801072ea:	e8 91 e0 ff ff       	call   80105380 <exit>
    return;
801072ef:	e9 0c 02 00 00       	jmp    80107500 <trap+0x25a>
801072f4:	e9 07 02 00 00       	jmp    80107500 <trap+0x25a>
  }

  switch(tf->trapno){
801072f9:	8b 45 08             	mov    0x8(%ebp),%eax
801072fc:	8b 40 30             	mov    0x30(%eax),%eax
801072ff:	83 e8 20             	sub    $0x20,%eax
80107302:	83 f8 1f             	cmp    $0x1f,%eax
80107305:	0f 87 bb 00 00 00    	ja     801073c6 <trap+0x120>
8010730b:	8b 04 85 b0 8a 10 80 	mov    -0x7fef7550(,%eax,4),%eax
80107312:	ff e0                	jmp    *%eax
  case T_IRQ0 + IRQ_TIMER:
    if(cpu->id == 0){
80107314:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
8010731a:	8a 00                	mov    (%eax),%al
8010731c:	84 c0                	test   %al,%al
8010731e:	75 3b                	jne    8010735b <trap+0xb5>
      acquire(&tickslock);
80107320:	83 ec 0c             	sub    $0xc,%esp
80107323:	68 40 12 11 80       	push   $0x80111240
80107328:	e8 6e e7 ff ff       	call   80105a9b <acquire>
8010732d:	83 c4 10             	add    $0x10,%esp
      ticks++;
80107330:	a1 74 12 11 80       	mov    0x80111274,%eax
80107335:	40                   	inc    %eax
80107336:	a3 74 12 11 80       	mov    %eax,0x80111274
      wakeup(&ticks);
8010733b:	83 ec 0c             	sub    $0xc,%esp
8010733e:	68 74 12 11 80       	push   $0x80111274
80107343:	e8 50 e5 ff ff       	call   80105898 <wakeup>
80107348:	83 c4 10             	add    $0x10,%esp
      release(&tickslock);
8010734b:	83 ec 0c             	sub    $0xc,%esp
8010734e:	68 40 12 11 80       	push   $0x80111240
80107353:	e8 fd e7 ff ff       	call   80105b55 <release>
80107358:	83 c4 10             	add    $0x10,%esp
    }
    lapiceoi();
8010735b:	e8 e0 c6 ff ff       	call   80103a40 <lapiceoi>
    break;
80107360:	e9 19 01 00 00       	jmp    8010747e <trap+0x1d8>
  case T_IRQ0 + IRQ_IDE:
    ideintr();
80107365:	e8 d9 be ff ff       	call   80103243 <ideintr>
    lapiceoi();
8010736a:	e8 d1 c6 ff ff       	call   80103a40 <lapiceoi>
    break;
8010736f:	e9 0a 01 00 00       	jmp    8010747e <trap+0x1d8>
  case T_IRQ0 + IRQ_IDE+1:
    // Bochs generates spurious IDE1 interrupts.
    break;
  case T_IRQ0 + IRQ_KBD:
    kbdintr();
80107374:	e8 a3 c4 ff ff       	call   8010381c <kbdintr>
    lapiceoi();
80107379:	e8 c2 c6 ff ff       	call   80103a40 <lapiceoi>
    break;
8010737e:	e9 fb 00 00 00       	jmp    8010747e <trap+0x1d8>
  case T_IRQ0 + IRQ_COM1:
    uartintr();
80107383:	e8 60 03 00 00       	call   801076e8 <uartintr>
    lapiceoi();
80107388:	e8 b3 c6 ff ff       	call   80103a40 <lapiceoi>
    break;
8010738d:	e9 ec 00 00 00       	jmp    8010747e <trap+0x1d8>
  case T_IRQ0 + 7:
  case T_IRQ0 + IRQ_SPURIOUS:
    cprintf("cpu%d: spurious interrupt at %x:%x\n",
80107392:	8b 45 08             	mov    0x8(%ebp),%eax
80107395:	8b 48 38             	mov    0x38(%eax),%ecx
            cpu->id, tf->cs, tf->eip);
80107398:	8b 45 08             	mov    0x8(%ebp),%eax
8010739b:	8b 40 3c             	mov    0x3c(%eax),%eax
    uartintr();
    lapiceoi();
    break;
  case T_IRQ0 + 7:
  case T_IRQ0 + IRQ_SPURIOUS:
    cprintf("cpu%d: spurious interrupt at %x:%x\n",
8010739e:	0f b7 d0             	movzwl %ax,%edx
            cpu->id, tf->cs, tf->eip);
801073a1:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
801073a7:	8a 00                	mov    (%eax),%al
    uartintr();
    lapiceoi();
    break;
  case T_IRQ0 + 7:
  case T_IRQ0 + IRQ_SPURIOUS:
    cprintf("cpu%d: spurious interrupt at %x:%x\n",
801073a9:	0f b6 c0             	movzbl %al,%eax
801073ac:	51                   	push   %ecx
801073ad:	52                   	push   %edx
801073ae:	50                   	push   %eax
801073af:	68 10 8a 10 80       	push   $0x80108a10
801073b4:	e8 27 9b ff ff       	call   80100ee0 <cprintf>
801073b9:	83 c4 10             	add    $0x10,%esp
            cpu->id, tf->cs, tf->eip);
    lapiceoi();
801073bc:	e8 7f c6 ff ff       	call   80103a40 <lapiceoi>
    break;
801073c1:	e9 b8 00 00 00       	jmp    8010747e <trap+0x1d8>
   
  //PAGEBREAK: 13
  default:
    if(proc == 0 || (tf->cs&3) == 0){
801073c6:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801073cc:	85 c0                	test   %eax,%eax
801073ce:	74 10                	je     801073e0 <trap+0x13a>
801073d0:	8b 45 08             	mov    0x8(%ebp),%eax
801073d3:	8b 40 3c             	mov    0x3c(%eax),%eax
801073d6:	0f b7 c0             	movzwl %ax,%eax
801073d9:	83 e0 03             	and    $0x3,%eax
801073dc:	85 c0                	test   %eax,%eax
801073de:	75 3f                	jne    8010741f <trap+0x179>
      // In kernel, it must be our mistake.
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
801073e0:	e8 3b fd ff ff       	call   80107120 <rcr2>
801073e5:	89 c3                	mov    %eax,%ebx
801073e7:	8b 45 08             	mov    0x8(%ebp),%eax
801073ea:	8b 48 38             	mov    0x38(%eax),%ecx
              tf->trapno, cpu->id, tf->eip, rcr2());
801073ed:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
801073f3:	8a 00                	mov    (%eax),%al
   
  //PAGEBREAK: 13
  default:
    if(proc == 0 || (tf->cs&3) == 0){
      // In kernel, it must be our mistake.
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
801073f5:	0f b6 d0             	movzbl %al,%edx
801073f8:	8b 45 08             	mov    0x8(%ebp),%eax
801073fb:	8b 40 30             	mov    0x30(%eax),%eax
801073fe:	83 ec 0c             	sub    $0xc,%esp
80107401:	53                   	push   %ebx
80107402:	51                   	push   %ecx
80107403:	52                   	push   %edx
80107404:	50                   	push   %eax
80107405:	68 34 8a 10 80       	push   $0x80108a34
8010740a:	e8 d1 9a ff ff       	call   80100ee0 <cprintf>
8010740f:	83 c4 20             	add    $0x20,%esp
              tf->trapno, cpu->id, tf->eip, rcr2());
      panic("trap");
80107412:	83 ec 0c             	sub    $0xc,%esp
80107415:	68 66 8a 10 80       	push   $0x80108a66
8010741a:	e8 72 9c ff ff       	call   80101091 <panic>
    }
    // In user space, assume process misbehaved.
    cprintf("pid %d %s: trap %d err %d on cpu %d "
8010741f:	e8 fc fc ff ff       	call   80107120 <rcr2>
80107424:	89 c7                	mov    %eax,%edi
80107426:	8b 45 08             	mov    0x8(%ebp),%eax
80107429:	8b 70 38             	mov    0x38(%eax),%esi
            "eip 0x%x addr 0x%x--kill proc\n",
            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
8010742c:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80107432:	8a 00                	mov    (%eax),%al
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
              tf->trapno, cpu->id, tf->eip, rcr2());
      panic("trap");
    }
    // In user space, assume process misbehaved.
    cprintf("pid %d %s: trap %d err %d on cpu %d "
80107434:	0f b6 d8             	movzbl %al,%ebx
80107437:	8b 45 08             	mov    0x8(%ebp),%eax
8010743a:	8b 48 34             	mov    0x34(%eax),%ecx
8010743d:	8b 45 08             	mov    0x8(%ebp),%eax
80107440:	8b 50 30             	mov    0x30(%eax),%edx
            "eip 0x%x addr 0x%x--kill proc\n",
            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
80107443:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80107449:	83 c0 6c             	add    $0x6c,%eax
8010744c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010744f:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
              tf->trapno, cpu->id, tf->eip, rcr2());
      panic("trap");
    }
    // In user space, assume process misbehaved.
    cprintf("pid %d %s: trap %d err %d on cpu %d "
80107455:	8b 40 10             	mov    0x10(%eax),%eax
80107458:	57                   	push   %edi
80107459:	56                   	push   %esi
8010745a:	53                   	push   %ebx
8010745b:	51                   	push   %ecx
8010745c:	52                   	push   %edx
8010745d:	ff 75 e4             	pushl  -0x1c(%ebp)
80107460:	50                   	push   %eax
80107461:	68 6c 8a 10 80       	push   $0x80108a6c
80107466:	e8 75 9a ff ff       	call   80100ee0 <cprintf>
8010746b:	83 c4 20             	add    $0x20,%esp
            "eip 0x%x addr 0x%x--kill proc\n",
            proc->pid, proc->name, tf->trapno, tf->err, cpu->id, tf->eip, 
            rcr2());
    proc->killed = 1;
8010746e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80107474:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
8010747b:	eb 01                	jmp    8010747e <trap+0x1d8>
    ideintr();
    lapiceoi();
    break;
  case T_IRQ0 + IRQ_IDE+1:
    // Bochs generates spurious IDE1 interrupts.
    break;
8010747d:	90                   	nop
  }

  // Force process exit if it has been killed and is in user space.
  // (If it is still executing in the kernel, let it keep running 
  // until it gets to the regular system call return.)
  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
8010747e:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
80107484:	85 c0                	test   %eax,%eax
80107486:	74 23                	je     801074ab <trap+0x205>
80107488:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
8010748e:	8b 40 24             	mov    0x24(%eax),%eax
80107491:	85 c0                	test   %eax,%eax
80107493:	74 16                	je     801074ab <trap+0x205>
80107495:	8b 45 08             	mov    0x8(%ebp),%eax
80107498:	8b 40 3c             	mov    0x3c(%eax),%eax
8010749b:	0f b7 c0             	movzwl %ax,%eax
8010749e:	83 e0 03             	and    $0x3,%eax
801074a1:	83 f8 03             	cmp    $0x3,%eax
801074a4:	75 05                	jne    801074ab <trap+0x205>
    exit();
801074a6:	e8 d5 de ff ff       	call   80105380 <exit>

  // Force process to give up CPU on clock tick.
  // If interrupts were on while locks held, would need to check nlock.
  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER)
801074ab:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801074b1:	85 c0                	test   %eax,%eax
801074b3:	74 1e                	je     801074d3 <trap+0x22d>
801074b5:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801074bb:	8b 40 0c             	mov    0xc(%eax),%eax
801074be:	83 f8 04             	cmp    $0x4,%eax
801074c1:	75 10                	jne    801074d3 <trap+0x22d>
801074c3:	8b 45 08             	mov    0x8(%ebp),%eax
801074c6:	8b 40 30             	mov    0x30(%eax),%eax
801074c9:	83 f8 20             	cmp    $0x20,%eax
801074cc:	75 05                	jne    801074d3 <trap+0x22d>
    yield();
801074ce:	e8 72 e2 ff ff       	call   80105745 <yield>

  // Check if the process has been killed since we yielded
  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
801074d3:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801074d9:	85 c0                	test   %eax,%eax
801074db:	74 23                	je     80107500 <trap+0x25a>
801074dd:	65 a1 04 00 00 00    	mov    %gs:0x4,%eax
801074e3:	8b 40 24             	mov    0x24(%eax),%eax
801074e6:	85 c0                	test   %eax,%eax
801074e8:	74 16                	je     80107500 <trap+0x25a>
801074ea:	8b 45 08             	mov    0x8(%ebp),%eax
801074ed:	8b 40 3c             	mov    0x3c(%eax),%eax
801074f0:	0f b7 c0             	movzwl %ax,%eax
801074f3:	83 e0 03             	and    $0x3,%eax
801074f6:	83 f8 03             	cmp    $0x3,%eax
801074f9:	75 05                	jne    80107500 <trap+0x25a>
    exit();
801074fb:	e8 80 de ff ff       	call   80105380 <exit>
}
80107500:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107503:	5b                   	pop    %ebx
80107504:	5e                   	pop    %esi
80107505:	5f                   	pop    %edi
80107506:	5d                   	pop    %ebp
80107507:	c3                   	ret    

80107508 <inb>:
// Routines to let C code use special x86 instructions.

static inline uchar
inb(ushort port)
{
80107508:	55                   	push   %ebp
80107509:	89 e5                	mov    %esp,%ebp
8010750b:	83 ec 14             	sub    $0x14,%esp
8010750e:	8b 45 08             	mov    0x8(%ebp),%eax
80107511:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80107515:	8b 45 ec             	mov    -0x14(%ebp),%eax
80107518:	89 c2                	mov    %eax,%edx
8010751a:	ec                   	in     (%dx),%al
8010751b:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
8010751e:	8a 45 ff             	mov    -0x1(%ebp),%al
}
80107521:	c9                   	leave  
80107522:	c3                   	ret    

80107523 <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
80107523:	55                   	push   %ebp
80107524:	89 e5                	mov    %esp,%ebp
80107526:	83 ec 08             	sub    $0x8,%esp
80107529:	8b 45 08             	mov    0x8(%ebp),%eax
8010752c:	8b 55 0c             	mov    0xc(%ebp),%edx
8010752f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80107533:	88 55 f8             	mov    %dl,-0x8(%ebp)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80107536:	8a 45 f8             	mov    -0x8(%ebp),%al
80107539:	8b 55 fc             	mov    -0x4(%ebp),%edx
8010753c:	ee                   	out    %al,(%dx)
}
8010753d:	c9                   	leave  
8010753e:	c3                   	ret    

8010753f <uartearlyinit>:

static int uart;    // is there a uart?

void
uartearlyinit(void)
{
8010753f:	55                   	push   %ebp
80107540:	89 e5                	mov    %esp,%ebp
80107542:	83 ec 18             	sub    $0x18,%esp
  char *p;

  // Turn off the FIFO
  outb(COM1+2, 0);
80107545:	6a 00                	push   $0x0
80107547:	68 fa 03 00 00       	push   $0x3fa
8010754c:	e8 d2 ff ff ff       	call   80107523 <outb>
80107551:	83 c4 08             	add    $0x8,%esp
  
  // 9600 baud, 8 data bits, 1 stop bit, parity off.
  outb(COM1+3, 0x80);    // Unlock divisor
80107554:	68 80 00 00 00       	push   $0x80
80107559:	68 fb 03 00 00       	push   $0x3fb
8010755e:	e8 c0 ff ff ff       	call   80107523 <outb>
80107563:	83 c4 08             	add    $0x8,%esp
  outb(COM1+0, 115200/9600);
80107566:	6a 0c                	push   $0xc
80107568:	68 f8 03 00 00       	push   $0x3f8
8010756d:	e8 b1 ff ff ff       	call   80107523 <outb>
80107572:	83 c4 08             	add    $0x8,%esp
  outb(COM1+1, 0);
80107575:	6a 00                	push   $0x0
80107577:	68 f9 03 00 00       	push   $0x3f9
8010757c:	e8 a2 ff ff ff       	call   80107523 <outb>
80107581:	83 c4 08             	add    $0x8,%esp
  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
80107584:	6a 03                	push   $0x3
80107586:	68 fb 03 00 00       	push   $0x3fb
8010758b:	e8 93 ff ff ff       	call   80107523 <outb>
80107590:	83 c4 08             	add    $0x8,%esp
  outb(COM1+4, 0);
80107593:	6a 00                	push   $0x0
80107595:	68 fc 03 00 00       	push   $0x3fc
8010759a:	e8 84 ff ff ff       	call   80107523 <outb>
8010759f:	83 c4 08             	add    $0x8,%esp
  outb(COM1+1, 0x01);    // Enable receive interrupts.
801075a2:	6a 01                	push   $0x1
801075a4:	68 f9 03 00 00       	push   $0x3f9
801075a9:	e8 75 ff ff ff       	call   80107523 <outb>
801075ae:	83 c4 08             	add    $0x8,%esp

  // If status is 0xFF, no serial port.
  if(inb(COM1+5) == 0xFF)
801075b1:	68 fd 03 00 00       	push   $0x3fd
801075b6:	e8 4d ff ff ff       	call   80107508 <inb>
801075bb:	83 c4 04             	add    $0x4,%esp
801075be:	3c ff                	cmp    $0xff,%al
801075c0:	75 02                	jne    801075c4 <uartearlyinit+0x85>
    return;
801075c2:	eb 33                	jmp    801075f7 <uartearlyinit+0xb8>
  uart = 1;
801075c4:	c7 05 78 12 11 80 01 	movl   $0x1,0x80111278
801075cb:	00 00 00 

  // Announce that we're here.
  for(p="xv6...\n"; *p; p++)
801075ce:	c7 45 f4 30 8b 10 80 	movl   $0x80108b30,-0xc(%ebp)
801075d5:	eb 17                	jmp    801075ee <uartearlyinit+0xaf>
    uartputc(*p);
801075d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801075da:	8a 00                	mov    (%eax),%al
801075dc:	0f be c0             	movsbl %al,%eax
801075df:	83 ec 0c             	sub    $0xc,%esp
801075e2:	50                   	push   %eax
801075e3:	e8 5a 00 00 00       	call   80107642 <uartputc>
801075e8:	83 c4 10             	add    $0x10,%esp
  if(inb(COM1+5) == 0xFF)
    return;
  uart = 1;

  // Announce that we're here.
  for(p="xv6...\n"; *p; p++)
801075eb:	ff 45 f4             	incl   -0xc(%ebp)
801075ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
801075f1:	8a 00                	mov    (%eax),%al
801075f3:	84 c0                	test   %al,%al
801075f5:	75 e0                	jne    801075d7 <uartearlyinit+0x98>
    uartputc(*p);
}
801075f7:	c9                   	leave  
801075f8:	c3                   	ret    

801075f9 <uartinit>:

void
uartinit(void)
{
801075f9:	55                   	push   %ebp
801075fa:	89 e5                	mov    %esp,%ebp
801075fc:	83 ec 08             	sub    $0x8,%esp
  if (!uart)
801075ff:	a1 78 12 11 80       	mov    0x80111278,%eax
80107604:	85 c0                	test   %eax,%eax
80107606:	75 02                	jne    8010760a <uartinit+0x11>
    return;
80107608:	eb 36                	jmp    80107640 <uartinit+0x47>

  // Acknowledge pre-existing interrupt conditions;
  // enable interrupts.
  inb(COM1+2);
8010760a:	68 fa 03 00 00       	push   $0x3fa
8010760f:	e8 f4 fe ff ff       	call   80107508 <inb>
80107614:	83 c4 04             	add    $0x4,%esp
  inb(COM1+0);
80107617:	68 f8 03 00 00       	push   $0x3f8
8010761c:	e8 e7 fe ff ff       	call   80107508 <inb>
80107621:	83 c4 04             	add    $0x4,%esp
  picenable(IRQ_COM1);
80107624:	83 ec 0c             	sub    $0xc,%esp
80107627:	6a 04                	push   $0x4
80107629:	e8 db d3 ff ff       	call   80104a09 <picenable>
8010762e:	83 c4 10             	add    $0x10,%esp
  ioapicenable(IRQ_COM1, 0);
80107631:	83 ec 08             	sub    $0x8,%esp
80107634:	6a 00                	push   $0x0
80107636:	6a 04                	push   $0x4
80107638:	e8 9f be ff ff       	call   801034dc <ioapicenable>
8010763d:	83 c4 10             	add    $0x10,%esp
}
80107640:	c9                   	leave  
80107641:	c3                   	ret    

80107642 <uartputc>:

void
uartputc(int c)
{
80107642:	55                   	push   %ebp
80107643:	89 e5                	mov    %esp,%ebp
80107645:	83 ec 18             	sub    $0x18,%esp
  int i;

  if(!uart)
80107648:	a1 78 12 11 80       	mov    0x80111278,%eax
8010764d:	85 c0                	test   %eax,%eax
8010764f:	75 02                	jne    80107653 <uartputc+0x11>
    return;
80107651:	eb 50                	jmp    801076a3 <uartputc+0x61>
  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
80107653:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010765a:	eb 10                	jmp    8010766c <uartputc+0x2a>
    microdelay(10);
8010765c:	83 ec 0c             	sub    $0xc,%esp
8010765f:	6a 0a                	push   $0xa
80107661:	e8 f4 c3 ff ff       	call   80103a5a <microdelay>
80107666:	83 c4 10             	add    $0x10,%esp
{
  int i;

  if(!uart)
    return;
  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
80107669:	ff 45 f4             	incl   -0xc(%ebp)
8010766c:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
80107670:	7f 1a                	jg     8010768c <uartputc+0x4a>
80107672:	83 ec 0c             	sub    $0xc,%esp
80107675:	68 fd 03 00 00       	push   $0x3fd
8010767a:	e8 89 fe ff ff       	call   80107508 <inb>
8010767f:	83 c4 10             	add    $0x10,%esp
80107682:	0f b6 c0             	movzbl %al,%eax
80107685:	83 e0 20             	and    $0x20,%eax
80107688:	85 c0                	test   %eax,%eax
8010768a:	74 d0                	je     8010765c <uartputc+0x1a>
    microdelay(10);
  outb(COM1+0, c);
8010768c:	8b 45 08             	mov    0x8(%ebp),%eax
8010768f:	0f b6 c0             	movzbl %al,%eax
80107692:	83 ec 08             	sub    $0x8,%esp
80107695:	50                   	push   %eax
80107696:	68 f8 03 00 00       	push   $0x3f8
8010769b:	e8 83 fe ff ff       	call   80107523 <outb>
801076a0:	83 c4 10             	add    $0x10,%esp
}
801076a3:	c9                   	leave  
801076a4:	c3                   	ret    

801076a5 <uartgetc>:

static int
uartgetc(void)
{
801076a5:	55                   	push   %ebp
801076a6:	89 e5                	mov    %esp,%ebp
  if(!uart)
801076a8:	a1 78 12 11 80       	mov    0x80111278,%eax
801076ad:	85 c0                	test   %eax,%eax
801076af:	75 07                	jne    801076b8 <uartgetc+0x13>
    return -1;
801076b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801076b6:	eb 2e                	jmp    801076e6 <uartgetc+0x41>
  if(!(inb(COM1+5) & 0x01))
801076b8:	68 fd 03 00 00       	push   $0x3fd
801076bd:	e8 46 fe ff ff       	call   80107508 <inb>
801076c2:	83 c4 04             	add    $0x4,%esp
801076c5:	0f b6 c0             	movzbl %al,%eax
801076c8:	83 e0 01             	and    $0x1,%eax
801076cb:	85 c0                	test   %eax,%eax
801076cd:	75 07                	jne    801076d6 <uartgetc+0x31>
    return -1;
801076cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801076d4:	eb 10                	jmp    801076e6 <uartgetc+0x41>
  return inb(COM1+0);
801076d6:	68 f8 03 00 00       	push   $0x3f8
801076db:	e8 28 fe ff ff       	call   80107508 <inb>
801076e0:	83 c4 04             	add    $0x4,%esp
801076e3:	0f b6 c0             	movzbl %al,%eax
}
801076e6:	c9                   	leave  
801076e7:	c3                   	ret    

801076e8 <uartintr>:

void
uartintr(void)
{
801076e8:	55                   	push   %ebp
801076e9:	89 e5                	mov    %esp,%ebp
801076eb:	83 ec 08             	sub    $0x8,%esp
  consoleintr(uartgetc);
801076ee:	83 ec 0c             	sub    $0xc,%esp
801076f1:	68 a5 76 10 80       	push   $0x801076a5
801076f6:	e8 f7 9b ff ff       	call   801012f2 <consoleintr>
801076fb:	83 c4 10             	add    $0x10,%esp
}
801076fe:	c9                   	leave  
801076ff:	c3                   	ret    

80107700 <lgdt>:

struct segdesc;

static inline void
lgdt(struct segdesc *p, int size)
{
80107700:	55                   	push   %ebp
80107701:	89 e5                	mov    %esp,%ebp
80107703:	83 ec 10             	sub    $0x10,%esp
  volatile ushort pd[5];

  pd[0] = size-1;
80107706:	8b 45 0c             	mov    0xc(%ebp),%eax
80107709:	48                   	dec    %eax
8010770a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
  pd[1] = (uintp)p;
8010770e:	8b 45 08             	mov    0x8(%ebp),%eax
80107711:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
  pd[2] = (uintp)p >> 16;
80107715:	8b 45 08             	mov    0x8(%ebp),%eax
80107718:	c1 e8 10             	shr    $0x10,%eax
8010771b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
#if X64
  pd[3] = (uintp)p >> 32;
  pd[4] = (uintp)p >> 48;
#endif
  asm volatile("lgdt (%0)" : : "r" (pd));
8010771f:	8d 45 f6             	lea    -0xa(%ebp),%eax
80107722:	0f 01 10             	lgdtl  (%eax)
}
80107725:	c9                   	leave  
80107726:	c3                   	ret    

80107727 <ltr>:
  asm volatile("lidt (%0)" : : "r" (pd));
}

static inline void
ltr(ushort sel)
{
80107727:	55                   	push   %ebp
80107728:	89 e5                	mov    %esp,%ebp
8010772a:	83 ec 04             	sub    $0x4,%esp
8010772d:	8b 45 08             	mov    0x8(%ebp),%eax
80107730:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  asm volatile("ltr %0" : : "r" (sel));
80107734:	8b 45 fc             	mov    -0x4(%ebp),%eax
80107737:	0f 00 d8             	ltr    %ax
}
8010773a:	c9                   	leave  
8010773b:	c3                   	ret    

8010773c <loadgs>:
  return eflags;
}

static inline void
loadgs(ushort v)
{
8010773c:	55                   	push   %ebp
8010773d:	89 e5                	mov    %esp,%ebp
8010773f:	83 ec 04             	sub    $0x4,%esp
80107742:	8b 45 08             	mov    0x8(%ebp),%eax
80107745:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  asm volatile("movw %0, %%gs" : : "r" (v));
80107749:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010774c:	8e e8                	mov    %eax,%gs
}
8010774e:	c9                   	leave  
8010774f:	c3                   	ret    

80107750 <lcr3>:
  return val;
}

static inline void
lcr3(uintp val) 
{
80107750:	55                   	push   %ebp
80107751:	89 e5                	mov    %esp,%ebp
  asm volatile("mov %0,%%cr3" : : "r" (val));
80107753:	8b 45 08             	mov    0x8(%ebp),%eax
80107756:	0f 22 d8             	mov    %eax,%cr3
}
80107759:	5d                   	pop    %ebp
8010775a:	c3                   	ret    

8010775b <v2p>:
#endif
#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked

#ifndef __ASSEMBLER__

static inline uintp v2p(void *a) { return ((uintp) (a)) - ((uintp)KERNBASE); }
8010775b:	55                   	push   %ebp
8010775c:	89 e5                	mov    %esp,%ebp
8010775e:	8b 45 08             	mov    0x8(%ebp),%eax
80107761:	05 00 00 00 80       	add    $0x80000000,%eax
80107766:	5d                   	pop    %ebp
80107767:	c3                   	ret    

80107768 <p2v>:
static inline void *p2v(uintp a) { return (void *) ((a) + ((uintp)KERNBASE)); }
80107768:	55                   	push   %ebp
80107769:	89 e5                	mov    %esp,%ebp
8010776b:	8b 45 08             	mov    0x8(%ebp),%eax
8010776e:	05 00 00 00 80       	add    $0x80000000,%eax
80107773:	5d                   	pop    %ebp
80107774:	c3                   	ret    

80107775 <seginit>:
#ifndef X64
// Set up CPU's kernel segment descriptors.
// Run once on entry on each CPU.
void
seginit(void)
{
80107775:	55                   	push   %ebp
80107776:	89 e5                	mov    %esp,%ebp
80107778:	53                   	push   %ebx
80107779:	83 ec 14             	sub    $0x14,%esp

  // Map "logical" addresses to virtual addresses using identity map.
  // Cannot share a CODE descriptor for both kernel and user
  // because it would have to have DPL_USR, but the CPU forbids
  // an interrupt from CPL=0 to DPL=3.
  c = &cpus[cpunum()];
8010777c:	e8 1c c2 ff ff       	call   8010399d <cpunum>
80107781:	89 c2                	mov    %eax,%edx
80107783:	89 d0                	mov    %edx,%eax
80107785:	c1 e0 02             	shl    $0x2,%eax
80107788:	01 d0                	add    %edx,%eax
8010778a:	01 c0                	add    %eax,%eax
8010778c:	01 d0                	add    %edx,%eax
8010778e:	89 c1                	mov    %eax,%ecx
80107790:	c1 e1 04             	shl    $0x4,%ecx
80107793:	01 c8                	add    %ecx,%eax
80107795:	01 d0                	add    %edx,%eax
80107797:	05 00 e5 10 80       	add    $0x8010e500,%eax
8010779c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
8010779f:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077a2:	66 c7 40 78 ff ff    	movw   $0xffff,0x78(%eax)
801077a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077ab:	66 c7 40 7a 00 00    	movw   $0x0,0x7a(%eax)
801077b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077b4:	c6 40 7c 00          	movb   $0x0,0x7c(%eax)
801077b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077bb:	8a 50 7d             	mov    0x7d(%eax),%dl
801077be:	83 e2 f0             	and    $0xfffffff0,%edx
801077c1:	83 ca 0a             	or     $0xa,%edx
801077c4:	88 50 7d             	mov    %dl,0x7d(%eax)
801077c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077ca:	8a 50 7d             	mov    0x7d(%eax),%dl
801077cd:	83 ca 10             	or     $0x10,%edx
801077d0:	88 50 7d             	mov    %dl,0x7d(%eax)
801077d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077d6:	8a 50 7d             	mov    0x7d(%eax),%dl
801077d9:	83 e2 9f             	and    $0xffffff9f,%edx
801077dc:	88 50 7d             	mov    %dl,0x7d(%eax)
801077df:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077e2:	8a 50 7d             	mov    0x7d(%eax),%dl
801077e5:	83 ca 80             	or     $0xffffff80,%edx
801077e8:	88 50 7d             	mov    %dl,0x7d(%eax)
801077eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077ee:	8a 50 7e             	mov    0x7e(%eax),%dl
801077f1:	83 ca 0f             	or     $0xf,%edx
801077f4:	88 50 7e             	mov    %dl,0x7e(%eax)
801077f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801077fa:	8a 50 7e             	mov    0x7e(%eax),%dl
801077fd:	83 e2 ef             	and    $0xffffffef,%edx
80107800:	88 50 7e             	mov    %dl,0x7e(%eax)
80107803:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107806:	8a 50 7e             	mov    0x7e(%eax),%dl
80107809:	83 e2 df             	and    $0xffffffdf,%edx
8010780c:	88 50 7e             	mov    %dl,0x7e(%eax)
8010780f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107812:	8a 50 7e             	mov    0x7e(%eax),%dl
80107815:	83 ca 40             	or     $0x40,%edx
80107818:	88 50 7e             	mov    %dl,0x7e(%eax)
8010781b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010781e:	8a 50 7e             	mov    0x7e(%eax),%dl
80107821:	83 ca 80             	or     $0xffffff80,%edx
80107824:	88 50 7e             	mov    %dl,0x7e(%eax)
80107827:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010782a:	c6 40 7f 00          	movb   $0x0,0x7f(%eax)
  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
8010782e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107831:	66 c7 80 80 00 00 00 	movw   $0xffff,0x80(%eax)
80107838:	ff ff 
8010783a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010783d:	66 c7 80 82 00 00 00 	movw   $0x0,0x82(%eax)
80107844:	00 00 
80107846:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107849:	c6 80 84 00 00 00 00 	movb   $0x0,0x84(%eax)
80107850:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107853:	8a 90 85 00 00 00    	mov    0x85(%eax),%dl
80107859:	83 e2 f0             	and    $0xfffffff0,%edx
8010785c:	83 ca 02             	or     $0x2,%edx
8010785f:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
80107865:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107868:	8a 90 85 00 00 00    	mov    0x85(%eax),%dl
8010786e:	83 ca 10             	or     $0x10,%edx
80107871:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
80107877:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010787a:	8a 90 85 00 00 00    	mov    0x85(%eax),%dl
80107880:	83 e2 9f             	and    $0xffffff9f,%edx
80107883:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
80107889:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010788c:	8a 90 85 00 00 00    	mov    0x85(%eax),%dl
80107892:	83 ca 80             	or     $0xffffff80,%edx
80107895:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
8010789b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010789e:	8a 90 86 00 00 00    	mov    0x86(%eax),%dl
801078a4:	83 ca 0f             	or     $0xf,%edx
801078a7:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
801078ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078b0:	8a 90 86 00 00 00    	mov    0x86(%eax),%dl
801078b6:	83 e2 ef             	and    $0xffffffef,%edx
801078b9:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
801078bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078c2:	8a 90 86 00 00 00    	mov    0x86(%eax),%dl
801078c8:	83 e2 df             	and    $0xffffffdf,%edx
801078cb:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
801078d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078d4:	8a 90 86 00 00 00    	mov    0x86(%eax),%dl
801078da:	83 ca 40             	or     $0x40,%edx
801078dd:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
801078e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078e6:	8a 90 86 00 00 00    	mov    0x86(%eax),%dl
801078ec:	83 ca 80             	or     $0xffffff80,%edx
801078ef:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
801078f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078f8:	c6 80 87 00 00 00 00 	movb   $0x0,0x87(%eax)
  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
801078ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107902:	66 c7 80 90 00 00 00 	movw   $0xffff,0x90(%eax)
80107909:	ff ff 
8010790b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010790e:	66 c7 80 92 00 00 00 	movw   $0x0,0x92(%eax)
80107915:	00 00 
80107917:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010791a:	c6 80 94 00 00 00 00 	movb   $0x0,0x94(%eax)
80107921:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107924:	8a 90 95 00 00 00    	mov    0x95(%eax),%dl
8010792a:	83 e2 f0             	and    $0xfffffff0,%edx
8010792d:	83 ca 0a             	or     $0xa,%edx
80107930:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
80107936:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107939:	8a 90 95 00 00 00    	mov    0x95(%eax),%dl
8010793f:	83 ca 10             	or     $0x10,%edx
80107942:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
80107948:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010794b:	8a 90 95 00 00 00    	mov    0x95(%eax),%dl
80107951:	83 ca 60             	or     $0x60,%edx
80107954:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
8010795a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010795d:	8a 90 95 00 00 00    	mov    0x95(%eax),%dl
80107963:	83 ca 80             	or     $0xffffff80,%edx
80107966:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
8010796c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010796f:	8a 90 96 00 00 00    	mov    0x96(%eax),%dl
80107975:	83 ca 0f             	or     $0xf,%edx
80107978:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
8010797e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107981:	8a 90 96 00 00 00    	mov    0x96(%eax),%dl
80107987:	83 e2 ef             	and    $0xffffffef,%edx
8010798a:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
80107990:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107993:	8a 90 96 00 00 00    	mov    0x96(%eax),%dl
80107999:	83 e2 df             	and    $0xffffffdf,%edx
8010799c:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
801079a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079a5:	8a 90 96 00 00 00    	mov    0x96(%eax),%dl
801079ab:	83 ca 40             	or     $0x40,%edx
801079ae:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
801079b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079b7:	8a 90 96 00 00 00    	mov    0x96(%eax),%dl
801079bd:	83 ca 80             	or     $0xffffff80,%edx
801079c0:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
801079c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079c9:	c6 80 97 00 00 00 00 	movb   $0x0,0x97(%eax)
  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
801079d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079d3:	66 c7 80 98 00 00 00 	movw   $0xffff,0x98(%eax)
801079da:	ff ff 
801079dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079df:	66 c7 80 9a 00 00 00 	movw   $0x0,0x9a(%eax)
801079e6:	00 00 
801079e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079eb:	c6 80 9c 00 00 00 00 	movb   $0x0,0x9c(%eax)
801079f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801079f5:	8a 90 9d 00 00 00    	mov    0x9d(%eax),%dl
801079fb:	83 e2 f0             	and    $0xfffffff0,%edx
801079fe:	83 ca 02             	or     $0x2,%edx
80107a01:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
80107a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a0a:	8a 90 9d 00 00 00    	mov    0x9d(%eax),%dl
80107a10:	83 ca 10             	or     $0x10,%edx
80107a13:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
80107a19:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a1c:	8a 90 9d 00 00 00    	mov    0x9d(%eax),%dl
80107a22:	83 ca 60             	or     $0x60,%edx
80107a25:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
80107a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a2e:	8a 90 9d 00 00 00    	mov    0x9d(%eax),%dl
80107a34:	83 ca 80             	or     $0xffffff80,%edx
80107a37:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
80107a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a40:	8a 90 9e 00 00 00    	mov    0x9e(%eax),%dl
80107a46:	83 ca 0f             	or     $0xf,%edx
80107a49:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a52:	8a 90 9e 00 00 00    	mov    0x9e(%eax),%dl
80107a58:	83 e2 ef             	and    $0xffffffef,%edx
80107a5b:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a64:	8a 90 9e 00 00 00    	mov    0x9e(%eax),%dl
80107a6a:	83 e2 df             	and    $0xffffffdf,%edx
80107a6d:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a76:	8a 90 9e 00 00 00    	mov    0x9e(%eax),%dl
80107a7c:	83 ca 40             	or     $0x40,%edx
80107a7f:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a88:	8a 90 9e 00 00 00    	mov    0x9e(%eax),%dl
80107a8e:	83 ca 80             	or     $0xffffff80,%edx
80107a91:	88 90 9e 00 00 00    	mov    %dl,0x9e(%eax)
80107a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107a9a:	c6 80 9f 00 00 00 00 	movb   $0x0,0x9f(%eax)

  // Map cpu, and curproc
  c->gdt[SEG_KCPU] = SEG(STA_W, &c->cpu, 8, 0);
80107aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107aa4:	05 b4 00 00 00       	add    $0xb4,%eax
80107aa9:	8b 55 f4             	mov    -0xc(%ebp),%edx
80107aac:	81 c2 b4 00 00 00    	add    $0xb4,%edx
80107ab2:	c1 ea 10             	shr    $0x10,%edx
80107ab5:	88 d3                	mov    %dl,%bl
80107ab7:	8b 55 f4             	mov    -0xc(%ebp),%edx
80107aba:	81 c2 b4 00 00 00    	add    $0xb4,%edx
80107ac0:	c1 ea 18             	shr    $0x18,%edx
80107ac3:	88 d1                	mov    %dl,%cl
80107ac5:	8b 55 f4             	mov    -0xc(%ebp),%edx
80107ac8:	66 c7 82 88 00 00 00 	movw   $0x0,0x88(%edx)
80107acf:	00 00 
80107ad1:	8b 55 f4             	mov    -0xc(%ebp),%edx
80107ad4:	66 89 82 8a 00 00 00 	mov    %ax,0x8a(%edx)
80107adb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107ade:	88 98 8c 00 00 00    	mov    %bl,0x8c(%eax)
80107ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107ae7:	8a 90 8d 00 00 00    	mov    0x8d(%eax),%dl
80107aed:	83 e2 f0             	and    $0xfffffff0,%edx
80107af0:	83 ca 02             	or     $0x2,%edx
80107af3:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
80107af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107afc:	8a 90 8d 00 00 00    	mov    0x8d(%eax),%dl
80107b02:	83 ca 10             	or     $0x10,%edx
80107b05:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
80107b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b0e:	8a 90 8d 00 00 00    	mov    0x8d(%eax),%dl
80107b14:	83 e2 9f             	and    $0xffffff9f,%edx
80107b17:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
80107b1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b20:	8a 90 8d 00 00 00    	mov    0x8d(%eax),%dl
80107b26:	83 ca 80             	or     $0xffffff80,%edx
80107b29:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
80107b2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b32:	8a 90 8e 00 00 00    	mov    0x8e(%eax),%dl
80107b38:	83 e2 f0             	and    $0xfffffff0,%edx
80107b3b:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b44:	8a 90 8e 00 00 00    	mov    0x8e(%eax),%dl
80107b4a:	83 e2 ef             	and    $0xffffffef,%edx
80107b4d:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b56:	8a 90 8e 00 00 00    	mov    0x8e(%eax),%dl
80107b5c:	83 e2 df             	and    $0xffffffdf,%edx
80107b5f:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b68:	8a 90 8e 00 00 00    	mov    0x8e(%eax),%dl
80107b6e:	83 ca 40             	or     $0x40,%edx
80107b71:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107b77:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b7a:	8a 90 8e 00 00 00    	mov    0x8e(%eax),%dl
80107b80:	83 ca 80             	or     $0xffffff80,%edx
80107b83:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80107b89:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b8c:	88 88 8f 00 00 00    	mov    %cl,0x8f(%eax)

  lgdt(c->gdt, sizeof(c->gdt));
80107b92:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b95:	83 c0 70             	add    $0x70,%eax
80107b98:	83 ec 08             	sub    $0x8,%esp
80107b9b:	6a 38                	push   $0x38
80107b9d:	50                   	push   %eax
80107b9e:	e8 5d fb ff ff       	call   80107700 <lgdt>
80107ba3:	83 c4 10             	add    $0x10,%esp
  loadgs(SEG_KCPU << 3);
80107ba6:	83 ec 0c             	sub    $0xc,%esp
80107ba9:	6a 18                	push   $0x18
80107bab:	e8 8c fb ff ff       	call   8010773c <loadgs>
80107bb0:	83 c4 10             	add    $0x10,%esp
  
  // Initialize cpu-local storage.
  cpu = c;
80107bb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107bb6:	65 a3 00 00 00 00    	mov    %eax,%gs:0x0
  proc = 0;
80107bbc:	65 c7 05 04 00 00 00 	movl   $0x0,%gs:0x4
80107bc3:	00 00 00 00 
}
80107bc7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107bca:	c9                   	leave  
80107bcb:	c3                   	ret    

80107bcc <walkpgdir>:
// Return the address of the PTE in page table pgdir
// that corresponds to virtual address va.  If alloc!=0,
// create any required page table pages.
static pte_t *
walkpgdir(pde_t *pgdir, const void *va, int alloc)
{
80107bcc:	55                   	push   %ebp
80107bcd:	89 e5                	mov    %esp,%ebp
80107bcf:	83 ec 18             	sub    $0x18,%esp
  pde_t *pde;
  pte_t *pgtab;

  pde = &pgdir[PDX(va)];
80107bd2:	8b 45 0c             	mov    0xc(%ebp),%eax
80107bd5:	c1 e8 16             	shr    $0x16,%eax
80107bd8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80107bdf:	8b 45 08             	mov    0x8(%ebp),%eax
80107be2:	01 d0                	add    %edx,%eax
80107be4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  if(*pde & PTE_P){
80107be7:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107bea:	8b 00                	mov    (%eax),%eax
80107bec:	83 e0 01             	and    $0x1,%eax
80107bef:	85 c0                	test   %eax,%eax
80107bf1:	74 18                	je     80107c0b <walkpgdir+0x3f>
    pgtab = (pte_t*)p2v(PTE_ADDR(*pde));
80107bf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107bf6:	8b 00                	mov    (%eax),%eax
80107bf8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80107bfd:	50                   	push   %eax
80107bfe:	e8 65 fb ff ff       	call   80107768 <p2v>
80107c03:	83 c4 04             	add    $0x4,%esp
80107c06:	89 45 f4             	mov    %eax,-0xc(%ebp)
80107c09:	eb 48                	jmp    80107c53 <walkpgdir+0x87>
  } else {
    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
80107c0b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80107c0f:	74 0e                	je     80107c1f <walkpgdir+0x53>
80107c11:	e8 4b ba ff ff       	call   80103661 <kalloc>
80107c16:	89 45 f4             	mov    %eax,-0xc(%ebp)
80107c19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80107c1d:	75 07                	jne    80107c26 <walkpgdir+0x5a>
      return 0;
80107c1f:	b8 00 00 00 00       	mov    $0x0,%eax
80107c24:	eb 44                	jmp    80107c6a <walkpgdir+0x9e>
    // Make sure all those PTE_P bits are zero.
    memset(pgtab, 0, PGSIZE);
80107c26:	83 ec 04             	sub    $0x4,%esp
80107c29:	68 00 10 00 00       	push   $0x1000
80107c2e:	6a 00                	push   $0x0
80107c30:	ff 75 f4             	pushl  -0xc(%ebp)
80107c33:	e8 28 e1 ff ff       	call   80105d60 <memset>
80107c38:	83 c4 10             	add    $0x10,%esp
    // The permissions here are overly generous, but they can
    // be further restricted by the permissions in the page table 
    // entries, if necessary.
    *pde = v2p(pgtab) | PTE_P | PTE_W | PTE_U;
80107c3b:	83 ec 0c             	sub    $0xc,%esp
80107c3e:	ff 75 f4             	pushl  -0xc(%ebp)
80107c41:	e8 15 fb ff ff       	call   8010775b <v2p>
80107c46:	83 c4 10             	add    $0x10,%esp
80107c49:	83 c8 07             	or     $0x7,%eax
80107c4c:	89 c2                	mov    %eax,%edx
80107c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107c51:	89 10                	mov    %edx,(%eax)
  }
  return &pgtab[PTX(va)];
80107c53:	8b 45 0c             	mov    0xc(%ebp),%eax
80107c56:	c1 e8 0c             	shr    $0xc,%eax
80107c59:	25 ff 03 00 00       	and    $0x3ff,%eax
80107c5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80107c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107c68:	01 d0                	add    %edx,%eax
}
80107c6a:	c9                   	leave  
80107c6b:	c3                   	ret    

80107c6c <mappages>:
// Create PTEs for virtual addresses starting at va that refer to
// physical addresses starting at pa. va and size might not
// be page-aligned.
static int
mappages(pde_t *pgdir, void *va, uintp size, uintp pa, int perm)
{
80107c6c:	55                   	push   %ebp
80107c6d:	89 e5                	mov    %esp,%ebp
80107c6f:	83 ec 18             	sub    $0x18,%esp
  char *a, *last;
  pte_t *pte;
  
  a = (char*)PGROUNDDOWN((uintp)va);
80107c72:	8b 45 0c             	mov    0xc(%ebp),%eax
80107c75:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80107c7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  last = (char*)PGROUNDDOWN(((uintp)va) + size - 1);
80107c7d:	8b 55 0c             	mov    0xc(%ebp),%edx
80107c80:	8b 45 10             	mov    0x10(%ebp),%eax
80107c83:	01 d0                	add    %edx,%eax
80107c85:	48                   	dec    %eax
80107c86:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80107c8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
  for(;;){
    if((pte = walkpgdir(pgdir, a, 1)) == 0)
80107c8e:	83 ec 04             	sub    $0x4,%esp
80107c91:	6a 01                	push   $0x1
80107c93:	ff 75 f4             	pushl  -0xc(%ebp)
80107c96:	ff 75 08             	pushl  0x8(%ebp)
80107c99:	e8 2e ff ff ff       	call   80107bcc <walkpgdir>
80107c9e:	83 c4 10             	add    $0x10,%esp
80107ca1:	89 45 ec             	mov    %eax,-0x14(%ebp)
80107ca4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80107ca8:	75 07                	jne    80107cb1 <mappages+0x45>
      return -1;
80107caa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107caf:	eb 49                	jmp    80107cfa <mappages+0x8e>
    if(*pte & PTE_P)
80107cb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
80107cb4:	8b 00                	mov    (%eax),%eax
80107cb6:	83 e0 01             	and    $0x1,%eax
80107cb9:	85 c0                	test   %eax,%eax
80107cbb:	74 0d                	je     80107cca <mappages+0x5e>
      panic("remap");
80107cbd:	83 ec 0c             	sub    $0xc,%esp
80107cc0:	68 38 8b 10 80       	push   $0x80108b38
80107cc5:	e8 c7 93 ff ff       	call   80101091 <panic>
    *pte = pa | perm | PTE_P;
80107cca:	8b 45 18             	mov    0x18(%ebp),%eax
80107ccd:	0b 45 14             	or     0x14(%ebp),%eax
80107cd0:	83 c8 01             	or     $0x1,%eax
80107cd3:	89 c2                	mov    %eax,%edx
80107cd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
80107cd8:	89 10                	mov    %edx,(%eax)
    if(a == last)
80107cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107cdd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80107ce0:	75 08                	jne    80107cea <mappages+0x7e>
      break;
80107ce2:	90                   	nop
    a += PGSIZE;
    pa += PGSIZE;
  }
  return 0;
80107ce3:	b8 00 00 00 00       	mov    $0x0,%eax
80107ce8:	eb 10                	jmp    80107cfa <mappages+0x8e>
    if(*pte & PTE_P)
      panic("remap");
    *pte = pa | perm | PTE_P;
    if(a == last)
      break;
    a += PGSIZE;
80107cea:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    pa += PGSIZE;
80107cf1:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
  }
80107cf8:	eb 94                	jmp    80107c8e <mappages+0x22>
  return 0;
}
80107cfa:	c9                   	leave  
80107cfb:	c3                   	ret    

80107cfc <setupkvm>:
};

// Set up kernel part of a page table.
pde_t*
setupkvm(void)
{
80107cfc:	55                   	push   %ebp
80107cfd:	89 e5                	mov    %esp,%ebp
80107cff:	53                   	push   %ebx
80107d00:	83 ec 14             	sub    $0x14,%esp
  pde_t *pgdir;
  struct kmap *k;

  if((pgdir = (pde_t*)kalloc()) == 0)
80107d03:	e8 59 b9 ff ff       	call   80103661 <kalloc>
80107d08:	89 45 f0             	mov    %eax,-0x10(%ebp)
80107d0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80107d0f:	75 0a                	jne    80107d1b <setupkvm+0x1f>
    return 0;
80107d11:	b8 00 00 00 00       	mov    $0x0,%eax
80107d16:	e9 8e 00 00 00       	jmp    80107da9 <setupkvm+0xad>
  memset(pgdir, 0, PGSIZE);
80107d1b:	83 ec 04             	sub    $0x4,%esp
80107d1e:	68 00 10 00 00       	push   $0x1000
80107d23:	6a 00                	push   $0x0
80107d25:	ff 75 f0             	pushl  -0x10(%ebp)
80107d28:	e8 33 e0 ff ff       	call   80105d60 <memset>
80107d2d:	83 c4 10             	add    $0x10,%esp
  if (p2v(PHYSTOP) > (void*)DEVSPACE)
80107d30:	83 ec 0c             	sub    $0xc,%esp
80107d33:	68 00 00 00 0e       	push   $0xe000000
80107d38:	e8 2b fa ff ff       	call   80107768 <p2v>
80107d3d:	83 c4 10             	add    $0x10,%esp
80107d40:	3d 00 00 00 fe       	cmp    $0xfe000000,%eax
80107d45:	76 0d                	jbe    80107d54 <setupkvm+0x58>
    panic("PHYSTOP too high");
80107d47:	83 ec 0c             	sub    $0xc,%esp
80107d4a:	68 3e 8b 10 80       	push   $0x80108b3e
80107d4f:	e8 3d 93 ff ff       	call   80101091 <panic>
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
80107d54:	c7 45 f4 a0 b0 10 80 	movl   $0x8010b0a0,-0xc(%ebp)
80107d5b:	eb 40                	jmp    80107d9d <setupkvm+0xa1>
    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
80107d5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107d60:	8b 48 0c             	mov    0xc(%eax),%ecx
80107d63:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107d66:	8b 50 04             	mov    0x4(%eax),%edx
80107d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107d6c:	8b 58 08             	mov    0x8(%eax),%ebx
80107d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107d72:	8b 40 04             	mov    0x4(%eax),%eax
80107d75:	29 c3                	sub    %eax,%ebx
80107d77:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107d7a:	8b 00                	mov    (%eax),%eax
80107d7c:	83 ec 0c             	sub    $0xc,%esp
80107d7f:	51                   	push   %ecx
80107d80:	52                   	push   %edx
80107d81:	53                   	push   %ebx
80107d82:	50                   	push   %eax
80107d83:	ff 75 f0             	pushl  -0x10(%ebp)
80107d86:	e8 e1 fe ff ff       	call   80107c6c <mappages>
80107d8b:	83 c4 20             	add    $0x20,%esp
80107d8e:	85 c0                	test   %eax,%eax
80107d90:	79 07                	jns    80107d99 <setupkvm+0x9d>
                (uint)k->phys_start, k->perm) < 0)
      return 0;
80107d92:	b8 00 00 00 00       	mov    $0x0,%eax
80107d97:	eb 10                	jmp    80107da9 <setupkvm+0xad>
  if((pgdir = (pde_t*)kalloc()) == 0)
    return 0;
  memset(pgdir, 0, PGSIZE);
  if (p2v(PHYSTOP) > (void*)DEVSPACE)
    panic("PHYSTOP too high");
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
80107d99:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
80107d9d:	81 7d f4 e0 b0 10 80 	cmpl   $0x8010b0e0,-0xc(%ebp)
80107da4:	72 b7                	jb     80107d5d <setupkvm+0x61>
    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start, 
                (uint)k->phys_start, k->perm) < 0)
      return 0;
  return pgdir;
80107da6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80107da9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107dac:	c9                   	leave  
80107dad:	c3                   	ret    

80107dae <kvmalloc>:

// Allocate one page table for the machine for the kernel address
// space for scheduler processes.
void
kvmalloc(void)
{
80107dae:	55                   	push   %ebp
80107daf:	89 e5                	mov    %esp,%ebp
80107db1:	83 ec 08             	sub    $0x8,%esp
  kpgdir = setupkvm();
80107db4:	e8 43 ff ff ff       	call   80107cfc <setupkvm>
80107db9:	a3 80 12 11 80       	mov    %eax,0x80111280
  switchkvm();
80107dbe:	e8 02 00 00 00       	call   80107dc5 <switchkvm>
}
80107dc3:	c9                   	leave  
80107dc4:	c3                   	ret    

80107dc5 <switchkvm>:

// Switch h/w page table register to the kernel-only page table,
// for when no process is running.
void
switchkvm(void)
{
80107dc5:	55                   	push   %ebp
80107dc6:	89 e5                	mov    %esp,%ebp
  lcr3(v2p(kpgdir));   // switch to the kernel page table
80107dc8:	a1 80 12 11 80       	mov    0x80111280,%eax
80107dcd:	50                   	push   %eax
80107dce:	e8 88 f9 ff ff       	call   8010775b <v2p>
80107dd3:	83 c4 04             	add    $0x4,%esp
80107dd6:	50                   	push   %eax
80107dd7:	e8 74 f9 ff ff       	call   80107750 <lcr3>
80107ddc:	83 c4 04             	add    $0x4,%esp
}
80107ddf:	c9                   	leave  
80107de0:	c3                   	ret    

80107de1 <switchuvm>:

// Switch TSS and h/w page table to correspond to process p.
void
switchuvm(struct proc *p)
{
80107de1:	55                   	push   %ebp
80107de2:	89 e5                	mov    %esp,%ebp
80107de4:	53                   	push   %ebx
80107de5:	83 ec 04             	sub    $0x4,%esp
  pushcli();
80107de8:	e8 73 de ff ff       	call   80105c60 <pushcli>
  cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
80107ded:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80107df3:	65 8b 15 00 00 00 00 	mov    %gs:0x0,%edx
80107dfa:	83 c2 08             	add    $0x8,%edx
80107dfd:	65 8b 0d 00 00 00 00 	mov    %gs:0x0,%ecx
80107e04:	83 c1 08             	add    $0x8,%ecx
80107e07:	c1 e9 10             	shr    $0x10,%ecx
80107e0a:	88 cb                	mov    %cl,%bl
80107e0c:	65 8b 0d 00 00 00 00 	mov    %gs:0x0,%ecx
80107e13:	83 c1 08             	add    $0x8,%ecx
80107e16:	c1 e9 18             	shr    $0x18,%ecx
80107e19:	66 c7 80 a0 00 00 00 	movw   $0x67,0xa0(%eax)
80107e20:	67 00 
80107e22:	66 89 90 a2 00 00 00 	mov    %dx,0xa2(%eax)
80107e29:	88 98 a4 00 00 00    	mov    %bl,0xa4(%eax)
80107e2f:	8a 90 a5 00 00 00    	mov    0xa5(%eax),%dl
80107e35:	83 e2 f0             	and    $0xfffffff0,%edx
80107e38:	83 ca 09             	or     $0x9,%edx
80107e3b:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
80107e41:	8a 90 a5 00 00 00    	mov    0xa5(%eax),%dl
80107e47:	83 ca 10             	or     $0x10,%edx
80107e4a:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
80107e50:	8a 90 a5 00 00 00    	mov    0xa5(%eax),%dl
80107e56:	83 e2 9f             	and    $0xffffff9f,%edx
80107e59:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
80107e5f:	8a 90 a5 00 00 00    	mov    0xa5(%eax),%dl
80107e65:	83 ca 80             	or     $0xffffff80,%edx
80107e68:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
80107e6e:	8a 90 a6 00 00 00    	mov    0xa6(%eax),%dl
80107e74:	83 e2 f0             	and    $0xfffffff0,%edx
80107e77:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80107e7d:	8a 90 a6 00 00 00    	mov    0xa6(%eax),%dl
80107e83:	83 e2 ef             	and    $0xffffffef,%edx
80107e86:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80107e8c:	8a 90 a6 00 00 00    	mov    0xa6(%eax),%dl
80107e92:	83 e2 df             	and    $0xffffffdf,%edx
80107e95:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80107e9b:	8a 90 a6 00 00 00    	mov    0xa6(%eax),%dl
80107ea1:	83 ca 40             	or     $0x40,%edx
80107ea4:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80107eaa:	8a 90 a6 00 00 00    	mov    0xa6(%eax),%dl
80107eb0:	83 e2 7f             	and    $0x7f,%edx
80107eb3:	88 90 a6 00 00 00    	mov    %dl,0xa6(%eax)
80107eb9:	88 88 a7 00 00 00    	mov    %cl,0xa7(%eax)
  cpu->gdt[SEG_TSS].s = 0;
80107ebf:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80107ec5:	8a 90 a5 00 00 00    	mov    0xa5(%eax),%dl
80107ecb:	83 e2 ef             	and    $0xffffffef,%edx
80107ece:	88 90 a5 00 00 00    	mov    %dl,0xa5(%eax)
  cpu->ts.ss0 = SEG_KDATA << 3;
80107ed4:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80107eda:	66 c7 40 10 10 00    	movw   $0x10,0x10(%eax)
  cpu->ts.esp0 = (uintp)proc->kstack + KSTACKSIZE;
80107ee0:	65 a1 00 00 00 00    	mov    %gs:0x0,%eax
80107ee6:	65 8b 15 04 00 00 00 	mov    %gs:0x4,%edx
80107eed:	8b 52 08             	mov    0x8(%edx),%edx
80107ef0:	81 c2 00 10 00 00    	add    $0x1000,%edx
80107ef6:	89 50 0c             	mov    %edx,0xc(%eax)
  ltr(SEG_TSS << 3);
80107ef9:	83 ec 0c             	sub    $0xc,%esp
80107efc:	6a 30                	push   $0x30
80107efe:	e8 24 f8 ff ff       	call   80107727 <ltr>
80107f03:	83 c4 10             	add    $0x10,%esp
  if(p->pgdir == 0)
80107f06:	8b 45 08             	mov    0x8(%ebp),%eax
80107f09:	8b 40 04             	mov    0x4(%eax),%eax
80107f0c:	85 c0                	test   %eax,%eax
80107f0e:	75 0d                	jne    80107f1d <switchuvm+0x13c>
    panic("switchuvm: no pgdir");
80107f10:	83 ec 0c             	sub    $0xc,%esp
80107f13:	68 4f 8b 10 80       	push   $0x80108b4f
80107f18:	e8 74 91 ff ff       	call   80101091 <panic>
  lcr3(v2p(p->pgdir));  // switch to new address space
80107f1d:	8b 45 08             	mov    0x8(%ebp),%eax
80107f20:	8b 40 04             	mov    0x4(%eax),%eax
80107f23:	83 ec 0c             	sub    $0xc,%esp
80107f26:	50                   	push   %eax
80107f27:	e8 2f f8 ff ff       	call   8010775b <v2p>
80107f2c:	83 c4 10             	add    $0x10,%esp
80107f2f:	83 ec 0c             	sub    $0xc,%esp
80107f32:	50                   	push   %eax
80107f33:	e8 18 f8 ff ff       	call   80107750 <lcr3>
80107f38:	83 c4 10             	add    $0x10,%esp
  popcli();
80107f3b:	e8 64 dd ff ff       	call   80105ca4 <popcli>
}
80107f40:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107f43:	c9                   	leave  
80107f44:	c3                   	ret    

80107f45 <inituvm>:

// Load the initcode into address 0 of pgdir.
// sz must be less than a page.
void
inituvm(pde_t *pgdir, char *init, uint sz)
{
80107f45:	55                   	push   %ebp
80107f46:	89 e5                	mov    %esp,%ebp
80107f48:	83 ec 18             	sub    $0x18,%esp
  char *mem;
  
  if(sz >= PGSIZE)
80107f4b:	81 7d 10 ff 0f 00 00 	cmpl   $0xfff,0x10(%ebp)
80107f52:	76 0d                	jbe    80107f61 <inituvm+0x1c>
    panic("inituvm: more than a page");
80107f54:	83 ec 0c             	sub    $0xc,%esp
80107f57:	68 63 8b 10 80       	push   $0x80108b63
80107f5c:	e8 30 91 ff ff       	call   80101091 <panic>
  mem = kalloc();
80107f61:	e8 fb b6 ff ff       	call   80103661 <kalloc>
80107f66:	89 45 f4             	mov    %eax,-0xc(%ebp)
  memset(mem, 0, PGSIZE);
80107f69:	83 ec 04             	sub    $0x4,%esp
80107f6c:	68 00 10 00 00       	push   $0x1000
80107f71:	6a 00                	push   $0x0
80107f73:	ff 75 f4             	pushl  -0xc(%ebp)
80107f76:	e8 e5 dd ff ff       	call   80105d60 <memset>
80107f7b:	83 c4 10             	add    $0x10,%esp
  mappages(pgdir, 0, PGSIZE, v2p(mem), PTE_W|PTE_U);
80107f7e:	83 ec 0c             	sub    $0xc,%esp
80107f81:	ff 75 f4             	pushl  -0xc(%ebp)
80107f84:	e8 d2 f7 ff ff       	call   8010775b <v2p>
80107f89:	83 c4 10             	add    $0x10,%esp
80107f8c:	83 ec 0c             	sub    $0xc,%esp
80107f8f:	6a 06                	push   $0x6
80107f91:	50                   	push   %eax
80107f92:	68 00 10 00 00       	push   $0x1000
80107f97:	6a 00                	push   $0x0
80107f99:	ff 75 08             	pushl  0x8(%ebp)
80107f9c:	e8 cb fc ff ff       	call   80107c6c <mappages>
80107fa1:	83 c4 20             	add    $0x20,%esp
  memmove(mem, init, sz);
80107fa4:	83 ec 04             	sub    $0x4,%esp
80107fa7:	ff 75 10             	pushl  0x10(%ebp)
80107faa:	ff 75 0c             	pushl  0xc(%ebp)
80107fad:	ff 75 f4             	pushl  -0xc(%ebp)
80107fb0:	e8 64 de ff ff       	call   80105e19 <memmove>
80107fb5:	83 c4 10             	add    $0x10,%esp
}
80107fb8:	c9                   	leave  
80107fb9:	c3                   	ret    

80107fba <loaduvm>:

// Load a program segment into pgdir.  addr must be page-aligned
// and the pages from addr to addr+sz must already be mapped.
int
loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
{
80107fba:	55                   	push   %ebp
80107fbb:	89 e5                	mov    %esp,%ebp
80107fbd:	53                   	push   %ebx
80107fbe:	83 ec 14             	sub    $0x14,%esp
  uint i, pa, n;
  pte_t *pte;

  if((uintp) addr % PGSIZE != 0)
80107fc1:	8b 45 0c             	mov    0xc(%ebp),%eax
80107fc4:	25 ff 0f 00 00       	and    $0xfff,%eax
80107fc9:	85 c0                	test   %eax,%eax
80107fcb:	74 0d                	je     80107fda <loaduvm+0x20>
    panic("loaduvm: addr must be page aligned");
80107fcd:	83 ec 0c             	sub    $0xc,%esp
80107fd0:	68 80 8b 10 80       	push   $0x80108b80
80107fd5:	e8 b7 90 ff ff       	call   80101091 <panic>
  for(i = 0; i < sz; i += PGSIZE){
80107fda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80107fe1:	e9 95 00 00 00       	jmp    8010807b <loaduvm+0xc1>
    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
80107fe6:	8b 55 0c             	mov    0xc(%ebp),%edx
80107fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107fec:	01 d0                	add    %edx,%eax
80107fee:	83 ec 04             	sub    $0x4,%esp
80107ff1:	6a 00                	push   $0x0
80107ff3:	50                   	push   %eax
80107ff4:	ff 75 08             	pushl  0x8(%ebp)
80107ff7:	e8 d0 fb ff ff       	call   80107bcc <walkpgdir>
80107ffc:	83 c4 10             	add    $0x10,%esp
80107fff:	89 45 ec             	mov    %eax,-0x14(%ebp)
80108002:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80108006:	75 0d                	jne    80108015 <loaduvm+0x5b>
      panic("loaduvm: address should exist");
80108008:	83 ec 0c             	sub    $0xc,%esp
8010800b:	68 a3 8b 10 80       	push   $0x80108ba3
80108010:	e8 7c 90 ff ff       	call   80101091 <panic>
    pa = PTE_ADDR(*pte);
80108015:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108018:	8b 00                	mov    (%eax),%eax
8010801a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010801f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(sz - i < PGSIZE)
80108022:	8b 45 18             	mov    0x18(%ebp),%eax
80108025:	2b 45 f4             	sub    -0xc(%ebp),%eax
80108028:	3d ff 0f 00 00       	cmp    $0xfff,%eax
8010802d:	77 0b                	ja     8010803a <loaduvm+0x80>
      n = sz - i;
8010802f:	8b 45 18             	mov    0x18(%ebp),%eax
80108032:	2b 45 f4             	sub    -0xc(%ebp),%eax
80108035:	89 45 f0             	mov    %eax,-0x10(%ebp)
80108038:	eb 07                	jmp    80108041 <loaduvm+0x87>
    else
      n = PGSIZE;
8010803a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    if(readi(ip, p2v(pa), offset+i, n) != n)
80108041:	8b 55 14             	mov    0x14(%ebp),%edx
80108044:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108047:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
8010804a:	83 ec 0c             	sub    $0xc,%esp
8010804d:	ff 75 e8             	pushl  -0x18(%ebp)
80108050:	e8 13 f7 ff ff       	call   80107768 <p2v>
80108055:	83 c4 10             	add    $0x10,%esp
80108058:	ff 75 f0             	pushl  -0x10(%ebp)
8010805b:	53                   	push   %ebx
8010805c:	50                   	push   %eax
8010805d:	ff 75 10             	pushl  0x10(%ebp)
80108060:	e8 c6 a8 ff ff       	call   8010292b <readi>
80108065:	83 c4 10             	add    $0x10,%esp
80108068:	3b 45 f0             	cmp    -0x10(%ebp),%eax
8010806b:	74 07                	je     80108074 <loaduvm+0xba>
      return -1;
8010806d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80108072:	eb 18                	jmp    8010808c <loaduvm+0xd2>
  uint i, pa, n;
  pte_t *pte;

  if((uintp) addr % PGSIZE != 0)
    panic("loaduvm: addr must be page aligned");
  for(i = 0; i < sz; i += PGSIZE){
80108074:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
8010807b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010807e:	3b 45 18             	cmp    0x18(%ebp),%eax
80108081:	0f 82 5f ff ff ff    	jb     80107fe6 <loaduvm+0x2c>
    else
      n = PGSIZE;
    if(readi(ip, p2v(pa), offset+i, n) != n)
      return -1;
  }
  return 0;
80108087:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010808c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010808f:	c9                   	leave  
80108090:	c3                   	ret    

80108091 <allocuvm>:

// Allocate page tables and physical memory to grow process from oldsz to
// newsz, which need not be page aligned.  Returns new size or 0 on error.
int
allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
{
80108091:	55                   	push   %ebp
80108092:	89 e5                	mov    %esp,%ebp
80108094:	83 ec 18             	sub    $0x18,%esp
  char *mem;
  uintp a;

  if(newsz >= KERNBASE)
80108097:	8b 45 10             	mov    0x10(%ebp),%eax
8010809a:	85 c0                	test   %eax,%eax
8010809c:	79 0a                	jns    801080a8 <allocuvm+0x17>
    return 0;
8010809e:	b8 00 00 00 00       	mov    $0x0,%eax
801080a3:	e9 b0 00 00 00       	jmp    80108158 <allocuvm+0xc7>
  if(newsz < oldsz)
801080a8:	8b 45 10             	mov    0x10(%ebp),%eax
801080ab:	3b 45 0c             	cmp    0xc(%ebp),%eax
801080ae:	73 08                	jae    801080b8 <allocuvm+0x27>
    return oldsz;
801080b0:	8b 45 0c             	mov    0xc(%ebp),%eax
801080b3:	e9 a0 00 00 00       	jmp    80108158 <allocuvm+0xc7>

  a = PGROUNDUP(oldsz);
801080b8:	8b 45 0c             	mov    0xc(%ebp),%eax
801080bb:	05 ff 0f 00 00       	add    $0xfff,%eax
801080c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801080c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for(; a < newsz; a += PGSIZE){
801080c8:	eb 7f                	jmp    80108149 <allocuvm+0xb8>
    mem = kalloc();
801080ca:	e8 92 b5 ff ff       	call   80103661 <kalloc>
801080cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(mem == 0){
801080d2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801080d6:	75 2b                	jne    80108103 <allocuvm+0x72>
      cprintf("allocuvm out of memory\n");
801080d8:	83 ec 0c             	sub    $0xc,%esp
801080db:	68 c1 8b 10 80       	push   $0x80108bc1
801080e0:	e8 fb 8d ff ff       	call   80100ee0 <cprintf>
801080e5:	83 c4 10             	add    $0x10,%esp
      deallocuvm(pgdir, newsz, oldsz);
801080e8:	83 ec 04             	sub    $0x4,%esp
801080eb:	ff 75 0c             	pushl  0xc(%ebp)
801080ee:	ff 75 10             	pushl  0x10(%ebp)
801080f1:	ff 75 08             	pushl  0x8(%ebp)
801080f4:	e8 61 00 00 00       	call   8010815a <deallocuvm>
801080f9:	83 c4 10             	add    $0x10,%esp
      return 0;
801080fc:	b8 00 00 00 00       	mov    $0x0,%eax
80108101:	eb 55                	jmp    80108158 <allocuvm+0xc7>
    }
    memset(mem, 0, PGSIZE);
80108103:	83 ec 04             	sub    $0x4,%esp
80108106:	68 00 10 00 00       	push   $0x1000
8010810b:	6a 00                	push   $0x0
8010810d:	ff 75 f0             	pushl  -0x10(%ebp)
80108110:	e8 4b dc ff ff       	call   80105d60 <memset>
80108115:	83 c4 10             	add    $0x10,%esp
    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
80108118:	83 ec 0c             	sub    $0xc,%esp
8010811b:	ff 75 f0             	pushl  -0x10(%ebp)
8010811e:	e8 38 f6 ff ff       	call   8010775b <v2p>
80108123:	83 c4 10             	add    $0x10,%esp
80108126:	89 c2                	mov    %eax,%edx
80108128:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010812b:	83 ec 0c             	sub    $0xc,%esp
8010812e:	6a 06                	push   $0x6
80108130:	52                   	push   %edx
80108131:	68 00 10 00 00       	push   $0x1000
80108136:	50                   	push   %eax
80108137:	ff 75 08             	pushl  0x8(%ebp)
8010813a:	e8 2d fb ff ff       	call   80107c6c <mappages>
8010813f:	83 c4 20             	add    $0x20,%esp
    return 0;
  if(newsz < oldsz)
    return oldsz;

  a = PGROUNDUP(oldsz);
  for(; a < newsz; a += PGSIZE){
80108142:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80108149:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010814c:	3b 45 10             	cmp    0x10(%ebp),%eax
8010814f:	0f 82 75 ff ff ff    	jb     801080ca <allocuvm+0x39>
      return 0;
    }
    memset(mem, 0, PGSIZE);
    mappages(pgdir, (char*)a, PGSIZE, v2p(mem), PTE_W|PTE_U);
  }
  return newsz;
80108155:	8b 45 10             	mov    0x10(%ebp),%eax
}
80108158:	c9                   	leave  
80108159:	c3                   	ret    

8010815a <deallocuvm>:
// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
// need to be less than oldsz.  oldsz can be larger than the actual
// process size.  Returns the new process size.
int
deallocuvm(pde_t *pgdir, uintp oldsz, uintp newsz)
{
8010815a:	55                   	push   %ebp
8010815b:	89 e5                	mov    %esp,%ebp
8010815d:	83 ec 18             	sub    $0x18,%esp
  pte_t *pte;
  uintp a, pa;

  if(newsz >= oldsz)
80108160:	8b 45 10             	mov    0x10(%ebp),%eax
80108163:	3b 45 0c             	cmp    0xc(%ebp),%eax
80108166:	72 08                	jb     80108170 <deallocuvm+0x16>
    return oldsz;
80108168:	8b 45 0c             	mov    0xc(%ebp),%eax
8010816b:	e9 a5 00 00 00       	jmp    80108215 <deallocuvm+0xbb>

  a = PGROUNDUP(newsz);
80108170:	8b 45 10             	mov    0x10(%ebp),%eax
80108173:	05 ff 0f 00 00       	add    $0xfff,%eax
80108178:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010817d:	89 45 f4             	mov    %eax,-0xc(%ebp)
  for(; a  < oldsz; a += PGSIZE){
80108180:	e9 81 00 00 00       	jmp    80108206 <deallocuvm+0xac>
    pte = walkpgdir(pgdir, (char*)a, 0);
80108185:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108188:	83 ec 04             	sub    $0x4,%esp
8010818b:	6a 00                	push   $0x0
8010818d:	50                   	push   %eax
8010818e:	ff 75 08             	pushl  0x8(%ebp)
80108191:	e8 36 fa ff ff       	call   80107bcc <walkpgdir>
80108196:	83 c4 10             	add    $0x10,%esp
80108199:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(!pte)
8010819c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801081a0:	75 09                	jne    801081ab <deallocuvm+0x51>
      a += (NPTENTRIES - 1) * PGSIZE;
801081a2:	81 45 f4 00 f0 3f 00 	addl   $0x3ff000,-0xc(%ebp)
801081a9:	eb 54                	jmp    801081ff <deallocuvm+0xa5>
    else if((*pte & PTE_P) != 0){
801081ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
801081ae:	8b 00                	mov    (%eax),%eax
801081b0:	83 e0 01             	and    $0x1,%eax
801081b3:	85 c0                	test   %eax,%eax
801081b5:	74 48                	je     801081ff <deallocuvm+0xa5>
      pa = PTE_ADDR(*pte);
801081b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
801081ba:	8b 00                	mov    (%eax),%eax
801081bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801081c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(pa == 0)
801081c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
801081c8:	75 0d                	jne    801081d7 <deallocuvm+0x7d>
        panic("kfree");
801081ca:	83 ec 0c             	sub    $0xc,%esp
801081cd:	68 d9 8b 10 80       	push   $0x80108bd9
801081d2:	e8 ba 8e ff ff       	call   80101091 <panic>
      char *v = p2v(pa);
801081d7:	83 ec 0c             	sub    $0xc,%esp
801081da:	ff 75 ec             	pushl  -0x14(%ebp)
801081dd:	e8 86 f5 ff ff       	call   80107768 <p2v>
801081e2:	83 c4 10             	add    $0x10,%esp
801081e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
      kfree(v);
801081e8:	83 ec 0c             	sub    $0xc,%esp
801081eb:	ff 75 e8             	pushl  -0x18(%ebp)
801081ee:	e8 d2 b3 ff ff       	call   801035c5 <kfree>
801081f3:	83 c4 10             	add    $0x10,%esp
      *pte = 0;
801081f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
801081f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

  if(newsz >= oldsz)
    return oldsz;

  a = PGROUNDUP(newsz);
  for(; a  < oldsz; a += PGSIZE){
801081ff:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80108206:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108209:	3b 45 0c             	cmp    0xc(%ebp),%eax
8010820c:	0f 82 73 ff ff ff    	jb     80108185 <deallocuvm+0x2b>
      char *v = p2v(pa);
      kfree(v);
      *pte = 0;
    }
  }
  return newsz;
80108212:	8b 45 10             	mov    0x10(%ebp),%eax
}
80108215:	c9                   	leave  
80108216:	c3                   	ret    

80108217 <freevm>:

// Free a page table and all the physical memory pages
// in the user part.
void
freevm(pde_t *pgdir)
{
80108217:	55                   	push   %ebp
80108218:	89 e5                	mov    %esp,%ebp
8010821a:	83 ec 18             	sub    $0x18,%esp
  uint i;
  if(pgdir == 0)
8010821d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80108221:	75 0d                	jne    80108230 <freevm+0x19>
    panic("freevm: no pgdir");
80108223:	83 ec 0c             	sub    $0xc,%esp
80108226:	68 df 8b 10 80       	push   $0x80108bdf
8010822b:	e8 61 8e ff ff       	call   80101091 <panic>
  deallocuvm(pgdir, 0x3fa00000, 0);
80108230:	83 ec 04             	sub    $0x4,%esp
80108233:	6a 00                	push   $0x0
80108235:	68 00 00 a0 3f       	push   $0x3fa00000
8010823a:	ff 75 08             	pushl  0x8(%ebp)
8010823d:	e8 18 ff ff ff       	call   8010815a <deallocuvm>
80108242:	83 c4 10             	add    $0x10,%esp
  for(i = 0; i < NPDENTRIES-2; i++){
80108245:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010824c:	eb 4e                	jmp    8010829c <freevm+0x85>
    if(pgdir[i] & PTE_P){
8010824e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108251:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80108258:	8b 45 08             	mov    0x8(%ebp),%eax
8010825b:	01 d0                	add    %edx,%eax
8010825d:	8b 00                	mov    (%eax),%eax
8010825f:	83 e0 01             	and    $0x1,%eax
80108262:	85 c0                	test   %eax,%eax
80108264:	74 33                	je     80108299 <freevm+0x82>
      char * v = p2v(PTE_ADDR(pgdir[i]));
80108266:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108269:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80108270:	8b 45 08             	mov    0x8(%ebp),%eax
80108273:	01 d0                	add    %edx,%eax
80108275:	8b 00                	mov    (%eax),%eax
80108277:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010827c:	83 ec 0c             	sub    $0xc,%esp
8010827f:	50                   	push   %eax
80108280:	e8 e3 f4 ff ff       	call   80107768 <p2v>
80108285:	83 c4 10             	add    $0x10,%esp
80108288:	89 45 f0             	mov    %eax,-0x10(%ebp)
      kfree(v);
8010828b:	83 ec 0c             	sub    $0xc,%esp
8010828e:	ff 75 f0             	pushl  -0x10(%ebp)
80108291:	e8 2f b3 ff ff       	call   801035c5 <kfree>
80108296:	83 c4 10             	add    $0x10,%esp
{
  uint i;
  if(pgdir == 0)
    panic("freevm: no pgdir");
  deallocuvm(pgdir, 0x3fa00000, 0);
  for(i = 0; i < NPDENTRIES-2; i++){
80108299:	ff 45 f4             	incl   -0xc(%ebp)
8010829c:	81 7d f4 fd 03 00 00 	cmpl   $0x3fd,-0xc(%ebp)
801082a3:	76 a9                	jbe    8010824e <freevm+0x37>
    if(pgdir[i] & PTE_P){
      char * v = p2v(PTE_ADDR(pgdir[i]));
      kfree(v);
    }
  }
  kfree((char*)pgdir);
801082a5:	83 ec 0c             	sub    $0xc,%esp
801082a8:	ff 75 08             	pushl  0x8(%ebp)
801082ab:	e8 15 b3 ff ff       	call   801035c5 <kfree>
801082b0:	83 c4 10             	add    $0x10,%esp
}
801082b3:	c9                   	leave  
801082b4:	c3                   	ret    

801082b5 <clearpteu>:

// Clear PTE_U on a page. Used to create an inaccessible
// page beneath the user stack.
void
clearpteu(pde_t *pgdir, char *uva)
{
801082b5:	55                   	push   %ebp
801082b6:	89 e5                	mov    %esp,%ebp
801082b8:	83 ec 18             	sub    $0x18,%esp
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
801082bb:	83 ec 04             	sub    $0x4,%esp
801082be:	6a 00                	push   $0x0
801082c0:	ff 75 0c             	pushl  0xc(%ebp)
801082c3:	ff 75 08             	pushl  0x8(%ebp)
801082c6:	e8 01 f9 ff ff       	call   80107bcc <walkpgdir>
801082cb:	83 c4 10             	add    $0x10,%esp
801082ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(pte == 0)
801082d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801082d5:	75 0d                	jne    801082e4 <clearpteu+0x2f>
    panic("clearpteu");
801082d7:	83 ec 0c             	sub    $0xc,%esp
801082da:	68 f0 8b 10 80       	push   $0x80108bf0
801082df:	e8 ad 8d ff ff       	call   80101091 <panic>
  *pte &= ~PTE_U;
801082e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082e7:	8b 00                	mov    (%eax),%eax
801082e9:	83 e0 fb             	and    $0xfffffffb,%eax
801082ec:	89 c2                	mov    %eax,%edx
801082ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082f1:	89 10                	mov    %edx,(%eax)
}
801082f3:	c9                   	leave  
801082f4:	c3                   	ret    

801082f5 <copyuvm>:

// Given a parent process's page table, create a copy
// of it for a child.
pde_t*
copyuvm(pde_t *pgdir, uint sz)
{
801082f5:	55                   	push   %ebp
801082f6:	89 e5                	mov    %esp,%ebp
801082f8:	53                   	push   %ebx
801082f9:	83 ec 24             	sub    $0x24,%esp
  pde_t *d;
  pte_t *pte;
  uintp pa, i, flags;
  char *mem;

  if((d = setupkvm()) == 0)
801082fc:	e8 fb f9 ff ff       	call   80107cfc <setupkvm>
80108301:	89 45 f0             	mov    %eax,-0x10(%ebp)
80108304:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80108308:	75 0a                	jne    80108314 <copyuvm+0x1f>
    return 0;
8010830a:	b8 00 00 00 00       	mov    $0x0,%eax
8010830f:	e9 f8 00 00 00       	jmp    8010840c <copyuvm+0x117>
  for(i = 0; i < sz; i += PGSIZE){
80108314:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010831b:	e9 c8 00 00 00       	jmp    801083e8 <copyuvm+0xf3>
    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
80108320:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108323:	83 ec 04             	sub    $0x4,%esp
80108326:	6a 00                	push   $0x0
80108328:	50                   	push   %eax
80108329:	ff 75 08             	pushl  0x8(%ebp)
8010832c:	e8 9b f8 ff ff       	call   80107bcc <walkpgdir>
80108331:	83 c4 10             	add    $0x10,%esp
80108334:	89 45 ec             	mov    %eax,-0x14(%ebp)
80108337:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
8010833b:	75 0d                	jne    8010834a <copyuvm+0x55>
      panic("copyuvm: pte should exist");
8010833d:	83 ec 0c             	sub    $0xc,%esp
80108340:	68 fa 8b 10 80       	push   $0x80108bfa
80108345:	e8 47 8d ff ff       	call   80101091 <panic>
    if(!(*pte & PTE_P))
8010834a:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010834d:	8b 00                	mov    (%eax),%eax
8010834f:	83 e0 01             	and    $0x1,%eax
80108352:	85 c0                	test   %eax,%eax
80108354:	75 0d                	jne    80108363 <copyuvm+0x6e>
      panic("copyuvm: page not present");
80108356:	83 ec 0c             	sub    $0xc,%esp
80108359:	68 14 8c 10 80       	push   $0x80108c14
8010835e:	e8 2e 8d ff ff       	call   80101091 <panic>
    pa = PTE_ADDR(*pte);
80108363:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108366:	8b 00                	mov    (%eax),%eax
80108368:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010836d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    flags = PTE_FLAGS(*pte);
80108370:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108373:	8b 00                	mov    (%eax),%eax
80108375:	25 ff 0f 00 00       	and    $0xfff,%eax
8010837a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if((mem = kalloc()) == 0)
8010837d:	e8 df b2 ff ff       	call   80103661 <kalloc>
80108382:	89 45 e0             	mov    %eax,-0x20(%ebp)
80108385:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
80108389:	75 02                	jne    8010838d <copyuvm+0x98>
      goto bad;
8010838b:	eb 6c                	jmp    801083f9 <copyuvm+0x104>
    memmove(mem, (char*)p2v(pa), PGSIZE);
8010838d:	83 ec 0c             	sub    $0xc,%esp
80108390:	ff 75 e8             	pushl  -0x18(%ebp)
80108393:	e8 d0 f3 ff ff       	call   80107768 <p2v>
80108398:	83 c4 10             	add    $0x10,%esp
8010839b:	83 ec 04             	sub    $0x4,%esp
8010839e:	68 00 10 00 00       	push   $0x1000
801083a3:	50                   	push   %eax
801083a4:	ff 75 e0             	pushl  -0x20(%ebp)
801083a7:	e8 6d da ff ff       	call   80105e19 <memmove>
801083ac:	83 c4 10             	add    $0x10,%esp
    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
801083af:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
801083b2:	83 ec 0c             	sub    $0xc,%esp
801083b5:	ff 75 e0             	pushl  -0x20(%ebp)
801083b8:	e8 9e f3 ff ff       	call   8010775b <v2p>
801083bd:	83 c4 10             	add    $0x10,%esp
801083c0:	89 c2                	mov    %eax,%edx
801083c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083c5:	83 ec 0c             	sub    $0xc,%esp
801083c8:	53                   	push   %ebx
801083c9:	52                   	push   %edx
801083ca:	68 00 10 00 00       	push   $0x1000
801083cf:	50                   	push   %eax
801083d0:	ff 75 f0             	pushl  -0x10(%ebp)
801083d3:	e8 94 f8 ff ff       	call   80107c6c <mappages>
801083d8:	83 c4 20             	add    $0x20,%esp
801083db:	85 c0                	test   %eax,%eax
801083dd:	79 02                	jns    801083e1 <copyuvm+0xec>
      goto bad;
801083df:	eb 18                	jmp    801083f9 <copyuvm+0x104>
  uintp pa, i, flags;
  char *mem;

  if((d = setupkvm()) == 0)
    return 0;
  for(i = 0; i < sz; i += PGSIZE){
801083e1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
801083e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083eb:	3b 45 0c             	cmp    0xc(%ebp),%eax
801083ee:	0f 82 2c ff ff ff    	jb     80108320 <copyuvm+0x2b>
      goto bad;
    memmove(mem, (char*)p2v(pa), PGSIZE);
    if(mappages(d, (void*)i, PGSIZE, v2p(mem), flags) < 0)
      goto bad;
  }
  return d;
801083f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
801083f7:	eb 13                	jmp    8010840c <copyuvm+0x117>

bad:
  freevm(d);
801083f9:	83 ec 0c             	sub    $0xc,%esp
801083fc:	ff 75 f0             	pushl  -0x10(%ebp)
801083ff:	e8 13 fe ff ff       	call   80108217 <freevm>
80108404:	83 c4 10             	add    $0x10,%esp
  return 0;
80108407:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010840c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010840f:	c9                   	leave  
80108410:	c3                   	ret    

80108411 <uva2ka>:

//PAGEBREAK!
// Map user virtual address to kernel address.
char*
uva2ka(pde_t *pgdir, char *uva)
{
80108411:	55                   	push   %ebp
80108412:	89 e5                	mov    %esp,%ebp
80108414:	83 ec 18             	sub    $0x18,%esp
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
80108417:	83 ec 04             	sub    $0x4,%esp
8010841a:	6a 00                	push   $0x0
8010841c:	ff 75 0c             	pushl  0xc(%ebp)
8010841f:	ff 75 08             	pushl  0x8(%ebp)
80108422:	e8 a5 f7 ff ff       	call   80107bcc <walkpgdir>
80108427:	83 c4 10             	add    $0x10,%esp
8010842a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if((*pte & PTE_P) == 0)
8010842d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108430:	8b 00                	mov    (%eax),%eax
80108432:	83 e0 01             	and    $0x1,%eax
80108435:	85 c0                	test   %eax,%eax
80108437:	75 07                	jne    80108440 <uva2ka+0x2f>
    return 0;
80108439:	b8 00 00 00 00       	mov    $0x0,%eax
8010843e:	eb 29                	jmp    80108469 <uva2ka+0x58>
  if((*pte & PTE_U) == 0)
80108440:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108443:	8b 00                	mov    (%eax),%eax
80108445:	83 e0 04             	and    $0x4,%eax
80108448:	85 c0                	test   %eax,%eax
8010844a:	75 07                	jne    80108453 <uva2ka+0x42>
    return 0;
8010844c:	b8 00 00 00 00       	mov    $0x0,%eax
80108451:	eb 16                	jmp    80108469 <uva2ka+0x58>
  return (char*)p2v(PTE_ADDR(*pte));
80108453:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108456:	8b 00                	mov    (%eax),%eax
80108458:	25 00 f0 ff ff       	and    $0xfffff000,%eax
8010845d:	83 ec 0c             	sub    $0xc,%esp
80108460:	50                   	push   %eax
80108461:	e8 02 f3 ff ff       	call   80107768 <p2v>
80108466:	83 c4 10             	add    $0x10,%esp
}
80108469:	c9                   	leave  
8010846a:	c3                   	ret    

8010846b <copyout>:
// Copy len bytes from p to user address va in page table pgdir.
// Most useful when pgdir is not the current page table.
// uva2ka ensures this only works for PTE_U pages.
int
copyout(pde_t *pgdir, uint va, void *p, uint len)
{
8010846b:	55                   	push   %ebp
8010846c:	89 e5                	mov    %esp,%ebp
8010846e:	83 ec 18             	sub    $0x18,%esp
  char *buf, *pa0;
  uintp n, va0;

  buf = (char*)p;
80108471:	8b 45 10             	mov    0x10(%ebp),%eax
80108474:	89 45 f4             	mov    %eax,-0xc(%ebp)
  while(len > 0){
80108477:	eb 7f                	jmp    801084f8 <copyout+0x8d>
    va0 = (uint)PGROUNDDOWN(va);
80108479:	8b 45 0c             	mov    0xc(%ebp),%eax
8010847c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108481:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pa0 = uva2ka(pgdir, (char*)va0);
80108484:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108487:	83 ec 08             	sub    $0x8,%esp
8010848a:	50                   	push   %eax
8010848b:	ff 75 08             	pushl  0x8(%ebp)
8010848e:	e8 7e ff ff ff       	call   80108411 <uva2ka>
80108493:	83 c4 10             	add    $0x10,%esp
80108496:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if(pa0 == 0)
80108499:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
8010849d:	75 07                	jne    801084a6 <copyout+0x3b>
      return -1;
8010849f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801084a4:	eb 61                	jmp    80108507 <copyout+0x9c>
    n = PGSIZE - (va - va0);
801084a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
801084a9:	2b 45 0c             	sub    0xc(%ebp),%eax
801084ac:	05 00 10 00 00       	add    $0x1000,%eax
801084b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(n > len)
801084b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
801084b7:	3b 45 14             	cmp    0x14(%ebp),%eax
801084ba:	76 06                	jbe    801084c2 <copyout+0x57>
      n = len;
801084bc:	8b 45 14             	mov    0x14(%ebp),%eax
801084bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memmove(pa0 + (va - va0), buf, n);
801084c2:	8b 45 0c             	mov    0xc(%ebp),%eax
801084c5:	2b 45 ec             	sub    -0x14(%ebp),%eax
801084c8:	89 c2                	mov    %eax,%edx
801084ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
801084cd:	01 d0                	add    %edx,%eax
801084cf:	83 ec 04             	sub    $0x4,%esp
801084d2:	ff 75 f0             	pushl  -0x10(%ebp)
801084d5:	ff 75 f4             	pushl  -0xc(%ebp)
801084d8:	50                   	push   %eax
801084d9:	e8 3b d9 ff ff       	call   80105e19 <memmove>
801084de:	83 c4 10             	add    $0x10,%esp
    len -= n;
801084e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
801084e4:	29 45 14             	sub    %eax,0x14(%ebp)
    buf += n;
801084e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
801084ea:	01 45 f4             	add    %eax,-0xc(%ebp)
    va = va0 + PGSIZE;
801084ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
801084f0:	05 00 10 00 00       	add    $0x1000,%eax
801084f5:	89 45 0c             	mov    %eax,0xc(%ebp)
{
  char *buf, *pa0;
  uintp n, va0;

  buf = (char*)p;
  while(len > 0){
801084f8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
801084fc:	0f 85 77 ff ff ff    	jne    80108479 <copyout+0xe>
    memmove(pa0 + (va - va0), buf, n);
    len -= n;
    buf += n;
    va = va0 + PGSIZE;
  }
  return 0;
80108502:	b8 00 00 00 00       	mov    $0x0,%eax
}
80108507:	c9                   	leave  
80108508:	c3                   	ret    
