
kernel.elf:     file format elf32-i386


Disassembly of section .text:

80100000 <multiboot_header>:
80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
80100006:	00 00                	add    %al,(%eax)
80100008:	fe 4f 52             	decb   0x52(%edi)
8010000b:	e4                   	.byte 0xe4

8010000c <entry>:

# Entering xv6 on boot processor, with paging off.
.globl entry
entry:
  # Turn on page size extension for 4Mbyte pages
  movl    %cr4, %eax
8010000c:	0f 20 e0             	mov    %cr4,%eax
  orl     $(CR4_PSE), %eax
8010000f:	83 c8 10             	or     $0x10,%eax
  movl    %eax, %cr4
80100012:	0f 22 e0             	mov    %eax,%cr4
  # Set page directory
  movl    $(V2P_WO(entrypgdir)), %eax
80100015:	b8 00 80 10 00       	mov    $0x108000,%eax
  movl    %eax, %cr3
8010001a:	0f 22 d8             	mov    %eax,%cr3
  # Turn on paging.
  movl    %cr0, %eax
8010001d:	0f 20 c0             	mov    %cr0,%eax
  orl     $(CR0_PG|CR0_WP), %eax
80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
  movl    %eax, %cr0
80100025:	0f 22 c0             	mov    %eax,%cr0

  # Set up the stack pointer.
  movl $(stack + KSTACKSIZE), %esp
80100028:	bc c0 a1 10 80       	mov    $0x8010a1c0,%esp

  # Jump to main(), and switch to executing at
  # high addresses. The indirect call is needed because
  # the assembler produces a PC-relative instruction
  # for a direct jump.
  mov $main, %eax
8010002d:	b8 c0 34 10 80       	mov    $0x801034c0,%eax
  jmp *%eax
80100032:	ff e0                	jmp    *%eax

80100034 <swtch>:
# a struct context, and save its address in *old.
# Switch stacks to new and pop previously-saved registers.

.globl swtch
swtch:
  movl 4(%esp), %eax
80100034:	8b 44 24 04          	mov    0x4(%esp),%eax
  movl 8(%esp), %edx
80100038:	8b 54 24 08          	mov    0x8(%esp),%edx

  # Save old callee-save registers
  pushl %ebp
8010003c:	55                   	push   %ebp
  pushl %ebx
8010003d:	53                   	push   %ebx
  pushl %esi
8010003e:	56                   	push   %esi
  pushl %edi
8010003f:	57                   	push   %edi

  # Switch stacks
  movl %esp, (%eax)
80100040:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
80100042:	89 d4                	mov    %edx,%esp

  # Load new callee-save registers
  popl %edi
80100044:	5f                   	pop    %edi
  popl %esi
80100045:	5e                   	pop    %esi
  popl %ebx
80100046:	5b                   	pop    %ebx
  popl %ebp
80100047:	5d                   	pop    %ebp
  ret
80100048:	c3                   	ret    

80100049 <alltraps>:

  # vectors.S sends all traps here.
.globl alltraps
alltraps:
  # Build trap frame.
  pushl %ds
80100049:	1e                   	push   %ds
  pushl %es
8010004a:	06                   	push   %es
  pushl %fs
8010004b:	0f a0                	push   %fs
  pushl %gs
8010004d:	0f a8                	push   %gs
  pushal
8010004f:	60                   	pusha  
  
  # Set up data segments.
  movw $(SEG_KDATA<<3), %ax
80100050:	66 b8 10 00          	mov    $0x10,%ax
  movw %ax, %ds
80100054:	8e d8                	mov    %eax,%ds
  movw %ax, %es
80100056:	8e c0                	mov    %eax,%es

  # Call trap(tf), where tf=%esp
  pushl %esp
80100058:	54                   	push   %esp
  call trap
80100059:	e8 fa 57 00 00       	call   80105858 <trap>
  addl $4, %esp
8010005e:	83 c4 04             	add    $0x4,%esp

80100061 <trapret>:

  # Return falls through to trapret...
.globl trapret
trapret:
  popal
80100061:	61                   	popa   
  popl %gs
80100062:	0f a9                	pop    %gs
  popl %fs
80100064:	0f a1                	pop    %fs
  popl %es
80100066:	07                   	pop    %es
  popl %ds
80100067:	1f                   	pop    %ds
  addl $0x8, %esp  # trapno and errcode
80100068:	83 c4 08             	add    $0x8,%esp
  iret
8010006b:	cf                   	iret   

8010006c <vector0>:
# generated by vectors.pl - do not edit
# handlers
.globl alltraps
.globl vector0
vector0:
  pushl $0
8010006c:	6a 00                	push   $0x0
  pushl $0
8010006e:	6a 00                	push   $0x0
  jmp alltraps
80100070:	e9 d4 ff ff ff       	jmp    80100049 <alltraps>

80100075 <vector1>:
.globl vector1
vector1:
  pushl $0
80100075:	6a 00                	push   $0x0
  pushl $1
80100077:	6a 01                	push   $0x1
  jmp alltraps
80100079:	e9 cb ff ff ff       	jmp    80100049 <alltraps>

8010007e <vector2>:
.globl vector2
vector2:
  pushl $0
8010007e:	6a 00                	push   $0x0
  pushl $2
80100080:	6a 02                	push   $0x2
  jmp alltraps
80100082:	e9 c2 ff ff ff       	jmp    80100049 <alltraps>

80100087 <vector3>:
.globl vector3
vector3:
  pushl $0
80100087:	6a 00                	push   $0x0
  pushl $3
80100089:	6a 03                	push   $0x3
  jmp alltraps
8010008b:	e9 b9 ff ff ff       	jmp    80100049 <alltraps>

80100090 <vector4>:
.globl vector4
vector4:
  pushl $0
80100090:	6a 00                	push   $0x0
  pushl $4
80100092:	6a 04                	push   $0x4
  jmp alltraps
80100094:	e9 b0 ff ff ff       	jmp    80100049 <alltraps>

80100099 <vector5>:
.globl vector5
vector5:
  pushl $0
80100099:	6a 00                	push   $0x0
  pushl $5
8010009b:	6a 05                	push   $0x5
  jmp alltraps
8010009d:	e9 a7 ff ff ff       	jmp    80100049 <alltraps>

801000a2 <vector6>:
.globl vector6
vector6:
  pushl $0
801000a2:	6a 00                	push   $0x0
  pushl $6
801000a4:	6a 06                	push   $0x6
  jmp alltraps
801000a6:	e9 9e ff ff ff       	jmp    80100049 <alltraps>

801000ab <vector7>:
.globl vector7
vector7:
  pushl $0
801000ab:	6a 00                	push   $0x0
  pushl $7
801000ad:	6a 07                	push   $0x7
  jmp alltraps
801000af:	e9 95 ff ff ff       	jmp    80100049 <alltraps>

801000b4 <vector8>:
.globl vector8
vector8:
  pushl $8
801000b4:	6a 08                	push   $0x8
  jmp alltraps
801000b6:	e9 8e ff ff ff       	jmp    80100049 <alltraps>

801000bb <vector9>:
.globl vector9
vector9:
  pushl $0
801000bb:	6a 00                	push   $0x0
  pushl $9
801000bd:	6a 09                	push   $0x9
  jmp alltraps
801000bf:	e9 85 ff ff ff       	jmp    80100049 <alltraps>

801000c4 <vector10>:
.globl vector10
vector10:
  pushl $10
801000c4:	6a 0a                	push   $0xa
  jmp alltraps
801000c6:	e9 7e ff ff ff       	jmp    80100049 <alltraps>

801000cb <vector11>:
.globl vector11
vector11:
  pushl $11
801000cb:	6a 0b                	push   $0xb
  jmp alltraps
801000cd:	e9 77 ff ff ff       	jmp    80100049 <alltraps>

801000d2 <vector12>:
.globl vector12
vector12:
  pushl $12
801000d2:	6a 0c                	push   $0xc
  jmp alltraps
801000d4:	e9 70 ff ff ff       	jmp    80100049 <alltraps>

801000d9 <vector13>:
.globl vector13
vector13:
  pushl $13
801000d9:	6a 0d                	push   $0xd
  jmp alltraps
801000db:	e9 69 ff ff ff       	jmp    80100049 <alltraps>

801000e0 <vector14>:
.globl vector14
vector14:
  pushl $14
801000e0:	6a 0e                	push   $0xe
  jmp alltraps
801000e2:	e9 62 ff ff ff       	jmp    80100049 <alltraps>

801000e7 <vector15>:
.globl vector15
vector15:
  pushl $0
801000e7:	6a 00                	push   $0x0
  pushl $15
801000e9:	6a 0f                	push   $0xf
  jmp alltraps
801000eb:	e9 59 ff ff ff       	jmp    80100049 <alltraps>

801000f0 <vector16>:
.globl vector16
vector16:
  pushl $0
801000f0:	6a 00                	push   $0x0
  pushl $16
801000f2:	6a 10                	push   $0x10
  jmp alltraps
801000f4:	e9 50 ff ff ff       	jmp    80100049 <alltraps>

801000f9 <vector17>:
.globl vector17
vector17:
  pushl $17
801000f9:	6a 11                	push   $0x11
  jmp alltraps
801000fb:	e9 49 ff ff ff       	jmp    80100049 <alltraps>

80100100 <vector18>:
.globl vector18
vector18:
  pushl $0
80100100:	6a 00                	push   $0x0
  pushl $18
80100102:	6a 12                	push   $0x12
  jmp alltraps
80100104:	e9 40 ff ff ff       	jmp    80100049 <alltraps>

80100109 <vector19>:
.globl vector19
vector19:
  pushl $0
80100109:	6a 00                	push   $0x0
  pushl $19
8010010b:	6a 13                	push   $0x13
  jmp alltraps
8010010d:	e9 37 ff ff ff       	jmp    80100049 <alltraps>

80100112 <vector20>:
.globl vector20
vector20:
  pushl $0
80100112:	6a 00                	push   $0x0
  pushl $20
80100114:	6a 14                	push   $0x14
  jmp alltraps
80100116:	e9 2e ff ff ff       	jmp    80100049 <alltraps>

8010011b <vector21>:
.globl vector21
vector21:
  pushl $0
8010011b:	6a 00                	push   $0x0
  pushl $21
8010011d:	6a 15                	push   $0x15
  jmp alltraps
8010011f:	e9 25 ff ff ff       	jmp    80100049 <alltraps>

80100124 <vector22>:
.globl vector22
vector22:
  pushl $0
80100124:	6a 00                	push   $0x0
  pushl $22
80100126:	6a 16                	push   $0x16
  jmp alltraps
80100128:	e9 1c ff ff ff       	jmp    80100049 <alltraps>

8010012d <vector23>:
.globl vector23
vector23:
  pushl $0
8010012d:	6a 00                	push   $0x0
  pushl $23
8010012f:	6a 17                	push   $0x17
  jmp alltraps
80100131:	e9 13 ff ff ff       	jmp    80100049 <alltraps>

80100136 <vector24>:
.globl vector24
vector24:
  pushl $0
80100136:	6a 00                	push   $0x0
  pushl $24
80100138:	6a 18                	push   $0x18
  jmp alltraps
8010013a:	e9 0a ff ff ff       	jmp    80100049 <alltraps>

8010013f <vector25>:
.globl vector25
vector25:
  pushl $0
8010013f:	6a 00                	push   $0x0
  pushl $25
80100141:	6a 19                	push   $0x19
  jmp alltraps
80100143:	e9 01 ff ff ff       	jmp    80100049 <alltraps>

80100148 <vector26>:
.globl vector26
vector26:
  pushl $0
80100148:	6a 00                	push   $0x0
  pushl $26
8010014a:	6a 1a                	push   $0x1a
  jmp alltraps
8010014c:	e9 f8 fe ff ff       	jmp    80100049 <alltraps>

80100151 <vector27>:
.globl vector27
vector27:
  pushl $0
80100151:	6a 00                	push   $0x0
  pushl $27
80100153:	6a 1b                	push   $0x1b
  jmp alltraps
80100155:	e9 ef fe ff ff       	jmp    80100049 <alltraps>

8010015a <vector28>:
.globl vector28
vector28:
  pushl $0
8010015a:	6a 00                	push   $0x0
  pushl $28
8010015c:	6a 1c                	push   $0x1c
  jmp alltraps
8010015e:	e9 e6 fe ff ff       	jmp    80100049 <alltraps>

80100163 <vector29>:
.globl vector29
vector29:
  pushl $0
80100163:	6a 00                	push   $0x0
  pushl $29
80100165:	6a 1d                	push   $0x1d
  jmp alltraps
80100167:	e9 dd fe ff ff       	jmp    80100049 <alltraps>

8010016c <vector30>:
.globl vector30
vector30:
  pushl $0
8010016c:	6a 00                	push   $0x0
  pushl $30
8010016e:	6a 1e                	push   $0x1e
  jmp alltraps
80100170:	e9 d4 fe ff ff       	jmp    80100049 <alltraps>

80100175 <vector31>:
.globl vector31
vector31:
  pushl $0
80100175:	6a 00                	push   $0x0
  pushl $31
80100177:	6a 1f                	push   $0x1f
  jmp alltraps
80100179:	e9 cb fe ff ff       	jmp    80100049 <alltraps>

8010017e <vector32>:
.globl vector32
vector32:
  pushl $0
8010017e:	6a 00                	push   $0x0
  pushl $32
80100180:	6a 20                	push   $0x20
  jmp alltraps
80100182:	e9 c2 fe ff ff       	jmp    80100049 <alltraps>

80100187 <vector33>:
.globl vector33
vector33:
  pushl $0
80100187:	6a 00                	push   $0x0
  pushl $33
80100189:	6a 21                	push   $0x21
  jmp alltraps
8010018b:	e9 b9 fe ff ff       	jmp    80100049 <alltraps>

80100190 <vector34>:
.globl vector34
vector34:
  pushl $0
80100190:	6a 00                	push   $0x0
  pushl $34
80100192:	6a 22                	push   $0x22
  jmp alltraps
80100194:	e9 b0 fe ff ff       	jmp    80100049 <alltraps>

80100199 <vector35>:
.globl vector35
vector35:
  pushl $0
80100199:	6a 00                	push   $0x0
  pushl $35
8010019b:	6a 23                	push   $0x23
  jmp alltraps
8010019d:	e9 a7 fe ff ff       	jmp    80100049 <alltraps>

801001a2 <vector36>:
.globl vector36
vector36:
  pushl $0
801001a2:	6a 00                	push   $0x0
  pushl $36
801001a4:	6a 24                	push   $0x24
  jmp alltraps
801001a6:	e9 9e fe ff ff       	jmp    80100049 <alltraps>

801001ab <vector37>:
.globl vector37
vector37:
  pushl $0
801001ab:	6a 00                	push   $0x0
  pushl $37
801001ad:	6a 25                	push   $0x25
  jmp alltraps
801001af:	e9 95 fe ff ff       	jmp    80100049 <alltraps>

801001b4 <vector38>:
.globl vector38
vector38:
  pushl $0
801001b4:	6a 00                	push   $0x0
  pushl $38
801001b6:	6a 26                	push   $0x26
  jmp alltraps
801001b8:	e9 8c fe ff ff       	jmp    80100049 <alltraps>

801001bd <vector39>:
.globl vector39
vector39:
  pushl $0
801001bd:	6a 00                	push   $0x0
  pushl $39
801001bf:	6a 27                	push   $0x27
  jmp alltraps
801001c1:	e9 83 fe ff ff       	jmp    80100049 <alltraps>

801001c6 <vector40>:
.globl vector40
vector40:
  pushl $0
801001c6:	6a 00                	push   $0x0
  pushl $40
801001c8:	6a 28                	push   $0x28
  jmp alltraps
801001ca:	e9 7a fe ff ff       	jmp    80100049 <alltraps>

801001cf <vector41>:
.globl vector41
vector41:
  pushl $0
801001cf:	6a 00                	push   $0x0
  pushl $41
801001d1:	6a 29                	push   $0x29
  jmp alltraps
801001d3:	e9 71 fe ff ff       	jmp    80100049 <alltraps>

801001d8 <vector42>:
.globl vector42
vector42:
  pushl $0
801001d8:	6a 00                	push   $0x0
  pushl $42
801001da:	6a 2a                	push   $0x2a
  jmp alltraps
801001dc:	e9 68 fe ff ff       	jmp    80100049 <alltraps>

801001e1 <vector43>:
.globl vector43
vector43:
  pushl $0
801001e1:	6a 00                	push   $0x0
  pushl $43
801001e3:	6a 2b                	push   $0x2b
  jmp alltraps
801001e5:	e9 5f fe ff ff       	jmp    80100049 <alltraps>

801001ea <vector44>:
.globl vector44
vector44:
  pushl $0
801001ea:	6a 00                	push   $0x0
  pushl $44
801001ec:	6a 2c                	push   $0x2c
  jmp alltraps
801001ee:	e9 56 fe ff ff       	jmp    80100049 <alltraps>

801001f3 <vector45>:
.globl vector45
vector45:
  pushl $0
801001f3:	6a 00                	push   $0x0
  pushl $45
801001f5:	6a 2d                	push   $0x2d
  jmp alltraps
801001f7:	e9 4d fe ff ff       	jmp    80100049 <alltraps>

801001fc <vector46>:
.globl vector46
vector46:
  pushl $0
801001fc:	6a 00                	push   $0x0
  pushl $46
801001fe:	6a 2e                	push   $0x2e
  jmp alltraps
80100200:	e9 44 fe ff ff       	jmp    80100049 <alltraps>

80100205 <vector47>:
.globl vector47
vector47:
  pushl $0
80100205:	6a 00                	push   $0x0
  pushl $47
80100207:	6a 2f                	push   $0x2f
  jmp alltraps
80100209:	e9 3b fe ff ff       	jmp    80100049 <alltraps>

8010020e <vector48>:
.globl vector48
vector48:
  pushl $0
8010020e:	6a 00                	push   $0x0
  pushl $48
80100210:	6a 30                	push   $0x30
  jmp alltraps
80100212:	e9 32 fe ff ff       	jmp    80100049 <alltraps>

80100217 <vector49>:
.globl vector49
vector49:
  pushl $0
80100217:	6a 00                	push   $0x0
  pushl $49
80100219:	6a 31                	push   $0x31
  jmp alltraps
8010021b:	e9 29 fe ff ff       	jmp    80100049 <alltraps>

80100220 <vector50>:
.globl vector50
vector50:
  pushl $0
80100220:	6a 00                	push   $0x0
  pushl $50
80100222:	6a 32                	push   $0x32
  jmp alltraps
80100224:	e9 20 fe ff ff       	jmp    80100049 <alltraps>

80100229 <vector51>:
.globl vector51
vector51:
  pushl $0
80100229:	6a 00                	push   $0x0
  pushl $51
8010022b:	6a 33                	push   $0x33
  jmp alltraps
8010022d:	e9 17 fe ff ff       	jmp    80100049 <alltraps>

80100232 <vector52>:
.globl vector52
vector52:
  pushl $0
80100232:	6a 00                	push   $0x0
  pushl $52
80100234:	6a 34                	push   $0x34
  jmp alltraps
80100236:	e9 0e fe ff ff       	jmp    80100049 <alltraps>

8010023b <vector53>:
.globl vector53
vector53:
  pushl $0
8010023b:	6a 00                	push   $0x0
  pushl $53
8010023d:	6a 35                	push   $0x35
  jmp alltraps
8010023f:	e9 05 fe ff ff       	jmp    80100049 <alltraps>

80100244 <vector54>:
.globl vector54
vector54:
  pushl $0
80100244:	6a 00                	push   $0x0
  pushl $54
80100246:	6a 36                	push   $0x36
  jmp alltraps
80100248:	e9 fc fd ff ff       	jmp    80100049 <alltraps>

8010024d <vector55>:
.globl vector55
vector55:
  pushl $0
8010024d:	6a 00                	push   $0x0
  pushl $55
8010024f:	6a 37                	push   $0x37
  jmp alltraps
80100251:	e9 f3 fd ff ff       	jmp    80100049 <alltraps>

80100256 <vector56>:
.globl vector56
vector56:
  pushl $0
80100256:	6a 00                	push   $0x0
  pushl $56
80100258:	6a 38                	push   $0x38
  jmp alltraps
8010025a:	e9 ea fd ff ff       	jmp    80100049 <alltraps>

8010025f <vector57>:
.globl vector57
vector57:
  pushl $0
8010025f:	6a 00                	push   $0x0
  pushl $57
80100261:	6a 39                	push   $0x39
  jmp alltraps
80100263:	e9 e1 fd ff ff       	jmp    80100049 <alltraps>

80100268 <vector58>:
.globl vector58
vector58:
  pushl $0
80100268:	6a 00                	push   $0x0
  pushl $58
8010026a:	6a 3a                	push   $0x3a
  jmp alltraps
8010026c:	e9 d8 fd ff ff       	jmp    80100049 <alltraps>

80100271 <vector59>:
.globl vector59
vector59:
  pushl $0
80100271:	6a 00                	push   $0x0
  pushl $59
80100273:	6a 3b                	push   $0x3b
  jmp alltraps
80100275:	e9 cf fd ff ff       	jmp    80100049 <alltraps>

8010027a <vector60>:
.globl vector60
vector60:
  pushl $0
8010027a:	6a 00                	push   $0x0
  pushl $60
8010027c:	6a 3c                	push   $0x3c
  jmp alltraps
8010027e:	e9 c6 fd ff ff       	jmp    80100049 <alltraps>

80100283 <vector61>:
.globl vector61
vector61:
  pushl $0
80100283:	6a 00                	push   $0x0
  pushl $61
80100285:	6a 3d                	push   $0x3d
  jmp alltraps
80100287:	e9 bd fd ff ff       	jmp    80100049 <alltraps>

8010028c <vector62>:
.globl vector62
vector62:
  pushl $0
8010028c:	6a 00                	push   $0x0
  pushl $62
8010028e:	6a 3e                	push   $0x3e
  jmp alltraps
80100290:	e9 b4 fd ff ff       	jmp    80100049 <alltraps>

80100295 <vector63>:
.globl vector63
vector63:
  pushl $0
80100295:	6a 00                	push   $0x0
  pushl $63
80100297:	6a 3f                	push   $0x3f
  jmp alltraps
80100299:	e9 ab fd ff ff       	jmp    80100049 <alltraps>

8010029e <vector64>:
.globl vector64
vector64:
  pushl $0
8010029e:	6a 00                	push   $0x0
  pushl $64
801002a0:	6a 40                	push   $0x40
  jmp alltraps
801002a2:	e9 a2 fd ff ff       	jmp    80100049 <alltraps>

801002a7 <vector65>:
.globl vector65
vector65:
  pushl $0
801002a7:	6a 00                	push   $0x0
  pushl $65
801002a9:	6a 41                	push   $0x41
  jmp alltraps
801002ab:	e9 99 fd ff ff       	jmp    80100049 <alltraps>

801002b0 <vector66>:
.globl vector66
vector66:
  pushl $0
801002b0:	6a 00                	push   $0x0
  pushl $66
801002b2:	6a 42                	push   $0x42
  jmp alltraps
801002b4:	e9 90 fd ff ff       	jmp    80100049 <alltraps>

801002b9 <vector67>:
.globl vector67
vector67:
  pushl $0
801002b9:	6a 00                	push   $0x0
  pushl $67
801002bb:	6a 43                	push   $0x43
  jmp alltraps
801002bd:	e9 87 fd ff ff       	jmp    80100049 <alltraps>

801002c2 <vector68>:
.globl vector68
vector68:
  pushl $0
801002c2:	6a 00                	push   $0x0
  pushl $68
801002c4:	6a 44                	push   $0x44
  jmp alltraps
801002c6:	e9 7e fd ff ff       	jmp    80100049 <alltraps>

801002cb <vector69>:
.globl vector69
vector69:
  pushl $0
801002cb:	6a 00                	push   $0x0
  pushl $69
801002cd:	6a 45                	push   $0x45
  jmp alltraps
801002cf:	e9 75 fd ff ff       	jmp    80100049 <alltraps>

801002d4 <vector70>:
.globl vector70
vector70:
  pushl $0
801002d4:	6a 00                	push   $0x0
  pushl $70
801002d6:	6a 46                	push   $0x46
  jmp alltraps
801002d8:	e9 6c fd ff ff       	jmp    80100049 <alltraps>

801002dd <vector71>:
.globl vector71
vector71:
  pushl $0
801002dd:	6a 00                	push   $0x0
  pushl $71
801002df:	6a 47                	push   $0x47
  jmp alltraps
801002e1:	e9 63 fd ff ff       	jmp    80100049 <alltraps>

801002e6 <vector72>:
.globl vector72
vector72:
  pushl $0
801002e6:	6a 00                	push   $0x0
  pushl $72
801002e8:	6a 48                	push   $0x48
  jmp alltraps
801002ea:	e9 5a fd ff ff       	jmp    80100049 <alltraps>

801002ef <vector73>:
.globl vector73
vector73:
  pushl $0
801002ef:	6a 00                	push   $0x0
  pushl $73
801002f1:	6a 49                	push   $0x49
  jmp alltraps
801002f3:	e9 51 fd ff ff       	jmp    80100049 <alltraps>

801002f8 <vector74>:
.globl vector74
vector74:
  pushl $0
801002f8:	6a 00                	push   $0x0
  pushl $74
801002fa:	6a 4a                	push   $0x4a
  jmp alltraps
801002fc:	e9 48 fd ff ff       	jmp    80100049 <alltraps>

80100301 <vector75>:
.globl vector75
vector75:
  pushl $0
80100301:	6a 00                	push   $0x0
  pushl $75
80100303:	6a 4b                	push   $0x4b
  jmp alltraps
80100305:	e9 3f fd ff ff       	jmp    80100049 <alltraps>

8010030a <vector76>:
.globl vector76
vector76:
  pushl $0
8010030a:	6a 00                	push   $0x0
  pushl $76
8010030c:	6a 4c                	push   $0x4c
  jmp alltraps
8010030e:	e9 36 fd ff ff       	jmp    80100049 <alltraps>

80100313 <vector77>:
.globl vector77
vector77:
  pushl $0
80100313:	6a 00                	push   $0x0
  pushl $77
80100315:	6a 4d                	push   $0x4d
  jmp alltraps
80100317:	e9 2d fd ff ff       	jmp    80100049 <alltraps>

8010031c <vector78>:
.globl vector78
vector78:
  pushl $0
8010031c:	6a 00                	push   $0x0
  pushl $78
8010031e:	6a 4e                	push   $0x4e
  jmp alltraps
80100320:	e9 24 fd ff ff       	jmp    80100049 <alltraps>

80100325 <vector79>:
.globl vector79
vector79:
  pushl $0
80100325:	6a 00                	push   $0x0
  pushl $79
80100327:	6a 4f                	push   $0x4f
  jmp alltraps
80100329:	e9 1b fd ff ff       	jmp    80100049 <alltraps>

8010032e <vector80>:
.globl vector80
vector80:
  pushl $0
8010032e:	6a 00                	push   $0x0
  pushl $80
80100330:	6a 50                	push   $0x50
  jmp alltraps
80100332:	e9 12 fd ff ff       	jmp    80100049 <alltraps>

80100337 <vector81>:
.globl vector81
vector81:
  pushl $0
80100337:	6a 00                	push   $0x0
  pushl $81
80100339:	6a 51                	push   $0x51
  jmp alltraps
8010033b:	e9 09 fd ff ff       	jmp    80100049 <alltraps>

80100340 <vector82>:
.globl vector82
vector82:
  pushl $0
80100340:	6a 00                	push   $0x0
  pushl $82
80100342:	6a 52                	push   $0x52
  jmp alltraps
80100344:	e9 00 fd ff ff       	jmp    80100049 <alltraps>

80100349 <vector83>:
.globl vector83
vector83:
  pushl $0
80100349:	6a 00                	push   $0x0
  pushl $83
8010034b:	6a 53                	push   $0x53
  jmp alltraps
8010034d:	e9 f7 fc ff ff       	jmp    80100049 <alltraps>

80100352 <vector84>:
.globl vector84
vector84:
  pushl $0
80100352:	6a 00                	push   $0x0
  pushl $84
80100354:	6a 54                	push   $0x54
  jmp alltraps
80100356:	e9 ee fc ff ff       	jmp    80100049 <alltraps>

8010035b <vector85>:
.globl vector85
vector85:
  pushl $0
8010035b:	6a 00                	push   $0x0
  pushl $85
8010035d:	6a 55                	push   $0x55
  jmp alltraps
8010035f:	e9 e5 fc ff ff       	jmp    80100049 <alltraps>

80100364 <vector86>:
.globl vector86
vector86:
  pushl $0
80100364:	6a 00                	push   $0x0
  pushl $86
80100366:	6a 56                	push   $0x56
  jmp alltraps
80100368:	e9 dc fc ff ff       	jmp    80100049 <alltraps>

8010036d <vector87>:
.globl vector87
vector87:
  pushl $0
8010036d:	6a 00                	push   $0x0
  pushl $87
8010036f:	6a 57                	push   $0x57
  jmp alltraps
80100371:	e9 d3 fc ff ff       	jmp    80100049 <alltraps>

80100376 <vector88>:
.globl vector88
vector88:
  pushl $0
80100376:	6a 00                	push   $0x0
  pushl $88
80100378:	6a 58                	push   $0x58
  jmp alltraps
8010037a:	e9 ca fc ff ff       	jmp    80100049 <alltraps>

8010037f <vector89>:
.globl vector89
vector89:
  pushl $0
8010037f:	6a 00                	push   $0x0
  pushl $89
80100381:	6a 59                	push   $0x59
  jmp alltraps
80100383:	e9 c1 fc ff ff       	jmp    80100049 <alltraps>

80100388 <vector90>:
.globl vector90
vector90:
  pushl $0
80100388:	6a 00                	push   $0x0
  pushl $90
8010038a:	6a 5a                	push   $0x5a
  jmp alltraps
8010038c:	e9 b8 fc ff ff       	jmp    80100049 <alltraps>

80100391 <vector91>:
.globl vector91
vector91:
  pushl $0
80100391:	6a 00                	push   $0x0
  pushl $91
80100393:	6a 5b                	push   $0x5b
  jmp alltraps
80100395:	e9 af fc ff ff       	jmp    80100049 <alltraps>

8010039a <vector92>:
.globl vector92
vector92:
  pushl $0
8010039a:	6a 00                	push   $0x0
  pushl $92
8010039c:	6a 5c                	push   $0x5c
  jmp alltraps
8010039e:	e9 a6 fc ff ff       	jmp    80100049 <alltraps>

801003a3 <vector93>:
.globl vector93
vector93:
  pushl $0
801003a3:	6a 00                	push   $0x0
  pushl $93
801003a5:	6a 5d                	push   $0x5d
  jmp alltraps
801003a7:	e9 9d fc ff ff       	jmp    80100049 <alltraps>

801003ac <vector94>:
.globl vector94
vector94:
  pushl $0
801003ac:	6a 00                	push   $0x0
  pushl $94
801003ae:	6a 5e                	push   $0x5e
  jmp alltraps
801003b0:	e9 94 fc ff ff       	jmp    80100049 <alltraps>

801003b5 <vector95>:
.globl vector95
vector95:
  pushl $0
801003b5:	6a 00                	push   $0x0
  pushl $95
801003b7:	6a 5f                	push   $0x5f
  jmp alltraps
801003b9:	e9 8b fc ff ff       	jmp    80100049 <alltraps>

801003be <vector96>:
.globl vector96
vector96:
  pushl $0
801003be:	6a 00                	push   $0x0
  pushl $96
801003c0:	6a 60                	push   $0x60
  jmp alltraps
801003c2:	e9 82 fc ff ff       	jmp    80100049 <alltraps>

801003c7 <vector97>:
.globl vector97
vector97:
  pushl $0
801003c7:	6a 00                	push   $0x0
  pushl $97
801003c9:	6a 61                	push   $0x61
  jmp alltraps
801003cb:	e9 79 fc ff ff       	jmp    80100049 <alltraps>

801003d0 <vector98>:
.globl vector98
vector98:
  pushl $0
801003d0:	6a 00                	push   $0x0
  pushl $98
801003d2:	6a 62                	push   $0x62
  jmp alltraps
801003d4:	e9 70 fc ff ff       	jmp    80100049 <alltraps>

801003d9 <vector99>:
.globl vector99
vector99:
  pushl $0
801003d9:	6a 00                	push   $0x0
  pushl $99
801003db:	6a 63                	push   $0x63
  jmp alltraps
801003dd:	e9 67 fc ff ff       	jmp    80100049 <alltraps>

801003e2 <vector100>:
.globl vector100
vector100:
  pushl $0
801003e2:	6a 00                	push   $0x0
  pushl $100
801003e4:	6a 64                	push   $0x64
  jmp alltraps
801003e6:	e9 5e fc ff ff       	jmp    80100049 <alltraps>

801003eb <vector101>:
.globl vector101
vector101:
  pushl $0
801003eb:	6a 00                	push   $0x0
  pushl $101
801003ed:	6a 65                	push   $0x65
  jmp alltraps
801003ef:	e9 55 fc ff ff       	jmp    80100049 <alltraps>

801003f4 <vector102>:
.globl vector102
vector102:
  pushl $0
801003f4:	6a 00                	push   $0x0
  pushl $102
801003f6:	6a 66                	push   $0x66
  jmp alltraps
801003f8:	e9 4c fc ff ff       	jmp    80100049 <alltraps>

801003fd <vector103>:
.globl vector103
vector103:
  pushl $0
801003fd:	6a 00                	push   $0x0
  pushl $103
801003ff:	6a 67                	push   $0x67
  jmp alltraps
80100401:	e9 43 fc ff ff       	jmp    80100049 <alltraps>

80100406 <vector104>:
.globl vector104
vector104:
  pushl $0
80100406:	6a 00                	push   $0x0
  pushl $104
80100408:	6a 68                	push   $0x68
  jmp alltraps
8010040a:	e9 3a fc ff ff       	jmp    80100049 <alltraps>

8010040f <vector105>:
.globl vector105
vector105:
  pushl $0
8010040f:	6a 00                	push   $0x0
  pushl $105
80100411:	6a 69                	push   $0x69
  jmp alltraps
80100413:	e9 31 fc ff ff       	jmp    80100049 <alltraps>

80100418 <vector106>:
.globl vector106
vector106:
  pushl $0
80100418:	6a 00                	push   $0x0
  pushl $106
8010041a:	6a 6a                	push   $0x6a
  jmp alltraps
8010041c:	e9 28 fc ff ff       	jmp    80100049 <alltraps>

80100421 <vector107>:
.globl vector107
vector107:
  pushl $0
80100421:	6a 00                	push   $0x0
  pushl $107
80100423:	6a 6b                	push   $0x6b
  jmp alltraps
80100425:	e9 1f fc ff ff       	jmp    80100049 <alltraps>

8010042a <vector108>:
.globl vector108
vector108:
  pushl $0
8010042a:	6a 00                	push   $0x0
  pushl $108
8010042c:	6a 6c                	push   $0x6c
  jmp alltraps
8010042e:	e9 16 fc ff ff       	jmp    80100049 <alltraps>

80100433 <vector109>:
.globl vector109
vector109:
  pushl $0
80100433:	6a 00                	push   $0x0
  pushl $109
80100435:	6a 6d                	push   $0x6d
  jmp alltraps
80100437:	e9 0d fc ff ff       	jmp    80100049 <alltraps>

8010043c <vector110>:
.globl vector110
vector110:
  pushl $0
8010043c:	6a 00                	push   $0x0
  pushl $110
8010043e:	6a 6e                	push   $0x6e
  jmp alltraps
80100440:	e9 04 fc ff ff       	jmp    80100049 <alltraps>

80100445 <vector111>:
.globl vector111
vector111:
  pushl $0
80100445:	6a 00                	push   $0x0
  pushl $111
80100447:	6a 6f                	push   $0x6f
  jmp alltraps
80100449:	e9 fb fb ff ff       	jmp    80100049 <alltraps>

8010044e <vector112>:
.globl vector112
vector112:
  pushl $0
8010044e:	6a 00                	push   $0x0
  pushl $112
80100450:	6a 70                	push   $0x70
  jmp alltraps
80100452:	e9 f2 fb ff ff       	jmp    80100049 <alltraps>

80100457 <vector113>:
.globl vector113
vector113:
  pushl $0
80100457:	6a 00                	push   $0x0
  pushl $113
80100459:	6a 71                	push   $0x71
  jmp alltraps
8010045b:	e9 e9 fb ff ff       	jmp    80100049 <alltraps>

80100460 <vector114>:
.globl vector114
vector114:
  pushl $0
80100460:	6a 00                	push   $0x0
  pushl $114
80100462:	6a 72                	push   $0x72
  jmp alltraps
80100464:	e9 e0 fb ff ff       	jmp    80100049 <alltraps>

80100469 <vector115>:
.globl vector115
vector115:
  pushl $0
80100469:	6a 00                	push   $0x0
  pushl $115
8010046b:	6a 73                	push   $0x73
  jmp alltraps
8010046d:	e9 d7 fb ff ff       	jmp    80100049 <alltraps>

80100472 <vector116>:
.globl vector116
vector116:
  pushl $0
80100472:	6a 00                	push   $0x0
  pushl $116
80100474:	6a 74                	push   $0x74
  jmp alltraps
80100476:	e9 ce fb ff ff       	jmp    80100049 <alltraps>

8010047b <vector117>:
.globl vector117
vector117:
  pushl $0
8010047b:	6a 00                	push   $0x0
  pushl $117
8010047d:	6a 75                	push   $0x75
  jmp alltraps
8010047f:	e9 c5 fb ff ff       	jmp    80100049 <alltraps>

80100484 <vector118>:
.globl vector118
vector118:
  pushl $0
80100484:	6a 00                	push   $0x0
  pushl $118
80100486:	6a 76                	push   $0x76
  jmp alltraps
80100488:	e9 bc fb ff ff       	jmp    80100049 <alltraps>

8010048d <vector119>:
.globl vector119
vector119:
  pushl $0
8010048d:	6a 00                	push   $0x0
  pushl $119
8010048f:	6a 77                	push   $0x77
  jmp alltraps
80100491:	e9 b3 fb ff ff       	jmp    80100049 <alltraps>

80100496 <vector120>:
.globl vector120
vector120:
  pushl $0
80100496:	6a 00                	push   $0x0
  pushl $120
80100498:	6a 78                	push   $0x78
  jmp alltraps
8010049a:	e9 aa fb ff ff       	jmp    80100049 <alltraps>

8010049f <vector121>:
.globl vector121
vector121:
  pushl $0
8010049f:	6a 00                	push   $0x0
  pushl $121
801004a1:	6a 79                	push   $0x79
  jmp alltraps
801004a3:	e9 a1 fb ff ff       	jmp    80100049 <alltraps>

801004a8 <vector122>:
.globl vector122
vector122:
  pushl $0
801004a8:	6a 00                	push   $0x0
  pushl $122
801004aa:	6a 7a                	push   $0x7a
  jmp alltraps
801004ac:	e9 98 fb ff ff       	jmp    80100049 <alltraps>

801004b1 <vector123>:
.globl vector123
vector123:
  pushl $0
801004b1:	6a 00                	push   $0x0
  pushl $123
801004b3:	6a 7b                	push   $0x7b
  jmp alltraps
801004b5:	e9 8f fb ff ff       	jmp    80100049 <alltraps>

801004ba <vector124>:
.globl vector124
vector124:
  pushl $0
801004ba:	6a 00                	push   $0x0
  pushl $124
801004bc:	6a 7c                	push   $0x7c
  jmp alltraps
801004be:	e9 86 fb ff ff       	jmp    80100049 <alltraps>

801004c3 <vector125>:
.globl vector125
vector125:
  pushl $0
801004c3:	6a 00                	push   $0x0
  pushl $125
801004c5:	6a 7d                	push   $0x7d
  jmp alltraps
801004c7:	e9 7d fb ff ff       	jmp    80100049 <alltraps>

801004cc <vector126>:
.globl vector126
vector126:
  pushl $0
801004cc:	6a 00                	push   $0x0
  pushl $126
801004ce:	6a 7e                	push   $0x7e
  jmp alltraps
801004d0:	e9 74 fb ff ff       	jmp    80100049 <alltraps>

801004d5 <vector127>:
.globl vector127
vector127:
  pushl $0
801004d5:	6a 00                	push   $0x0
  pushl $127
801004d7:	6a 7f                	push   $0x7f
  jmp alltraps
801004d9:	e9 6b fb ff ff       	jmp    80100049 <alltraps>

801004de <vector128>:
.globl vector128
vector128:
  pushl $0
801004de:	6a 00                	push   $0x0
  pushl $128
801004e0:	68 80 00 00 00       	push   $0x80
  jmp alltraps
801004e5:	e9 5f fb ff ff       	jmp    80100049 <alltraps>

801004ea <vector129>:
.globl vector129
vector129:
  pushl $0
801004ea:	6a 00                	push   $0x0
  pushl $129
801004ec:	68 81 00 00 00       	push   $0x81
  jmp alltraps
801004f1:	e9 53 fb ff ff       	jmp    80100049 <alltraps>

801004f6 <vector130>:
.globl vector130
vector130:
  pushl $0
801004f6:	6a 00                	push   $0x0
  pushl $130
801004f8:	68 82 00 00 00       	push   $0x82
  jmp alltraps
801004fd:	e9 47 fb ff ff       	jmp    80100049 <alltraps>

80100502 <vector131>:
.globl vector131
vector131:
  pushl $0
80100502:	6a 00                	push   $0x0
  pushl $131
80100504:	68 83 00 00 00       	push   $0x83
  jmp alltraps
80100509:	e9 3b fb ff ff       	jmp    80100049 <alltraps>

8010050e <vector132>:
.globl vector132
vector132:
  pushl $0
8010050e:	6a 00                	push   $0x0
  pushl $132
80100510:	68 84 00 00 00       	push   $0x84
  jmp alltraps
80100515:	e9 2f fb ff ff       	jmp    80100049 <alltraps>

8010051a <vector133>:
.globl vector133
vector133:
  pushl $0
8010051a:	6a 00                	push   $0x0
  pushl $133
8010051c:	68 85 00 00 00       	push   $0x85
  jmp alltraps
80100521:	e9 23 fb ff ff       	jmp    80100049 <alltraps>

80100526 <vector134>:
.globl vector134
vector134:
  pushl $0
80100526:	6a 00                	push   $0x0
  pushl $134
80100528:	68 86 00 00 00       	push   $0x86
  jmp alltraps
8010052d:	e9 17 fb ff ff       	jmp    80100049 <alltraps>

80100532 <vector135>:
.globl vector135
vector135:
  pushl $0
80100532:	6a 00                	push   $0x0
  pushl $135
80100534:	68 87 00 00 00       	push   $0x87
  jmp alltraps
80100539:	e9 0b fb ff ff       	jmp    80100049 <alltraps>

8010053e <vector136>:
.globl vector136
vector136:
  pushl $0
8010053e:	6a 00                	push   $0x0
  pushl $136
80100540:	68 88 00 00 00       	push   $0x88
  jmp alltraps
80100545:	e9 ff fa ff ff       	jmp    80100049 <alltraps>

8010054a <vector137>:
.globl vector137
vector137:
  pushl $0
8010054a:	6a 00                	push   $0x0
  pushl $137
8010054c:	68 89 00 00 00       	push   $0x89
  jmp alltraps
80100551:	e9 f3 fa ff ff       	jmp    80100049 <alltraps>

80100556 <vector138>:
.globl vector138
vector138:
  pushl $0
80100556:	6a 00                	push   $0x0
  pushl $138
80100558:	68 8a 00 00 00       	push   $0x8a
  jmp alltraps
8010055d:	e9 e7 fa ff ff       	jmp    80100049 <alltraps>

80100562 <vector139>:
.globl vector139
vector139:
  pushl $0
80100562:	6a 00                	push   $0x0
  pushl $139
80100564:	68 8b 00 00 00       	push   $0x8b
  jmp alltraps
80100569:	e9 db fa ff ff       	jmp    80100049 <alltraps>

8010056e <vector140>:
.globl vector140
vector140:
  pushl $0
8010056e:	6a 00                	push   $0x0
  pushl $140
80100570:	68 8c 00 00 00       	push   $0x8c
  jmp alltraps
80100575:	e9 cf fa ff ff       	jmp    80100049 <alltraps>

8010057a <vector141>:
.globl vector141
vector141:
  pushl $0
8010057a:	6a 00                	push   $0x0
  pushl $141
8010057c:	68 8d 00 00 00       	push   $0x8d
  jmp alltraps
80100581:	e9 c3 fa ff ff       	jmp    80100049 <alltraps>

80100586 <vector142>:
.globl vector142
vector142:
  pushl $0
80100586:	6a 00                	push   $0x0
  pushl $142
80100588:	68 8e 00 00 00       	push   $0x8e
  jmp alltraps
8010058d:	e9 b7 fa ff ff       	jmp    80100049 <alltraps>

80100592 <vector143>:
.globl vector143
vector143:
  pushl $0
80100592:	6a 00                	push   $0x0
  pushl $143
80100594:	68 8f 00 00 00       	push   $0x8f
  jmp alltraps
80100599:	e9 ab fa ff ff       	jmp    80100049 <alltraps>

8010059e <vector144>:
.globl vector144
vector144:
  pushl $0
8010059e:	6a 00                	push   $0x0
  pushl $144
801005a0:	68 90 00 00 00       	push   $0x90
  jmp alltraps
801005a5:	e9 9f fa ff ff       	jmp    80100049 <alltraps>

801005aa <vector145>:
.globl vector145
vector145:
  pushl $0
801005aa:	6a 00                	push   $0x0
  pushl $145
801005ac:	68 91 00 00 00       	push   $0x91
  jmp alltraps
801005b1:	e9 93 fa ff ff       	jmp    80100049 <alltraps>

801005b6 <vector146>:
.globl vector146
vector146:
  pushl $0
801005b6:	6a 00                	push   $0x0
  pushl $146
801005b8:	68 92 00 00 00       	push   $0x92
  jmp alltraps
801005bd:	e9 87 fa ff ff       	jmp    80100049 <alltraps>

801005c2 <vector147>:
.globl vector147
vector147:
  pushl $0
801005c2:	6a 00                	push   $0x0
  pushl $147
801005c4:	68 93 00 00 00       	push   $0x93
  jmp alltraps
801005c9:	e9 7b fa ff ff       	jmp    80100049 <alltraps>

801005ce <vector148>:
.globl vector148
vector148:
  pushl $0
801005ce:	6a 00                	push   $0x0
  pushl $148
801005d0:	68 94 00 00 00       	push   $0x94
  jmp alltraps
801005d5:	e9 6f fa ff ff       	jmp    80100049 <alltraps>

801005da <vector149>:
.globl vector149
vector149:
  pushl $0
801005da:	6a 00                	push   $0x0
  pushl $149
801005dc:	68 95 00 00 00       	push   $0x95
  jmp alltraps
801005e1:	e9 63 fa ff ff       	jmp    80100049 <alltraps>

801005e6 <vector150>:
.globl vector150
vector150:
  pushl $0
801005e6:	6a 00                	push   $0x0
  pushl $150
801005e8:	68 96 00 00 00       	push   $0x96
  jmp alltraps
801005ed:	e9 57 fa ff ff       	jmp    80100049 <alltraps>

801005f2 <vector151>:
.globl vector151
vector151:
  pushl $0
801005f2:	6a 00                	push   $0x0
  pushl $151
801005f4:	68 97 00 00 00       	push   $0x97
  jmp alltraps
801005f9:	e9 4b fa ff ff       	jmp    80100049 <alltraps>

801005fe <vector152>:
.globl vector152
vector152:
  pushl $0
801005fe:	6a 00                	push   $0x0
  pushl $152
80100600:	68 98 00 00 00       	push   $0x98
  jmp alltraps
80100605:	e9 3f fa ff ff       	jmp    80100049 <alltraps>

8010060a <vector153>:
.globl vector153
vector153:
  pushl $0
8010060a:	6a 00                	push   $0x0
  pushl $153
8010060c:	68 99 00 00 00       	push   $0x99
  jmp alltraps
80100611:	e9 33 fa ff ff       	jmp    80100049 <alltraps>

80100616 <vector154>:
.globl vector154
vector154:
  pushl $0
80100616:	6a 00                	push   $0x0
  pushl $154
80100618:	68 9a 00 00 00       	push   $0x9a
  jmp alltraps
8010061d:	e9 27 fa ff ff       	jmp    80100049 <alltraps>

80100622 <vector155>:
.globl vector155
vector155:
  pushl $0
80100622:	6a 00                	push   $0x0
  pushl $155
80100624:	68 9b 00 00 00       	push   $0x9b
  jmp alltraps
80100629:	e9 1b fa ff ff       	jmp    80100049 <alltraps>

8010062e <vector156>:
.globl vector156
vector156:
  pushl $0
8010062e:	6a 00                	push   $0x0
  pushl $156
80100630:	68 9c 00 00 00       	push   $0x9c
  jmp alltraps
80100635:	e9 0f fa ff ff       	jmp    80100049 <alltraps>

8010063a <vector157>:
.globl vector157
vector157:
  pushl $0
8010063a:	6a 00                	push   $0x0
  pushl $157
8010063c:	68 9d 00 00 00       	push   $0x9d
  jmp alltraps
80100641:	e9 03 fa ff ff       	jmp    80100049 <alltraps>

80100646 <vector158>:
.globl vector158
vector158:
  pushl $0
80100646:	6a 00                	push   $0x0
  pushl $158
80100648:	68 9e 00 00 00       	push   $0x9e
  jmp alltraps
8010064d:	e9 f7 f9 ff ff       	jmp    80100049 <alltraps>

80100652 <vector159>:
.globl vector159
vector159:
  pushl $0
80100652:	6a 00                	push   $0x0
  pushl $159
80100654:	68 9f 00 00 00       	push   $0x9f
  jmp alltraps
80100659:	e9 eb f9 ff ff       	jmp    80100049 <alltraps>

8010065e <vector160>:
.globl vector160
vector160:
  pushl $0
8010065e:	6a 00                	push   $0x0
  pushl $160
80100660:	68 a0 00 00 00       	push   $0xa0
  jmp alltraps
80100665:	e9 df f9 ff ff       	jmp    80100049 <alltraps>

8010066a <vector161>:
.globl vector161
vector161:
  pushl $0
8010066a:	6a 00                	push   $0x0
  pushl $161
8010066c:	68 a1 00 00 00       	push   $0xa1
  jmp alltraps
80100671:	e9 d3 f9 ff ff       	jmp    80100049 <alltraps>

80100676 <vector162>:
.globl vector162
vector162:
  pushl $0
80100676:	6a 00                	push   $0x0
  pushl $162
80100678:	68 a2 00 00 00       	push   $0xa2
  jmp alltraps
8010067d:	e9 c7 f9 ff ff       	jmp    80100049 <alltraps>

80100682 <vector163>:
.globl vector163
vector163:
  pushl $0
80100682:	6a 00                	push   $0x0
  pushl $163
80100684:	68 a3 00 00 00       	push   $0xa3
  jmp alltraps
80100689:	e9 bb f9 ff ff       	jmp    80100049 <alltraps>

8010068e <vector164>:
.globl vector164
vector164:
  pushl $0
8010068e:	6a 00                	push   $0x0
  pushl $164
80100690:	68 a4 00 00 00       	push   $0xa4
  jmp alltraps
80100695:	e9 af f9 ff ff       	jmp    80100049 <alltraps>

8010069a <vector165>:
.globl vector165
vector165:
  pushl $0
8010069a:	6a 00                	push   $0x0
  pushl $165
8010069c:	68 a5 00 00 00       	push   $0xa5
  jmp alltraps
801006a1:	e9 a3 f9 ff ff       	jmp    80100049 <alltraps>

801006a6 <vector166>:
.globl vector166
vector166:
  pushl $0
801006a6:	6a 00                	push   $0x0
  pushl $166
801006a8:	68 a6 00 00 00       	push   $0xa6
  jmp alltraps
801006ad:	e9 97 f9 ff ff       	jmp    80100049 <alltraps>

801006b2 <vector167>:
.globl vector167
vector167:
  pushl $0
801006b2:	6a 00                	push   $0x0
  pushl $167
801006b4:	68 a7 00 00 00       	push   $0xa7
  jmp alltraps
801006b9:	e9 8b f9 ff ff       	jmp    80100049 <alltraps>

801006be <vector168>:
.globl vector168
vector168:
  pushl $0
801006be:	6a 00                	push   $0x0
  pushl $168
801006c0:	68 a8 00 00 00       	push   $0xa8
  jmp alltraps
801006c5:	e9 7f f9 ff ff       	jmp    80100049 <alltraps>

801006ca <vector169>:
.globl vector169
vector169:
  pushl $0
801006ca:	6a 00                	push   $0x0
  pushl $169
801006cc:	68 a9 00 00 00       	push   $0xa9
  jmp alltraps
801006d1:	e9 73 f9 ff ff       	jmp    80100049 <alltraps>

801006d6 <vector170>:
.globl vector170
vector170:
  pushl $0
801006d6:	6a 00                	push   $0x0
  pushl $170
801006d8:	68 aa 00 00 00       	push   $0xaa
  jmp alltraps
801006dd:	e9 67 f9 ff ff       	jmp    80100049 <alltraps>

801006e2 <vector171>:
.globl vector171
vector171:
  pushl $0
801006e2:	6a 00                	push   $0x0
  pushl $171
801006e4:	68 ab 00 00 00       	push   $0xab
  jmp alltraps
801006e9:	e9 5b f9 ff ff       	jmp    80100049 <alltraps>

801006ee <vector172>:
.globl vector172
vector172:
  pushl $0
801006ee:	6a 00                	push   $0x0
  pushl $172
801006f0:	68 ac 00 00 00       	push   $0xac
  jmp alltraps
801006f5:	e9 4f f9 ff ff       	jmp    80100049 <alltraps>

801006fa <vector173>:
.globl vector173
vector173:
  pushl $0
801006fa:	6a 00                	push   $0x0
  pushl $173
801006fc:	68 ad 00 00 00       	push   $0xad
  jmp alltraps
80100701:	e9 43 f9 ff ff       	jmp    80100049 <alltraps>

80100706 <vector174>:
.globl vector174
vector174:
  pushl $0
80100706:	6a 00                	push   $0x0
  pushl $174
80100708:	68 ae 00 00 00       	push   $0xae
  jmp alltraps
8010070d:	e9 37 f9 ff ff       	jmp    80100049 <alltraps>

80100712 <vector175>:
.globl vector175
vector175:
  pushl $0
80100712:	6a 00                	push   $0x0
  pushl $175
80100714:	68 af 00 00 00       	push   $0xaf
  jmp alltraps
80100719:	e9 2b f9 ff ff       	jmp    80100049 <alltraps>

8010071e <vector176>:
.globl vector176
vector176:
  pushl $0
8010071e:	6a 00                	push   $0x0
  pushl $176
80100720:	68 b0 00 00 00       	push   $0xb0
  jmp alltraps
80100725:	e9 1f f9 ff ff       	jmp    80100049 <alltraps>

8010072a <vector177>:
.globl vector177
vector177:
  pushl $0
8010072a:	6a 00                	push   $0x0
  pushl $177
8010072c:	68 b1 00 00 00       	push   $0xb1
  jmp alltraps
80100731:	e9 13 f9 ff ff       	jmp    80100049 <alltraps>

80100736 <vector178>:
.globl vector178
vector178:
  pushl $0
80100736:	6a 00                	push   $0x0
  pushl $178
80100738:	68 b2 00 00 00       	push   $0xb2
  jmp alltraps
8010073d:	e9 07 f9 ff ff       	jmp    80100049 <alltraps>

80100742 <vector179>:
.globl vector179
vector179:
  pushl $0
80100742:	6a 00                	push   $0x0
  pushl $179
80100744:	68 b3 00 00 00       	push   $0xb3
  jmp alltraps
80100749:	e9 fb f8 ff ff       	jmp    80100049 <alltraps>

8010074e <vector180>:
.globl vector180
vector180:
  pushl $0
8010074e:	6a 00                	push   $0x0
  pushl $180
80100750:	68 b4 00 00 00       	push   $0xb4
  jmp alltraps
80100755:	e9 ef f8 ff ff       	jmp    80100049 <alltraps>

8010075a <vector181>:
.globl vector181
vector181:
  pushl $0
8010075a:	6a 00                	push   $0x0
  pushl $181
8010075c:	68 b5 00 00 00       	push   $0xb5
  jmp alltraps
80100761:	e9 e3 f8 ff ff       	jmp    80100049 <alltraps>

80100766 <vector182>:
.globl vector182
vector182:
  pushl $0
80100766:	6a 00                	push   $0x0
  pushl $182
80100768:	68 b6 00 00 00       	push   $0xb6
  jmp alltraps
8010076d:	e9 d7 f8 ff ff       	jmp    80100049 <alltraps>

80100772 <vector183>:
.globl vector183
vector183:
  pushl $0
80100772:	6a 00                	push   $0x0
  pushl $183
80100774:	68 b7 00 00 00       	push   $0xb7
  jmp alltraps
80100779:	e9 cb f8 ff ff       	jmp    80100049 <alltraps>

8010077e <vector184>:
.globl vector184
vector184:
  pushl $0
8010077e:	6a 00                	push   $0x0
  pushl $184
80100780:	68 b8 00 00 00       	push   $0xb8
  jmp alltraps
80100785:	e9 bf f8 ff ff       	jmp    80100049 <alltraps>

8010078a <vector185>:
.globl vector185
vector185:
  pushl $0
8010078a:	6a 00                	push   $0x0
  pushl $185
8010078c:	68 b9 00 00 00       	push   $0xb9
  jmp alltraps
80100791:	e9 b3 f8 ff ff       	jmp    80100049 <alltraps>

80100796 <vector186>:
.globl vector186
vector186:
  pushl $0
80100796:	6a 00                	push   $0x0
  pushl $186
80100798:	68 ba 00 00 00       	push   $0xba
  jmp alltraps
8010079d:	e9 a7 f8 ff ff       	jmp    80100049 <alltraps>

801007a2 <vector187>:
.globl vector187
vector187:
  pushl $0
801007a2:	6a 00                	push   $0x0
  pushl $187
801007a4:	68 bb 00 00 00       	push   $0xbb
  jmp alltraps
801007a9:	e9 9b f8 ff ff       	jmp    80100049 <alltraps>

801007ae <vector188>:
.globl vector188
vector188:
  pushl $0
801007ae:	6a 00                	push   $0x0
  pushl $188
801007b0:	68 bc 00 00 00       	push   $0xbc
  jmp alltraps
801007b5:	e9 8f f8 ff ff       	jmp    80100049 <alltraps>

801007ba <vector189>:
.globl vector189
vector189:
  pushl $0
801007ba:	6a 00                	push   $0x0
  pushl $189
801007bc:	68 bd 00 00 00       	push   $0xbd
  jmp alltraps
801007c1:	e9 83 f8 ff ff       	jmp    80100049 <alltraps>

801007c6 <vector190>:
.globl vector190
vector190:
  pushl $0
801007c6:	6a 00                	push   $0x0
  pushl $190
801007c8:	68 be 00 00 00       	push   $0xbe
  jmp alltraps
801007cd:	e9 77 f8 ff ff       	jmp    80100049 <alltraps>

801007d2 <vector191>:
.globl vector191
vector191:
  pushl $0
801007d2:	6a 00                	push   $0x0
  pushl $191
801007d4:	68 bf 00 00 00       	push   $0xbf
  jmp alltraps
801007d9:	e9 6b f8 ff ff       	jmp    80100049 <alltraps>

801007de <vector192>:
.globl vector192
vector192:
  pushl $0
801007de:	6a 00                	push   $0x0
  pushl $192
801007e0:	68 c0 00 00 00       	push   $0xc0
  jmp alltraps
801007e5:	e9 5f f8 ff ff       	jmp    80100049 <alltraps>

801007ea <vector193>:
.globl vector193
vector193:
  pushl $0
801007ea:	6a 00                	push   $0x0
  pushl $193
801007ec:	68 c1 00 00 00       	push   $0xc1
  jmp alltraps
801007f1:	e9 53 f8 ff ff       	jmp    80100049 <alltraps>

801007f6 <vector194>:
.globl vector194
vector194:
  pushl $0
801007f6:	6a 00                	push   $0x0
  pushl $194
801007f8:	68 c2 00 00 00       	push   $0xc2
  jmp alltraps
801007fd:	e9 47 f8 ff ff       	jmp    80100049 <alltraps>

80100802 <vector195>:
.globl vector195
vector195:
  pushl $0
80100802:	6a 00                	push   $0x0
  pushl $195
80100804:	68 c3 00 00 00       	push   $0xc3
  jmp alltraps
80100809:	e9 3b f8 ff ff       	jmp    80100049 <alltraps>

8010080e <vector196>:
.globl vector196
vector196:
  pushl $0
8010080e:	6a 00                	push   $0x0
  pushl $196
80100810:	68 c4 00 00 00       	push   $0xc4
  jmp alltraps
80100815:	e9 2f f8 ff ff       	jmp    80100049 <alltraps>

8010081a <vector197>:
.globl vector197
vector197:
  pushl $0
8010081a:	6a 00                	push   $0x0
  pushl $197
8010081c:	68 c5 00 00 00       	push   $0xc5
  jmp alltraps
80100821:	e9 23 f8 ff ff       	jmp    80100049 <alltraps>

80100826 <vector198>:
.globl vector198
vector198:
  pushl $0
80100826:	6a 00                	push   $0x0
  pushl $198
80100828:	68 c6 00 00 00       	push   $0xc6
  jmp alltraps
8010082d:	e9 17 f8 ff ff       	jmp    80100049 <alltraps>

80100832 <vector199>:
.globl vector199
vector199:
  pushl $0
80100832:	6a 00                	push   $0x0
  pushl $199
80100834:	68 c7 00 00 00       	push   $0xc7
  jmp alltraps
80100839:	e9 0b f8 ff ff       	jmp    80100049 <alltraps>

8010083e <vector200>:
.globl vector200
vector200:
  pushl $0
8010083e:	6a 00                	push   $0x0
  pushl $200
80100840:	68 c8 00 00 00       	push   $0xc8
  jmp alltraps
80100845:	e9 ff f7 ff ff       	jmp    80100049 <alltraps>

8010084a <vector201>:
.globl vector201
vector201:
  pushl $0
8010084a:	6a 00                	push   $0x0
  pushl $201
8010084c:	68 c9 00 00 00       	push   $0xc9
  jmp alltraps
80100851:	e9 f3 f7 ff ff       	jmp    80100049 <alltraps>

80100856 <vector202>:
.globl vector202
vector202:
  pushl $0
80100856:	6a 00                	push   $0x0
  pushl $202
80100858:	68 ca 00 00 00       	push   $0xca
  jmp alltraps
8010085d:	e9 e7 f7 ff ff       	jmp    80100049 <alltraps>

80100862 <vector203>:
.globl vector203
vector203:
  pushl $0
80100862:	6a 00                	push   $0x0
  pushl $203
80100864:	68 cb 00 00 00       	push   $0xcb
  jmp alltraps
80100869:	e9 db f7 ff ff       	jmp    80100049 <alltraps>

8010086e <vector204>:
.globl vector204
vector204:
  pushl $0
8010086e:	6a 00                	push   $0x0
  pushl $204
80100870:	68 cc 00 00 00       	push   $0xcc
  jmp alltraps
80100875:	e9 cf f7 ff ff       	jmp    80100049 <alltraps>

8010087a <vector205>:
.globl vector205
vector205:
  pushl $0
8010087a:	6a 00                	push   $0x0
  pushl $205
8010087c:	68 cd 00 00 00       	push   $0xcd
  jmp alltraps
80100881:	e9 c3 f7 ff ff       	jmp    80100049 <alltraps>

80100886 <vector206>:
.globl vector206
vector206:
  pushl $0
80100886:	6a 00                	push   $0x0
  pushl $206
80100888:	68 ce 00 00 00       	push   $0xce
  jmp alltraps
8010088d:	e9 b7 f7 ff ff       	jmp    80100049 <alltraps>

80100892 <vector207>:
.globl vector207
vector207:
  pushl $0
80100892:	6a 00                	push   $0x0
  pushl $207
80100894:	68 cf 00 00 00       	push   $0xcf
  jmp alltraps
80100899:	e9 ab f7 ff ff       	jmp    80100049 <alltraps>

8010089e <vector208>:
.globl vector208
vector208:
  pushl $0
8010089e:	6a 00                	push   $0x0
  pushl $208
801008a0:	68 d0 00 00 00       	push   $0xd0
  jmp alltraps
801008a5:	e9 9f f7 ff ff       	jmp    80100049 <alltraps>

801008aa <vector209>:
.globl vector209
vector209:
  pushl $0
801008aa:	6a 00                	push   $0x0
  pushl $209
801008ac:	68 d1 00 00 00       	push   $0xd1
  jmp alltraps
801008b1:	e9 93 f7 ff ff       	jmp    80100049 <alltraps>

801008b6 <vector210>:
.globl vector210
vector210:
  pushl $0
801008b6:	6a 00                	push   $0x0
  pushl $210
801008b8:	68 d2 00 00 00       	push   $0xd2
  jmp alltraps
801008bd:	e9 87 f7 ff ff       	jmp    80100049 <alltraps>

801008c2 <vector211>:
.globl vector211
vector211:
  pushl $0
801008c2:	6a 00                	push   $0x0
  pushl $211
801008c4:	68 d3 00 00 00       	push   $0xd3
  jmp alltraps
801008c9:	e9 7b f7 ff ff       	jmp    80100049 <alltraps>

801008ce <vector212>:
.globl vector212
vector212:
  pushl $0
801008ce:	6a 00                	push   $0x0
  pushl $212
801008d0:	68 d4 00 00 00       	push   $0xd4
  jmp alltraps
801008d5:	e9 6f f7 ff ff       	jmp    80100049 <alltraps>

801008da <vector213>:
.globl vector213
vector213:
  pushl $0
801008da:	6a 00                	push   $0x0
  pushl $213
801008dc:	68 d5 00 00 00       	push   $0xd5
  jmp alltraps
801008e1:	e9 63 f7 ff ff       	jmp    80100049 <alltraps>

801008e6 <vector214>:
.globl vector214
vector214:
  pushl $0
801008e6:	6a 00                	push   $0x0
  pushl $214
801008e8:	68 d6 00 00 00       	push   $0xd6
  jmp alltraps
801008ed:	e9 57 f7 ff ff       	jmp    80100049 <alltraps>

801008f2 <vector215>:
.globl vector215
vector215:
  pushl $0
801008f2:	6a 00                	push   $0x0
  pushl $215
801008f4:	68 d7 00 00 00       	push   $0xd7
  jmp alltraps
801008f9:	e9 4b f7 ff ff       	jmp    80100049 <alltraps>

801008fe <vector216>:
.globl vector216
vector216:
  pushl $0
801008fe:	6a 00                	push   $0x0
  pushl $216
80100900:	68 d8 00 00 00       	push   $0xd8
  jmp alltraps
80100905:	e9 3f f7 ff ff       	jmp    80100049 <alltraps>

8010090a <vector217>:
.globl vector217
vector217:
  pushl $0
8010090a:	6a 00                	push   $0x0
  pushl $217
8010090c:	68 d9 00 00 00       	push   $0xd9
  jmp alltraps
80100911:	e9 33 f7 ff ff       	jmp    80100049 <alltraps>

80100916 <vector218>:
.globl vector218
vector218:
  pushl $0
80100916:	6a 00                	push   $0x0
  pushl $218
80100918:	68 da 00 00 00       	push   $0xda
  jmp alltraps
8010091d:	e9 27 f7 ff ff       	jmp    80100049 <alltraps>

80100922 <vector219>:
.globl vector219
vector219:
  pushl $0
80100922:	6a 00                	push   $0x0
  pushl $219
80100924:	68 db 00 00 00       	push   $0xdb
  jmp alltraps
80100929:	e9 1b f7 ff ff       	jmp    80100049 <alltraps>

8010092e <vector220>:
.globl vector220
vector220:
  pushl $0
8010092e:	6a 00                	push   $0x0
  pushl $220
80100930:	68 dc 00 00 00       	push   $0xdc
  jmp alltraps
80100935:	e9 0f f7 ff ff       	jmp    80100049 <alltraps>

8010093a <vector221>:
.globl vector221
vector221:
  pushl $0
8010093a:	6a 00                	push   $0x0
  pushl $221
8010093c:	68 dd 00 00 00       	push   $0xdd
  jmp alltraps
80100941:	e9 03 f7 ff ff       	jmp    80100049 <alltraps>

80100946 <vector222>:
.globl vector222
vector222:
  pushl $0
80100946:	6a 00                	push   $0x0
  pushl $222
80100948:	68 de 00 00 00       	push   $0xde
  jmp alltraps
8010094d:	e9 f7 f6 ff ff       	jmp    80100049 <alltraps>

80100952 <vector223>:
.globl vector223
vector223:
  pushl $0
80100952:	6a 00                	push   $0x0
  pushl $223
80100954:	68 df 00 00 00       	push   $0xdf
  jmp alltraps
80100959:	e9 eb f6 ff ff       	jmp    80100049 <alltraps>

8010095e <vector224>:
.globl vector224
vector224:
  pushl $0
8010095e:	6a 00                	push   $0x0
  pushl $224
80100960:	68 e0 00 00 00       	push   $0xe0
  jmp alltraps
80100965:	e9 df f6 ff ff       	jmp    80100049 <alltraps>

8010096a <vector225>:
.globl vector225
vector225:
  pushl $0
8010096a:	6a 00                	push   $0x0
  pushl $225
8010096c:	68 e1 00 00 00       	push   $0xe1
  jmp alltraps
80100971:	e9 d3 f6 ff ff       	jmp    80100049 <alltraps>

80100976 <vector226>:
.globl vector226
vector226:
  pushl $0
80100976:	6a 00                	push   $0x0
  pushl $226
80100978:	68 e2 00 00 00       	push   $0xe2
  jmp alltraps
8010097d:	e9 c7 f6 ff ff       	jmp    80100049 <alltraps>

80100982 <vector227>:
.globl vector227
vector227:
  pushl $0
80100982:	6a 00                	push   $0x0
  pushl $227
80100984:	68 e3 00 00 00       	push   $0xe3
  jmp alltraps
80100989:	e9 bb f6 ff ff       	jmp    80100049 <alltraps>

8010098e <vector228>:
.globl vector228
vector228:
  pushl $0
8010098e:	6a 00                	push   $0x0
  pushl $228
80100990:	68 e4 00 00 00       	push   $0xe4
  jmp alltraps
80100995:	e9 af f6 ff ff       	jmp    80100049 <alltraps>

8010099a <vector229>:
.globl vector229
vector229:
  pushl $0
8010099a:	6a 00                	push   $0x0
  pushl $229
8010099c:	68 e5 00 00 00       	push   $0xe5
  jmp alltraps
801009a1:	e9 a3 f6 ff ff       	jmp    80100049 <alltraps>

801009a6 <vector230>:
.globl vector230
vector230:
  pushl $0
801009a6:	6a 00                	push   $0x0
  pushl $230
801009a8:	68 e6 00 00 00       	push   $0xe6
  jmp alltraps
801009ad:	e9 97 f6 ff ff       	jmp    80100049 <alltraps>

801009b2 <vector231>:
.globl vector231
vector231:
  pushl $0
801009b2:	6a 00                	push   $0x0
  pushl $231
801009b4:	68 e7 00 00 00       	push   $0xe7
  jmp alltraps
801009b9:	e9 8b f6 ff ff       	jmp    80100049 <alltraps>

801009be <vector232>:
.globl vector232
vector232:
  pushl $0
801009be:	6a 00                	push   $0x0
  pushl $232
801009c0:	68 e8 00 00 00       	push   $0xe8
  jmp alltraps
801009c5:	e9 7f f6 ff ff       	jmp    80100049 <alltraps>

801009ca <vector233>:
.globl vector233
vector233:
  pushl $0
801009ca:	6a 00                	push   $0x0
  pushl $233
801009cc:	68 e9 00 00 00       	push   $0xe9
  jmp alltraps
801009d1:	e9 73 f6 ff ff       	jmp    80100049 <alltraps>

801009d6 <vector234>:
.globl vector234
vector234:
  pushl $0
801009d6:	6a 00                	push   $0x0
  pushl $234
801009d8:	68 ea 00 00 00       	push   $0xea
  jmp alltraps
801009dd:	e9 67 f6 ff ff       	jmp    80100049 <alltraps>

801009e2 <vector235>:
.globl vector235
vector235:
  pushl $0
801009e2:	6a 00                	push   $0x0
  pushl $235
801009e4:	68 eb 00 00 00       	push   $0xeb
  jmp alltraps
801009e9:	e9 5b f6 ff ff       	jmp    80100049 <alltraps>

801009ee <vector236>:
.globl vector236
vector236:
  pushl $0
801009ee:	6a 00                	push   $0x0
  pushl $236
801009f0:	68 ec 00 00 00       	push   $0xec
  jmp alltraps
801009f5:	e9 4f f6 ff ff       	jmp    80100049 <alltraps>

801009fa <vector237>:
.globl vector237
vector237:
  pushl $0
801009fa:	6a 00                	push   $0x0
  pushl $237
801009fc:	68 ed 00 00 00       	push   $0xed
  jmp alltraps
80100a01:	e9 43 f6 ff ff       	jmp    80100049 <alltraps>

80100a06 <vector238>:
.globl vector238
vector238:
  pushl $0
80100a06:	6a 00                	push   $0x0
  pushl $238
80100a08:	68 ee 00 00 00       	push   $0xee
  jmp alltraps
80100a0d:	e9 37 f6 ff ff       	jmp    80100049 <alltraps>

80100a12 <vector239>:
.globl vector239
vector239:
  pushl $0
80100a12:	6a 00                	push   $0x0
  pushl $239
80100a14:	68 ef 00 00 00       	push   $0xef
  jmp alltraps
80100a19:	e9 2b f6 ff ff       	jmp    80100049 <alltraps>

80100a1e <vector240>:
.globl vector240
vector240:
  pushl $0
80100a1e:	6a 00                	push   $0x0
  pushl $240
80100a20:	68 f0 00 00 00       	push   $0xf0
  jmp alltraps
80100a25:	e9 1f f6 ff ff       	jmp    80100049 <alltraps>

80100a2a <vector241>:
.globl vector241
vector241:
  pushl $0
80100a2a:	6a 00                	push   $0x0
  pushl $241
80100a2c:	68 f1 00 00 00       	push   $0xf1
  jmp alltraps
80100a31:	e9 13 f6 ff ff       	jmp    80100049 <alltraps>

80100a36 <vector242>:
.globl vector242
vector242:
  pushl $0
80100a36:	6a 00                	push   $0x0
  pushl $242
80100a38:	68 f2 00 00 00       	push   $0xf2
  jmp alltraps
80100a3d:	e9 07 f6 ff ff       	jmp    80100049 <alltraps>

80100a42 <vector243>:
.globl vector243
vector243:
  pushl $0
80100a42:	6a 00                	push   $0x0
  pushl $243
80100a44:	68 f3 00 00 00       	push   $0xf3
  jmp alltraps
80100a49:	e9 fb f5 ff ff       	jmp    80100049 <alltraps>

80100a4e <vector244>:
.globl vector244
vector244:
  pushl $0
80100a4e:	6a 00                	push   $0x0
  pushl $244
80100a50:	68 f4 00 00 00       	push   $0xf4
  jmp alltraps
80100a55:	e9 ef f5 ff ff       	jmp    80100049 <alltraps>

80100a5a <vector245>:
.globl vector245
vector245:
  pushl $0
80100a5a:	6a 00                	push   $0x0
  pushl $245
80100a5c:	68 f5 00 00 00       	push   $0xf5
  jmp alltraps
80100a61:	e9 e3 f5 ff ff       	jmp    80100049 <alltraps>

80100a66 <vector246>:
.globl vector246
vector246:
  pushl $0
80100a66:	6a 00                	push   $0x0
  pushl $246
80100a68:	68 f6 00 00 00       	push   $0xf6
  jmp alltraps
80100a6d:	e9 d7 f5 ff ff       	jmp    80100049 <alltraps>

80100a72 <vector247>:
.globl vector247
vector247:
  pushl $0
80100a72:	6a 00                	push   $0x0
  pushl $247
80100a74:	68 f7 00 00 00       	push   $0xf7
  jmp alltraps
80100a79:	e9 cb f5 ff ff       	jmp    80100049 <alltraps>

80100a7e <vector248>:
.globl vector248
vector248:
  pushl $0
80100a7e:	6a 00                	push   $0x0
  pushl $248
80100a80:	68 f8 00 00 00       	push   $0xf8
  jmp alltraps
80100a85:	e9 bf f5 ff ff       	jmp    80100049 <alltraps>

80100a8a <vector249>:
.globl vector249
vector249:
  pushl $0
80100a8a:	6a 00                	push   $0x0
  pushl $249
80100a8c:	68 f9 00 00 00       	push   $0xf9
  jmp alltraps
80100a91:	e9 b3 f5 ff ff       	jmp    80100049 <alltraps>

80100a96 <vector250>:
.globl vector250
vector250:
  pushl $0
80100a96:	6a 00                	push   $0x0
  pushl $250
80100a98:	68 fa 00 00 00       	push   $0xfa
  jmp alltraps
80100a9d:	e9 a7 f5 ff ff       	jmp    80100049 <alltraps>

80100aa2 <vector251>:
.globl vector251
vector251:
  pushl $0
80100aa2:	6a 00                	push   $0x0
  pushl $251
80100aa4:	68 fb 00 00 00       	push   $0xfb
  jmp alltraps
80100aa9:	e9 9b f5 ff ff       	jmp    80100049 <alltraps>

80100aae <vector252>:
.globl vector252
vector252:
  pushl $0
80100aae:	6a 00                	push   $0x0
  pushl $252
80100ab0:	68 fc 00 00 00       	push   $0xfc
  jmp alltraps
80100ab5:	e9 8f f5 ff ff       	jmp    80100049 <alltraps>

80100aba <vector253>:
.globl vector253
vector253:
  pushl $0
80100aba:	6a 00                	push   $0x0
  pushl $253
80100abc:	68 fd 00 00 00       	push   $0xfd
  jmp alltraps
80100ac1:	e9 83 f5 ff ff       	jmp    80100049 <alltraps>

80100ac6 <vector254>:
.globl vector254
vector254:
  pushl $0
80100ac6:	6a 00                	push   $0x0
  pushl $254
80100ac8:	68 fe 00 00 00       	push   $0xfe
  jmp alltraps
80100acd:	e9 77 f5 ff ff       	jmp    80100049 <alltraps>

80100ad2 <vector255>:
.globl vector255
vector255:
  pushl $0
80100ad2:	6a 00                	push   $0x0
  pushl $255
80100ad4:	68 ff 00 00 00       	push   $0xff
  jmp alltraps
80100ad9:	e9 6b f5 ff ff       	jmp    80100049 <alltraps>
80100ade:	66 90                	xchg   %ax,%ax

80100ae0 <binit>:
  struct buf head;
} bcache;

void
binit(void)
{
80100ae0:	55                   	push   %ebp
80100ae1:	89 e5                	mov    %esp,%ebp
80100ae3:	53                   	push   %ebx
80100ae4:	83 ec 0c             	sub    $0xc,%esp
  struct buf *b;

  initlock(&bcache.lock, "bcache");
80100ae7:	68 20 64 10 80       	push   $0x80106420
80100aec:	68 c0 a1 10 80       	push   $0x8010a1c0
80100af1:	e8 2e 3b 00 00       	call   80104624 <initlock>

//PAGEBREAK!
  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
80100af6:	c7 05 0c e9 10 80 bc 	movl   $0x8010e8bc,0x8010e90c
80100afd:	e8 10 80 
  bcache.head.next = &bcache.head;
80100b00:	c7 05 10 e9 10 80 bc 	movl   $0x8010e8bc,0x8010e910
80100b07:	e8 10 80 
80100b0a:	83 c4 10             	add    $0x10,%esp
80100b0d:	ba bc e8 10 80       	mov    $0x8010e8bc,%edx
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
80100b12:	bb f4 a1 10 80       	mov    $0x8010a1f4,%ebx
80100b17:	eb 05                	jmp    80100b1e <binit+0x3e>
80100b19:	8d 76 00             	lea    0x0(%esi),%esi
80100b1c:	89 c3                	mov    %eax,%ebx
    b->next = bcache.head.next;
80100b1e:	89 53 54             	mov    %edx,0x54(%ebx)
    b->prev = &bcache.head;
80100b21:	c7 43 50 bc e8 10 80 	movl   $0x8010e8bc,0x50(%ebx)
    initsleeplock(&b->lock, "buffer");
80100b28:	83 ec 08             	sub    $0x8,%esp
80100b2b:	68 27 64 10 80       	push   $0x80106427
80100b30:	8d 43 0c             	lea    0xc(%ebx),%eax
80100b33:	50                   	push   %eax
80100b34:	e8 ff 39 00 00       	call   80104538 <initsleeplock>
    bcache.head.next->prev = b;
80100b39:	a1 10 e9 10 80       	mov    0x8010e910,%eax
80100b3e:	89 58 50             	mov    %ebx,0x50(%eax)
    bcache.head.next = b;
80100b41:	89 1d 10 e9 10 80    	mov    %ebx,0x8010e910
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
80100b47:	8d 83 5c 02 00 00    	lea    0x25c(%ebx),%eax
80100b4d:	89 da                	mov    %ebx,%edx
80100b4f:	83 c4 10             	add    $0x10,%esp
80100b52:	3d bc e8 10 80       	cmp    $0x8010e8bc,%eax
80100b57:	75 c3                	jne    80100b1c <binit+0x3c>
  }
}
80100b59:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100b5c:	c9                   	leave  
80100b5d:	c3                   	ret    
80100b5e:	66 90                	xchg   %ax,%ax

80100b60 <bread>:
}

// Return a locked buf with the contents of the indicated block.
struct buf*
bread(uint dev, uint blockno)
{
80100b60:	55                   	push   %ebp
80100b61:	89 e5                	mov    %esp,%ebp
80100b63:	57                   	push   %edi
80100b64:	56                   	push   %esi
80100b65:	53                   	push   %ebx
80100b66:	83 ec 28             	sub    $0x28,%esp
80100b69:	8b 75 08             	mov    0x8(%ebp),%esi
80100b6c:	8b 7d 0c             	mov    0xc(%ebp),%edi
  acquire(&bcache.lock);
80100b6f:	68 c0 a1 10 80       	push   $0x8010a1c0
80100b74:	e8 6f 3b 00 00       	call   801046e8 <acquire>
  for(b = bcache.head.next; b != &bcache.head; b = b->next){
80100b79:	8b 1d 10 e9 10 80    	mov    0x8010e910,%ebx
80100b7f:	83 c4 10             	add    $0x10,%esp
80100b82:	81 fb bc e8 10 80    	cmp    $0x8010e8bc,%ebx
80100b88:	75 0d                	jne    80100b97 <bread+0x37>
80100b8a:	eb 1c                	jmp    80100ba8 <bread+0x48>
80100b8c:	8b 5b 54             	mov    0x54(%ebx),%ebx
80100b8f:	81 fb bc e8 10 80    	cmp    $0x8010e8bc,%ebx
80100b95:	74 11                	je     80100ba8 <bread+0x48>
    if(b->dev == dev && b->blockno == blockno){
80100b97:	3b 73 04             	cmp    0x4(%ebx),%esi
80100b9a:	75 f0                	jne    80100b8c <bread+0x2c>
80100b9c:	3b 7b 08             	cmp    0x8(%ebx),%edi
80100b9f:	75 eb                	jne    80100b8c <bread+0x2c>
      b->refcnt++;
80100ba1:	ff 43 4c             	incl   0x4c(%ebx)
80100ba4:	eb 3c                	jmp    80100be2 <bread+0x82>
80100ba6:	66 90                	xchg   %ax,%ax
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
80100ba8:	8b 1d 0c e9 10 80    	mov    0x8010e90c,%ebx
80100bae:	81 fb bc e8 10 80    	cmp    $0x8010e8bc,%ebx
80100bb4:	75 0d                	jne    80100bc3 <bread+0x63>
80100bb6:	eb 66                	jmp    80100c1e <bread+0xbe>
80100bb8:	8b 5b 50             	mov    0x50(%ebx),%ebx
80100bbb:	81 fb bc e8 10 80    	cmp    $0x8010e8bc,%ebx
80100bc1:	74 5b                	je     80100c1e <bread+0xbe>
    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
80100bc3:	8b 43 4c             	mov    0x4c(%ebx),%eax
80100bc6:	85 c0                	test   %eax,%eax
80100bc8:	75 ee                	jne    80100bb8 <bread+0x58>
80100bca:	f6 03 04             	testb  $0x4,(%ebx)
80100bcd:	75 e9                	jne    80100bb8 <bread+0x58>
      b->dev = dev;
80100bcf:	89 73 04             	mov    %esi,0x4(%ebx)
      b->blockno = blockno;
80100bd2:	89 7b 08             	mov    %edi,0x8(%ebx)
      b->flags = 0;
80100bd5:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
      b->refcnt = 1;
80100bdb:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
      release(&bcache.lock);
80100be2:	83 ec 0c             	sub    $0xc,%esp
80100be5:	68 c0 a1 10 80       	push   $0x8010a1c0
80100bea:	e8 cd 3b 00 00       	call   801047bc <release>
      acquiresleep(&b->lock);
80100bef:	8d 43 0c             	lea    0xc(%ebx),%eax
80100bf2:	89 04 24             	mov    %eax,(%esp)
80100bf5:	e8 72 39 00 00       	call   8010456c <acquiresleep>
80100bfa:	83 c4 10             	add    $0x10,%esp
80100bfd:	89 d8                	mov    %ebx,%eax
  struct buf *b;

  b = bget(dev, blockno);
  if((b->flags & B_VALID) == 0) {
80100bff:	f6 03 02             	testb  $0x2,(%ebx)
80100c02:	75 12                	jne    80100c16 <bread+0xb6>
    iderw(b);
80100c04:	83 ec 0c             	sub    $0xc,%esp
80100c07:	53                   	push   %ebx
80100c08:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
80100c0b:	e8 04 1d 00 00       	call   80102914 <iderw>
80100c10:	83 c4 10             	add    $0x10,%esp
80100c13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  }
  return b;
}
80100c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100c19:	5b                   	pop    %ebx
80100c1a:	5e                   	pop    %esi
80100c1b:	5f                   	pop    %edi
80100c1c:	5d                   	pop    %ebp
80100c1d:	c3                   	ret    
  panic("bget: no buffers");
80100c1e:	83 ec 0c             	sub    $0xc,%esp
80100c21:	68 2e 64 10 80       	push   $0x8010642e
80100c26:	e8 b9 01 00 00       	call   80100de4 <panic>
80100c2b:	90                   	nop

80100c2c <bwrite>:

// Write b's contents to disk.  Must be locked.
void
bwrite(struct buf *b)
{
80100c2c:	55                   	push   %ebp
80100c2d:	89 e5                	mov    %esp,%ebp
80100c2f:	53                   	push   %ebx
80100c30:	83 ec 10             	sub    $0x10,%esp
80100c33:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(!holdingsleep(&b->lock))
80100c36:	8d 43 0c             	lea    0xc(%ebx),%eax
80100c39:	50                   	push   %eax
80100c3a:	e8 bd 39 00 00       	call   801045fc <holdingsleep>
80100c3f:	83 c4 10             	add    $0x10,%esp
80100c42:	85 c0                	test   %eax,%eax
80100c44:	74 0f                	je     80100c55 <bwrite+0x29>
    panic("bwrite");
  b->flags |= B_DIRTY;
80100c46:	83 0b 04             	orl    $0x4,(%ebx)
  iderw(b);
80100c49:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
80100c4c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80100c4f:	c9                   	leave  
  iderw(b);
80100c50:	e9 bf 1c 00 00       	jmp    80102914 <iderw>
    panic("bwrite");
80100c55:	83 ec 0c             	sub    $0xc,%esp
80100c58:	68 3f 64 10 80       	push   $0x8010643f
80100c5d:	e8 82 01 00 00       	call   80100de4 <panic>
80100c62:	66 90                	xchg   %ax,%ax

80100c64 <brelse>:

// Release a locked buffer.
// Move to the head of the MRU list.
void
brelse(struct buf *b)
{
80100c64:	55                   	push   %ebp
80100c65:	89 e5                	mov    %esp,%ebp
80100c67:	56                   	push   %esi
80100c68:	53                   	push   %ebx
80100c69:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(!holdingsleep(&b->lock))
80100c6c:	8d 73 0c             	lea    0xc(%ebx),%esi
80100c6f:	83 ec 0c             	sub    $0xc,%esp
80100c72:	56                   	push   %esi
80100c73:	e8 84 39 00 00       	call   801045fc <holdingsleep>
80100c78:	83 c4 10             	add    $0x10,%esp
80100c7b:	85 c0                	test   %eax,%eax
80100c7d:	74 64                	je     80100ce3 <brelse+0x7f>
    panic("brelse");

  releasesleep(&b->lock);
80100c7f:	83 ec 0c             	sub    $0xc,%esp
80100c82:	56                   	push   %esi
80100c83:	e8 38 39 00 00       	call   801045c0 <releasesleep>

  acquire(&bcache.lock);
80100c88:	c7 04 24 c0 a1 10 80 	movl   $0x8010a1c0,(%esp)
80100c8f:	e8 54 3a 00 00       	call   801046e8 <acquire>
  b->refcnt--;
80100c94:	8b 43 4c             	mov    0x4c(%ebx),%eax
80100c97:	48                   	dec    %eax
80100c98:	89 43 4c             	mov    %eax,0x4c(%ebx)
  if (b->refcnt == 0) {
80100c9b:	83 c4 10             	add    $0x10,%esp
80100c9e:	85 c0                	test   %eax,%eax
80100ca0:	75 2f                	jne    80100cd1 <brelse+0x6d>
    // no one is waiting for it.
    b->next->prev = b->prev;
80100ca2:	8b 43 54             	mov    0x54(%ebx),%eax
80100ca5:	8b 53 50             	mov    0x50(%ebx),%edx
80100ca8:	89 50 50             	mov    %edx,0x50(%eax)
    b->prev->next = b->next;
80100cab:	8b 43 50             	mov    0x50(%ebx),%eax
80100cae:	8b 53 54             	mov    0x54(%ebx),%edx
80100cb1:	89 50 54             	mov    %edx,0x54(%eax)
    b->next = bcache.head.next;
80100cb4:	a1 10 e9 10 80       	mov    0x8010e910,%eax
80100cb9:	89 43 54             	mov    %eax,0x54(%ebx)
    b->prev = &bcache.head;
80100cbc:	c7 43 50 bc e8 10 80 	movl   $0x8010e8bc,0x50(%ebx)
    bcache.head.next->prev = b;
80100cc3:	a1 10 e9 10 80       	mov    0x8010e910,%eax
80100cc8:	89 58 50             	mov    %ebx,0x50(%eax)
    bcache.head.next = b;
80100ccb:	89 1d 10 e9 10 80    	mov    %ebx,0x8010e910
  }
  
  release(&bcache.lock);
80100cd1:	c7 45 08 c0 a1 10 80 	movl   $0x8010a1c0,0x8(%ebp)
}
80100cd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
80100cdb:	5b                   	pop    %ebx
80100cdc:	5e                   	pop    %esi
80100cdd:	5d                   	pop    %ebp
  release(&bcache.lock);
80100cde:	e9 d9 3a 00 00       	jmp    801047bc <release>
    panic("brelse");
80100ce3:	83 ec 0c             	sub    $0xc,%esp
80100ce6:	68 46 64 10 80       	push   $0x80106446
80100ceb:	e8 f4 00 00 00       	call   80100de4 <panic>

80100cf0 <consoleread>:
  }
}

int
consoleread(struct inode *ip, char *dst, int n)
{
80100cf0:	55                   	push   %ebp
80100cf1:	89 e5                	mov    %esp,%ebp
80100cf3:	57                   	push   %edi
80100cf4:	56                   	push   %esi
80100cf5:	53                   	push   %ebx
80100cf6:	83 ec 28             	sub    $0x28,%esp
80100cf9:	8b 7d 08             	mov    0x8(%ebp),%edi
80100cfc:	8b 75 0c             	mov    0xc(%ebp),%esi
  uint target;
  int c;

  iunlock(ip);
80100cff:	57                   	push   %edi
80100d00:	e8 23 13 00 00       	call   80102028 <iunlock>
  target = n;
  acquire(&cons.lock);
80100d05:	c7 04 24 20 91 10 80 	movl   $0x80109120,(%esp)
80100d0c:	e8 d7 39 00 00       	call   801046e8 <acquire>
  while(n > 0){
80100d11:	83 c4 10             	add    $0x10,%esp
80100d14:	8b 5d 10             	mov    0x10(%ebp),%ebx
80100d17:	31 c0                	xor    %eax,%eax
80100d19:	85 db                	test   %ebx,%ebx
80100d1b:	0f 8e 92 00 00 00    	jle    80100db3 <consoleread+0xc3>
    while(input.r == input.w){
80100d21:	a1 a0 eb 10 80       	mov    0x8010eba0,%eax
80100d26:	3b 05 a4 eb 10 80    	cmp    0x8010eba4,%eax
80100d2c:	74 24                	je     80100d52 <consoleread+0x62>
80100d2e:	eb 54                	jmp    80100d84 <consoleread+0x94>
      if(myproc()->killed){
        release(&cons.lock);
        ilock(ip);
        return -1;
      }
      sleep(&input.r, &cons.lock);
80100d30:	83 ec 08             	sub    $0x8,%esp
80100d33:	68 20 91 10 80       	push   $0x80109120
80100d38:	68 a0 eb 10 80       	push   $0x8010eba0
80100d3d:	e8 ea 34 00 00       	call   8010422c <sleep>
    while(input.r == input.w){
80100d42:	a1 a0 eb 10 80       	mov    0x8010eba0,%eax
80100d47:	83 c4 10             	add    $0x10,%esp
80100d4a:	3b 05 a4 eb 10 80    	cmp    0x8010eba4,%eax
80100d50:	75 32                	jne    80100d84 <consoleread+0x94>
      if(myproc()->killed){
80100d52:	e8 e1 2f 00 00       	call   80103d38 <myproc>
80100d57:	8b 40 24             	mov    0x24(%eax),%eax
80100d5a:	85 c0                	test   %eax,%eax
80100d5c:	74 d2                	je     80100d30 <consoleread+0x40>
        release(&cons.lock);
80100d5e:	83 ec 0c             	sub    $0xc,%esp
80100d61:	68 20 91 10 80       	push   $0x80109120
80100d66:	e8 51 3a 00 00       	call   801047bc <release>
        ilock(ip);
80100d6b:	89 3c 24             	mov    %edi,(%esp)
80100d6e:	e8 ed 11 00 00       	call   80101f60 <ilock>
        return -1;
80100d73:	83 c4 10             	add    $0x10,%esp
80100d76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  }
  release(&cons.lock);
  ilock(ip);

  return target - n;
}
80100d7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100d7e:	5b                   	pop    %ebx
80100d7f:	5e                   	pop    %esi
80100d80:	5f                   	pop    %edi
80100d81:	5d                   	pop    %ebp
80100d82:	c3                   	ret    
80100d83:	90                   	nop
    c = input.buf[input.r++ % INPUT_BUF];
80100d84:	8d 50 01             	lea    0x1(%eax),%edx
80100d87:	89 15 a0 eb 10 80    	mov    %edx,0x8010eba0
80100d8d:	89 c2                	mov    %eax,%edx
80100d8f:	83 e2 7f             	and    $0x7f,%edx
80100d92:	0f be 92 20 eb 10 80 	movsbl -0x7fef14e0(%edx),%edx
    if(c == C('D')){  // EOF
80100d99:	83 fa 04             	cmp    $0x4,%edx
80100d9c:	74 35                	je     80100dd3 <consoleread+0xe3>
    *dst++ = c;
80100d9e:	46                   	inc    %esi
80100d9f:	88 56 ff             	mov    %dl,-0x1(%esi)
    --n;
80100da2:	4b                   	dec    %ebx
    if(c == '\n')
80100da3:	83 fa 0a             	cmp    $0xa,%edx
80100da6:	74 35                	je     80100ddd <consoleread+0xed>
  while(n > 0){
80100da8:	85 db                	test   %ebx,%ebx
80100daa:	0f 85 71 ff ff ff    	jne    80100d21 <consoleread+0x31>
80100db0:	8b 45 10             	mov    0x10(%ebp),%eax
80100db3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  release(&cons.lock);
80100db6:	83 ec 0c             	sub    $0xc,%esp
80100db9:	68 20 91 10 80       	push   $0x80109120
80100dbe:	e8 f9 39 00 00       	call   801047bc <release>
  ilock(ip);
80100dc3:	89 3c 24             	mov    %edi,(%esp)
80100dc6:	e8 95 11 00 00       	call   80101f60 <ilock>
  return target - n;
80100dcb:	83 c4 10             	add    $0x10,%esp
80100dce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100dd1:	eb a8                	jmp    80100d7b <consoleread+0x8b>
      if(n < target){
80100dd3:	39 5d 10             	cmp    %ebx,0x10(%ebp)
80100dd6:	76 05                	jbe    80100ddd <consoleread+0xed>
        input.r--;
80100dd8:	a3 a0 eb 10 80       	mov    %eax,0x8010eba0
80100ddd:	8b 45 10             	mov    0x10(%ebp),%eax
80100de0:	29 d8                	sub    %ebx,%eax
80100de2:	eb cf                	jmp    80100db3 <consoleread+0xc3>

80100de4 <panic>:
{
80100de4:	55                   	push   %ebp
80100de5:	89 e5                	mov    %esp,%ebp
80100de7:	56                   	push   %esi
80100de8:	53                   	push   %ebx
80100de9:	83 ec 30             	sub    $0x30,%esp
}

static inline void
cli(void)
{
  asm volatile("cli");
80100dec:	fa                   	cli    
  cons.locking = 0;
80100ded:	c7 05 54 91 10 80 00 	movl   $0x0,0x80109154
80100df4:	00 00 00 
  cprintf("lapicid %d: panic: ", lapicid());
80100df7:	e8 dc 20 00 00       	call   80102ed8 <lapicid>
80100dfc:	83 ec 08             	sub    $0x8,%esp
80100dff:	50                   	push   %eax
80100e00:	68 4d 64 10 80       	push   $0x8010644d
80100e05:	e8 8a 02 00 00       	call   80101094 <cprintf>
  cprintf(s);
80100e0a:	58                   	pop    %eax
80100e0b:	ff 75 08             	pushl  0x8(%ebp)
80100e0e:	e8 81 02 00 00       	call   80101094 <cprintf>
  cprintf("\n");
80100e13:	c7 04 24 97 6d 10 80 	movl   $0x80106d97,(%esp)
80100e1a:	e8 75 02 00 00       	call   80101094 <cprintf>
  getcallerpcs(&s, pcs);
80100e1f:	5a                   	pop    %edx
80100e20:	59                   	pop    %ecx
80100e21:	8d 5d d0             	lea    -0x30(%ebp),%ebx
80100e24:	53                   	push   %ebx
80100e25:	8d 45 08             	lea    0x8(%ebp),%eax
80100e28:	50                   	push   %eax
80100e29:	e8 12 38 00 00       	call   80104640 <getcallerpcs>
80100e2e:	8d 75 f8             	lea    -0x8(%ebp),%esi
80100e31:	83 c4 10             	add    $0x10,%esp
    cprintf(" %p", pcs[i]);
80100e34:	83 ec 08             	sub    $0x8,%esp
80100e37:	ff 33                	pushl  (%ebx)
80100e39:	68 61 64 10 80       	push   $0x80106461
80100e3e:	e8 51 02 00 00       	call   80101094 <cprintf>
80100e43:	83 c3 04             	add    $0x4,%ebx
  for(i=0; i<10; i++)
80100e46:	83 c4 10             	add    $0x10,%esp
80100e49:	39 f3                	cmp    %esi,%ebx
80100e4b:	75 e7                	jne    80100e34 <panic+0x50>
  panicked = 1; // freeze other CPU
80100e4d:	c7 05 58 91 10 80 01 	movl   $0x1,0x80109158
80100e54:	00 00 00 
    ;
80100e57:	eb fe                	jmp    80100e57 <panic+0x73>
80100e59:	8d 76 00             	lea    0x0(%esi),%esi

80100e5c <consputc>:
  if(panicked){
80100e5c:	8b 15 58 91 10 80    	mov    0x80109158,%edx
80100e62:	85 d2                	test   %edx,%edx
80100e64:	74 06                	je     80100e6c <consputc+0x10>
80100e66:	fa                   	cli    
      ;
80100e67:	eb fe                	jmp    80100e67 <consputc+0xb>
80100e69:	8d 76 00             	lea    0x0(%esi),%esi
{
80100e6c:	55                   	push   %ebp
80100e6d:	89 e5                	mov    %esp,%ebp
80100e6f:	57                   	push   %edi
80100e70:	56                   	push   %esi
80100e71:	53                   	push   %ebx
80100e72:	83 ec 1c             	sub    $0x1c,%esp
80100e75:	89 c3                	mov    %eax,%ebx
  if(c == BACKSPACE){
80100e77:	3d 00 01 00 00       	cmp    $0x100,%eax
80100e7c:	0f 84 a8 00 00 00    	je     80100f2a <consputc+0xce>
    uartputc(c);
80100e82:	83 ec 0c             	sub    $0xc,%esp
80100e85:	50                   	push   %eax
80100e86:	e8 ed 4c 00 00       	call   80105b78 <uartputc>
80100e8b:	83 c4 10             	add    $0x10,%esp
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80100e8e:	bf d4 03 00 00       	mov    $0x3d4,%edi
80100e93:	b0 0e                	mov    $0xe,%al
80100e95:	89 fa                	mov    %edi,%edx
80100e97:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80100e98:	be d5 03 00 00       	mov    $0x3d5,%esi
80100e9d:	89 f2                	mov    %esi,%edx
80100e9f:	ec                   	in     (%dx),%al
  pos = inb(CRTPORT+1) << 8;
80100ea0:	0f b6 c8             	movzbl %al,%ecx
80100ea3:	c1 e1 08             	shl    $0x8,%ecx
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80100ea6:	b0 0f                	mov    $0xf,%al
80100ea8:	89 fa                	mov    %edi,%edx
80100eaa:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80100eab:	89 f2                	mov    %esi,%edx
80100ead:	ec                   	in     (%dx),%al
  pos |= inb(CRTPORT+1);
80100eae:	0f b6 c0             	movzbl %al,%eax
80100eb1:	09 c1                	or     %eax,%ecx
  if(c == '\n')
80100eb3:	83 fb 0a             	cmp    $0xa,%ebx
80100eb6:	0f 84 f3 00 00 00    	je     80100faf <consputc+0x153>
  else if(c == BACKSPACE){
80100ebc:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
80100ec2:	0f 84 db 00 00 00    	je     80100fa3 <consputc+0x147>
    crt[pos++] = (c&0xff) | 0x0700;  // black on white
80100ec8:	8d 71 01             	lea    0x1(%ecx),%esi
80100ecb:	0f b6 c3             	movzbl %bl,%eax
80100ece:	80 cc 07             	or     $0x7,%ah
80100ed1:	66 89 84 09 00 80 0b 	mov    %ax,-0x7ff48000(%ecx,%ecx,1)
80100ed8:	80 
  if(pos < 0 || pos > 25*80)
80100ed9:	81 fe d0 07 00 00    	cmp    $0x7d0,%esi
80100edf:	0f 8f b1 00 00 00    	jg     80100f96 <consputc+0x13a>
  if((pos/80) >= 24){  // Scroll up.
80100ee5:	81 fe 7f 07 00 00    	cmp    $0x77f,%esi
80100eeb:	7f 67                	jg     80100f54 <consputc+0xf8>
80100eed:	89 f0                	mov    %esi,%eax
80100eef:	c1 e8 08             	shr    $0x8,%eax
80100ef2:	89 45 d8             	mov    %eax,-0x28(%ebp)
80100ef5:	89 f1                	mov    %esi,%ecx
80100ef7:	8d 9c 36 00 80 0b 80 	lea    -0x7ff48000(%esi,%esi,1),%ebx
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80100efe:	bf d4 03 00 00       	mov    $0x3d4,%edi
80100f03:	b0 0e                	mov    $0xe,%al
80100f05:	89 fa                	mov    %edi,%edx
80100f07:	ee                   	out    %al,(%dx)
80100f08:	be d5 03 00 00       	mov    $0x3d5,%esi
80100f0d:	8a 45 d8             	mov    -0x28(%ebp),%al
80100f10:	89 f2                	mov    %esi,%edx
80100f12:	ee                   	out    %al,(%dx)
80100f13:	b0 0f                	mov    $0xf,%al
80100f15:	89 fa                	mov    %edi,%edx
80100f17:	ee                   	out    %al,(%dx)
80100f18:	88 c8                	mov    %cl,%al
80100f1a:	89 f2                	mov    %esi,%edx
80100f1c:	ee                   	out    %al,(%dx)
  crt[pos] = ' ' | 0x0700;
80100f1d:	66 c7 03 20 07       	movw   $0x720,(%ebx)
}
80100f22:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100f25:	5b                   	pop    %ebx
80100f26:	5e                   	pop    %esi
80100f27:	5f                   	pop    %edi
80100f28:	5d                   	pop    %ebp
80100f29:	c3                   	ret    
    uartputc('\b'); uartputc(' '); uartputc('\b');
80100f2a:	83 ec 0c             	sub    $0xc,%esp
80100f2d:	6a 08                	push   $0x8
80100f2f:	e8 44 4c 00 00       	call   80105b78 <uartputc>
80100f34:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
80100f3b:	e8 38 4c 00 00       	call   80105b78 <uartputc>
80100f40:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
80100f47:	e8 2c 4c 00 00       	call   80105b78 <uartputc>
80100f4c:	83 c4 10             	add    $0x10,%esp
80100f4f:	e9 3a ff ff ff       	jmp    80100e8e <consputc+0x32>
    memmove(crt, crt+80, sizeof(crt[0])*23*80);
80100f54:	50                   	push   %eax
80100f55:	68 60 0e 00 00       	push   $0xe60
80100f5a:	68 a0 80 0b 80       	push   $0x800b80a0
80100f5f:	68 00 80 0b 80       	push   $0x800b8000
80100f64:	e8 33 39 00 00       	call   8010489c <memmove>
    pos -= 80;
80100f69:	8d 7e b0             	lea    -0x50(%esi),%edi
    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
80100f6c:	8d 9c 3f 00 80 0b 80 	lea    -0x7ff48000(%edi,%edi,1),%ebx
80100f73:	83 c4 0c             	add    $0xc,%esp
80100f76:	b8 d0 07 00 00       	mov    $0x7d0,%eax
80100f7b:	29 f0                	sub    %esi,%eax
80100f7d:	01 c0                	add    %eax,%eax
80100f7f:	50                   	push   %eax
80100f80:	6a 00                	push   $0x0
80100f82:	53                   	push   %ebx
80100f83:	e8 80 38 00 00       	call   80104808 <memset>
80100f88:	89 f9                	mov    %edi,%ecx
80100f8a:	83 c4 10             	add    $0x10,%esp
80100f8d:	c6 45 d8 07          	movb   $0x7,-0x28(%ebp)
80100f91:	e9 68 ff ff ff       	jmp    80100efe <consputc+0xa2>
    panic("pos under/overflow");
80100f96:	83 ec 0c             	sub    $0xc,%esp
80100f99:	68 65 64 10 80       	push   $0x80106465
80100f9e:	e8 41 fe ff ff       	call   80100de4 <panic>
    if(pos > 0) --pos;
80100fa3:	85 c9                	test   %ecx,%ecx
80100fa5:	74 19                	je     80100fc0 <consputc+0x164>
80100fa7:	8d 71 ff             	lea    -0x1(%ecx),%esi
80100faa:	e9 2a ff ff ff       	jmp    80100ed9 <consputc+0x7d>
    pos += 80 - pos%80;
80100faf:	b3 50                	mov    $0x50,%bl
80100fb1:	89 c8                	mov    %ecx,%eax
80100fb3:	99                   	cltd   
80100fb4:	f7 fb                	idiv   %ebx
80100fb6:	29 d3                	sub    %edx,%ebx
80100fb8:	8d 34 19             	lea    (%ecx,%ebx,1),%esi
80100fbb:	e9 19 ff ff ff       	jmp    80100ed9 <consputc+0x7d>
    if(pos > 0) --pos;
80100fc0:	bb 00 80 0b 80       	mov    $0x800b8000,%ebx
80100fc5:	31 c9                	xor    %ecx,%ecx
80100fc7:	c6 45 d8 00          	movb   $0x0,-0x28(%ebp)
80100fcb:	e9 2e ff ff ff       	jmp    80100efe <consputc+0xa2>

80100fd0 <printint>:
{
80100fd0:	55                   	push   %ebp
80100fd1:	89 e5                	mov    %esp,%ebp
80100fd3:	57                   	push   %edi
80100fd4:	56                   	push   %esi
80100fd5:	53                   	push   %ebx
80100fd6:	83 ec 1c             	sub    $0x1c,%esp
80100fd9:	89 d6                	mov    %edx,%esi
  if(sign && (sign = xx < 0))
80100fdb:	85 c9                	test   %ecx,%ecx
80100fdd:	74 04                	je     80100fe3 <printint+0x13>
80100fdf:	85 c0                	test   %eax,%eax
80100fe1:	78 45                	js     80101028 <printint+0x58>
    x = xx;
80100fe3:	31 ff                	xor    %edi,%edi
  i = 0;
80100fe5:	31 c9                	xor    %ecx,%ecx
80100fe7:	8d 5d d7             	lea    -0x29(%ebp),%ebx
80100fea:	66 90                	xchg   %ax,%ax
    buf[i++] = digits[x % base];
80100fec:	41                   	inc    %ecx
80100fed:	31 d2                	xor    %edx,%edx
80100fef:	f7 f6                	div    %esi
80100ff1:	8a 92 90 64 10 80    	mov    -0x7fef9b70(%edx),%dl
80100ff7:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
  }while((x /= base) != 0);
80100ffa:	85 c0                	test   %eax,%eax
80100ffc:	75 ee                	jne    80100fec <printint+0x1c>
    buf[i++] = digits[x % base];
80100ffe:	89 c8                	mov    %ecx,%eax
  if(sign)
80101000:	85 ff                	test   %edi,%edi
80101002:	74 06                	je     8010100a <printint+0x3a>
    buf[i++] = '-';
80101004:	40                   	inc    %eax
80101005:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
8010100a:	8d 74 05 d7          	lea    -0x29(%ebp,%eax,1),%esi
8010100e:	66 90                	xchg   %ax,%ax
    consputc(buf[i]);
80101010:	0f be 06             	movsbl (%esi),%eax
80101013:	e8 44 fe ff ff       	call   80100e5c <consputc>
80101018:	4e                   	dec    %esi
  while(--i >= 0)
80101019:	39 de                	cmp    %ebx,%esi
8010101b:	75 f3                	jne    80101010 <printint+0x40>
}
8010101d:	83 c4 1c             	add    $0x1c,%esp
80101020:	5b                   	pop    %ebx
80101021:	5e                   	pop    %esi
80101022:	5f                   	pop    %edi
80101023:	5d                   	pop    %ebp
80101024:	c3                   	ret    
80101025:	8d 76 00             	lea    0x0(%esi),%esi
    x = -xx;
80101028:	f7 d8                	neg    %eax
8010102a:	bf 01 00 00 00       	mov    $0x1,%edi
8010102f:	eb b4                	jmp    80100fe5 <printint+0x15>
80101031:	8d 76 00             	lea    0x0(%esi),%esi

80101034 <consolewrite>:

int
consolewrite(struct inode *ip, char *buf, int n)
{
80101034:	55                   	push   %ebp
80101035:	89 e5                	mov    %esp,%ebp
80101037:	57                   	push   %edi
80101038:	56                   	push   %esi
80101039:	53                   	push   %ebx
8010103a:	83 ec 18             	sub    $0x18,%esp
8010103d:	8b 75 10             	mov    0x10(%ebp),%esi
  int i;

  iunlock(ip);
80101040:	ff 75 08             	pushl  0x8(%ebp)
80101043:	e8 e0 0f 00 00       	call   80102028 <iunlock>
  acquire(&cons.lock);
80101048:	c7 04 24 20 91 10 80 	movl   $0x80109120,(%esp)
8010104f:	e8 94 36 00 00       	call   801046e8 <acquire>
  for(i = 0; i < n; i++)
80101054:	83 c4 10             	add    $0x10,%esp
80101057:	85 f6                	test   %esi,%esi
80101059:	7e 16                	jle    80101071 <consolewrite+0x3d>
8010105b:	8b 7d 0c             	mov    0xc(%ebp),%edi
8010105e:	8d 1c 37             	lea    (%edi,%esi,1),%ebx
80101061:	8d 76 00             	lea    0x0(%esi),%esi
    consputc(buf[i] & 0xff);
80101064:	0f b6 07             	movzbl (%edi),%eax
80101067:	e8 f0 fd ff ff       	call   80100e5c <consputc>
8010106c:	47                   	inc    %edi
  for(i = 0; i < n; i++)
8010106d:	39 df                	cmp    %ebx,%edi
8010106f:	75 f3                	jne    80101064 <consolewrite+0x30>
  release(&cons.lock);
80101071:	83 ec 0c             	sub    $0xc,%esp
80101074:	68 20 91 10 80       	push   $0x80109120
80101079:	e8 3e 37 00 00       	call   801047bc <release>
  ilock(ip);
8010107e:	58                   	pop    %eax
8010107f:	ff 75 08             	pushl  0x8(%ebp)
80101082:	e8 d9 0e 00 00       	call   80101f60 <ilock>

  return n;
}
80101087:	89 f0                	mov    %esi,%eax
80101089:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010108c:	5b                   	pop    %ebx
8010108d:	5e                   	pop    %esi
8010108e:	5f                   	pop    %edi
8010108f:	5d                   	pop    %ebp
80101090:	c3                   	ret    
80101091:	8d 76 00             	lea    0x0(%esi),%esi

80101094 <cprintf>:
{
80101094:	55                   	push   %ebp
80101095:	89 e5                	mov    %esp,%ebp
80101097:	57                   	push   %edi
80101098:	56                   	push   %esi
80101099:	53                   	push   %ebx
8010109a:	83 ec 1c             	sub    $0x1c,%esp
  locking = cons.locking;
8010109d:	a1 54 91 10 80       	mov    0x80109154,%eax
801010a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
  if(locking)
801010a5:	85 c0                	test   %eax,%eax
801010a7:	0f 85 07 01 00 00    	jne    801011b4 <cprintf+0x120>
  if (fmt == 0)
801010ad:	8b 75 08             	mov    0x8(%ebp),%esi
801010b0:	85 f6                	test   %esi,%esi
801010b2:	0f 84 1b 01 00 00    	je     801011d3 <cprintf+0x13f>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
801010b8:	0f b6 06             	movzbl (%esi),%eax
801010bb:	85 c0                	test   %eax,%eax
801010bd:	74 5d                	je     8010111c <cprintf+0x88>
801010bf:	8d 7d 0c             	lea    0xc(%ebp),%edi
801010c2:	31 db                	xor    %ebx,%ebx
801010c4:	eb 43                	jmp    80101109 <cprintf+0x75>
801010c6:	66 90                	xchg   %ax,%ax
    c = fmt[++i] & 0xff;
801010c8:	43                   	inc    %ebx
801010c9:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
    if(c == 0)
801010cd:	85 d2                	test   %edx,%edx
801010cf:	74 4b                	je     8010111c <cprintf+0x88>
    switch(c){
801010d1:	83 fa 70             	cmp    $0x70,%edx
801010d4:	74 70                	je     80101146 <cprintf+0xb2>
801010d6:	7f 64                	jg     8010113c <cprintf+0xa8>
801010d8:	83 fa 25             	cmp    $0x25,%edx
801010db:	0f 84 9b 00 00 00    	je     8010117c <cprintf+0xe8>
801010e1:	83 fa 64             	cmp    $0x64,%edx
801010e4:	75 7a                	jne    80101160 <cprintf+0xcc>
      printint(*argp++, 10, 1);
801010e6:	8d 47 04             	lea    0x4(%edi),%eax
801010e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801010ec:	b9 01 00 00 00       	mov    $0x1,%ecx
801010f1:	ba 0a 00 00 00       	mov    $0xa,%edx
801010f6:	8b 07                	mov    (%edi),%eax
801010f8:	e8 d3 fe ff ff       	call   80100fd0 <printint>
801010fd:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
80101100:	43                   	inc    %ebx
80101101:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
80101105:	85 c0                	test   %eax,%eax
80101107:	74 13                	je     8010111c <cprintf+0x88>
    if(c != '%'){
80101109:	83 f8 25             	cmp    $0x25,%eax
8010110c:	74 ba                	je     801010c8 <cprintf+0x34>
      consputc('%');
8010110e:	e8 49 fd ff ff       	call   80100e5c <consputc>
  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
80101113:	43                   	inc    %ebx
80101114:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
80101118:	85 c0                	test   %eax,%eax
8010111a:	75 ed                	jne    80101109 <cprintf+0x75>
  if(locking)
8010111c:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010111f:	85 c0                	test   %eax,%eax
80101121:	74 10                	je     80101133 <cprintf+0x9f>
    release(&cons.lock);
80101123:	83 ec 0c             	sub    $0xc,%esp
80101126:	68 20 91 10 80       	push   $0x80109120
8010112b:	e8 8c 36 00 00       	call   801047bc <release>
80101130:	83 c4 10             	add    $0x10,%esp
}
80101133:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101136:	5b                   	pop    %ebx
80101137:	5e                   	pop    %esi
80101138:	5f                   	pop    %edi
80101139:	5d                   	pop    %ebp
8010113a:	c3                   	ret    
8010113b:	90                   	nop
    switch(c){
8010113c:	83 fa 73             	cmp    $0x73,%edx
8010113f:	74 47                	je     80101188 <cprintf+0xf4>
80101141:	83 fa 78             	cmp    $0x78,%edx
80101144:	75 1a                	jne    80101160 <cprintf+0xcc>
      printint(*argp++, 16, 0);
80101146:	8d 47 04             	lea    0x4(%edi),%eax
80101149:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010114c:	31 c9                	xor    %ecx,%ecx
8010114e:	ba 10 00 00 00       	mov    $0x10,%edx
80101153:	8b 07                	mov    (%edi),%eax
80101155:	e8 76 fe ff ff       	call   80100fd0 <printint>
8010115a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
      break;
8010115d:	eb a1                	jmp    80101100 <cprintf+0x6c>
8010115f:	90                   	nop
80101160:	89 55 e4             	mov    %edx,-0x1c(%ebp)
      consputc('%');
80101163:	b8 25 00 00 00       	mov    $0x25,%eax
80101168:	e8 ef fc ff ff       	call   80100e5c <consputc>
      consputc(c);
8010116d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101170:	89 d0                	mov    %edx,%eax
80101172:	e8 e5 fc ff ff       	call   80100e5c <consputc>
      break;
80101177:	eb 87                	jmp    80101100 <cprintf+0x6c>
80101179:	8d 76 00             	lea    0x0(%esi),%esi
      consputc('%');
8010117c:	b8 25 00 00 00       	mov    $0x25,%eax
80101181:	e8 d6 fc ff ff       	call   80100e5c <consputc>
80101186:	eb 8b                	jmp    80101113 <cprintf+0x7f>
      if((s = (char*)*argp++) == 0)
80101188:	8d 47 04             	lea    0x4(%edi),%eax
8010118b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010118e:	8b 3f                	mov    (%edi),%edi
80101190:	85 ff                	test   %edi,%edi
80101192:	74 38                	je     801011cc <cprintf+0x138>
      for(; *s; s++)
80101194:	0f be 07             	movsbl (%edi),%eax
80101197:	84 c0                	test   %al,%al
80101199:	74 0e                	je     801011a9 <cprintf+0x115>
8010119b:	90                   	nop
        consputc(*s);
8010119c:	e8 bb fc ff ff       	call   80100e5c <consputc>
      for(; *s; s++)
801011a1:	47                   	inc    %edi
801011a2:	0f be 07             	movsbl (%edi),%eax
801011a5:	84 c0                	test   %al,%al
801011a7:	75 f3                	jne    8010119c <cprintf+0x108>
      if((s = (char*)*argp++) == 0)
801011a9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
801011ac:	e9 4f ff ff ff       	jmp    80101100 <cprintf+0x6c>
801011b1:	8d 76 00             	lea    0x0(%esi),%esi
    acquire(&cons.lock);
801011b4:	83 ec 0c             	sub    $0xc,%esp
801011b7:	68 20 91 10 80       	push   $0x80109120
801011bc:	e8 27 35 00 00       	call   801046e8 <acquire>
801011c1:	83 c4 10             	add    $0x10,%esp
801011c4:	e9 e4 fe ff ff       	jmp    801010ad <cprintf+0x19>
801011c9:	8d 76 00             	lea    0x0(%esi),%esi
        s = "(null)";
801011cc:	bf 78 64 10 80       	mov    $0x80106478,%edi
801011d1:	eb c1                	jmp    80101194 <cprintf+0x100>
    panic("null fmt");
801011d3:	83 ec 0c             	sub    $0xc,%esp
801011d6:	68 7f 64 10 80       	push   $0x8010647f
801011db:	e8 04 fc ff ff       	call   80100de4 <panic>

801011e0 <consoleintr>:
{
801011e0:	55                   	push   %ebp
801011e1:	89 e5                	mov    %esp,%ebp
801011e3:	57                   	push   %edi
801011e4:	56                   	push   %esi
801011e5:	53                   	push   %ebx
801011e6:	83 ec 18             	sub    $0x18,%esp
801011e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&cons.lock);
801011ec:	68 20 91 10 80       	push   $0x80109120
801011f1:	e8 f2 34 00 00       	call   801046e8 <acquire>
  while((c = getc()) >= 0){
801011f6:	83 c4 10             	add    $0x10,%esp
  int c, doprocdump = 0;
801011f9:	31 f6                	xor    %esi,%esi
801011fb:	90                   	nop
  while((c = getc()) >= 0){
801011fc:	ff d3                	call   *%ebx
801011fe:	89 c7                	mov    %eax,%edi
80101200:	85 c0                	test   %eax,%eax
80101202:	78 40                	js     80101244 <consoleintr+0x64>
    switch(c){
80101204:	83 ff 10             	cmp    $0x10,%edi
80101207:	0f 84 23 01 00 00    	je     80101330 <consoleintr+0x150>
8010120d:	7e 55                	jle    80101264 <consoleintr+0x84>
8010120f:	83 ff 15             	cmp    $0x15,%edi
80101212:	0f 84 d0 00 00 00    	je     801012e8 <consoleintr+0x108>
80101218:	83 ff 7f             	cmp    $0x7f,%edi
8010121b:	75 4c                	jne    80101269 <consoleintr+0x89>
      if(input.e != input.w){
8010121d:	a1 a8 eb 10 80       	mov    0x8010eba8,%eax
80101222:	3b 05 a4 eb 10 80    	cmp    0x8010eba4,%eax
80101228:	74 d2                	je     801011fc <consoleintr+0x1c>
        input.e--;
8010122a:	48                   	dec    %eax
8010122b:	a3 a8 eb 10 80       	mov    %eax,0x8010eba8
        consputc(BACKSPACE);
80101230:	b8 00 01 00 00       	mov    $0x100,%eax
80101235:	e8 22 fc ff ff       	call   80100e5c <consputc>
  while((c = getc()) >= 0){
8010123a:	ff d3                	call   *%ebx
8010123c:	89 c7                	mov    %eax,%edi
8010123e:	85 c0                	test   %eax,%eax
80101240:	79 c2                	jns    80101204 <consoleintr+0x24>
80101242:	66 90                	xchg   %ax,%ax
  release(&cons.lock);
80101244:	83 ec 0c             	sub    $0xc,%esp
80101247:	68 20 91 10 80       	push   $0x80109120
8010124c:	e8 6b 35 00 00       	call   801047bc <release>
  if(doprocdump) {
80101251:	83 c4 10             	add    $0x10,%esp
80101254:	85 f6                	test   %esi,%esi
80101256:	0f 85 e0 00 00 00    	jne    8010133c <consoleintr+0x15c>
}
8010125c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010125f:	5b                   	pop    %ebx
80101260:	5e                   	pop    %esi
80101261:	5f                   	pop    %edi
80101262:	5d                   	pop    %ebp
80101263:	c3                   	ret    
    switch(c){
80101264:	83 ff 08             	cmp    $0x8,%edi
80101267:	74 b4                	je     8010121d <consoleintr+0x3d>
      if(c != 0 && input.e-input.r < INPUT_BUF){
80101269:	85 ff                	test   %edi,%edi
8010126b:	74 8f                	je     801011fc <consoleintr+0x1c>
8010126d:	a1 a8 eb 10 80       	mov    0x8010eba8,%eax
80101272:	89 c2                	mov    %eax,%edx
80101274:	2b 15 a0 eb 10 80    	sub    0x8010eba0,%edx
8010127a:	83 fa 7f             	cmp    $0x7f,%edx
8010127d:	0f 87 79 ff ff ff    	ja     801011fc <consoleintr+0x1c>
        input.buf[input.e++ % INPUT_BUF] = c;
80101283:	8d 50 01             	lea    0x1(%eax),%edx
80101286:	89 15 a8 eb 10 80    	mov    %edx,0x8010eba8
8010128c:	83 e0 7f             	and    $0x7f,%eax
        c = (c == '\r') ? '\n' : c;
8010128f:	83 ff 0d             	cmp    $0xd,%edi
80101292:	0f 84 b0 00 00 00    	je     80101348 <consoleintr+0x168>
        input.buf[input.e++ % INPUT_BUF] = c;
80101298:	89 f9                	mov    %edi,%ecx
8010129a:	88 88 20 eb 10 80    	mov    %cl,-0x7fef14e0(%eax)
        consputc(c);
801012a0:	89 f8                	mov    %edi,%eax
801012a2:	e8 b5 fb ff ff       	call   80100e5c <consputc>
        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
801012a7:	83 ff 0a             	cmp    $0xa,%edi
801012aa:	0f 84 a9 00 00 00    	je     80101359 <consoleintr+0x179>
801012b0:	83 ff 04             	cmp    $0x4,%edi
801012b3:	0f 84 a0 00 00 00    	je     80101359 <consoleintr+0x179>
801012b9:	a1 a0 eb 10 80       	mov    0x8010eba0,%eax
801012be:	83 e8 80             	sub    $0xffffff80,%eax
801012c1:	39 05 a8 eb 10 80    	cmp    %eax,0x8010eba8
801012c7:	0f 85 2f ff ff ff    	jne    801011fc <consoleintr+0x1c>
          input.w = input.e;
801012cd:	a3 a4 eb 10 80       	mov    %eax,0x8010eba4
          wakeup(&input.r);
801012d2:	83 ec 0c             	sub    $0xc,%esp
801012d5:	68 a0 eb 10 80       	push   $0x8010eba0
801012da:	e8 d9 30 00 00       	call   801043b8 <wakeup>
801012df:	83 c4 10             	add    $0x10,%esp
801012e2:	e9 15 ff ff ff       	jmp    801011fc <consoleintr+0x1c>
801012e7:	90                   	nop
      while(input.e != input.w &&
801012e8:	a1 a8 eb 10 80       	mov    0x8010eba8,%eax
801012ed:	3b 05 a4 eb 10 80    	cmp    0x8010eba4,%eax
801012f3:	75 27                	jne    8010131c <consoleintr+0x13c>
801012f5:	e9 02 ff ff ff       	jmp    801011fc <consoleintr+0x1c>
801012fa:	66 90                	xchg   %ax,%ax
        input.e--;
801012fc:	a3 a8 eb 10 80       	mov    %eax,0x8010eba8
        consputc(BACKSPACE);
80101301:	b8 00 01 00 00       	mov    $0x100,%eax
80101306:	e8 51 fb ff ff       	call   80100e5c <consputc>
      while(input.e != input.w &&
8010130b:	a1 a8 eb 10 80       	mov    0x8010eba8,%eax
80101310:	3b 05 a4 eb 10 80    	cmp    0x8010eba4,%eax
80101316:	0f 84 e0 fe ff ff    	je     801011fc <consoleintr+0x1c>
            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
8010131c:	48                   	dec    %eax
8010131d:	89 c2                	mov    %eax,%edx
8010131f:	83 e2 7f             	and    $0x7f,%edx
      while(input.e != input.w &&
80101322:	80 ba 20 eb 10 80 0a 	cmpb   $0xa,-0x7fef14e0(%edx)
80101329:	75 d1                	jne    801012fc <consoleintr+0x11c>
8010132b:	e9 cc fe ff ff       	jmp    801011fc <consoleintr+0x1c>
      doprocdump = 1;
80101330:	be 01 00 00 00       	mov    $0x1,%esi
80101335:	e9 c2 fe ff ff       	jmp    801011fc <consoleintr+0x1c>
8010133a:	66 90                	xchg   %ax,%ax
}
8010133c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010133f:	5b                   	pop    %ebx
80101340:	5e                   	pop    %esi
80101341:	5f                   	pop    %edi
80101342:	5d                   	pop    %ebp
    procdump();  // now call procdump() wo. cons.lock held
80101343:	e9 44 31 00 00       	jmp    8010448c <procdump>
        input.buf[input.e++ % INPUT_BUF] = c;
80101348:	c6 80 20 eb 10 80 0a 	movb   $0xa,-0x7fef14e0(%eax)
        consputc(c);
8010134f:	b8 0a 00 00 00       	mov    $0xa,%eax
80101354:	e8 03 fb ff ff       	call   80100e5c <consputc>
80101359:	a1 a8 eb 10 80       	mov    0x8010eba8,%eax
8010135e:	e9 6a ff ff ff       	jmp    801012cd <consoleintr+0xed>
80101363:	90                   	nop

80101364 <consoleinit>:

void
consoleinit(void)
{
80101364:	55                   	push   %ebp
80101365:	89 e5                	mov    %esp,%ebp
80101367:	83 ec 10             	sub    $0x10,%esp
  initlock(&cons.lock, "console");
8010136a:	68 88 64 10 80       	push   $0x80106488
8010136f:	68 20 91 10 80       	push   $0x80109120
80101374:	e8 ab 32 00 00       	call   80104624 <initlock>

  devsw[CONSOLE].write = consolewrite;
80101379:	c7 05 6c f5 10 80 34 	movl   $0x80101034,0x8010f56c
80101380:	10 10 80 
  devsw[CONSOLE].read = consoleread;
80101383:	c7 05 68 f5 10 80 f0 	movl   $0x80100cf0,0x8010f568
8010138a:	0c 10 80 
  cons.locking = 1;
8010138d:	c7 05 54 91 10 80 01 	movl   $0x1,0x80109154
80101394:	00 00 00 

  ioapicenable(IRQ_KBD, 0);
80101397:	58                   	pop    %eax
80101398:	5a                   	pop    %edx
80101399:	6a 00                	push   $0x0
8010139b:	6a 01                	push   $0x1
8010139d:	e8 fa 16 00 00       	call   80102a9c <ioapicenable>
801013a2:	83 c4 10             	add    $0x10,%esp
}
801013a5:	c9                   	leave  
801013a6:	c3                   	ret    
801013a7:	90                   	nop

801013a8 <exec>:
#include "x86.h"
#include "elf.h"

int
exec(char *path, char **argv)
{
801013a8:	55                   	push   %ebp
801013a9:	89 e5                	mov    %esp,%ebp
801013ab:	57                   	push   %edi
801013ac:	56                   	push   %esi
801013ad:	53                   	push   %ebx
801013ae:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
  uint argc, sz, sp, ustack[3+MAXARG+1];
  struct elfhdr elf;
  struct inode *ip;
  struct proghdr ph;
  pde_t *pgdir, *oldpgdir;
  struct proc *curproc = myproc();
801013b4:	e8 7f 29 00 00       	call   80103d38 <myproc>
801013b9:	89 c7                	mov    %eax,%edi

  begin_op();
801013bb:	e8 34 1e 00 00       	call   801031f4 <begin_op>

  if((ip = namei(path)) == 0){
801013c0:	83 ec 0c             	sub    $0xc,%esp
801013c3:	ff 75 08             	pushl  0x8(%ebp)
801013c6:	e8 75 13 00 00       	call   80102740 <namei>
801013cb:	89 c3                	mov    %eax,%ebx
801013cd:	83 c4 10             	add    $0x10,%esp
801013d0:	85 c0                	test   %eax,%eax
801013d2:	0f 84 a0 01 00 00    	je     80101578 <exec+0x1d0>
    end_op();
    cprintf("exec: fail\n");
    return -1;
  }
  ilock(ip);
801013d8:	83 ec 0c             	sub    $0xc,%esp
801013db:	50                   	push   %eax
801013dc:	e8 7f 0b 00 00       	call   80101f60 <ilock>
  pgdir = 0;

  // Check ELF header
  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
801013e1:	6a 34                	push   $0x34
801013e3:	6a 00                	push   $0x0
801013e5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
801013eb:	50                   	push   %eax
801013ec:	53                   	push   %ebx
801013ed:	e8 0e 0e 00 00       	call   80102200 <readi>
801013f2:	83 c4 20             	add    $0x20,%esp
801013f5:	83 f8 34             	cmp    $0x34,%eax
801013f8:	74 1e                	je     80101418 <exec+0x70>

 bad:
  if(pgdir)
    freevm(pgdir);
  if(ip){
    iunlockput(ip);
801013fa:	83 ec 0c             	sub    $0xc,%esp
801013fd:	53                   	push   %ebx
801013fe:	e8 b1 0d 00 00       	call   801021b4 <iunlockput>
    end_op();
80101403:	e8 54 1e 00 00       	call   8010325c <end_op>
80101408:	83 c4 10             	add    $0x10,%esp
  }
  return -1;
8010140b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80101410:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101413:	5b                   	pop    %ebx
80101414:	5e                   	pop    %esi
80101415:	5f                   	pop    %edi
80101416:	5d                   	pop    %ebp
80101417:	c3                   	ret    
  if(elf.magic != ELF_MAGIC)
80101418:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
8010141f:	45 4c 46 
80101422:	75 d6                	jne    801013fa <exec+0x52>
  if((pgdir = setupkvm()) == 0)
80101424:	e8 a3 4d 00 00       	call   801061cc <setupkvm>
80101429:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
8010142f:	85 c0                	test   %eax,%eax
80101431:	74 c7                	je     801013fa <exec+0x52>
  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
80101433:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
80101439:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
80101440:	00 
80101441:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
80101448:	00 00 00 
8010144b:	0f 84 cb 00 00 00    	je     8010151c <exec+0x174>
80101451:	31 c0                	xor    %eax,%eax
80101453:	89 bd ec fe ff ff    	mov    %edi,-0x114(%ebp)
80101459:	89 c7                	mov    %eax,%edi
8010145b:	eb 16                	jmp    80101473 <exec+0xcb>
8010145d:	8d 76 00             	lea    0x0(%esi),%esi
80101460:	47                   	inc    %edi
80101461:	83 c6 20             	add    $0x20,%esi
80101464:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
8010146b:	39 f8                	cmp    %edi,%eax
8010146d:	0f 8e a3 00 00 00    	jle    80101516 <exec+0x16e>
    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
80101473:	6a 20                	push   $0x20
80101475:	56                   	push   %esi
80101476:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
8010147c:	50                   	push   %eax
8010147d:	53                   	push   %ebx
8010147e:	e8 7d 0d 00 00       	call   80102200 <readi>
80101483:	83 c4 10             	add    $0x10,%esp
80101486:	83 f8 20             	cmp    $0x20,%eax
80101489:	75 75                	jne    80101500 <exec+0x158>
    if(ph.type != ELF_PROG_LOAD)
8010148b:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
80101492:	75 cc                	jne    80101460 <exec+0xb8>
    if(ph.memsz < ph.filesz)
80101494:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
8010149a:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
801014a0:	72 5e                	jb     80101500 <exec+0x158>
    if(ph.vaddr + ph.memsz < ph.vaddr)
801014a2:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
801014a8:	72 56                	jb     80101500 <exec+0x158>
    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
801014aa:	51                   	push   %ecx
801014ab:	50                   	push   %eax
801014ac:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
801014b2:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
801014b8:	e8 a3 4b 00 00       	call   80106060 <allocuvm>
801014bd:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
801014c3:	83 c4 10             	add    $0x10,%esp
801014c6:	85 c0                	test   %eax,%eax
801014c8:	74 36                	je     80101500 <exec+0x158>
    if(ph.vaddr % PGSIZE != 0)
801014ca:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
801014d0:	a9 ff 0f 00 00       	test   $0xfff,%eax
801014d5:	75 29                	jne    80101500 <exec+0x158>
    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
801014d7:	83 ec 0c             	sub    $0xc,%esp
801014da:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
801014e0:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
801014e6:	53                   	push   %ebx
801014e7:	50                   	push   %eax
801014e8:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
801014ee:	e8 bd 4a 00 00       	call   80105fb0 <loaduvm>
801014f3:	83 c4 20             	add    $0x20,%esp
801014f6:	85 c0                	test   %eax,%eax
801014f8:	0f 89 62 ff ff ff    	jns    80101460 <exec+0xb8>
801014fe:	66 90                	xchg   %ax,%ax
    freevm(pgdir);
80101500:	83 ec 0c             	sub    $0xc,%esp
80101503:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
80101509:	e8 4e 4c 00 00       	call   8010615c <freevm>
8010150e:	83 c4 10             	add    $0x10,%esp
80101511:	e9 e4 fe ff ff       	jmp    801013fa <exec+0x52>
80101516:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
  iunlockput(ip);
8010151c:	83 ec 0c             	sub    $0xc,%esp
8010151f:	53                   	push   %ebx
80101520:	e8 8f 0c 00 00       	call   801021b4 <iunlockput>
  end_op();
80101525:	e8 32 1d 00 00       	call   8010325c <end_op>
  sz = PGROUNDUP(sz);
8010152a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
80101530:	05 ff 0f 00 00       	add    $0xfff,%eax
80101535:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
8010153a:	83 c4 0c             	add    $0xc,%esp
8010153d:	8d 90 00 20 00 00    	lea    0x2000(%eax),%edx
80101543:	52                   	push   %edx
80101544:	50                   	push   %eax
80101545:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
8010154b:	e8 10 4b 00 00       	call   80106060 <allocuvm>
80101550:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
80101556:	83 c4 10             	add    $0x10,%esp
80101559:	85 c0                	test   %eax,%eax
8010155b:	75 3a                	jne    80101597 <exec+0x1ef>
    freevm(pgdir);
8010155d:	83 ec 0c             	sub    $0xc,%esp
80101560:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
80101566:	e8 f1 4b 00 00       	call   8010615c <freevm>
8010156b:	83 c4 10             	add    $0x10,%esp
  return -1;
8010156e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101573:	e9 98 fe ff ff       	jmp    80101410 <exec+0x68>
    end_op();
80101578:	e8 df 1c 00 00       	call   8010325c <end_op>
    cprintf("exec: fail\n");
8010157d:	83 ec 0c             	sub    $0xc,%esp
80101580:	68 a1 64 10 80       	push   $0x801064a1
80101585:	e8 0a fb ff ff       	call   80101094 <cprintf>
    return -1;
8010158a:	83 c4 10             	add    $0x10,%esp
8010158d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101592:	e9 79 fe ff ff       	jmp    80101410 <exec+0x68>
  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
80101597:	83 ec 08             	sub    $0x8,%esp
8010159a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
801015a0:	2d 00 20 00 00       	sub    $0x2000,%eax
801015a5:	50                   	push   %eax
801015a6:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
801015ac:	e8 af 4c 00 00       	call   80106260 <clearpteu>
  for(argc = 0; argv[argc]; argc++) {
801015b1:	8b 45 0c             	mov    0xc(%ebp),%eax
801015b4:	8b 00                	mov    (%eax),%eax
801015b6:	83 c4 10             	add    $0x10,%esp
801015b9:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
801015bf:	31 db                	xor    %ebx,%ebx
801015c1:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
801015c7:	85 c0                	test   %eax,%eax
801015c9:	74 6e                	je     80101639 <exec+0x291>
801015cb:	89 bd ec fe ff ff    	mov    %edi,-0x114(%ebp)
801015d1:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
801015d7:	eb 0c                	jmp    801015e5 <exec+0x23d>
801015d9:	8d 76 00             	lea    0x0(%esi),%esi
    if(argc >= MAXARG)
801015dc:	83 fb 20             	cmp    $0x20,%ebx
801015df:	0f 84 78 ff ff ff    	je     8010155d <exec+0x1b5>
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
801015e5:	83 ec 0c             	sub    $0xc,%esp
801015e8:	50                   	push   %eax
801015e9:	e8 d6 33 00 00       	call   801049c4 <strlen>
801015ee:	f7 d0                	not    %eax
801015f0:	01 c6                	add    %eax,%esi
801015f2:	83 e6 fc             	and    $0xfffffffc,%esi
    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
801015f5:	5a                   	pop    %edx
801015f6:	8b 45 0c             	mov    0xc(%ebp),%eax
801015f9:	ff 34 98             	pushl  (%eax,%ebx,4)
801015fc:	e8 c3 33 00 00       	call   801049c4 <strlen>
80101601:	40                   	inc    %eax
80101602:	50                   	push   %eax
80101603:	8b 45 0c             	mov    0xc(%ebp),%eax
80101606:	ff 34 98             	pushl  (%eax,%ebx,4)
80101609:	56                   	push   %esi
8010160a:	57                   	push   %edi
8010160b:	e8 8c 4d 00 00       	call   8010639c <copyout>
80101610:	83 c4 20             	add    $0x20,%esp
80101613:	85 c0                	test   %eax,%eax
80101615:	0f 88 42 ff ff ff    	js     8010155d <exec+0x1b5>
    ustack[3+argc] = sp;
8010161b:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
80101621:	89 b4 9d 64 ff ff ff 	mov    %esi,-0x9c(%ebp,%ebx,4)
  for(argc = 0; argv[argc]; argc++) {
80101628:	43                   	inc    %ebx
80101629:	8b 45 0c             	mov    0xc(%ebp),%eax
8010162c:	8b 04 98             	mov    (%eax,%ebx,4),%eax
8010162f:	85 c0                	test   %eax,%eax
80101631:	75 a9                	jne    801015dc <exec+0x234>
80101633:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
  ustack[3+argc] = 0;
80101639:	c7 84 9d 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%ebx,4)
80101640:	00 00 00 00 
  ustack[0] = 0xffffffff;  // fake return PC
80101644:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
8010164b:	ff ff ff 
  ustack[1] = argc;
8010164e:	89 9d 5c ff ff ff    	mov    %ebx,-0xa4(%ebp)
  ustack[2] = sp - (argc+1)*4;  // argv pointer
80101654:	8d 04 9d 04 00 00 00 	lea    0x4(,%ebx,4),%eax
8010165b:	89 f1                	mov    %esi,%ecx
8010165d:	29 c1                	sub    %eax,%ecx
8010165f:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  sp -= (3+argc+1) * 4;
80101665:	83 c0 0c             	add    $0xc,%eax
80101668:	29 c6                	sub    %eax,%esi
  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
8010166a:	50                   	push   %eax
8010166b:	52                   	push   %edx
8010166c:	56                   	push   %esi
8010166d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
80101673:	e8 24 4d 00 00       	call   8010639c <copyout>
80101678:	83 c4 10             	add    $0x10,%esp
8010167b:	85 c0                	test   %eax,%eax
8010167d:	0f 88 da fe ff ff    	js     8010155d <exec+0x1b5>
  for(last=s=path; *s; s++)
80101683:	8b 45 08             	mov    0x8(%ebp),%eax
80101686:	8a 10                	mov    (%eax),%dl
80101688:	84 d2                	test   %dl,%dl
8010168a:	74 1b                	je     801016a7 <exec+0x2ff>
8010168c:	40                   	inc    %eax
8010168d:	8b 4d 08             	mov    0x8(%ebp),%ecx
80101690:	eb 09                	jmp    8010169b <exec+0x2f3>
80101692:	66 90                	xchg   %ax,%ax
80101694:	8a 10                	mov    (%eax),%dl
80101696:	40                   	inc    %eax
80101697:	84 d2                	test   %dl,%dl
80101699:	74 09                	je     801016a4 <exec+0x2fc>
    if(*s == '/')
8010169b:	80 fa 2f             	cmp    $0x2f,%dl
8010169e:	75 f4                	jne    80101694 <exec+0x2ec>
      last = s+1;
801016a0:	89 c1                	mov    %eax,%ecx
801016a2:	eb f0                	jmp    80101694 <exec+0x2ec>
801016a4:	89 4d 08             	mov    %ecx,0x8(%ebp)
  safestrcpy(curproc->name, last, sizeof(curproc->name));
801016a7:	50                   	push   %eax
801016a8:	6a 10                	push   $0x10
801016aa:	ff 75 08             	pushl  0x8(%ebp)
801016ad:	8d 47 6c             	lea    0x6c(%edi),%eax
801016b0:	50                   	push   %eax
801016b1:	e8 da 32 00 00       	call   80104990 <safestrcpy>
  oldpgdir = curproc->pgdir;
801016b6:	8b 5f 04             	mov    0x4(%edi),%ebx
  curproc->pgdir = pgdir;
801016b9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
801016bf:	89 47 04             	mov    %eax,0x4(%edi)
  curproc->sz = sz;
801016c2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
801016c8:	89 07                	mov    %eax,(%edi)
  curproc->tf->eip = elf.entry;  // main
801016ca:	8b 47 18             	mov    0x18(%edi),%eax
801016cd:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
801016d3:	89 50 38             	mov    %edx,0x38(%eax)
  curproc->tf->esp = sp;
801016d6:	8b 47 18             	mov    0x18(%edi),%eax
801016d9:	89 70 44             	mov    %esi,0x44(%eax)
  switchuvm(curproc);
801016dc:	89 3c 24             	mov    %edi,(%esp)
801016df:	e8 58 47 00 00       	call   80105e3c <switchuvm>
  freevm(oldpgdir);
801016e4:	89 1c 24             	mov    %ebx,(%esp)
801016e7:	e8 70 4a 00 00       	call   8010615c <freevm>
  return 0;
801016ec:	83 c4 10             	add    $0x10,%esp
801016ef:	31 c0                	xor    %eax,%eax
801016f1:	e9 1a fd ff ff       	jmp    80101410 <exec+0x68>
801016f6:	66 90                	xchg   %ax,%ax

801016f8 <fileinit>:
  struct file file[NFILE];
} ftable;

void
fileinit(void)
{
801016f8:	55                   	push   %ebp
801016f9:	89 e5                	mov    %esp,%ebp
801016fb:	83 ec 10             	sub    $0x10,%esp
  initlock(&ftable.lock, "ftable");
801016fe:	68 ad 64 10 80       	push   $0x801064ad
80101703:	68 c0 eb 10 80       	push   $0x8010ebc0
80101708:	e8 17 2f 00 00       	call   80104624 <initlock>
8010170d:	83 c4 10             	add    $0x10,%esp
}
80101710:	c9                   	leave  
80101711:	c3                   	ret    
80101712:	66 90                	xchg   %ax,%ax

80101714 <filealloc>:

// Allocate a file structure.
struct file*
filealloc(void)
{
80101714:	55                   	push   %ebp
80101715:	89 e5                	mov    %esp,%ebp
80101717:	53                   	push   %ebx
80101718:	83 ec 10             	sub    $0x10,%esp
  struct file *f;

  acquire(&ftable.lock);
8010171b:	68 c0 eb 10 80       	push   $0x8010ebc0
80101720:	e8 c3 2f 00 00       	call   801046e8 <acquire>
80101725:	83 c4 10             	add    $0x10,%esp
  for(f = ftable.file; f < ftable.file + NFILE; f++){
80101728:	bb f4 eb 10 80       	mov    $0x8010ebf4,%ebx
8010172d:	eb 0c                	jmp    8010173b <filealloc+0x27>
8010172f:	90                   	nop
80101730:	83 c3 18             	add    $0x18,%ebx
80101733:	81 fb 54 f5 10 80    	cmp    $0x8010f554,%ebx
80101739:	74 25                	je     80101760 <filealloc+0x4c>
    if(f->ref == 0){
8010173b:	8b 43 04             	mov    0x4(%ebx),%eax
8010173e:	85 c0                	test   %eax,%eax
80101740:	75 ee                	jne    80101730 <filealloc+0x1c>
      f->ref = 1;
80101742:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
      release(&ftable.lock);
80101749:	83 ec 0c             	sub    $0xc,%esp
8010174c:	68 c0 eb 10 80       	push   $0x8010ebc0
80101751:	e8 66 30 00 00       	call   801047bc <release>
      return f;
80101756:	83 c4 10             	add    $0x10,%esp
80101759:	89 d8                	mov    %ebx,%eax
    }
  }
  release(&ftable.lock);
  return 0;
}
8010175b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010175e:	c9                   	leave  
8010175f:	c3                   	ret    
  release(&ftable.lock);
80101760:	83 ec 0c             	sub    $0xc,%esp
80101763:	68 c0 eb 10 80       	push   $0x8010ebc0
80101768:	e8 4f 30 00 00       	call   801047bc <release>
  return 0;
8010176d:	83 c4 10             	add    $0x10,%esp
80101770:	31 c0                	xor    %eax,%eax
}
80101772:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101775:	c9                   	leave  
80101776:	c3                   	ret    
80101777:	90                   	nop

80101778 <filedup>:

// Increment ref count for file f.
struct file*
filedup(struct file *f)
{
80101778:	55                   	push   %ebp
80101779:	89 e5                	mov    %esp,%ebp
8010177b:	53                   	push   %ebx
8010177c:	83 ec 10             	sub    $0x10,%esp
8010177f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&ftable.lock);
80101782:	68 c0 eb 10 80       	push   $0x8010ebc0
80101787:	e8 5c 2f 00 00       	call   801046e8 <acquire>
  if(f->ref < 1)
8010178c:	8b 53 04             	mov    0x4(%ebx),%edx
8010178f:	83 c4 10             	add    $0x10,%esp
80101792:	85 d2                	test   %edx,%edx
80101794:	7e 18                	jle    801017ae <filedup+0x36>
    panic("filedup");
  f->ref++;
80101796:	42                   	inc    %edx
80101797:	89 53 04             	mov    %edx,0x4(%ebx)
  release(&ftable.lock);
8010179a:	83 ec 0c             	sub    $0xc,%esp
8010179d:	68 c0 eb 10 80       	push   $0x8010ebc0
801017a2:	e8 15 30 00 00       	call   801047bc <release>
  return f;
}
801017a7:	89 d8                	mov    %ebx,%eax
801017a9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801017ac:	c9                   	leave  
801017ad:	c3                   	ret    
    panic("filedup");
801017ae:	83 ec 0c             	sub    $0xc,%esp
801017b1:	68 b4 64 10 80       	push   $0x801064b4
801017b6:	e8 29 f6 ff ff       	call   80100de4 <panic>
801017bb:	90                   	nop

801017bc <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void
fileclose(struct file *f)
{
801017bc:	55                   	push   %ebp
801017bd:	89 e5                	mov    %esp,%ebp
801017bf:	57                   	push   %edi
801017c0:	56                   	push   %esi
801017c1:	53                   	push   %ebx
801017c2:	83 ec 28             	sub    $0x28,%esp
801017c5:	8b 7d 08             	mov    0x8(%ebp),%edi
  struct file ff;

  acquire(&ftable.lock);
801017c8:	68 c0 eb 10 80       	push   $0x8010ebc0
801017cd:	e8 16 2f 00 00       	call   801046e8 <acquire>
  if(f->ref < 1)
801017d2:	8b 47 04             	mov    0x4(%edi),%eax
801017d5:	83 c4 10             	add    $0x10,%esp
801017d8:	85 c0                	test   %eax,%eax
801017da:	0f 8e 8b 00 00 00    	jle    8010186b <fileclose+0xaf>
    panic("fileclose");
  if(--f->ref > 0){
801017e0:	48                   	dec    %eax
801017e1:	89 47 04             	mov    %eax,0x4(%edi)
801017e4:	85 c0                	test   %eax,%eax
801017e6:	74 14                	je     801017fc <fileclose+0x40>
    release(&ftable.lock);
801017e8:	c7 45 08 c0 eb 10 80 	movl   $0x8010ebc0,0x8(%ebp)
  else if(ff.type == FD_INODE){
    begin_op();
    iput(ff.ip);
    end_op();
  }
}
801017ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
801017f2:	5b                   	pop    %ebx
801017f3:	5e                   	pop    %esi
801017f4:	5f                   	pop    %edi
801017f5:	5d                   	pop    %ebp
    release(&ftable.lock);
801017f6:	e9 c1 2f 00 00       	jmp    801047bc <release>
801017fb:	90                   	nop
  ff = *f;
801017fc:	8b 1f                	mov    (%edi),%ebx
801017fe:	8a 47 09             	mov    0x9(%edi),%al
80101801:	88 45 e7             	mov    %al,-0x19(%ebp)
80101804:	8b 77 0c             	mov    0xc(%edi),%esi
80101807:	8b 47 10             	mov    0x10(%edi),%eax
8010180a:	89 45 e0             	mov    %eax,-0x20(%ebp)
  f->type = FD_NONE;
8010180d:	c7 07 00 00 00 00    	movl   $0x0,(%edi)
  release(&ftable.lock);
80101813:	83 ec 0c             	sub    $0xc,%esp
80101816:	68 c0 eb 10 80       	push   $0x8010ebc0
8010181b:	e8 9c 2f 00 00       	call   801047bc <release>
  if(ff.type == FD_PIPE)
80101820:	83 c4 10             	add    $0x10,%esp
80101823:	83 fb 01             	cmp    $0x1,%ebx
80101826:	74 10                	je     80101838 <fileclose+0x7c>
  else if(ff.type == FD_INODE){
80101828:	83 fb 02             	cmp    $0x2,%ebx
8010182b:	74 1f                	je     8010184c <fileclose+0x90>
}
8010182d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101830:	5b                   	pop    %ebx
80101831:	5e                   	pop    %esi
80101832:	5f                   	pop    %edi
80101833:	5d                   	pop    %ebp
80101834:	c3                   	ret    
80101835:	8d 76 00             	lea    0x0(%esi),%esi
    pipeclose(ff.pipe, ff.writable);
80101838:	83 ec 08             	sub    $0x8,%esp
8010183b:	0f be 45 e7          	movsbl -0x19(%ebp),%eax
8010183f:	50                   	push   %eax
80101840:	56                   	push   %esi
80101841:	e8 a6 20 00 00       	call   801038ec <pipeclose>
80101846:	83 c4 10             	add    $0x10,%esp
80101849:	eb e2                	jmp    8010182d <fileclose+0x71>
8010184b:	90                   	nop
    begin_op();
8010184c:	e8 a3 19 00 00       	call   801031f4 <begin_op>
    iput(ff.ip);
80101851:	83 ec 0c             	sub    $0xc,%esp
80101854:	ff 75 e0             	pushl  -0x20(%ebp)
80101857:	e8 10 08 00 00       	call   8010206c <iput>
    end_op();
8010185c:	83 c4 10             	add    $0x10,%esp
}
8010185f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101862:	5b                   	pop    %ebx
80101863:	5e                   	pop    %esi
80101864:	5f                   	pop    %edi
80101865:	5d                   	pop    %ebp
    end_op();
80101866:	e9 f1 19 00 00       	jmp    8010325c <end_op>
    panic("fileclose");
8010186b:	83 ec 0c             	sub    $0xc,%esp
8010186e:	68 bc 64 10 80       	push   $0x801064bc
80101873:	e8 6c f5 ff ff       	call   80100de4 <panic>

80101878 <filestat>:

// Get metadata about file f.
int
filestat(struct file *f, struct stat *st)
{
80101878:	55                   	push   %ebp
80101879:	89 e5                	mov    %esp,%ebp
8010187b:	53                   	push   %ebx
8010187c:	53                   	push   %ebx
8010187d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(f->type == FD_INODE){
80101880:	83 3b 02             	cmpl   $0x2,(%ebx)
80101883:	75 2b                	jne    801018b0 <filestat+0x38>
    ilock(f->ip);
80101885:	83 ec 0c             	sub    $0xc,%esp
80101888:	ff 73 10             	pushl  0x10(%ebx)
8010188b:	e8 d0 06 00 00       	call   80101f60 <ilock>
    stati(f->ip, st);
80101890:	58                   	pop    %eax
80101891:	5a                   	pop    %edx
80101892:	ff 75 0c             	pushl  0xc(%ebp)
80101895:	ff 73 10             	pushl  0x10(%ebx)
80101898:	e8 37 09 00 00       	call   801021d4 <stati>
    iunlock(f->ip);
8010189d:	59                   	pop    %ecx
8010189e:	ff 73 10             	pushl  0x10(%ebx)
801018a1:	e8 82 07 00 00       	call   80102028 <iunlock>
    return 0;
801018a6:	83 c4 10             	add    $0x10,%esp
801018a9:	31 c0                	xor    %eax,%eax
  }
  return -1;
}
801018ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801018ae:	c9                   	leave  
801018af:	c3                   	ret    
  return -1;
801018b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801018b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801018b8:	c9                   	leave  
801018b9:	c3                   	ret    
801018ba:	66 90                	xchg   %ax,%ax

801018bc <fileread>:

// Read from file f.
int
fileread(struct file *f, char *addr, int n)
{
801018bc:	55                   	push   %ebp
801018bd:	89 e5                	mov    %esp,%ebp
801018bf:	57                   	push   %edi
801018c0:	56                   	push   %esi
801018c1:	53                   	push   %ebx
801018c2:	83 ec 0c             	sub    $0xc,%esp
801018c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
801018c8:	8b 75 0c             	mov    0xc(%ebp),%esi
801018cb:	8b 7d 10             	mov    0x10(%ebp),%edi
  int r;

  if(f->readable == 0)
801018ce:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
801018d2:	74 5c                	je     80101930 <fileread+0x74>
    return -1;
  if(f->type == FD_PIPE)
801018d4:	8b 03                	mov    (%ebx),%eax
801018d6:	83 f8 01             	cmp    $0x1,%eax
801018d9:	74 41                	je     8010191c <fileread+0x60>
    return piperead(f->pipe, addr, n);
  if(f->type == FD_INODE){
801018db:	83 f8 02             	cmp    $0x2,%eax
801018de:	75 57                	jne    80101937 <fileread+0x7b>
    ilock(f->ip);
801018e0:	83 ec 0c             	sub    $0xc,%esp
801018e3:	ff 73 10             	pushl  0x10(%ebx)
801018e6:	e8 75 06 00 00       	call   80101f60 <ilock>
    if((r = readi(f->ip, addr, f->off, n)) > 0)
801018eb:	57                   	push   %edi
801018ec:	ff 73 14             	pushl  0x14(%ebx)
801018ef:	56                   	push   %esi
801018f0:	ff 73 10             	pushl  0x10(%ebx)
801018f3:	e8 08 09 00 00       	call   80102200 <readi>
801018f8:	89 c6                	mov    %eax,%esi
801018fa:	83 c4 20             	add    $0x20,%esp
801018fd:	85 c0                	test   %eax,%eax
801018ff:	7e 03                	jle    80101904 <fileread+0x48>
      f->off += r;
80101901:	01 43 14             	add    %eax,0x14(%ebx)
    iunlock(f->ip);
80101904:	83 ec 0c             	sub    $0xc,%esp
80101907:	ff 73 10             	pushl  0x10(%ebx)
8010190a:	e8 19 07 00 00       	call   80102028 <iunlock>
    return r;
8010190f:	83 c4 10             	add    $0x10,%esp
    if((r = readi(f->ip, addr, f->off, n)) > 0)
80101912:	89 f0                	mov    %esi,%eax
  }
  panic("fileread");
}
80101914:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101917:	5b                   	pop    %ebx
80101918:	5e                   	pop    %esi
80101919:	5f                   	pop    %edi
8010191a:	5d                   	pop    %ebp
8010191b:	c3                   	ret    
    return piperead(f->pipe, addr, n);
8010191c:	8b 43 0c             	mov    0xc(%ebx),%eax
8010191f:	89 45 08             	mov    %eax,0x8(%ebp)
}
80101922:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101925:	5b                   	pop    %ebx
80101926:	5e                   	pop    %esi
80101927:	5f                   	pop    %edi
80101928:	5d                   	pop    %ebp
    return piperead(f->pipe, addr, n);
80101929:	e9 4e 21 00 00       	jmp    80103a7c <piperead>
8010192e:	66 90                	xchg   %ax,%ax
    return -1;
80101930:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101935:	eb dd                	jmp    80101914 <fileread+0x58>
  panic("fileread");
80101937:	83 ec 0c             	sub    $0xc,%esp
8010193a:	68 c6 64 10 80       	push   $0x801064c6
8010193f:	e8 a0 f4 ff ff       	call   80100de4 <panic>

80101944 <filewrite>:

//PAGEBREAK!
// Write to file f.
int
filewrite(struct file *f, char *addr, int n)
{
80101944:	55                   	push   %ebp
80101945:	89 e5                	mov    %esp,%ebp
80101947:	57                   	push   %edi
80101948:	56                   	push   %esi
80101949:	53                   	push   %ebx
8010194a:	83 ec 1c             	sub    $0x1c,%esp
8010194d:	8b 5d 08             	mov    0x8(%ebp),%ebx
80101950:	8b 45 0c             	mov    0xc(%ebp),%eax
80101953:	89 45 dc             	mov    %eax,-0x24(%ebp)
80101956:	8b 45 10             	mov    0x10(%ebp),%eax
80101959:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  int r;

  if(f->writable == 0)
8010195c:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
80101960:	0f 84 a5 00 00 00    	je     80101a0b <filewrite+0xc7>
    return -1;
  if(f->type == FD_PIPE)
80101966:	8b 03                	mov    (%ebx),%eax
80101968:	83 f8 01             	cmp    $0x1,%eax
8010196b:	0f 84 b6 00 00 00    	je     80101a27 <filewrite+0xe3>
    return pipewrite(f->pipe, addr, n);
  if(f->type == FD_INODE){
80101971:	83 f8 02             	cmp    $0x2,%eax
80101974:	0f 85 cc 00 00 00    	jne    80101a46 <filewrite+0x102>
    // and 2 blocks of slop for non-aligned writes.
    // this really belongs lower down, since writei()
    // might be writing a device like the console.
    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
    int i = 0;
    while(i < n){
8010197a:	31 f6                	xor    %esi,%esi
8010197c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010197f:	85 c0                	test   %eax,%eax
80101981:	7f 30                	jg     801019b3 <filewrite+0x6f>
80101983:	e9 90 00 00 00       	jmp    80101a18 <filewrite+0xd4>
        n1 = max;

      begin_op();
      ilock(f->ip);
      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
        f->off += r;
80101988:	01 43 14             	add    %eax,0x14(%ebx)
8010198b:	89 45 e0             	mov    %eax,-0x20(%ebp)
      iunlock(f->ip);
8010198e:	83 ec 0c             	sub    $0xc,%esp
80101991:	ff 73 10             	pushl  0x10(%ebx)
80101994:	e8 8f 06 00 00       	call   80102028 <iunlock>
      end_op();
80101999:	e8 be 18 00 00       	call   8010325c <end_op>
8010199e:	83 c4 10             	add    $0x10,%esp
801019a1:	8b 45 e0             	mov    -0x20(%ebp),%eax

      if(r < 0)
        break;
      if(r != n1)
801019a4:	39 f8                	cmp    %edi,%eax
801019a6:	0f 85 8d 00 00 00    	jne    80101a39 <filewrite+0xf5>
        panic("short filewrite");
      i += r;
801019ac:	01 c6                	add    %eax,%esi
    while(i < n){
801019ae:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
801019b1:	7e 65                	jle    80101a18 <filewrite+0xd4>
801019b3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
801019b6:	29 f7                	sub    %esi,%edi
801019b8:	81 ff 00 06 00 00    	cmp    $0x600,%edi
801019be:	7e 05                	jle    801019c5 <filewrite+0x81>
801019c0:	bf 00 06 00 00       	mov    $0x600,%edi
      begin_op();
801019c5:	e8 2a 18 00 00       	call   801031f4 <begin_op>
      ilock(f->ip);
801019ca:	83 ec 0c             	sub    $0xc,%esp
801019cd:	ff 73 10             	pushl  0x10(%ebx)
801019d0:	e8 8b 05 00 00       	call   80101f60 <ilock>
      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
801019d5:	57                   	push   %edi
801019d6:	ff 73 14             	pushl  0x14(%ebx)
801019d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
801019dc:	01 f0                	add    %esi,%eax
801019de:	50                   	push   %eax
801019df:	ff 73 10             	pushl  0x10(%ebx)
801019e2:	e8 1d 09 00 00       	call   80102304 <writei>
801019e7:	83 c4 20             	add    $0x20,%esp
801019ea:	85 c0                	test   %eax,%eax
801019ec:	7f 9a                	jg     80101988 <filewrite+0x44>
801019ee:	89 45 e0             	mov    %eax,-0x20(%ebp)
      iunlock(f->ip);
801019f1:	83 ec 0c             	sub    $0xc,%esp
801019f4:	ff 73 10             	pushl  0x10(%ebx)
801019f7:	e8 2c 06 00 00       	call   80102028 <iunlock>
      end_op();
801019fc:	e8 5b 18 00 00       	call   8010325c <end_op>
      if(r < 0)
80101a01:	83 c4 10             	add    $0x10,%esp
80101a04:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101a07:	85 c0                	test   %eax,%eax
80101a09:	74 99                	je     801019a4 <filewrite+0x60>
    return -1;
80101a0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    }
    return i == n ? n : -1;
  }
  panic("filewrite");
}
80101a10:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101a13:	5b                   	pop    %ebx
80101a14:	5e                   	pop    %esi
80101a15:	5f                   	pop    %edi
80101a16:	5d                   	pop    %ebp
80101a17:	c3                   	ret    
    return i == n ? n : -1;
80101a18:	3b 75 e4             	cmp    -0x1c(%ebp),%esi
80101a1b:	75 ee                	jne    80101a0b <filewrite+0xc7>
80101a1d:	89 f0                	mov    %esi,%eax
}
80101a1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101a22:	5b                   	pop    %ebx
80101a23:	5e                   	pop    %esi
80101a24:	5f                   	pop    %edi
80101a25:	5d                   	pop    %ebp
80101a26:	c3                   	ret    
    return pipewrite(f->pipe, addr, n);
80101a27:	8b 43 0c             	mov    0xc(%ebx),%eax
80101a2a:	89 45 08             	mov    %eax,0x8(%ebp)
}
80101a2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101a30:	5b                   	pop    %ebx
80101a31:	5e                   	pop    %esi
80101a32:	5f                   	pop    %edi
80101a33:	5d                   	pop    %ebp
    return pipewrite(f->pipe, addr, n);
80101a34:	e9 4b 1f 00 00       	jmp    80103984 <pipewrite>
        panic("short filewrite");
80101a39:	83 ec 0c             	sub    $0xc,%esp
80101a3c:	68 cf 64 10 80       	push   $0x801064cf
80101a41:	e8 9e f3 ff ff       	call   80100de4 <panic>
  panic("filewrite");
80101a46:	83 ec 0c             	sub    $0xc,%esp
80101a49:	68 d5 64 10 80       	push   $0x801064d5
80101a4e:	e8 91 f3 ff ff       	call   80100de4 <panic>
80101a53:	90                   	nop

80101a54 <balloc>:
// Blocks.

// Allocate a zeroed disk block.
static uint
balloc(uint dev)
{
80101a54:	55                   	push   %ebp
80101a55:	89 e5                	mov    %esp,%ebp
80101a57:	57                   	push   %edi
80101a58:	56                   	push   %esi
80101a59:	53                   	push   %ebx
80101a5a:	83 ec 1c             	sub    $0x1c,%esp
80101a5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
  int b, bi, m;
  struct buf *bp;

  bp = 0;
  for(b = 0; b < sb.size; b += BPB){
80101a60:	8b 0d c0 f5 10 80    	mov    0x8010f5c0,%ecx
80101a66:	85 c9                	test   %ecx,%ecx
80101a68:	74 7c                	je     80101ae6 <balloc+0x92>
80101a6a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    bp = bread(dev, BBLOCK(b, sb));
80101a71:	83 ec 08             	sub    $0x8,%esp
80101a74:	8b 75 dc             	mov    -0x24(%ebp),%esi
80101a77:	89 f0                	mov    %esi,%eax
80101a79:	c1 f8 0c             	sar    $0xc,%eax
80101a7c:	03 05 d8 f5 10 80    	add    0x8010f5d8,%eax
80101a82:	50                   	push   %eax
80101a83:	ff 75 d8             	pushl  -0x28(%ebp)
80101a86:	e8 d5 f0 ff ff       	call   80100b60 <bread>
80101a8b:	89 c2                	mov    %eax,%edx
80101a8d:	a1 c0 f5 10 80       	mov    0x8010f5c0,%eax
80101a92:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101a95:	83 c4 10             	add    $0x10,%esp
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
80101a98:	31 c0                	xor    %eax,%eax
80101a9a:	eb 27                	jmp    80101ac3 <balloc+0x6f>
      m = 1 << (bi % 8);
80101a9c:	89 c1                	mov    %eax,%ecx
80101a9e:	83 e1 07             	and    $0x7,%ecx
80101aa1:	bf 01 00 00 00       	mov    $0x1,%edi
80101aa6:	d3 e7                	shl    %cl,%edi
80101aa8:	89 7d e4             	mov    %edi,-0x1c(%ebp)
      if((bp->data[bi/8] & m) == 0){  // Is block free?
80101aab:	89 c1                	mov    %eax,%ecx
80101aad:	c1 f9 03             	sar    $0x3,%ecx
80101ab0:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
80101ab5:	85 7d e4             	test   %edi,-0x1c(%ebp)
80101ab8:	74 3a                	je     80101af4 <balloc+0xa0>
    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
80101aba:	40                   	inc    %eax
80101abb:	46                   	inc    %esi
80101abc:	3d 00 10 00 00       	cmp    $0x1000,%eax
80101ac1:	74 05                	je     80101ac8 <balloc+0x74>
80101ac3:	3b 75 e0             	cmp    -0x20(%ebp),%esi
80101ac6:	72 d4                	jb     80101a9c <balloc+0x48>
        brelse(bp);
        bzero(dev, b + bi);
        return b + bi;
      }
    }
    brelse(bp);
80101ac8:	83 ec 0c             	sub    $0xc,%esp
80101acb:	52                   	push   %edx
80101acc:	e8 93 f1 ff ff       	call   80100c64 <brelse>
  for(b = 0; b < sb.size; b += BPB){
80101ad1:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
80101ad8:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101adb:	83 c4 10             	add    $0x10,%esp
80101ade:	3b 05 c0 f5 10 80    	cmp    0x8010f5c0,%eax
80101ae4:	72 8b                	jb     80101a71 <balloc+0x1d>
  }
  panic("balloc: out of blocks");
80101ae6:	83 ec 0c             	sub    $0xc,%esp
80101ae9:	68 df 64 10 80       	push   $0x801064df
80101aee:	e8 f1 f2 ff ff       	call   80100de4 <panic>
80101af3:	90                   	nop
        bp->data[bi/8] |= m;  // Mark block in use.
80101af4:	8a 45 e4             	mov    -0x1c(%ebp),%al
80101af7:	09 f8                	or     %edi,%eax
80101af9:	88 44 0a 5c          	mov    %al,0x5c(%edx,%ecx,1)
        log_write(bp);
80101afd:	83 ec 0c             	sub    $0xc,%esp
80101b00:	52                   	push   %edx
80101b01:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80101b04:	e8 a7 18 00 00       	call   801033b0 <log_write>
        brelse(bp);
80101b09:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101b0c:	89 14 24             	mov    %edx,(%esp)
80101b0f:	e8 50 f1 ff ff       	call   80100c64 <brelse>
  bp = bread(dev, bno);
80101b14:	58                   	pop    %eax
80101b15:	5a                   	pop    %edx
80101b16:	56                   	push   %esi
80101b17:	ff 75 d8             	pushl  -0x28(%ebp)
80101b1a:	e8 41 f0 ff ff       	call   80100b60 <bread>
80101b1f:	89 c3                	mov    %eax,%ebx
  memset(bp->data, 0, BSIZE);
80101b21:	83 c4 0c             	add    $0xc,%esp
80101b24:	68 00 02 00 00       	push   $0x200
80101b29:	6a 00                	push   $0x0
80101b2b:	8d 40 5c             	lea    0x5c(%eax),%eax
80101b2e:	50                   	push   %eax
80101b2f:	e8 d4 2c 00 00       	call   80104808 <memset>
  log_write(bp);
80101b34:	89 1c 24             	mov    %ebx,(%esp)
80101b37:	e8 74 18 00 00       	call   801033b0 <log_write>
  brelse(bp);
80101b3c:	89 1c 24             	mov    %ebx,(%esp)
80101b3f:	e8 20 f1 ff ff       	call   80100c64 <brelse>
}
80101b44:	89 f0                	mov    %esi,%eax
80101b46:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101b49:	5b                   	pop    %ebx
80101b4a:	5e                   	pop    %esi
80101b4b:	5f                   	pop    %edi
80101b4c:	5d                   	pop    %ebp
80101b4d:	c3                   	ret    
80101b4e:	66 90                	xchg   %ax,%ax

80101b50 <iget>:
// Find the inode with number inum on device dev
// and return the in-memory copy. Does not lock
// the inode and does not read it from disk.
static struct inode*
iget(uint dev, uint inum)
{
80101b50:	55                   	push   %ebp
80101b51:	89 e5                	mov    %esp,%ebp
80101b53:	57                   	push   %edi
80101b54:	56                   	push   %esi
80101b55:	53                   	push   %ebx
80101b56:	83 ec 28             	sub    $0x28,%esp
80101b59:	89 c7                	mov    %eax,%edi
80101b5b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  struct inode *ip, *empty;

  acquire(&icache.lock);
80101b5e:	68 e0 f5 10 80       	push   $0x8010f5e0
80101b63:	e8 80 2b 00 00       	call   801046e8 <acquire>
80101b68:	83 c4 10             	add    $0x10,%esp

  // Is the inode already cached?
  empty = 0;
80101b6b:	31 f6                	xor    %esi,%esi
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
80101b6d:	b9 14 f6 10 80       	mov    $0x8010f614,%ecx
80101b72:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101b75:	eb 13                	jmp    80101b8a <iget+0x3a>
80101b77:	90                   	nop
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
      ip->ref++;
      release(&icache.lock);
      return ip;
    }
    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
80101b78:	85 f6                	test   %esi,%esi
80101b7a:	74 40                	je     80101bbc <iget+0x6c>
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
80101b7c:	81 c1 90 00 00 00    	add    $0x90,%ecx
80101b82:	81 f9 34 12 11 80    	cmp    $0x80111234,%ecx
80101b88:	74 46                	je     80101bd0 <iget+0x80>
    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
80101b8a:	8b 59 08             	mov    0x8(%ecx),%ebx
80101b8d:	85 db                	test   %ebx,%ebx
80101b8f:	7e e7                	jle    80101b78 <iget+0x28>
80101b91:	39 39                	cmp    %edi,(%ecx)
80101b93:	75 e3                	jne    80101b78 <iget+0x28>
80101b95:	39 51 04             	cmp    %edx,0x4(%ecx)
80101b98:	75 de                	jne    80101b78 <iget+0x28>
80101b9a:	89 ce                	mov    %ecx,%esi
      ip->ref++;
80101b9c:	43                   	inc    %ebx
80101b9d:	89 59 08             	mov    %ebx,0x8(%ecx)
      release(&icache.lock);
80101ba0:	83 ec 0c             	sub    $0xc,%esp
80101ba3:	68 e0 f5 10 80       	push   $0x8010f5e0
80101ba8:	e8 0f 2c 00 00       	call   801047bc <release>
      return ip;
80101bad:	83 c4 10             	add    $0x10,%esp
  ip->ref = 1;
  ip->valid = 0;
  release(&icache.lock);

  return ip;
}
80101bb0:	89 f0                	mov    %esi,%eax
80101bb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101bb5:	5b                   	pop    %ebx
80101bb6:	5e                   	pop    %esi
80101bb7:	5f                   	pop    %edi
80101bb8:	5d                   	pop    %ebp
80101bb9:	c3                   	ret    
80101bba:	66 90                	xchg   %ax,%ax
    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
80101bbc:	85 db                	test   %ebx,%ebx
80101bbe:	75 bc                	jne    80101b7c <iget+0x2c>
80101bc0:	89 ce                	mov    %ecx,%esi
  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
80101bc2:	81 c1 90 00 00 00    	add    $0x90,%ecx
80101bc8:	81 f9 34 12 11 80    	cmp    $0x80111234,%ecx
80101bce:	75 ba                	jne    80101b8a <iget+0x3a>
  if(empty == 0)
80101bd0:	85 f6                	test   %esi,%esi
80101bd2:	74 2d                	je     80101c01 <iget+0xb1>
  ip->dev = dev;
80101bd4:	89 3e                	mov    %edi,(%esi)
  ip->inum = inum;
80101bd6:	89 56 04             	mov    %edx,0x4(%esi)
  ip->ref = 1;
80101bd9:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
  ip->valid = 0;
80101be0:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
  release(&icache.lock);
80101be7:	83 ec 0c             	sub    $0xc,%esp
80101bea:	68 e0 f5 10 80       	push   $0x8010f5e0
80101bef:	e8 c8 2b 00 00       	call   801047bc <release>
  return ip;
80101bf4:	83 c4 10             	add    $0x10,%esp
}
80101bf7:	89 f0                	mov    %esi,%eax
80101bf9:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101bfc:	5b                   	pop    %ebx
80101bfd:	5e                   	pop    %esi
80101bfe:	5f                   	pop    %edi
80101bff:	5d                   	pop    %ebp
80101c00:	c3                   	ret    
    panic("iget: no inodes");
80101c01:	83 ec 0c             	sub    $0xc,%esp
80101c04:	68 f5 64 10 80       	push   $0x801064f5
80101c09:	e8 d6 f1 ff ff       	call   80100de4 <panic>
80101c0e:	66 90                	xchg   %ax,%ax

80101c10 <bmap>:

// Return the disk block address of the nth block in inode ip.
// If there is no such block, bmap allocates one.
static uint
bmap(struct inode *ip, uint bn)
{
80101c10:	55                   	push   %ebp
80101c11:	89 e5                	mov    %esp,%ebp
80101c13:	57                   	push   %edi
80101c14:	56                   	push   %esi
80101c15:	53                   	push   %ebx
80101c16:	83 ec 1c             	sub    $0x1c,%esp
80101c19:	89 c6                	mov    %eax,%esi
  uint addr, *a;
  struct buf *bp;

  if(bn < NDIRECT){
80101c1b:	83 fa 0b             	cmp    $0xb,%edx
80101c1e:	77 14                	ja     80101c34 <bmap+0x24>
80101c20:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
    if((addr = ip->addrs[bn]) == 0)
80101c23:	8b 53 5c             	mov    0x5c(%ebx),%edx
80101c26:	85 d2                	test   %edx,%edx
80101c28:	74 6a                	je     80101c94 <bmap+0x84>
80101c2a:	89 d0                	mov    %edx,%eax
    brelse(bp);
    return addr;
  }

  panic("bmap: out of range");
}
80101c2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101c2f:	5b                   	pop    %ebx
80101c30:	5e                   	pop    %esi
80101c31:	5f                   	pop    %edi
80101c32:	5d                   	pop    %ebp
80101c33:	c3                   	ret    
  bn -= NDIRECT;
80101c34:	8d 5a f4             	lea    -0xc(%edx),%ebx
  if(bn < NINDIRECT){
80101c37:	83 fb 7f             	cmp    $0x7f,%ebx
80101c3a:	77 7b                	ja     80101cb7 <bmap+0xa7>
    if((addr = ip->addrs[NDIRECT]) == 0)
80101c3c:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
80101c42:	85 c0                	test   %eax,%eax
80101c44:	74 62                	je     80101ca8 <bmap+0x98>
    bp = bread(ip->dev, addr);
80101c46:	83 ec 08             	sub    $0x8,%esp
80101c49:	50                   	push   %eax
80101c4a:	ff 36                	pushl  (%esi)
80101c4c:	e8 0f ef ff ff       	call   80100b60 <bread>
80101c51:	89 c7                	mov    %eax,%edi
    if((addr = a[bn]) == 0){
80101c53:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
80101c57:	8b 1a                	mov    (%edx),%ebx
80101c59:	83 c4 10             	add    $0x10,%esp
80101c5c:	85 db                	test   %ebx,%ebx
80101c5e:	75 1d                	jne    80101c7d <bmap+0x6d>
80101c60:	89 55 e4             	mov    %edx,-0x1c(%ebp)
      a[bn] = addr = balloc(ip->dev);
80101c63:	8b 06                	mov    (%esi),%eax
80101c65:	e8 ea fd ff ff       	call   80101a54 <balloc>
80101c6a:	89 c3                	mov    %eax,%ebx
80101c6c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101c6f:	89 02                	mov    %eax,(%edx)
      log_write(bp);
80101c71:	83 ec 0c             	sub    $0xc,%esp
80101c74:	57                   	push   %edi
80101c75:	e8 36 17 00 00       	call   801033b0 <log_write>
80101c7a:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
80101c7d:	83 ec 0c             	sub    $0xc,%esp
80101c80:	57                   	push   %edi
80101c81:	e8 de ef ff ff       	call   80100c64 <brelse>
80101c86:	83 c4 10             	add    $0x10,%esp
80101c89:	89 d8                	mov    %ebx,%eax
}
80101c8b:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101c8e:	5b                   	pop    %ebx
80101c8f:	5e                   	pop    %esi
80101c90:	5f                   	pop    %edi
80101c91:	5d                   	pop    %ebp
80101c92:	c3                   	ret    
80101c93:	90                   	nop
      ip->addrs[bn] = addr = balloc(ip->dev);
80101c94:	8b 00                	mov    (%eax),%eax
80101c96:	e8 b9 fd ff ff       	call   80101a54 <balloc>
80101c9b:	89 43 5c             	mov    %eax,0x5c(%ebx)
}
80101c9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101ca1:	5b                   	pop    %ebx
80101ca2:	5e                   	pop    %esi
80101ca3:	5f                   	pop    %edi
80101ca4:	5d                   	pop    %ebp
80101ca5:	c3                   	ret    
80101ca6:	66 90                	xchg   %ax,%ax
      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
80101ca8:	8b 06                	mov    (%esi),%eax
80101caa:	e8 a5 fd ff ff       	call   80101a54 <balloc>
80101caf:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
80101cb5:	eb 8f                	jmp    80101c46 <bmap+0x36>
  panic("bmap: out of range");
80101cb7:	83 ec 0c             	sub    $0xc,%esp
80101cba:	68 05 65 10 80       	push   $0x80106505
80101cbf:	e8 20 f1 ff ff       	call   80100de4 <panic>

80101cc4 <readsb>:
{
80101cc4:	55                   	push   %ebp
80101cc5:	89 e5                	mov    %esp,%ebp
80101cc7:	56                   	push   %esi
80101cc8:	53                   	push   %ebx
80101cc9:	8b 75 0c             	mov    0xc(%ebp),%esi
  bp = bread(dev, 1);
80101ccc:	83 ec 08             	sub    $0x8,%esp
80101ccf:	6a 01                	push   $0x1
80101cd1:	ff 75 08             	pushl  0x8(%ebp)
80101cd4:	e8 87 ee ff ff       	call   80100b60 <bread>
80101cd9:	89 c3                	mov    %eax,%ebx
  memmove(sb, bp->data, sizeof(*sb));
80101cdb:	83 c4 0c             	add    $0xc,%esp
80101cde:	6a 1c                	push   $0x1c
80101ce0:	8d 40 5c             	lea    0x5c(%eax),%eax
80101ce3:	50                   	push   %eax
80101ce4:	56                   	push   %esi
80101ce5:	e8 b2 2b 00 00       	call   8010489c <memmove>
  brelse(bp);
80101cea:	83 c4 10             	add    $0x10,%esp
80101ced:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
80101cf0:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101cf3:	5b                   	pop    %ebx
80101cf4:	5e                   	pop    %esi
80101cf5:	5d                   	pop    %ebp
  brelse(bp);
80101cf6:	e9 69 ef ff ff       	jmp    80100c64 <brelse>
80101cfb:	90                   	nop

80101cfc <bfree>:
{
80101cfc:	55                   	push   %ebp
80101cfd:	89 e5                	mov    %esp,%ebp
80101cff:	56                   	push   %esi
80101d00:	53                   	push   %ebx
80101d01:	89 c6                	mov    %eax,%esi
80101d03:	89 d3                	mov    %edx,%ebx
  readsb(dev, &sb);
80101d05:	83 ec 08             	sub    $0x8,%esp
80101d08:	68 c0 f5 10 80       	push   $0x8010f5c0
80101d0d:	50                   	push   %eax
80101d0e:	e8 b1 ff ff ff       	call   80101cc4 <readsb>
  bp = bread(dev, BBLOCK(b, sb));
80101d13:	58                   	pop    %eax
80101d14:	5a                   	pop    %edx
80101d15:	89 da                	mov    %ebx,%edx
80101d17:	c1 ea 0c             	shr    $0xc,%edx
80101d1a:	03 15 d8 f5 10 80    	add    0x8010f5d8,%edx
80101d20:	52                   	push   %edx
80101d21:	56                   	push   %esi
80101d22:	e8 39 ee ff ff       	call   80100b60 <bread>
80101d27:	89 c6                	mov    %eax,%esi
  m = 1 << (bi % 8);
80101d29:	89 d9                	mov    %ebx,%ecx
80101d2b:	83 e1 07             	and    $0x7,%ecx
80101d2e:	ba 01 00 00 00       	mov    $0x1,%edx
80101d33:	d3 e2                	shl    %cl,%edx
  bi = b % BPB;
80101d35:	81 e3 ff 0f 00 00    	and    $0xfff,%ebx
  if((bp->data[bi/8] & m) == 0)
80101d3b:	c1 fb 03             	sar    $0x3,%ebx
80101d3e:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
80101d43:	83 c4 10             	add    $0x10,%esp
80101d46:	85 d1                	test   %edx,%ecx
80101d48:	74 25                	je     80101d6f <bfree+0x73>
80101d4a:	89 c8                	mov    %ecx,%eax
  bp->data[bi/8] &= ~m;
80101d4c:	f7 d2                	not    %edx
80101d4e:	21 d0                	and    %edx,%eax
80101d50:	88 44 1e 5c          	mov    %al,0x5c(%esi,%ebx,1)
  log_write(bp);
80101d54:	83 ec 0c             	sub    $0xc,%esp
80101d57:	56                   	push   %esi
80101d58:	e8 53 16 00 00       	call   801033b0 <log_write>
  brelse(bp);
80101d5d:	89 34 24             	mov    %esi,(%esp)
80101d60:	e8 ff ee ff ff       	call   80100c64 <brelse>
80101d65:	83 c4 10             	add    $0x10,%esp
}
80101d68:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101d6b:	5b                   	pop    %ebx
80101d6c:	5e                   	pop    %esi
80101d6d:	5d                   	pop    %ebp
80101d6e:	c3                   	ret    
    panic("freeing free block");
80101d6f:	83 ec 0c             	sub    $0xc,%esp
80101d72:	68 18 65 10 80       	push   $0x80106518
80101d77:	e8 68 f0 ff ff       	call   80100de4 <panic>

80101d7c <iinit>:
{
80101d7c:	55                   	push   %ebp
80101d7d:	89 e5                	mov    %esp,%ebp
80101d7f:	53                   	push   %ebx
80101d80:	83 ec 0c             	sub    $0xc,%esp
  initlock(&icache.lock, "icache");
80101d83:	68 2b 65 10 80       	push   $0x8010652b
80101d88:	68 e0 f5 10 80       	push   $0x8010f5e0
80101d8d:	e8 92 28 00 00       	call   80104624 <initlock>
80101d92:	bb 20 f6 10 80       	mov    $0x8010f620,%ebx
80101d97:	83 c4 10             	add    $0x10,%esp
80101d9a:	66 90                	xchg   %ax,%ax
    initsleeplock(&icache.inode[i].lock, "inode");
80101d9c:	83 ec 08             	sub    $0x8,%esp
80101d9f:	68 32 65 10 80       	push   $0x80106532
80101da4:	53                   	push   %ebx
80101da5:	e8 8e 27 00 00       	call   80104538 <initsleeplock>
80101daa:	81 c3 90 00 00 00    	add    $0x90,%ebx
  for(i = 0; i < NINODE; i++) {
80101db0:	83 c4 10             	add    $0x10,%esp
80101db3:	81 fb 40 12 11 80    	cmp    $0x80111240,%ebx
80101db9:	75 e1                	jne    80101d9c <iinit+0x20>
  readsb(dev, &sb);
80101dbb:	83 ec 08             	sub    $0x8,%esp
80101dbe:	68 c0 f5 10 80       	push   $0x8010f5c0
80101dc3:	ff 75 08             	pushl  0x8(%ebp)
80101dc6:	e8 f9 fe ff ff       	call   80101cc4 <readsb>
  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
80101dcb:	ff 35 d8 f5 10 80    	pushl  0x8010f5d8
80101dd1:	ff 35 d4 f5 10 80    	pushl  0x8010f5d4
80101dd7:	ff 35 d0 f5 10 80    	pushl  0x8010f5d0
80101ddd:	ff 35 cc f5 10 80    	pushl  0x8010f5cc
80101de3:	ff 35 c8 f5 10 80    	pushl  0x8010f5c8
80101de9:	ff 35 c4 f5 10 80    	pushl  0x8010f5c4
80101def:	ff 35 c0 f5 10 80    	pushl  0x8010f5c0
80101df5:	68 98 65 10 80       	push   $0x80106598
80101dfa:	e8 95 f2 ff ff       	call   80101094 <cprintf>
80101dff:	83 c4 30             	add    $0x30,%esp
}
80101e02:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101e05:	c9                   	leave  
80101e06:	c3                   	ret    
80101e07:	90                   	nop

80101e08 <ialloc>:
{
80101e08:	55                   	push   %ebp
80101e09:	89 e5                	mov    %esp,%ebp
80101e0b:	57                   	push   %edi
80101e0c:	56                   	push   %esi
80101e0d:	53                   	push   %ebx
80101e0e:	83 ec 1c             	sub    $0x1c,%esp
80101e11:	8b 75 08             	mov    0x8(%ebp),%esi
80101e14:	8b 45 0c             	mov    0xc(%ebp),%eax
80101e17:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  for(inum = 1; inum < sb.ninodes; inum++){
80101e1a:	83 3d c8 f5 10 80 01 	cmpl   $0x1,0x8010f5c8
80101e21:	0f 86 84 00 00 00    	jbe    80101eab <ialloc+0xa3>
80101e27:	bb 01 00 00 00       	mov    $0x1,%ebx
80101e2c:	eb 17                	jmp    80101e45 <ialloc+0x3d>
80101e2e:	66 90                	xchg   %ax,%ax
    brelse(bp);
80101e30:	83 ec 0c             	sub    $0xc,%esp
80101e33:	50                   	push   %eax
80101e34:	e8 2b ee ff ff       	call   80100c64 <brelse>
  for(inum = 1; inum < sb.ninodes; inum++){
80101e39:	43                   	inc    %ebx
80101e3a:	83 c4 10             	add    $0x10,%esp
80101e3d:	3b 1d c8 f5 10 80    	cmp    0x8010f5c8,%ebx
80101e43:	73 66                	jae    80101eab <ialloc+0xa3>
    bp = bread(dev, IBLOCK(inum, sb));
80101e45:	83 ec 08             	sub    $0x8,%esp
80101e48:	89 d8                	mov    %ebx,%eax
80101e4a:	c1 e8 03             	shr    $0x3,%eax
80101e4d:	03 05 d4 f5 10 80    	add    0x8010f5d4,%eax
80101e53:	50                   	push   %eax
80101e54:	56                   	push   %esi
80101e55:	e8 06 ed ff ff       	call   80100b60 <bread>
80101e5a:	89 c7                	mov    %eax,%edi
    dip = (struct dinode*)bp->data + inum%IPB;
80101e5c:	89 da                	mov    %ebx,%edx
80101e5e:	83 e2 07             	and    $0x7,%edx
80101e61:	c1 e2 06             	shl    $0x6,%edx
80101e64:	8d 54 10 5c          	lea    0x5c(%eax,%edx,1),%edx
    if(dip->type == 0){  // a free inode
80101e68:	83 c4 10             	add    $0x10,%esp
80101e6b:	66 83 3a 00          	cmpw   $0x0,(%edx)
80101e6f:	75 bf                	jne    80101e30 <ialloc+0x28>
      memset(dip, 0, sizeof(*dip));
80101e71:	50                   	push   %eax
80101e72:	6a 40                	push   $0x40
80101e74:	6a 00                	push   $0x0
80101e76:	52                   	push   %edx
80101e77:	89 55 e0             	mov    %edx,-0x20(%ebp)
80101e7a:	e8 89 29 00 00       	call   80104808 <memset>
      dip->type = type;
80101e7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101e82:	8b 55 e0             	mov    -0x20(%ebp),%edx
80101e85:	66 89 02             	mov    %ax,(%edx)
      log_write(bp);   // mark it allocated on the disk
80101e88:	89 3c 24             	mov    %edi,(%esp)
80101e8b:	e8 20 15 00 00       	call   801033b0 <log_write>
      brelse(bp);
80101e90:	89 3c 24             	mov    %edi,(%esp)
80101e93:	e8 cc ed ff ff       	call   80100c64 <brelse>
      return iget(dev, inum);
80101e98:	83 c4 10             	add    $0x10,%esp
80101e9b:	89 da                	mov    %ebx,%edx
80101e9d:	89 f0                	mov    %esi,%eax
}
80101e9f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101ea2:	5b                   	pop    %ebx
80101ea3:	5e                   	pop    %esi
80101ea4:	5f                   	pop    %edi
80101ea5:	5d                   	pop    %ebp
      return iget(dev, inum);
80101ea6:	e9 a5 fc ff ff       	jmp    80101b50 <iget>
  panic("ialloc: no inodes");
80101eab:	83 ec 0c             	sub    $0xc,%esp
80101eae:	68 38 65 10 80       	push   $0x80106538
80101eb3:	e8 2c ef ff ff       	call   80100de4 <panic>

80101eb8 <iupdate>:
{
80101eb8:	55                   	push   %ebp
80101eb9:	89 e5                	mov    %esp,%ebp
80101ebb:	56                   	push   %esi
80101ebc:	53                   	push   %ebx
80101ebd:	8b 5d 08             	mov    0x8(%ebp),%ebx
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
80101ec0:	83 ec 08             	sub    $0x8,%esp
80101ec3:	8b 43 04             	mov    0x4(%ebx),%eax
80101ec6:	c1 e8 03             	shr    $0x3,%eax
80101ec9:	03 05 d4 f5 10 80    	add    0x8010f5d4,%eax
80101ecf:	50                   	push   %eax
80101ed0:	ff 33                	pushl  (%ebx)
80101ed2:	e8 89 ec ff ff       	call   80100b60 <bread>
80101ed7:	89 c6                	mov    %eax,%esi
  dip = (struct dinode*)bp->data + ip->inum%IPB;
80101ed9:	8b 43 04             	mov    0x4(%ebx),%eax
80101edc:	83 e0 07             	and    $0x7,%eax
80101edf:	c1 e0 06             	shl    $0x6,%eax
80101ee2:	8d 54 06 5c          	lea    0x5c(%esi,%eax,1),%edx
  dip->type = ip->type;
80101ee6:	8b 43 50             	mov    0x50(%ebx),%eax
80101ee9:	66 89 02             	mov    %ax,(%edx)
  dip->major = ip->major;
80101eec:	66 8b 43 52          	mov    0x52(%ebx),%ax
80101ef0:	66 89 42 02          	mov    %ax,0x2(%edx)
  dip->minor = ip->minor;
80101ef4:	8b 43 54             	mov    0x54(%ebx),%eax
80101ef7:	66 89 42 04          	mov    %ax,0x4(%edx)
  dip->nlink = ip->nlink;
80101efb:	66 8b 43 56          	mov    0x56(%ebx),%ax
80101eff:	66 89 42 06          	mov    %ax,0x6(%edx)
  dip->size = ip->size;
80101f03:	8b 43 58             	mov    0x58(%ebx),%eax
80101f06:	89 42 08             	mov    %eax,0x8(%edx)
  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
80101f09:	83 c4 0c             	add    $0xc,%esp
80101f0c:	6a 34                	push   $0x34
80101f0e:	83 c3 5c             	add    $0x5c,%ebx
80101f11:	53                   	push   %ebx
80101f12:	83 c2 0c             	add    $0xc,%edx
80101f15:	52                   	push   %edx
80101f16:	e8 81 29 00 00       	call   8010489c <memmove>
  log_write(bp);
80101f1b:	89 34 24             	mov    %esi,(%esp)
80101f1e:	e8 8d 14 00 00       	call   801033b0 <log_write>
  brelse(bp);
80101f23:	83 c4 10             	add    $0x10,%esp
80101f26:	89 75 08             	mov    %esi,0x8(%ebp)
}
80101f29:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101f2c:	5b                   	pop    %ebx
80101f2d:	5e                   	pop    %esi
80101f2e:	5d                   	pop    %ebp
  brelse(bp);
80101f2f:	e9 30 ed ff ff       	jmp    80100c64 <brelse>

80101f34 <idup>:
{
80101f34:	55                   	push   %ebp
80101f35:	89 e5                	mov    %esp,%ebp
80101f37:	53                   	push   %ebx
80101f38:	83 ec 10             	sub    $0x10,%esp
80101f3b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&icache.lock);
80101f3e:	68 e0 f5 10 80       	push   $0x8010f5e0
80101f43:	e8 a0 27 00 00       	call   801046e8 <acquire>
  ip->ref++;
80101f48:	ff 43 08             	incl   0x8(%ebx)
  release(&icache.lock);
80101f4b:	c7 04 24 e0 f5 10 80 	movl   $0x8010f5e0,(%esp)
80101f52:	e8 65 28 00 00       	call   801047bc <release>
}
80101f57:	89 d8                	mov    %ebx,%eax
80101f59:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101f5c:	c9                   	leave  
80101f5d:	c3                   	ret    
80101f5e:	66 90                	xchg   %ax,%ax

80101f60 <ilock>:
{
80101f60:	55                   	push   %ebp
80101f61:	89 e5                	mov    %esp,%ebp
80101f63:	56                   	push   %esi
80101f64:	53                   	push   %ebx
80101f65:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(ip == 0 || ip->ref < 1)
80101f68:	85 db                	test   %ebx,%ebx
80101f6a:	0f 84 a9 00 00 00    	je     80102019 <ilock+0xb9>
80101f70:	8b 53 08             	mov    0x8(%ebx),%edx
80101f73:	85 d2                	test   %edx,%edx
80101f75:	0f 8e 9e 00 00 00    	jle    80102019 <ilock+0xb9>
  acquiresleep(&ip->lock);
80101f7b:	83 ec 0c             	sub    $0xc,%esp
80101f7e:	8d 43 0c             	lea    0xc(%ebx),%eax
80101f81:	50                   	push   %eax
80101f82:	e8 e5 25 00 00       	call   8010456c <acquiresleep>
  if(ip->valid == 0){
80101f87:	83 c4 10             	add    $0x10,%esp
80101f8a:	8b 43 4c             	mov    0x4c(%ebx),%eax
80101f8d:	85 c0                	test   %eax,%eax
80101f8f:	74 07                	je     80101f98 <ilock+0x38>
}
80101f91:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101f94:	5b                   	pop    %ebx
80101f95:	5e                   	pop    %esi
80101f96:	5d                   	pop    %ebp
80101f97:	c3                   	ret    
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
80101f98:	83 ec 08             	sub    $0x8,%esp
80101f9b:	8b 43 04             	mov    0x4(%ebx),%eax
80101f9e:	c1 e8 03             	shr    $0x3,%eax
80101fa1:	03 05 d4 f5 10 80    	add    0x8010f5d4,%eax
80101fa7:	50                   	push   %eax
80101fa8:	ff 33                	pushl  (%ebx)
80101faa:	e8 b1 eb ff ff       	call   80100b60 <bread>
80101faf:	89 c6                	mov    %eax,%esi
    dip = (struct dinode*)bp->data + ip->inum%IPB;
80101fb1:	8b 53 04             	mov    0x4(%ebx),%edx
80101fb4:	83 e2 07             	and    $0x7,%edx
80101fb7:	c1 e2 06             	shl    $0x6,%edx
80101fba:	8d 54 10 5c          	lea    0x5c(%eax,%edx,1),%edx
    ip->type = dip->type;
80101fbe:	8b 02                	mov    (%edx),%eax
80101fc0:	66 89 43 50          	mov    %ax,0x50(%ebx)
    ip->major = dip->major;
80101fc4:	66 8b 42 02          	mov    0x2(%edx),%ax
80101fc8:	66 89 43 52          	mov    %ax,0x52(%ebx)
    ip->minor = dip->minor;
80101fcc:	8b 42 04             	mov    0x4(%edx),%eax
80101fcf:	66 89 43 54          	mov    %ax,0x54(%ebx)
    ip->nlink = dip->nlink;
80101fd3:	66 8b 42 06          	mov    0x6(%edx),%ax
80101fd7:	66 89 43 56          	mov    %ax,0x56(%ebx)
    ip->size = dip->size;
80101fdb:	8b 42 08             	mov    0x8(%edx),%eax
80101fde:	89 43 58             	mov    %eax,0x58(%ebx)
    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
80101fe1:	83 c4 0c             	add    $0xc,%esp
80101fe4:	6a 34                	push   $0x34
80101fe6:	83 c2 0c             	add    $0xc,%edx
80101fe9:	52                   	push   %edx
80101fea:	8d 43 5c             	lea    0x5c(%ebx),%eax
80101fed:	50                   	push   %eax
80101fee:	e8 a9 28 00 00       	call   8010489c <memmove>
    brelse(bp);
80101ff3:	89 34 24             	mov    %esi,(%esp)
80101ff6:	e8 69 ec ff ff       	call   80100c64 <brelse>
    ip->valid = 1;
80101ffb:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
    if(ip->type == 0)
80102002:	83 c4 10             	add    $0x10,%esp
80102005:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
8010200a:	75 85                	jne    80101f91 <ilock+0x31>
      panic("ilock: no type");
8010200c:	83 ec 0c             	sub    $0xc,%esp
8010200f:	68 50 65 10 80       	push   $0x80106550
80102014:	e8 cb ed ff ff       	call   80100de4 <panic>
    panic("ilock");
80102019:	83 ec 0c             	sub    $0xc,%esp
8010201c:	68 4a 65 10 80       	push   $0x8010654a
80102021:	e8 be ed ff ff       	call   80100de4 <panic>
80102026:	66 90                	xchg   %ax,%ax

80102028 <iunlock>:
{
80102028:	55                   	push   %ebp
80102029:	89 e5                	mov    %esp,%ebp
8010202b:	56                   	push   %esi
8010202c:	53                   	push   %ebx
8010202d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
80102030:	85 db                	test   %ebx,%ebx
80102032:	74 28                	je     8010205c <iunlock+0x34>
80102034:	8d 73 0c             	lea    0xc(%ebx),%esi
80102037:	83 ec 0c             	sub    $0xc,%esp
8010203a:	56                   	push   %esi
8010203b:	e8 bc 25 00 00       	call   801045fc <holdingsleep>
80102040:	83 c4 10             	add    $0x10,%esp
80102043:	85 c0                	test   %eax,%eax
80102045:	74 15                	je     8010205c <iunlock+0x34>
80102047:	8b 43 08             	mov    0x8(%ebx),%eax
8010204a:	85 c0                	test   %eax,%eax
8010204c:	7e 0e                	jle    8010205c <iunlock+0x34>
  releasesleep(&ip->lock);
8010204e:	89 75 08             	mov    %esi,0x8(%ebp)
}
80102051:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102054:	5b                   	pop    %ebx
80102055:	5e                   	pop    %esi
80102056:	5d                   	pop    %ebp
  releasesleep(&ip->lock);
80102057:	e9 64 25 00 00       	jmp    801045c0 <releasesleep>
    panic("iunlock");
8010205c:	83 ec 0c             	sub    $0xc,%esp
8010205f:	68 5f 65 10 80       	push   $0x8010655f
80102064:	e8 7b ed ff ff       	call   80100de4 <panic>
80102069:	8d 76 00             	lea    0x0(%esi),%esi

8010206c <iput>:
{
8010206c:	55                   	push   %ebp
8010206d:	89 e5                	mov    %esp,%ebp
8010206f:	57                   	push   %edi
80102070:	56                   	push   %esi
80102071:	53                   	push   %ebx
80102072:	83 ec 28             	sub    $0x28,%esp
80102075:	8b 7d 08             	mov    0x8(%ebp),%edi
  acquiresleep(&ip->lock);
80102078:	8d 77 0c             	lea    0xc(%edi),%esi
8010207b:	56                   	push   %esi
8010207c:	e8 eb 24 00 00       	call   8010456c <acquiresleep>
  if(ip->valid && ip->nlink == 0){
80102081:	83 c4 10             	add    $0x10,%esp
80102084:	8b 47 4c             	mov    0x4c(%edi),%eax
80102087:	85 c0                	test   %eax,%eax
80102089:	74 07                	je     80102092 <iput+0x26>
8010208b:	66 83 7f 56 00       	cmpw   $0x0,0x56(%edi)
80102090:	74 2e                	je     801020c0 <iput+0x54>
  releasesleep(&ip->lock);
80102092:	83 ec 0c             	sub    $0xc,%esp
80102095:	56                   	push   %esi
80102096:	e8 25 25 00 00       	call   801045c0 <releasesleep>
  acquire(&icache.lock);
8010209b:	c7 04 24 e0 f5 10 80 	movl   $0x8010f5e0,(%esp)
801020a2:	e8 41 26 00 00       	call   801046e8 <acquire>
  ip->ref--;
801020a7:	ff 4f 08             	decl   0x8(%edi)
  release(&icache.lock);
801020aa:	83 c4 10             	add    $0x10,%esp
801020ad:	c7 45 08 e0 f5 10 80 	movl   $0x8010f5e0,0x8(%ebp)
}
801020b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
801020b7:	5b                   	pop    %ebx
801020b8:	5e                   	pop    %esi
801020b9:	5f                   	pop    %edi
801020ba:	5d                   	pop    %ebp
  release(&icache.lock);
801020bb:	e9 fc 26 00 00       	jmp    801047bc <release>
    acquire(&icache.lock);
801020c0:	83 ec 0c             	sub    $0xc,%esp
801020c3:	68 e0 f5 10 80       	push   $0x8010f5e0
801020c8:	e8 1b 26 00 00       	call   801046e8 <acquire>
    int r = ip->ref;
801020cd:	8b 5f 08             	mov    0x8(%edi),%ebx
    release(&icache.lock);
801020d0:	c7 04 24 e0 f5 10 80 	movl   $0x8010f5e0,(%esp)
801020d7:	e8 e0 26 00 00       	call   801047bc <release>
    if(r == 1){
801020dc:	83 c4 10             	add    $0x10,%esp
801020df:	4b                   	dec    %ebx
801020e0:	75 b0                	jne    80102092 <iput+0x26>
801020e2:	8d 5f 5c             	lea    0x5c(%edi),%ebx
801020e5:	8d 8f 8c 00 00 00    	lea    0x8c(%edi),%ecx
801020eb:	89 75 e4             	mov    %esi,-0x1c(%ebp)
801020ee:	89 ce                	mov    %ecx,%esi
801020f0:	eb 09                	jmp    801020fb <iput+0x8f>
801020f2:	66 90                	xchg   %ax,%ax
801020f4:	83 c3 04             	add    $0x4,%ebx
{
  int i, j;
  struct buf *bp;
  uint *a;

  for(i = 0; i < NDIRECT; i++){
801020f7:	39 f3                	cmp    %esi,%ebx
801020f9:	74 15                	je     80102110 <iput+0xa4>
    if(ip->addrs[i]){
801020fb:	8b 13                	mov    (%ebx),%edx
801020fd:	85 d2                	test   %edx,%edx
801020ff:	74 f3                	je     801020f4 <iput+0x88>
      bfree(ip->dev, ip->addrs[i]);
80102101:	8b 07                	mov    (%edi),%eax
80102103:	e8 f4 fb ff ff       	call   80101cfc <bfree>
      ip->addrs[i] = 0;
80102108:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
8010210e:	eb e4                	jmp    801020f4 <iput+0x88>
80102110:	8b 75 e4             	mov    -0x1c(%ebp),%esi
    }
  }

  if(ip->addrs[NDIRECT]){
80102113:	8b 87 8c 00 00 00    	mov    0x8c(%edi),%eax
80102119:	85 c0                	test   %eax,%eax
8010211b:	75 2f                	jne    8010214c <iput+0xe0>
    brelse(bp);
    bfree(ip->dev, ip->addrs[NDIRECT]);
    ip->addrs[NDIRECT] = 0;
  }

  ip->size = 0;
8010211d:	c7 47 58 00 00 00 00 	movl   $0x0,0x58(%edi)
  iupdate(ip);
80102124:	83 ec 0c             	sub    $0xc,%esp
80102127:	57                   	push   %edi
80102128:	e8 8b fd ff ff       	call   80101eb8 <iupdate>
      ip->type = 0;
8010212d:	66 c7 47 50 00 00    	movw   $0x0,0x50(%edi)
      iupdate(ip);
80102133:	89 3c 24             	mov    %edi,(%esp)
80102136:	e8 7d fd ff ff       	call   80101eb8 <iupdate>
      ip->valid = 0;
8010213b:	c7 47 4c 00 00 00 00 	movl   $0x0,0x4c(%edi)
80102142:	83 c4 10             	add    $0x10,%esp
80102145:	e9 48 ff ff ff       	jmp    80102092 <iput+0x26>
8010214a:	66 90                	xchg   %ax,%ax
    bp = bread(ip->dev, ip->addrs[NDIRECT]);
8010214c:	83 ec 08             	sub    $0x8,%esp
8010214f:	50                   	push   %eax
80102150:	ff 37                	pushl  (%edi)
80102152:	e8 09 ea ff ff       	call   80100b60 <bread>
80102157:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    a = (uint*)bp->data;
8010215a:	8d 58 5c             	lea    0x5c(%eax),%ebx
8010215d:	05 5c 02 00 00       	add    $0x25c,%eax
80102162:	83 c4 10             	add    $0x10,%esp
80102165:	89 75 e0             	mov    %esi,-0x20(%ebp)
80102168:	89 de                	mov    %ebx,%esi
8010216a:	89 c3                	mov    %eax,%ebx
8010216c:	eb 09                	jmp    80102177 <iput+0x10b>
8010216e:	66 90                	xchg   %ax,%ax
80102170:	83 c6 04             	add    $0x4,%esi
    for(j = 0; j < NINDIRECT; j++){
80102173:	39 de                	cmp    %ebx,%esi
80102175:	74 0f                	je     80102186 <iput+0x11a>
      if(a[j])
80102177:	8b 16                	mov    (%esi),%edx
80102179:	85 d2                	test   %edx,%edx
8010217b:	74 f3                	je     80102170 <iput+0x104>
        bfree(ip->dev, a[j]);
8010217d:	8b 07                	mov    (%edi),%eax
8010217f:	e8 78 fb ff ff       	call   80101cfc <bfree>
80102184:	eb ea                	jmp    80102170 <iput+0x104>
80102186:	8b 75 e0             	mov    -0x20(%ebp),%esi
    brelse(bp);
80102189:	83 ec 0c             	sub    $0xc,%esp
8010218c:	ff 75 e4             	pushl  -0x1c(%ebp)
8010218f:	e8 d0 ea ff ff       	call   80100c64 <brelse>
    bfree(ip->dev, ip->addrs[NDIRECT]);
80102194:	8b 97 8c 00 00 00    	mov    0x8c(%edi),%edx
8010219a:	8b 07                	mov    (%edi),%eax
8010219c:	e8 5b fb ff ff       	call   80101cfc <bfree>
    ip->addrs[NDIRECT] = 0;
801021a1:	c7 87 8c 00 00 00 00 	movl   $0x0,0x8c(%edi)
801021a8:	00 00 00 
801021ab:	83 c4 10             	add    $0x10,%esp
801021ae:	e9 6a ff ff ff       	jmp    8010211d <iput+0xb1>
801021b3:	90                   	nop

801021b4 <iunlockput>:
{
801021b4:	55                   	push   %ebp
801021b5:	89 e5                	mov    %esp,%ebp
801021b7:	53                   	push   %ebx
801021b8:	83 ec 10             	sub    $0x10,%esp
801021bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
  iunlock(ip);
801021be:	53                   	push   %ebx
801021bf:	e8 64 fe ff ff       	call   80102028 <iunlock>
  iput(ip);
801021c4:	83 c4 10             	add    $0x10,%esp
801021c7:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
801021ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801021cd:	c9                   	leave  
  iput(ip);
801021ce:	e9 99 fe ff ff       	jmp    8010206c <iput>
801021d3:	90                   	nop

801021d4 <stati>:

// Copy stat information from inode.
// Caller must hold ip->lock.
void
stati(struct inode *ip, struct stat *st)
{
801021d4:	55                   	push   %ebp
801021d5:	89 e5                	mov    %esp,%ebp
801021d7:	8b 55 08             	mov    0x8(%ebp),%edx
801021da:	8b 45 0c             	mov    0xc(%ebp),%eax
  st->dev = ip->dev;
801021dd:	8b 0a                	mov    (%edx),%ecx
801021df:	89 48 04             	mov    %ecx,0x4(%eax)
  st->ino = ip->inum;
801021e2:	8b 4a 04             	mov    0x4(%edx),%ecx
801021e5:	89 48 08             	mov    %ecx,0x8(%eax)
  st->type = ip->type;
801021e8:	8b 4a 50             	mov    0x50(%edx),%ecx
801021eb:	66 89 08             	mov    %cx,(%eax)
  st->nlink = ip->nlink;
801021ee:	66 8b 4a 56          	mov    0x56(%edx),%cx
801021f2:	66 89 48 0c          	mov    %cx,0xc(%eax)
  st->size = ip->size;
801021f6:	8b 52 58             	mov    0x58(%edx),%edx
801021f9:	89 50 10             	mov    %edx,0x10(%eax)
}
801021fc:	5d                   	pop    %ebp
801021fd:	c3                   	ret    
801021fe:	66 90                	xchg   %ax,%ax

80102200 <readi>:
//PAGEBREAK!
// Read data from inode.
// Caller must hold ip->lock.
int
readi(struct inode *ip, char *dst, uint off, uint n)
{
80102200:	55                   	push   %ebp
80102201:	89 e5                	mov    %esp,%ebp
80102203:	57                   	push   %edi
80102204:	56                   	push   %esi
80102205:	53                   	push   %ebx
80102206:	83 ec 1c             	sub    $0x1c,%esp
80102209:	8b 45 08             	mov    0x8(%ebp),%eax
8010220c:	89 45 d8             	mov    %eax,-0x28(%ebp)
8010220f:	8b 7d 0c             	mov    0xc(%ebp),%edi
80102212:	8b 75 10             	mov    0x10(%ebp),%esi
80102215:	8b 4d 14             	mov    0x14(%ebp),%ecx
80102218:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  uint tot, m;
  struct buf *bp;

  if(ip->type == T_DEV){
8010221b:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
80102220:	0f 84 b2 00 00 00    	je     801022d8 <readi+0xd8>
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
      return -1;
    return devsw[ip->major].read(ip, dst, n);
  }

  if(off > ip->size || off + n < off)
80102226:	8b 45 d8             	mov    -0x28(%ebp),%eax
80102229:	8b 40 58             	mov    0x58(%eax),%eax
8010222c:	39 f0                	cmp    %esi,%eax
8010222e:	0f 82 c8 00 00 00    	jb     801022fc <readi+0xfc>
80102234:	8b 55 e0             	mov    -0x20(%ebp),%edx
80102237:	01 f2                	add    %esi,%edx
80102239:	0f 82 bd 00 00 00    	jb     801022fc <readi+0xfc>
    return -1;
  if(off + n > ip->size)
8010223f:	39 d0                	cmp    %edx,%eax
80102241:	0f 82 85 00 00 00    	jb     801022cc <readi+0xcc>
    n = ip->size - off;

  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
80102247:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
8010224e:	8b 5d e0             	mov    -0x20(%ebp),%ebx
80102251:	85 db                	test   %ebx,%ebx
80102253:	74 69                	je     801022be <readi+0xbe>
80102255:	8d 76 00             	lea    0x0(%esi),%esi
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
80102258:	89 f2                	mov    %esi,%edx
8010225a:	c1 ea 09             	shr    $0x9,%edx
8010225d:	8b 5d d8             	mov    -0x28(%ebp),%ebx
80102260:	89 d8                	mov    %ebx,%eax
80102262:	e8 a9 f9 ff ff       	call   80101c10 <bmap>
80102267:	83 ec 08             	sub    $0x8,%esp
8010226a:	50                   	push   %eax
8010226b:	ff 33                	pushl  (%ebx)
8010226d:	e8 ee e8 ff ff       	call   80100b60 <bread>
80102272:	89 c2                	mov    %eax,%edx
    m = min(n - tot, BSIZE - off%BSIZE);
80102274:	89 f0                	mov    %esi,%eax
80102276:	25 ff 01 00 00       	and    $0x1ff,%eax
8010227b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
8010227e:	2b 4d e4             	sub    -0x1c(%ebp),%ecx
80102281:	bb 00 02 00 00       	mov    $0x200,%ebx
80102286:	29 c3                	sub    %eax,%ebx
80102288:	83 c4 10             	add    $0x10,%esp
8010228b:	39 cb                	cmp    %ecx,%ebx
8010228d:	76 02                	jbe    80102291 <readi+0x91>
8010228f:	89 cb                	mov    %ecx,%ebx
    memmove(dst, bp->data + off%BSIZE, m);
80102291:	51                   	push   %ecx
80102292:	53                   	push   %ebx
80102293:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
80102297:	89 55 dc             	mov    %edx,-0x24(%ebp)
8010229a:	50                   	push   %eax
8010229b:	57                   	push   %edi
8010229c:	e8 fb 25 00 00       	call   8010489c <memmove>
    brelse(bp);
801022a1:	8b 55 dc             	mov    -0x24(%ebp),%edx
801022a4:	89 14 24             	mov    %edx,(%esp)
801022a7:	e8 b8 e9 ff ff       	call   80100c64 <brelse>
  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
801022ac:	01 5d e4             	add    %ebx,-0x1c(%ebp)
801022af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801022b2:	01 de                	add    %ebx,%esi
801022b4:	01 df                	add    %ebx,%edi
801022b6:	83 c4 10             	add    $0x10,%esp
801022b9:	39 45 e0             	cmp    %eax,-0x20(%ebp)
801022bc:	77 9a                	ja     80102258 <readi+0x58>
  }
  return n;
801022be:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
801022c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801022c4:	5b                   	pop    %ebx
801022c5:	5e                   	pop    %esi
801022c6:	5f                   	pop    %edi
801022c7:	5d                   	pop    %ebp
801022c8:	c3                   	ret    
801022c9:	8d 76 00             	lea    0x0(%esi),%esi
    n = ip->size - off;
801022cc:	29 f0                	sub    %esi,%eax
801022ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
801022d1:	e9 71 ff ff ff       	jmp    80102247 <readi+0x47>
801022d6:	66 90                	xchg   %ax,%ax
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
801022d8:	0f bf 40 52          	movswl 0x52(%eax),%eax
801022dc:	66 83 f8 09          	cmp    $0x9,%ax
801022e0:	77 1a                	ja     801022fc <readi+0xfc>
801022e2:	8b 04 c5 60 f5 10 80 	mov    -0x7fef0aa0(,%eax,8),%eax
801022e9:	85 c0                	test   %eax,%eax
801022eb:	74 0f                	je     801022fc <readi+0xfc>
    return devsw[ip->major].read(ip, dst, n);
801022ed:	89 4d 10             	mov    %ecx,0x10(%ebp)
}
801022f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
801022f3:	5b                   	pop    %ebx
801022f4:	5e                   	pop    %esi
801022f5:	5f                   	pop    %edi
801022f6:	5d                   	pop    %ebp
    return devsw[ip->major].read(ip, dst, n);
801022f7:	ff e0                	jmp    *%eax
801022f9:	8d 76 00             	lea    0x0(%esi),%esi
      return -1;
801022fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102301:	eb be                	jmp    801022c1 <readi+0xc1>
80102303:	90                   	nop

80102304 <writei>:
// PAGEBREAK!
// Write data to inode.
// Caller must hold ip->lock.
int
writei(struct inode *ip, char *src, uint off, uint n)
{
80102304:	55                   	push   %ebp
80102305:	89 e5                	mov    %esp,%ebp
80102307:	57                   	push   %edi
80102308:	56                   	push   %esi
80102309:	53                   	push   %ebx
8010230a:	83 ec 1c             	sub    $0x1c,%esp
8010230d:	8b 45 08             	mov    0x8(%ebp),%eax
80102310:	89 45 d8             	mov    %eax,-0x28(%ebp)
80102313:	8b 75 0c             	mov    0xc(%ebp),%esi
80102316:	89 75 dc             	mov    %esi,-0x24(%ebp)
80102319:	8b 75 10             	mov    0x10(%ebp),%esi
8010231c:	8b 55 14             	mov    0x14(%ebp),%edx
8010231f:	89 55 e0             	mov    %edx,-0x20(%ebp)
  uint tot, m;
  struct buf *bp;

  if(ip->type == T_DEV){
80102322:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
80102327:	0f 84 af 00 00 00    	je     801023dc <writei+0xd8>
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
      return -1;
    return devsw[ip->major].write(ip, src, n);
  }

  if(off > ip->size || off + n < off)
8010232d:	8b 45 d8             	mov    -0x28(%ebp),%eax
80102330:	39 70 58             	cmp    %esi,0x58(%eax)
80102333:	0f 82 db 00 00 00    	jb     80102414 <writei+0x110>
80102339:	8b 55 e0             	mov    -0x20(%ebp),%edx
8010233c:	89 d0                	mov    %edx,%eax
8010233e:	01 f0                	add    %esi,%eax
80102340:	0f 82 ce 00 00 00    	jb     80102414 <writei+0x110>
    return -1;
  if(off + n > MAXFILE*BSIZE)
80102346:	3d 00 18 01 00       	cmp    $0x11800,%eax
8010234b:	0f 87 c3 00 00 00    	ja     80102414 <writei+0x110>
    return -1;

  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
80102351:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80102358:	85 d2                	test   %edx,%edx
8010235a:	74 73                	je     801023cf <writei+0xcb>
    bp = bread(ip->dev, bmap(ip, off/BSIZE));
8010235c:	89 f2                	mov    %esi,%edx
8010235e:	c1 ea 09             	shr    $0x9,%edx
80102361:	8b 7d d8             	mov    -0x28(%ebp),%edi
80102364:	89 f8                	mov    %edi,%eax
80102366:	e8 a5 f8 ff ff       	call   80101c10 <bmap>
8010236b:	83 ec 08             	sub    $0x8,%esp
8010236e:	50                   	push   %eax
8010236f:	ff 37                	pushl  (%edi)
80102371:	e8 ea e7 ff ff       	call   80100b60 <bread>
80102376:	89 c7                	mov    %eax,%edi
    m = min(n - tot, BSIZE - off%BSIZE);
80102378:	89 f0                	mov    %esi,%eax
8010237a:	25 ff 01 00 00       	and    $0x1ff,%eax
8010237f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
80102382:	2b 4d e4             	sub    -0x1c(%ebp),%ecx
80102385:	bb 00 02 00 00       	mov    $0x200,%ebx
8010238a:	29 c3                	sub    %eax,%ebx
8010238c:	83 c4 10             	add    $0x10,%esp
8010238f:	39 cb                	cmp    %ecx,%ebx
80102391:	76 02                	jbe    80102395 <writei+0x91>
80102393:	89 cb                	mov    %ecx,%ebx
    memmove(bp->data + off%BSIZE, src, m);
80102395:	52                   	push   %edx
80102396:	53                   	push   %ebx
80102397:	ff 75 dc             	pushl  -0x24(%ebp)
8010239a:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
8010239e:	50                   	push   %eax
8010239f:	e8 f8 24 00 00       	call   8010489c <memmove>
    log_write(bp);
801023a4:	89 3c 24             	mov    %edi,(%esp)
801023a7:	e8 04 10 00 00       	call   801033b0 <log_write>
    brelse(bp);
801023ac:	89 3c 24             	mov    %edi,(%esp)
801023af:	e8 b0 e8 ff ff       	call   80100c64 <brelse>
  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
801023b4:	01 5d e4             	add    %ebx,-0x1c(%ebp)
801023b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801023ba:	01 de                	add    %ebx,%esi
801023bc:	01 5d dc             	add    %ebx,-0x24(%ebp)
801023bf:	83 c4 10             	add    $0x10,%esp
801023c2:	39 45 e0             	cmp    %eax,-0x20(%ebp)
801023c5:	77 95                	ja     8010235c <writei+0x58>
  }

  if(n > 0 && off > ip->size){
801023c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
801023ca:	39 70 58             	cmp    %esi,0x58(%eax)
801023cd:	72 31                	jb     80102400 <writei+0xfc>
    ip->size = off;
    iupdate(ip);
  }
  return n;
801023cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
801023d2:	8d 65 f4             	lea    -0xc(%ebp),%esp
801023d5:	5b                   	pop    %ebx
801023d6:	5e                   	pop    %esi
801023d7:	5f                   	pop    %edi
801023d8:	5d                   	pop    %ebp
801023d9:	c3                   	ret    
801023da:	66 90                	xchg   %ax,%ax
    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
801023dc:	0f bf 40 52          	movswl 0x52(%eax),%eax
801023e0:	66 83 f8 09          	cmp    $0x9,%ax
801023e4:	77 2e                	ja     80102414 <writei+0x110>
801023e6:	8b 04 c5 64 f5 10 80 	mov    -0x7fef0a9c(,%eax,8),%eax
801023ed:	85 c0                	test   %eax,%eax
801023ef:	74 23                	je     80102414 <writei+0x110>
    return devsw[ip->major].write(ip, src, n);
801023f1:	89 55 10             	mov    %edx,0x10(%ebp)
}
801023f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
801023f7:	5b                   	pop    %ebx
801023f8:	5e                   	pop    %esi
801023f9:	5f                   	pop    %edi
801023fa:	5d                   	pop    %ebp
    return devsw[ip->major].write(ip, src, n);
801023fb:	ff e0                	jmp    *%eax
801023fd:	8d 76 00             	lea    0x0(%esi),%esi
    ip->size = off;
80102400:	8b 45 d8             	mov    -0x28(%ebp),%eax
80102403:	89 70 58             	mov    %esi,0x58(%eax)
    iupdate(ip);
80102406:	83 ec 0c             	sub    $0xc,%esp
80102409:	50                   	push   %eax
8010240a:	e8 a9 fa ff ff       	call   80101eb8 <iupdate>
8010240f:	83 c4 10             	add    $0x10,%esp
80102412:	eb bb                	jmp    801023cf <writei+0xcb>
      return -1;
80102414:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80102419:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010241c:	5b                   	pop    %ebx
8010241d:	5e                   	pop    %esi
8010241e:	5f                   	pop    %edi
8010241f:	5d                   	pop    %ebp
80102420:	c3                   	ret    
80102421:	8d 76 00             	lea    0x0(%esi),%esi

80102424 <namecmp>:
//PAGEBREAK!
// Directories

int
namecmp(const char *s, const char *t)
{
80102424:	55                   	push   %ebp
80102425:	89 e5                	mov    %esp,%ebp
80102427:	83 ec 0c             	sub    $0xc,%esp
  return strncmp(s, t, DIRSIZ);
8010242a:	6a 0e                	push   $0xe
8010242c:	ff 75 0c             	pushl  0xc(%ebp)
8010242f:	ff 75 08             	pushl  0x8(%ebp)
80102432:	e8 c1 24 00 00       	call   801048f8 <strncmp>
}
80102437:	c9                   	leave  
80102438:	c3                   	ret    
80102439:	8d 76 00             	lea    0x0(%esi),%esi

8010243c <dirlookup>:

// Look for a directory entry in a directory.
// If found, set *poff to byte offset of entry.
struct inode*
dirlookup(struct inode *dp, char *name, uint *poff)
{
8010243c:	55                   	push   %ebp
8010243d:	89 e5                	mov    %esp,%ebp
8010243f:	57                   	push   %edi
80102440:	56                   	push   %esi
80102441:	53                   	push   %ebx
80102442:	83 ec 1c             	sub    $0x1c,%esp
80102445:	8b 5d 08             	mov    0x8(%ebp),%ebx
  uint off, inum;
  struct dirent de;

  if(dp->type != T_DIR)
80102448:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
8010244d:	0f 85 80 00 00 00    	jne    801024d3 <dirlookup+0x97>
    panic("dirlookup not DIR");

  for(off = 0; off < dp->size; off += sizeof(de)){
80102453:	8b 4b 58             	mov    0x58(%ebx),%ecx
80102456:	85 c9                	test   %ecx,%ecx
80102458:	74 62                	je     801024bc <dirlookup+0x80>
8010245a:	31 ff                	xor    %edi,%edi
8010245c:	8d 75 d8             	lea    -0x28(%ebp),%esi
8010245f:	eb 0b                	jmp    8010246c <dirlookup+0x30>
80102461:	8d 76 00             	lea    0x0(%esi),%esi
80102464:	83 c7 10             	add    $0x10,%edi
80102467:	39 7b 58             	cmp    %edi,0x58(%ebx)
8010246a:	76 50                	jbe    801024bc <dirlookup+0x80>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
8010246c:	6a 10                	push   $0x10
8010246e:	57                   	push   %edi
8010246f:	56                   	push   %esi
80102470:	53                   	push   %ebx
80102471:	e8 8a fd ff ff       	call   80102200 <readi>
80102476:	83 c4 10             	add    $0x10,%esp
80102479:	83 f8 10             	cmp    $0x10,%eax
8010247c:	75 48                	jne    801024c6 <dirlookup+0x8a>
      panic("dirlookup read");
    if(de.inum == 0)
8010247e:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
80102483:	74 df                	je     80102464 <dirlookup+0x28>
  return strncmp(s, t, DIRSIZ);
80102485:	52                   	push   %edx
80102486:	6a 0e                	push   $0xe
80102488:	8d 45 da             	lea    -0x26(%ebp),%eax
8010248b:	50                   	push   %eax
8010248c:	ff 75 0c             	pushl  0xc(%ebp)
8010248f:	e8 64 24 00 00       	call   801048f8 <strncmp>
      continue;
    if(namecmp(name, de.name) == 0){
80102494:	83 c4 10             	add    $0x10,%esp
80102497:	85 c0                	test   %eax,%eax
80102499:	75 c9                	jne    80102464 <dirlookup+0x28>
      // entry matches path element
      if(poff)
8010249b:	8b 45 10             	mov    0x10(%ebp),%eax
8010249e:	85 c0                	test   %eax,%eax
801024a0:	74 05                	je     801024a7 <dirlookup+0x6b>
        *poff = off;
801024a2:	8b 45 10             	mov    0x10(%ebp),%eax
801024a5:	89 38                	mov    %edi,(%eax)
      inum = de.inum;
801024a7:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
      return iget(dp->dev, inum);
801024ab:	8b 03                	mov    (%ebx),%eax
801024ad:	e8 9e f6 ff ff       	call   80101b50 <iget>
    }
  }

  return 0;
}
801024b2:	8d 65 f4             	lea    -0xc(%ebp),%esp
801024b5:	5b                   	pop    %ebx
801024b6:	5e                   	pop    %esi
801024b7:	5f                   	pop    %edi
801024b8:	5d                   	pop    %ebp
801024b9:	c3                   	ret    
801024ba:	66 90                	xchg   %ax,%ax
  return 0;
801024bc:	31 c0                	xor    %eax,%eax
}
801024be:	8d 65 f4             	lea    -0xc(%ebp),%esp
801024c1:	5b                   	pop    %ebx
801024c2:	5e                   	pop    %esi
801024c3:	5f                   	pop    %edi
801024c4:	5d                   	pop    %ebp
801024c5:	c3                   	ret    
      panic("dirlookup read");
801024c6:	83 ec 0c             	sub    $0xc,%esp
801024c9:	68 79 65 10 80       	push   $0x80106579
801024ce:	e8 11 e9 ff ff       	call   80100de4 <panic>
    panic("dirlookup not DIR");
801024d3:	83 ec 0c             	sub    $0xc,%esp
801024d6:	68 67 65 10 80       	push   $0x80106567
801024db:	e8 04 e9 ff ff       	call   80100de4 <panic>

801024e0 <namex>:
// If parent != 0, return the inode for the parent and copy the final
// path element into name, which must have room for DIRSIZ bytes.
// Must be called inside a transaction since it calls iput().
static struct inode*
namex(char *path, int nameiparent, char *name)
{
801024e0:	55                   	push   %ebp
801024e1:	89 e5                	mov    %esp,%ebp
801024e3:	57                   	push   %edi
801024e4:	56                   	push   %esi
801024e5:	53                   	push   %ebx
801024e6:	83 ec 1c             	sub    $0x1c,%esp
801024e9:	89 c3                	mov    %eax,%ebx
801024eb:	89 55 e0             	mov    %edx,-0x20(%ebp)
801024ee:	89 ce                	mov    %ecx,%esi
  struct inode *ip, *next;

  if(*path == '/')
801024f0:	80 38 2f             	cmpb   $0x2f,(%eax)
801024f3:	0f 84 57 01 00 00    	je     80102650 <namex+0x170>
    ip = iget(ROOTDEV, ROOTINO);
  else
    ip = idup(myproc()->cwd);
801024f9:	e8 3a 18 00 00       	call   80103d38 <myproc>
801024fe:	8b 78 68             	mov    0x68(%eax),%edi
  acquire(&icache.lock);
80102501:	83 ec 0c             	sub    $0xc,%esp
80102504:	68 e0 f5 10 80       	push   $0x8010f5e0
80102509:	e8 da 21 00 00       	call   801046e8 <acquire>
  ip->ref++;
8010250e:	ff 47 08             	incl   0x8(%edi)
  release(&icache.lock);
80102511:	c7 04 24 e0 f5 10 80 	movl   $0x8010f5e0,(%esp)
80102518:	e8 9f 22 00 00       	call   801047bc <release>
8010251d:	83 c4 10             	add    $0x10,%esp
  while(*path == '/')
80102520:	8a 03                	mov    (%ebx),%al
80102522:	3c 2f                	cmp    $0x2f,%al
80102524:	75 09                	jne    8010252f <namex+0x4f>
80102526:	66 90                	xchg   %ax,%ax
    path++;
80102528:	43                   	inc    %ebx
  while(*path == '/')
80102529:	8a 03                	mov    (%ebx),%al
8010252b:	3c 2f                	cmp    $0x2f,%al
8010252d:	74 f9                	je     80102528 <namex+0x48>
  if(*path == 0)
8010252f:	84 c0                	test   %al,%al
80102531:	0f 84 ea 00 00 00    	je     80102621 <namex+0x141>
  while(*path != '/' && *path != 0)
80102537:	89 da                	mov    %ebx,%edx
80102539:	80 3b 00             	cmpb   $0x0,(%ebx)
8010253c:	0f 85 92 00 00 00    	jne    801025d4 <namex+0xf4>
80102542:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
80102545:	31 c9                	xor    %ecx,%ecx
80102547:	90                   	nop
    memmove(name, s, len);
80102548:	52                   	push   %edx
80102549:	51                   	push   %ecx
8010254a:	89 4d dc             	mov    %ecx,-0x24(%ebp)
8010254d:	53                   	push   %ebx
8010254e:	56                   	push   %esi
8010254f:	e8 48 23 00 00       	call   8010489c <memmove>
    name[len] = 0;
80102554:	8b 4d dc             	mov    -0x24(%ebp),%ecx
80102557:	c6 04 0e 00          	movb   $0x0,(%esi,%ecx,1)
8010255b:	83 c4 10             	add    $0x10,%esp
8010255e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  while(*path == '/')
80102561:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80102564:	80 38 2f             	cmpb   $0x2f,(%eax)
80102567:	0f 84 9f 00 00 00    	je     8010260c <namex+0x12c>
8010256d:	8d 76 00             	lea    0x0(%esi),%esi

  while((path = skipelem(path, name)) != 0){
    ilock(ip);
80102570:	83 ec 0c             	sub    $0xc,%esp
80102573:	57                   	push   %edi
80102574:	e8 e7 f9 ff ff       	call   80101f60 <ilock>
    if(ip->type != T_DIR){
80102579:	83 c4 10             	add    $0x10,%esp
8010257c:	66 83 7f 50 01       	cmpw   $0x1,0x50(%edi)
80102581:	0f 85 ab 00 00 00    	jne    80102632 <namex+0x152>
      iunlockput(ip);
      return 0;
    }
    if(nameiparent && *path == '\0'){
80102587:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010258a:	85 c0                	test   %eax,%eax
8010258c:	74 09                	je     80102597 <namex+0xb7>
8010258e:	80 3b 00             	cmpb   $0x0,(%ebx)
80102591:	0f 84 cf 00 00 00    	je     80102666 <namex+0x186>
      // Stop one level early.
      iunlock(ip);
      return ip;
    }
    if((next = dirlookup(ip, name, 0)) == 0){
80102597:	50                   	push   %eax
80102598:	6a 00                	push   $0x0
8010259a:	56                   	push   %esi
8010259b:	57                   	push   %edi
8010259c:	e8 9b fe ff ff       	call   8010243c <dirlookup>
801025a1:	83 c4 10             	add    $0x10,%esp
801025a4:	85 c0                	test   %eax,%eax
801025a6:	0f 84 86 00 00 00    	je     80102632 <namex+0x152>
801025ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  iunlock(ip);
801025af:	83 ec 0c             	sub    $0xc,%esp
801025b2:	57                   	push   %edi
801025b3:	e8 70 fa ff ff       	call   80102028 <iunlock>
  iput(ip);
801025b8:	89 3c 24             	mov    %edi,(%esp)
801025bb:	e8 ac fa ff ff       	call   8010206c <iput>
801025c0:	83 c4 10             	add    $0x10,%esp
801025c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801025c6:	89 c7                	mov    %eax,%edi
801025c8:	e9 53 ff ff ff       	jmp    80102520 <namex+0x40>
801025cd:	8d 76 00             	lea    0x0(%esi),%esi
  while(*path != '/' && *path != 0)
801025d0:	84 c0                	test   %al,%al
801025d2:	74 44                	je     80102618 <namex+0x138>
    path++;
801025d4:	42                   	inc    %edx
  while(*path != '/' && *path != 0)
801025d5:	8a 02                	mov    (%edx),%al
801025d7:	3c 2f                	cmp    $0x2f,%al
801025d9:	75 f5                	jne    801025d0 <namex+0xf0>
801025db:	89 55 e4             	mov    %edx,-0x1c(%ebp)
801025de:	89 d1                	mov    %edx,%ecx
801025e0:	29 d9                	sub    %ebx,%ecx
  if(len >= DIRSIZ)
801025e2:	83 f9 0d             	cmp    $0xd,%ecx
801025e5:	0f 8e 5d ff ff ff    	jle    80102548 <namex+0x68>
801025eb:	89 55 dc             	mov    %edx,-0x24(%ebp)
    memmove(name, s, DIRSIZ);
801025ee:	51                   	push   %ecx
801025ef:	6a 0e                	push   $0xe
801025f1:	53                   	push   %ebx
801025f2:	56                   	push   %esi
801025f3:	e8 a4 22 00 00       	call   8010489c <memmove>
801025f8:	83 c4 10             	add    $0x10,%esp
801025fb:	8b 55 dc             	mov    -0x24(%ebp),%edx
801025fe:	89 d3                	mov    %edx,%ebx
  while(*path == '/')
80102600:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80102603:	80 38 2f             	cmpb   $0x2f,(%eax)
80102606:	0f 85 64 ff ff ff    	jne    80102570 <namex+0x90>
    path++;
8010260c:	43                   	inc    %ebx
  while(*path == '/')
8010260d:	80 3b 2f             	cmpb   $0x2f,(%ebx)
80102610:	74 fa                	je     8010260c <namex+0x12c>
80102612:	e9 59 ff ff ff       	jmp    80102570 <namex+0x90>
80102617:	90                   	nop
80102618:	89 d1                	mov    %edx,%ecx
8010261a:	29 d9                	sub    %ebx,%ecx
    path++;
8010261c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
8010261f:	eb c1                	jmp    801025e2 <namex+0x102>
      return 0;
    }
    iunlockput(ip);
    ip = next;
  }
  if(nameiparent){
80102621:	8b 45 e0             	mov    -0x20(%ebp),%eax
80102624:	85 c0                	test   %eax,%eax
80102626:	75 54                	jne    8010267c <namex+0x19c>
80102628:	89 f8                	mov    %edi,%eax
    iput(ip);
    return 0;
  }
  return ip;
}
8010262a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010262d:	5b                   	pop    %ebx
8010262e:	5e                   	pop    %esi
8010262f:	5f                   	pop    %edi
80102630:	5d                   	pop    %ebp
80102631:	c3                   	ret    
  iunlock(ip);
80102632:	83 ec 0c             	sub    $0xc,%esp
80102635:	57                   	push   %edi
80102636:	e8 ed f9 ff ff       	call   80102028 <iunlock>
  iput(ip);
8010263b:	89 3c 24             	mov    %edi,(%esp)
8010263e:	e8 29 fa ff ff       	call   8010206c <iput>
      return 0;
80102643:	83 c4 10             	add    $0x10,%esp
80102646:	31 c0                	xor    %eax,%eax
}
80102648:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010264b:	5b                   	pop    %ebx
8010264c:	5e                   	pop    %esi
8010264d:	5f                   	pop    %edi
8010264e:	5d                   	pop    %ebp
8010264f:	c3                   	ret    
    ip = iget(ROOTDEV, ROOTINO);
80102650:	ba 01 00 00 00       	mov    $0x1,%edx
80102655:	b8 01 00 00 00       	mov    $0x1,%eax
8010265a:	e8 f1 f4 ff ff       	call   80101b50 <iget>
8010265f:	89 c7                	mov    %eax,%edi
80102661:	e9 ba fe ff ff       	jmp    80102520 <namex+0x40>
      iunlock(ip);
80102666:	83 ec 0c             	sub    $0xc,%esp
80102669:	57                   	push   %edi
8010266a:	e8 b9 f9 ff ff       	call   80102028 <iunlock>
      return ip;
8010266f:	83 c4 10             	add    $0x10,%esp
80102672:	89 f8                	mov    %edi,%eax
}
80102674:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102677:	5b                   	pop    %ebx
80102678:	5e                   	pop    %esi
80102679:	5f                   	pop    %edi
8010267a:	5d                   	pop    %ebp
8010267b:	c3                   	ret    
    iput(ip);
8010267c:	83 ec 0c             	sub    $0xc,%esp
8010267f:	57                   	push   %edi
80102680:	e8 e7 f9 ff ff       	call   8010206c <iput>
    return 0;
80102685:	83 c4 10             	add    $0x10,%esp
80102688:	31 c0                	xor    %eax,%eax
8010268a:	eb 9e                	jmp    8010262a <namex+0x14a>

8010268c <dirlink>:
{
8010268c:	55                   	push   %ebp
8010268d:	89 e5                	mov    %esp,%ebp
8010268f:	57                   	push   %edi
80102690:	56                   	push   %esi
80102691:	53                   	push   %ebx
80102692:	83 ec 20             	sub    $0x20,%esp
80102695:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if((ip = dirlookup(dp, name, 0)) != 0){
80102698:	6a 00                	push   $0x0
8010269a:	ff 75 0c             	pushl  0xc(%ebp)
8010269d:	53                   	push   %ebx
8010269e:	e8 99 fd ff ff       	call   8010243c <dirlookup>
801026a3:	83 c4 10             	add    $0x10,%esp
801026a6:	85 c0                	test   %eax,%eax
801026a8:	75 67                	jne    80102711 <dirlink+0x85>
  for(off = 0; off < dp->size; off += sizeof(de)){
801026aa:	8b 7b 58             	mov    0x58(%ebx),%edi
801026ad:	8d 75 d8             	lea    -0x28(%ebp),%esi
801026b0:	85 ff                	test   %edi,%edi
801026b2:	74 2b                	je     801026df <dirlink+0x53>
801026b4:	31 ff                	xor    %edi,%edi
801026b6:	8d 75 d8             	lea    -0x28(%ebp),%esi
801026b9:	eb 0b                	jmp    801026c6 <dirlink+0x3a>
801026bb:	90                   	nop
801026bc:	8d 57 10             	lea    0x10(%edi),%edx
801026bf:	89 d7                	mov    %edx,%edi
801026c1:	39 53 58             	cmp    %edx,0x58(%ebx)
801026c4:	76 19                	jbe    801026df <dirlink+0x53>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
801026c6:	6a 10                	push   $0x10
801026c8:	57                   	push   %edi
801026c9:	56                   	push   %esi
801026ca:	53                   	push   %ebx
801026cb:	e8 30 fb ff ff       	call   80102200 <readi>
801026d0:	83 c4 10             	add    $0x10,%esp
801026d3:	83 f8 10             	cmp    $0x10,%eax
801026d6:	75 4c                	jne    80102724 <dirlink+0x98>
    if(de.inum == 0)
801026d8:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
801026dd:	75 dd                	jne    801026bc <dirlink+0x30>
  strncpy(de.name, name, DIRSIZ);
801026df:	50                   	push   %eax
801026e0:	6a 0e                	push   $0xe
801026e2:	ff 75 0c             	pushl  0xc(%ebp)
801026e5:	8d 45 da             	lea    -0x26(%ebp),%eax
801026e8:	50                   	push   %eax
801026e9:	e8 66 22 00 00       	call   80104954 <strncpy>
  de.inum = inum;
801026ee:	8b 45 10             	mov    0x10(%ebp),%eax
801026f1:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
801026f5:	6a 10                	push   $0x10
801026f7:	57                   	push   %edi
801026f8:	56                   	push   %esi
801026f9:	53                   	push   %ebx
801026fa:	e8 05 fc ff ff       	call   80102304 <writei>
801026ff:	83 c4 20             	add    $0x20,%esp
80102702:	83 f8 10             	cmp    $0x10,%eax
80102705:	75 2a                	jne    80102731 <dirlink+0xa5>
  return 0;
80102707:	31 c0                	xor    %eax,%eax
}
80102709:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010270c:	5b                   	pop    %ebx
8010270d:	5e                   	pop    %esi
8010270e:	5f                   	pop    %edi
8010270f:	5d                   	pop    %ebp
80102710:	c3                   	ret    
    iput(ip);
80102711:	83 ec 0c             	sub    $0xc,%esp
80102714:	50                   	push   %eax
80102715:	e8 52 f9 ff ff       	call   8010206c <iput>
    return -1;
8010271a:	83 c4 10             	add    $0x10,%esp
8010271d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102722:	eb e5                	jmp    80102709 <dirlink+0x7d>
      panic("dirlink read");
80102724:	83 ec 0c             	sub    $0xc,%esp
80102727:	68 88 65 10 80       	push   $0x80106588
8010272c:	e8 b3 e6 ff ff       	call   80100de4 <panic>
    panic("dirlink");
80102731:	83 ec 0c             	sub    $0xc,%esp
80102734:	68 7e 6b 10 80       	push   $0x80106b7e
80102739:	e8 a6 e6 ff ff       	call   80100de4 <panic>
8010273e:	66 90                	xchg   %ax,%ax

80102740 <namei>:

struct inode*
namei(char *path)
{
80102740:	55                   	push   %ebp
80102741:	89 e5                	mov    %esp,%ebp
80102743:	83 ec 18             	sub    $0x18,%esp
  char name[DIRSIZ];
  return namex(path, 0, name);
80102746:	8d 4d ea             	lea    -0x16(%ebp),%ecx
80102749:	31 d2                	xor    %edx,%edx
8010274b:	8b 45 08             	mov    0x8(%ebp),%eax
8010274e:	e8 8d fd ff ff       	call   801024e0 <namex>
}
80102753:	c9                   	leave  
80102754:	c3                   	ret    
80102755:	8d 76 00             	lea    0x0(%esi),%esi

80102758 <nameiparent>:

struct inode*
nameiparent(char *path, char *name)
{
80102758:	55                   	push   %ebp
80102759:	89 e5                	mov    %esp,%ebp
  return namex(path, 1, name);
8010275b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010275e:	ba 01 00 00 00       	mov    $0x1,%edx
80102763:	8b 45 08             	mov    0x8(%ebp),%eax
}
80102766:	5d                   	pop    %ebp
  return namex(path, 1, name);
80102767:	e9 74 fd ff ff       	jmp    801024e0 <namex>

8010276c <idestart>:
}

// Start the request for b.  Caller must hold idelock.
static void
idestart(struct buf *b)
{
8010276c:	55                   	push   %ebp
8010276d:	89 e5                	mov    %esp,%ebp
8010276f:	56                   	push   %esi
80102770:	53                   	push   %ebx
80102771:	89 c1                	mov    %eax,%ecx
  if(b == 0)
80102773:	85 c0                	test   %eax,%eax
80102775:	0f 84 8a 00 00 00    	je     80102805 <idestart+0x99>
    panic("idestart");
  if(b->blockno >= FSSIZE)
8010277b:	8b 58 08             	mov    0x8(%eax),%ebx
8010277e:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx
80102784:	77 72                	ja     801027f8 <idestart+0x8c>
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102786:	ba f7 01 00 00       	mov    $0x1f7,%edx
8010278b:	90                   	nop
8010278c:	ec                   	in     (%dx),%al
  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
8010278d:	83 e0 c0             	and    $0xffffffc0,%eax
80102790:	3c 40                	cmp    $0x40,%al
80102792:	75 f8                	jne    8010278c <idestart+0x20>
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102794:	31 f6                	xor    %esi,%esi
80102796:	ba f6 03 00 00       	mov    $0x3f6,%edx
8010279b:	89 f0                	mov    %esi,%eax
8010279d:	ee                   	out    %al,(%dx)
8010279e:	ba f2 01 00 00       	mov    $0x1f2,%edx
801027a3:	b0 01                	mov    $0x1,%al
801027a5:	ee                   	out    %al,(%dx)
801027a6:	b2 f3                	mov    $0xf3,%dl
801027a8:	88 d8                	mov    %bl,%al
801027aa:	ee                   	out    %al,(%dx)

  idewait(0);
  outb(0x3f6, 0);  // generate interrupt
  outb(0x1f2, sector_per_block);  // number of sectors
  outb(0x1f3, sector & 0xff);
  outb(0x1f4, (sector >> 8) & 0xff);
801027ab:	89 d8                	mov    %ebx,%eax
801027ad:	c1 f8 08             	sar    $0x8,%eax
801027b0:	b2 f4                	mov    $0xf4,%dl
801027b2:	ee                   	out    %al,(%dx)
801027b3:	b2 f5                	mov    $0xf5,%dl
801027b5:	89 f0                	mov    %esi,%eax
801027b7:	ee                   	out    %al,(%dx)
  outb(0x1f5, (sector >> 16) & 0xff);
  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
801027b8:	8a 41 04             	mov    0x4(%ecx),%al
801027bb:	83 e0 01             	and    $0x1,%eax
801027be:	c1 e0 04             	shl    $0x4,%eax
801027c1:	83 c8 e0             	or     $0xffffffe0,%eax
801027c4:	b2 f6                	mov    $0xf6,%dl
801027c6:	ee                   	out    %al,(%dx)
  if(b->flags & B_DIRTY){
801027c7:	f6 01 04             	testb  $0x4,(%ecx)
801027ca:	75 10                	jne    801027dc <idestart+0x70>
801027cc:	ba f7 01 00 00       	mov    $0x1f7,%edx
801027d1:	b0 20                	mov    $0x20,%al
801027d3:	ee                   	out    %al,(%dx)
    outb(0x1f7, write_cmd);
    outsl(0x1f0, b->data, BSIZE/4);
  } else {
    outb(0x1f7, read_cmd);
  }
}
801027d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
801027d7:	5b                   	pop    %ebx
801027d8:	5e                   	pop    %esi
801027d9:	5d                   	pop    %ebp
801027da:	c3                   	ret    
801027db:	90                   	nop
801027dc:	b2 f7                	mov    $0xf7,%dl
801027de:	b0 30                	mov    $0x30,%al
801027e0:	ee                   	out    %al,(%dx)
    outsl(0x1f0, b->data, BSIZE/4);
801027e1:	8d 71 5c             	lea    0x5c(%ecx),%esi
  asm volatile("cld; rep outsl" :
801027e4:	b9 80 00 00 00       	mov    $0x80,%ecx
801027e9:	ba f0 01 00 00       	mov    $0x1f0,%edx
801027ee:	fc                   	cld    
801027ef:	f3 6f                	rep outsl %ds:(%esi),(%dx)
}
801027f1:	8d 65 f8             	lea    -0x8(%ebp),%esp
801027f4:	5b                   	pop    %ebx
801027f5:	5e                   	pop    %esi
801027f6:	5d                   	pop    %ebp
801027f7:	c3                   	ret    
    panic("incorrect blockno");
801027f8:	83 ec 0c             	sub    $0xc,%esp
801027fb:	68 f4 65 10 80       	push   $0x801065f4
80102800:	e8 df e5 ff ff       	call   80100de4 <panic>
    panic("idestart");
80102805:	83 ec 0c             	sub    $0xc,%esp
80102808:	68 eb 65 10 80       	push   $0x801065eb
8010280d:	e8 d2 e5 ff ff       	call   80100de4 <panic>
80102812:	66 90                	xchg   %ax,%ax

80102814 <ideinit>:
{
80102814:	55                   	push   %ebp
80102815:	89 e5                	mov    %esp,%ebp
80102817:	83 ec 10             	sub    $0x10,%esp
  initlock(&idelock, "ide");
8010281a:	68 06 66 10 80       	push   $0x80106606
8010281f:	68 80 91 10 80       	push   $0x80109180
80102824:	e8 fb 1d 00 00       	call   80104624 <initlock>
  ioapicenable(IRQ_IDE, ncpu - 1);
80102829:	58                   	pop    %eax
8010282a:	5a                   	pop    %edx
8010282b:	a1 00 19 11 80       	mov    0x80111900,%eax
80102830:	48                   	dec    %eax
80102831:	50                   	push   %eax
80102832:	6a 0e                	push   $0xe
80102834:	e8 63 02 00 00       	call   80102a9c <ioapicenable>
80102839:	83 c4 10             	add    $0x10,%esp
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
8010283c:	ba f7 01 00 00       	mov    $0x1f7,%edx
80102841:	8d 76 00             	lea    0x0(%esi),%esi
80102844:	ec                   	in     (%dx),%al
  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
80102845:	83 e0 c0             	and    $0xffffffc0,%eax
80102848:	3c 40                	cmp    $0x40,%al
8010284a:	75 f8                	jne    80102844 <ideinit+0x30>
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
8010284c:	ba f6 01 00 00       	mov    $0x1f6,%edx
80102851:	b0 f0                	mov    $0xf0,%al
80102853:	ee                   	out    %al,(%dx)
80102854:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102859:	b2 f7                	mov    $0xf7,%dl
8010285b:	eb 06                	jmp    80102863 <ideinit+0x4f>
8010285d:	8d 76 00             	lea    0x0(%esi),%esi
  for(i=0; i<1000; i++){
80102860:	49                   	dec    %ecx
80102861:	74 0f                	je     80102872 <ideinit+0x5e>
80102863:	ec                   	in     (%dx),%al
    if(inb(0x1f7) != 0){
80102864:	84 c0                	test   %al,%al
80102866:	74 f8                	je     80102860 <ideinit+0x4c>
      havedisk1 = 1;
80102868:	c7 05 60 91 10 80 01 	movl   $0x1,0x80109160
8010286f:	00 00 00 
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102872:	ba f6 01 00 00       	mov    $0x1f6,%edx
80102877:	b0 e0                	mov    $0xe0,%al
80102879:	ee                   	out    %al,(%dx)
}
8010287a:	c9                   	leave  
8010287b:	c3                   	ret    

8010287c <ideintr>:

// Interrupt handler.
void
ideintr(void)
{
8010287c:	55                   	push   %ebp
8010287d:	89 e5                	mov    %esp,%ebp
8010287f:	57                   	push   %edi
80102880:	56                   	push   %esi
80102881:	53                   	push   %ebx
80102882:	83 ec 18             	sub    $0x18,%esp
  struct buf *b;

  // First queued buffer is the active request.
  acquire(&idelock);
80102885:	68 80 91 10 80       	push   $0x80109180
8010288a:	e8 59 1e 00 00       	call   801046e8 <acquire>

  if((b = idequeue) == 0){
8010288f:	8b 1d 64 91 10 80    	mov    0x80109164,%ebx
80102895:	83 c4 10             	add    $0x10,%esp
80102898:	85 db                	test   %ebx,%ebx
8010289a:	74 34                	je     801028d0 <ideintr+0x54>
    release(&idelock);
    return;
  }
  idequeue = b->qnext;
8010289c:	8b 43 58             	mov    0x58(%ebx),%eax
8010289f:	a3 64 91 10 80       	mov    %eax,0x80109164

  // Read data if needed.
  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
801028a4:	8b 33                	mov    (%ebx),%esi
801028a6:	f7 c6 04 00 00 00    	test   $0x4,%esi
801028ac:	74 3a                	je     801028e8 <ideintr+0x6c>
    insl(0x1f0, b->data, BSIZE/4);

  // Wake process waiting for this buf.
  b->flags |= B_VALID;
  b->flags &= ~B_DIRTY;
801028ae:	83 e6 fb             	and    $0xfffffffb,%esi
801028b1:	83 ce 02             	or     $0x2,%esi
801028b4:	89 33                	mov    %esi,(%ebx)
  wakeup(b);
801028b6:	83 ec 0c             	sub    $0xc,%esp
801028b9:	53                   	push   %ebx
801028ba:	e8 f9 1a 00 00       	call   801043b8 <wakeup>

  // Start disk on next buf in queue.
  if(idequeue != 0)
801028bf:	a1 64 91 10 80       	mov    0x80109164,%eax
801028c4:	83 c4 10             	add    $0x10,%esp
801028c7:	85 c0                	test   %eax,%eax
801028c9:	74 05                	je     801028d0 <ideintr+0x54>
    idestart(idequeue);
801028cb:	e8 9c fe ff ff       	call   8010276c <idestart>
    release(&idelock);
801028d0:	83 ec 0c             	sub    $0xc,%esp
801028d3:	68 80 91 10 80       	push   $0x80109180
801028d8:	e8 df 1e 00 00       	call   801047bc <release>

  release(&idelock);
}
801028dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
801028e0:	5b                   	pop    %ebx
801028e1:	5e                   	pop    %esi
801028e2:	5f                   	pop    %edi
801028e3:	5d                   	pop    %ebp
801028e4:	c3                   	ret    
801028e5:	8d 76 00             	lea    0x0(%esi),%esi
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
801028e8:	ba f7 01 00 00       	mov    $0x1f7,%edx
801028ed:	8d 76 00             	lea    0x0(%esi),%esi
801028f0:	ec                   	in     (%dx),%al
  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
801028f1:	88 c1                	mov    %al,%cl
801028f3:	83 e1 c0             	and    $0xffffffc0,%ecx
801028f6:	80 f9 40             	cmp    $0x40,%cl
801028f9:	75 f5                	jne    801028f0 <ideintr+0x74>
  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
801028fb:	a8 21                	test   $0x21,%al
801028fd:	75 af                	jne    801028ae <ideintr+0x32>
    insl(0x1f0, b->data, BSIZE/4);
801028ff:	8d 7b 5c             	lea    0x5c(%ebx),%edi
  asm volatile("cld; rep insl" :
80102902:	b9 80 00 00 00       	mov    $0x80,%ecx
80102907:	ba f0 01 00 00       	mov    $0x1f0,%edx
8010290c:	fc                   	cld    
8010290d:	f3 6d                	rep insl (%dx),%es:(%edi)
8010290f:	8b 33                	mov    (%ebx),%esi
80102911:	eb 9b                	jmp    801028ae <ideintr+0x32>
80102913:	90                   	nop

80102914 <iderw>:
// Sync buf with disk.
// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
// Else if B_VALID is not set, read buf from disk, set B_VALID.
void
iderw(struct buf *b)
{
80102914:	55                   	push   %ebp
80102915:	89 e5                	mov    %esp,%ebp
80102917:	53                   	push   %ebx
80102918:	83 ec 10             	sub    $0x10,%esp
8010291b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct buf **pp;

  if(!holdingsleep(&b->lock))
8010291e:	8d 43 0c             	lea    0xc(%ebx),%eax
80102921:	50                   	push   %eax
80102922:	e8 d5 1c 00 00       	call   801045fc <holdingsleep>
80102927:	83 c4 10             	add    $0x10,%esp
8010292a:	85 c0                	test   %eax,%eax
8010292c:	0f 84 a1 00 00 00    	je     801029d3 <iderw+0xbf>
    panic("iderw: buf not locked");
  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
80102932:	8b 03                	mov    (%ebx),%eax
80102934:	83 e0 06             	and    $0x6,%eax
80102937:	83 f8 02             	cmp    $0x2,%eax
8010293a:	0f 84 ad 00 00 00    	je     801029ed <iderw+0xd9>
    panic("iderw: nothing to do");
  if(b->dev != 0 && !havedisk1)
80102940:	8b 53 04             	mov    0x4(%ebx),%edx
80102943:	85 d2                	test   %edx,%edx
80102945:	74 0d                	je     80102954 <iderw+0x40>
80102947:	a1 60 91 10 80       	mov    0x80109160,%eax
8010294c:	85 c0                	test   %eax,%eax
8010294e:	0f 84 8c 00 00 00    	je     801029e0 <iderw+0xcc>
    panic("iderw: ide disk 1 not present");

  acquire(&idelock);  //DOC:acquire-lock
80102954:	83 ec 0c             	sub    $0xc,%esp
80102957:	68 80 91 10 80       	push   $0x80109180
8010295c:	e8 87 1d 00 00       	call   801046e8 <acquire>

  // Append b to idequeue.
  b->qnext = 0;
80102961:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
80102968:	a1 64 91 10 80       	mov    0x80109164,%eax
8010296d:	83 c4 10             	add    $0x10,%esp
80102970:	85 c0                	test   %eax,%eax
80102972:	75 06                	jne    8010297a <iderw+0x66>
80102974:	eb 4d                	jmp    801029c3 <iderw+0xaf>
80102976:	66 90                	xchg   %ax,%ax
80102978:	89 d0                	mov    %edx,%eax
8010297a:	8b 50 58             	mov    0x58(%eax),%edx
8010297d:	85 d2                	test   %edx,%edx
8010297f:	75 f7                	jne    80102978 <iderw+0x64>
80102981:	83 c0 58             	add    $0x58,%eax
    ;
  *pp = b;
80102984:	89 18                	mov    %ebx,(%eax)

  // Start disk if necessary.
  if(idequeue == b)
80102986:	39 1d 64 91 10 80    	cmp    %ebx,0x80109164
8010298c:	74 3c                	je     801029ca <iderw+0xb6>
    idestart(b);

  // Wait for request to finish.
  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
8010298e:	8b 03                	mov    (%ebx),%eax
80102990:	83 e0 06             	and    $0x6,%eax
80102993:	83 f8 02             	cmp    $0x2,%eax
80102996:	74 1b                	je     801029b3 <iderw+0x9f>
    sleep(b, &idelock);
80102998:	83 ec 08             	sub    $0x8,%esp
8010299b:	68 80 91 10 80       	push   $0x80109180
801029a0:	53                   	push   %ebx
801029a1:	e8 86 18 00 00       	call   8010422c <sleep>
  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
801029a6:	8b 13                	mov    (%ebx),%edx
801029a8:	83 e2 06             	and    $0x6,%edx
801029ab:	83 c4 10             	add    $0x10,%esp
801029ae:	83 fa 02             	cmp    $0x2,%edx
801029b1:	75 e5                	jne    80102998 <iderw+0x84>
  }


  release(&idelock);
801029b3:	c7 45 08 80 91 10 80 	movl   $0x80109180,0x8(%ebp)
}
801029ba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801029bd:	c9                   	leave  
  release(&idelock);
801029be:	e9 f9 1d 00 00       	jmp    801047bc <release>
  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
801029c3:	b8 64 91 10 80       	mov    $0x80109164,%eax
801029c8:	eb ba                	jmp    80102984 <iderw+0x70>
    idestart(b);
801029ca:	89 d8                	mov    %ebx,%eax
801029cc:	e8 9b fd ff ff       	call   8010276c <idestart>
801029d1:	eb bb                	jmp    8010298e <iderw+0x7a>
    panic("iderw: buf not locked");
801029d3:	83 ec 0c             	sub    $0xc,%esp
801029d6:	68 0a 66 10 80       	push   $0x8010660a
801029db:	e8 04 e4 ff ff       	call   80100de4 <panic>
    panic("iderw: ide disk 1 not present");
801029e0:	83 ec 0c             	sub    $0xc,%esp
801029e3:	68 35 66 10 80       	push   $0x80106635
801029e8:	e8 f7 e3 ff ff       	call   80100de4 <panic>
    panic("iderw: nothing to do");
801029ed:	83 ec 0c             	sub    $0xc,%esp
801029f0:	68 20 66 10 80       	push   $0x80106620
801029f5:	e8 ea e3 ff ff       	call   80100de4 <panic>
801029fa:	66 90                	xchg   %ax,%ax

801029fc <ioapicinit>:
  ioapic->data = data;
}

void
ioapicinit(void)
{
801029fc:	55                   	push   %ebp
801029fd:	89 e5                	mov    %esp,%ebp
801029ff:	56                   	push   %esi
80102a00:	53                   	push   %ebx
  int i, id, maxintr;

  ioapic = (volatile struct ioapic*)IOAPIC;
80102a01:	c7 05 34 12 11 80 00 	movl   $0xfec00000,0x80111234
80102a08:	00 c0 fe 
  ioapic->reg = reg;
80102a0b:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
80102a12:	00 00 00 
  return ioapic->data;
80102a15:	8b 15 34 12 11 80    	mov    0x80111234,%edx
80102a1b:	8b 72 10             	mov    0x10(%edx),%esi
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
80102a1e:	89 f0                	mov    %esi,%eax
80102a20:	c1 e8 10             	shr    $0x10,%eax
80102a23:	0f b6 f0             	movzbl %al,%esi
  ioapic->reg = reg;
80102a26:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
  return ioapic->data;
80102a2c:	8b 0d 34 12 11 80    	mov    0x80111234,%ecx
80102a32:	8b 41 10             	mov    0x10(%ecx),%eax
  id = ioapicread(REG_ID) >> 24;
  if(id != ioapicid)
80102a35:	0f b6 15 60 13 11 80 	movzbl 0x80111360,%edx
  id = ioapicread(REG_ID) >> 24;
80102a3c:	c1 e8 18             	shr    $0x18,%eax
  if(id != ioapicid)
80102a3f:	39 c2                	cmp    %eax,%edx
80102a41:	74 16                	je     80102a59 <ioapicinit+0x5d>
    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
80102a43:	83 ec 0c             	sub    $0xc,%esp
80102a46:	68 54 66 10 80       	push   $0x80106654
80102a4b:	e8 44 e6 ff ff       	call   80101094 <cprintf>
80102a50:	8b 0d 34 12 11 80    	mov    0x80111234,%ecx
80102a56:	83 c4 10             	add    $0x10,%esp
80102a59:	83 c6 21             	add    $0x21,%esi
{
80102a5c:	ba 10 00 00 00       	mov    $0x10,%edx
80102a61:	b8 20 00 00 00       	mov    $0x20,%eax
80102a66:	66 90                	xchg   %ax,%ax

  // Mark all interrupts edge-triggered, active high, disabled,
  // and not routed to any CPUs.
  for(i = 0; i <= maxintr; i++){
    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
80102a68:	89 c3                	mov    %eax,%ebx
80102a6a:	81 cb 00 00 01 00    	or     $0x10000,%ebx
  ioapic->reg = reg;
80102a70:	89 11                	mov    %edx,(%ecx)
  ioapic->data = data;
80102a72:	8b 0d 34 12 11 80    	mov    0x80111234,%ecx
80102a78:	89 59 10             	mov    %ebx,0x10(%ecx)
80102a7b:	8d 5a 01             	lea    0x1(%edx),%ebx
  ioapic->reg = reg;
80102a7e:	89 19                	mov    %ebx,(%ecx)
  ioapic->data = data;
80102a80:	8b 0d 34 12 11 80    	mov    0x80111234,%ecx
80102a86:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
80102a8d:	40                   	inc    %eax
80102a8e:	83 c2 02             	add    $0x2,%edx
  for(i = 0; i <= maxintr; i++){
80102a91:	39 f0                	cmp    %esi,%eax
80102a93:	75 d3                	jne    80102a68 <ioapicinit+0x6c>
    ioapicwrite(REG_TABLE+2*i+1, 0);
  }
}
80102a95:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102a98:	5b                   	pop    %ebx
80102a99:	5e                   	pop    %esi
80102a9a:	5d                   	pop    %ebp
80102a9b:	c3                   	ret    

80102a9c <ioapicenable>:

void
ioapicenable(int irq, int cpunum)
{
80102a9c:	55                   	push   %ebp
80102a9d:	89 e5                	mov    %esp,%ebp
80102a9f:	8b 45 08             	mov    0x8(%ebp),%eax
  // Mark interrupt edge-triggered, active high,
  // enabled, and routed to the given cpunum,
  // which happens to be that cpu's APIC ID.
  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
80102aa2:	8d 50 20             	lea    0x20(%eax),%edx
80102aa5:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
  ioapic->reg = reg;
80102aa9:	8b 0d 34 12 11 80    	mov    0x80111234,%ecx
80102aaf:	89 01                	mov    %eax,(%ecx)
  ioapic->data = data;
80102ab1:	8b 0d 34 12 11 80    	mov    0x80111234,%ecx
80102ab7:	89 51 10             	mov    %edx,0x10(%ecx)
  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
80102aba:	8b 55 0c             	mov    0xc(%ebp),%edx
80102abd:	c1 e2 18             	shl    $0x18,%edx
80102ac0:	40                   	inc    %eax
  ioapic->reg = reg;
80102ac1:	89 01                	mov    %eax,(%ecx)
  ioapic->data = data;
80102ac3:	a1 34 12 11 80       	mov    0x80111234,%eax
80102ac8:	89 50 10             	mov    %edx,0x10(%eax)
}
80102acb:	5d                   	pop    %ebp
80102acc:	c3                   	ret    
80102acd:	66 90                	xchg   %ax,%ax
80102acf:	90                   	nop

80102ad0 <kfree>:
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; see kinit above.)
void
kfree(char *v)
{
80102ad0:	55                   	push   %ebp
80102ad1:	89 e5                	mov    %esp,%ebp
80102ad3:	53                   	push   %ebx
80102ad4:	53                   	push   %ebx
80102ad5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct run *r;

  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
80102ad8:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
80102ade:	75 6e                	jne    80102b4e <kfree+0x7e>
80102ae0:	81 fb a8 40 11 80    	cmp    $0x801140a8,%ebx
80102ae6:	72 66                	jb     80102b4e <kfree+0x7e>
80102ae8:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80102aee:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
80102af3:	77 59                	ja     80102b4e <kfree+0x7e>
    panic("kfree");

  // Fill with junk to catch dangling refs.
  memset(v, 1, PGSIZE);
80102af5:	52                   	push   %edx
80102af6:	68 00 10 00 00       	push   $0x1000
80102afb:	6a 01                	push   $0x1
80102afd:	53                   	push   %ebx
80102afe:	e8 05 1d 00 00       	call   80104808 <memset>

  if(kmem.use_lock)
80102b03:	83 c4 10             	add    $0x10,%esp
80102b06:	8b 0d 74 12 11 80    	mov    0x80111274,%ecx
80102b0c:	85 c9                	test   %ecx,%ecx
80102b0e:	75 2c                	jne    80102b3c <kfree+0x6c>
    acquire(&kmem.lock);
  r = (struct run*)v;
  r->next = kmem.freelist;
80102b10:	a1 78 12 11 80       	mov    0x80111278,%eax
80102b15:	89 03                	mov    %eax,(%ebx)
  kmem.freelist = r;
80102b17:	89 1d 78 12 11 80    	mov    %ebx,0x80111278
  if(kmem.use_lock)
80102b1d:	a1 74 12 11 80       	mov    0x80111274,%eax
80102b22:	85 c0                	test   %eax,%eax
80102b24:	75 06                	jne    80102b2c <kfree+0x5c>
    release(&kmem.lock);
}
80102b26:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102b29:	c9                   	leave  
80102b2a:	c3                   	ret    
80102b2b:	90                   	nop
    release(&kmem.lock);
80102b2c:	c7 45 08 40 12 11 80 	movl   $0x80111240,0x8(%ebp)
}
80102b33:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102b36:	c9                   	leave  
    release(&kmem.lock);
80102b37:	e9 80 1c 00 00       	jmp    801047bc <release>
    acquire(&kmem.lock);
80102b3c:	83 ec 0c             	sub    $0xc,%esp
80102b3f:	68 40 12 11 80       	push   $0x80111240
80102b44:	e8 9f 1b 00 00       	call   801046e8 <acquire>
80102b49:	83 c4 10             	add    $0x10,%esp
80102b4c:	eb c2                	jmp    80102b10 <kfree+0x40>
    panic("kfree");
80102b4e:	83 ec 0c             	sub    $0xc,%esp
80102b51:	68 86 66 10 80       	push   $0x80106686
80102b56:	e8 89 e2 ff ff       	call   80100de4 <panic>
80102b5b:	90                   	nop

80102b5c <freerange>:
{
80102b5c:	55                   	push   %ebp
80102b5d:	89 e5                	mov    %esp,%ebp
80102b5f:	56                   	push   %esi
80102b60:	53                   	push   %ebx
80102b61:	8b 75 0c             	mov    0xc(%ebp),%esi
  p = (char*)PGROUNDUP((uint)vstart);
80102b64:	8b 45 08             	mov    0x8(%ebp),%eax
80102b67:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102b6d:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102b73:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102b79:	39 de                	cmp    %ebx,%esi
80102b7b:	72 1f                	jb     80102b9c <freerange+0x40>
80102b7d:	8d 76 00             	lea    0x0(%esi),%esi
    kfree(p);
80102b80:	83 ec 0c             	sub    $0xc,%esp
80102b83:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
80102b89:	50                   	push   %eax
80102b8a:	e8 41 ff ff ff       	call   80102ad0 <kfree>
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102b8f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102b95:	83 c4 10             	add    $0x10,%esp
80102b98:	39 f3                	cmp    %esi,%ebx
80102b9a:	76 e4                	jbe    80102b80 <freerange+0x24>
}
80102b9c:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102b9f:	5b                   	pop    %ebx
80102ba0:	5e                   	pop    %esi
80102ba1:	5d                   	pop    %ebp
80102ba2:	c3                   	ret    
80102ba3:	90                   	nop

80102ba4 <kinit1>:
{
80102ba4:	55                   	push   %ebp
80102ba5:	89 e5                	mov    %esp,%ebp
80102ba7:	56                   	push   %esi
80102ba8:	53                   	push   %ebx
80102ba9:	8b 75 0c             	mov    0xc(%ebp),%esi
  initlock(&kmem.lock, "kmem");
80102bac:	83 ec 08             	sub    $0x8,%esp
80102baf:	68 8c 66 10 80       	push   $0x8010668c
80102bb4:	68 40 12 11 80       	push   $0x80111240
80102bb9:	e8 66 1a 00 00       	call   80104624 <initlock>
  kmem.use_lock = 0;
80102bbe:	c7 05 74 12 11 80 00 	movl   $0x0,0x80111274
80102bc5:	00 00 00 
  p = (char*)PGROUNDUP((uint)vstart);
80102bc8:	8b 45 08             	mov    0x8(%ebp),%eax
80102bcb:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102bd1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102bd7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102bdd:	83 c4 10             	add    $0x10,%esp
80102be0:	39 de                	cmp    %ebx,%esi
80102be2:	72 1c                	jb     80102c00 <kinit1+0x5c>
    kfree(p);
80102be4:	83 ec 0c             	sub    $0xc,%esp
80102be7:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
80102bed:	50                   	push   %eax
80102bee:	e8 dd fe ff ff       	call   80102ad0 <kfree>
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102bf3:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102bf9:	83 c4 10             	add    $0x10,%esp
80102bfc:	39 de                	cmp    %ebx,%esi
80102bfe:	73 e4                	jae    80102be4 <kinit1+0x40>
}
80102c00:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102c03:	5b                   	pop    %ebx
80102c04:	5e                   	pop    %esi
80102c05:	5d                   	pop    %ebp
80102c06:	c3                   	ret    
80102c07:	90                   	nop

80102c08 <kinit2>:
{
80102c08:	55                   	push   %ebp
80102c09:	89 e5                	mov    %esp,%ebp
80102c0b:	56                   	push   %esi
80102c0c:	53                   	push   %ebx
80102c0d:	8b 75 0c             	mov    0xc(%ebp),%esi
  p = (char*)PGROUNDUP((uint)vstart);
80102c10:	8b 45 08             	mov    0x8(%ebp),%eax
80102c13:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102c19:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102c1f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102c25:	39 de                	cmp    %ebx,%esi
80102c27:	72 1f                	jb     80102c48 <kinit2+0x40>
80102c29:	8d 76 00             	lea    0x0(%esi),%esi
    kfree(p);
80102c2c:	83 ec 0c             	sub    $0xc,%esp
80102c2f:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
80102c35:	50                   	push   %eax
80102c36:	e8 95 fe ff ff       	call   80102ad0 <kfree>
  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
80102c3b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80102c41:	83 c4 10             	add    $0x10,%esp
80102c44:	39 de                	cmp    %ebx,%esi
80102c46:	73 e4                	jae    80102c2c <kinit2+0x24>
  kmem.use_lock = 1;
80102c48:	c7 05 74 12 11 80 01 	movl   $0x1,0x80111274
80102c4f:	00 00 00 
}
80102c52:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102c55:	5b                   	pop    %ebx
80102c56:	5e                   	pop    %esi
80102c57:	5d                   	pop    %ebp
80102c58:	c3                   	ret    
80102c59:	8d 76 00             	lea    0x0(%esi),%esi

80102c5c <kalloc>:
// Allocate one 4096-byte page of physical memory.
// Returns a pointer that the kernel can use.
// Returns 0 if the memory cannot be allocated.
char*
kalloc(void)
{
80102c5c:	55                   	push   %ebp
80102c5d:	89 e5                	mov    %esp,%ebp
80102c5f:	83 ec 18             	sub    $0x18,%esp
  struct run *r;

  if(kmem.use_lock)
80102c62:	8b 15 74 12 11 80    	mov    0x80111274,%edx
80102c68:	85 d2                	test   %edx,%edx
80102c6a:	75 30                	jne    80102c9c <kalloc+0x40>
    acquire(&kmem.lock);
  r = kmem.freelist;
80102c6c:	a1 78 12 11 80       	mov    0x80111278,%eax
  if(r)
80102c71:	85 c0                	test   %eax,%eax
80102c73:	74 0c                	je     80102c81 <kalloc+0x25>
    kmem.freelist = r->next;
80102c75:	8b 08                	mov    (%eax),%ecx
80102c77:	89 0d 78 12 11 80    	mov    %ecx,0x80111278
  if(kmem.use_lock)
80102c7d:	85 d2                	test   %edx,%edx
80102c7f:	75 03                	jne    80102c84 <kalloc+0x28>
    release(&kmem.lock);
  return (char*)r;
}
80102c81:	c9                   	leave  
80102c82:	c3                   	ret    
80102c83:	90                   	nop
80102c84:	89 45 f4             	mov    %eax,-0xc(%ebp)
    release(&kmem.lock);
80102c87:	83 ec 0c             	sub    $0xc,%esp
80102c8a:	68 40 12 11 80       	push   $0x80111240
80102c8f:	e8 28 1b 00 00       	call   801047bc <release>
80102c94:	83 c4 10             	add    $0x10,%esp
80102c97:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80102c9a:	c9                   	leave  
80102c9b:	c3                   	ret    
    acquire(&kmem.lock);
80102c9c:	83 ec 0c             	sub    $0xc,%esp
80102c9f:	68 40 12 11 80       	push   $0x80111240
80102ca4:	e8 3f 1a 00 00       	call   801046e8 <acquire>
  r = kmem.freelist;
80102ca9:	a1 78 12 11 80       	mov    0x80111278,%eax
  if(r)
80102cae:	83 c4 10             	add    $0x10,%esp
80102cb1:	8b 15 74 12 11 80    	mov    0x80111274,%edx
80102cb7:	85 c0                	test   %eax,%eax
80102cb9:	75 ba                	jne    80102c75 <kalloc+0x19>
80102cbb:	eb c0                	jmp    80102c7d <kalloc+0x21>
80102cbd:	66 90                	xchg   %ax,%ax
80102cbf:	90                   	nop

80102cc0 <kbdgetc>:
#include "defs.h"
#include "kbd.h"

int
kbdgetc(void)
{
80102cc0:	55                   	push   %ebp
80102cc1:	89 e5                	mov    %esp,%ebp
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102cc3:	ba 64 00 00 00       	mov    $0x64,%edx
80102cc8:	ec                   	in     (%dx),%al
    normalmap, shiftmap, ctlmap, ctlmap
  };
  uint st, data, c;

  st = inb(KBSTATP);
  if((st & KBS_DIB) == 0)
80102cc9:	a8 01                	test   $0x1,%al
80102ccb:	0f 84 9f 00 00 00    	je     80102d70 <kbdgetc+0xb0>
80102cd1:	b2 60                	mov    $0x60,%dl
80102cd3:	ec                   	in     (%dx),%al
    return -1;
  data = inb(KBDATAP);
80102cd4:	0f b6 d0             	movzbl %al,%edx

  if(data == 0xE0){
80102cd7:	81 fa e0 00 00 00    	cmp    $0xe0,%edx
80102cdd:	74 75                	je     80102d54 <kbdgetc+0x94>
    shift |= E0ESC;
    return 0;
  } else if(data & 0x80){
    // Key released
    data = (shift & E0ESC ? data : data & 0x7F);
80102cdf:	8b 0d b4 91 10 80    	mov    0x801091b4,%ecx
  } else if(data & 0x80){
80102ce5:	84 c0                	test   %al,%al
80102ce7:	79 23                	jns    80102d0c <kbdgetc+0x4c>
    data = (shift & E0ESC ? data : data & 0x7F);
80102ce9:	f6 c1 40             	test   $0x40,%cl
80102cec:	75 05                	jne    80102cf3 <kbdgetc+0x33>
80102cee:	89 c2                	mov    %eax,%edx
80102cf0:	83 e2 7f             	and    $0x7f,%edx
    shift &= ~(shiftcode[data] | E0ESC);
80102cf3:	8a 82 c0 67 10 80    	mov    -0x7fef9840(%edx),%al
80102cf9:	83 c8 40             	or     $0x40,%eax
80102cfc:	0f b6 c0             	movzbl %al,%eax
80102cff:	f7 d0                	not    %eax
80102d01:	21 c8                	and    %ecx,%eax
80102d03:	a3 b4 91 10 80       	mov    %eax,0x801091b4
    return 0;
80102d08:	31 c0                	xor    %eax,%eax
      c += 'A' - 'a';
    else if('A' <= c && c <= 'Z')
      c += 'a' - 'A';
  }
  return c;
}
80102d0a:	5d                   	pop    %ebp
80102d0b:	c3                   	ret    
  } else if(shift & E0ESC){
80102d0c:	f6 c1 40             	test   $0x40,%cl
80102d0f:	74 09                	je     80102d1a <kbdgetc+0x5a>
    data |= 0x80;
80102d11:	83 c8 80             	or     $0xffffff80,%eax
80102d14:	0f b6 d0             	movzbl %al,%edx
    shift &= ~E0ESC;
80102d17:	83 e1 bf             	and    $0xffffffbf,%ecx
  shift |= shiftcode[data];
80102d1a:	0f b6 82 c0 67 10 80 	movzbl -0x7fef9840(%edx),%eax
80102d21:	09 c1                	or     %eax,%ecx
  shift ^= togglecode[data];
80102d23:	0f b6 82 c0 66 10 80 	movzbl -0x7fef9940(%edx),%eax
80102d2a:	31 c1                	xor    %eax,%ecx
80102d2c:	89 0d b4 91 10 80    	mov    %ecx,0x801091b4
  c = charcode[shift & (CTL | SHIFT)][data];
80102d32:	89 c8                	mov    %ecx,%eax
80102d34:	83 e0 03             	and    $0x3,%eax
80102d37:	8b 04 85 a0 66 10 80 	mov    -0x7fef9960(,%eax,4),%eax
80102d3e:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
  if(shift & CAPSLOCK){
80102d42:	83 e1 08             	and    $0x8,%ecx
80102d45:	74 c3                	je     80102d0a <kbdgetc+0x4a>
    if('a' <= c && c <= 'z')
80102d47:	8d 50 9f             	lea    -0x61(%eax),%edx
80102d4a:	83 fa 19             	cmp    $0x19,%edx
80102d4d:	77 11                	ja     80102d60 <kbdgetc+0xa0>
      c += 'A' - 'a';
80102d4f:	83 e8 20             	sub    $0x20,%eax
}
80102d52:	5d                   	pop    %ebp
80102d53:	c3                   	ret    
    shift |= E0ESC;
80102d54:	83 0d b4 91 10 80 40 	orl    $0x40,0x801091b4
    return 0;
80102d5b:	31 c0                	xor    %eax,%eax
}
80102d5d:	5d                   	pop    %ebp
80102d5e:	c3                   	ret    
80102d5f:	90                   	nop
    else if('A' <= c && c <= 'Z')
80102d60:	8d 50 bf             	lea    -0x41(%eax),%edx
80102d63:	83 fa 19             	cmp    $0x19,%edx
80102d66:	77 a2                	ja     80102d0a <kbdgetc+0x4a>
      c += 'a' - 'A';
80102d68:	83 c0 20             	add    $0x20,%eax
}
80102d6b:	5d                   	pop    %ebp
80102d6c:	c3                   	ret    
80102d6d:	8d 76 00             	lea    0x0(%esi),%esi
    return -1;
80102d70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80102d75:	5d                   	pop    %ebp
80102d76:	c3                   	ret    
80102d77:	90                   	nop

80102d78 <kbdintr>:

void
kbdintr(void)
{
80102d78:	55                   	push   %ebp
80102d79:	89 e5                	mov    %esp,%ebp
80102d7b:	83 ec 14             	sub    $0x14,%esp
  consoleintr(kbdgetc);
80102d7e:	68 c0 2c 10 80       	push   $0x80102cc0
80102d83:	e8 58 e4 ff ff       	call   801011e0 <consoleintr>
80102d88:	83 c4 10             	add    $0x10,%esp
}
80102d8b:	c9                   	leave  
80102d8c:	c3                   	ret    
80102d8d:	66 90                	xchg   %ax,%ax
80102d8f:	90                   	nop

80102d90 <fill_rtcdate>:

  return inb(CMOS_RETURN);
}

static void fill_rtcdate(struct rtcdate *r)
{
80102d90:	55                   	push   %ebp
80102d91:	89 e5                	mov    %esp,%ebp
80102d93:	53                   	push   %ebx
80102d94:	89 c3                	mov    %eax,%ebx
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102d96:	ba 70 00 00 00       	mov    $0x70,%edx
80102d9b:	31 c0                	xor    %eax,%eax
80102d9d:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102d9e:	b9 71 00 00 00       	mov    $0x71,%ecx
80102da3:	89 ca                	mov    %ecx,%edx
80102da5:	ec                   	in     (%dx),%al
  return inb(CMOS_RETURN);
80102da6:	0f b6 c0             	movzbl %al,%eax
80102da9:	89 03                	mov    %eax,(%ebx)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102dab:	b2 70                	mov    $0x70,%dl
80102dad:	b0 02                	mov    $0x2,%al
80102daf:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102db0:	89 ca                	mov    %ecx,%edx
80102db2:	ec                   	in     (%dx),%al
80102db3:	0f b6 c0             	movzbl %al,%eax
80102db6:	89 43 04             	mov    %eax,0x4(%ebx)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102db9:	b2 70                	mov    $0x70,%dl
80102dbb:	b0 04                	mov    $0x4,%al
80102dbd:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102dbe:	89 ca                	mov    %ecx,%edx
80102dc0:	ec                   	in     (%dx),%al
80102dc1:	0f b6 c0             	movzbl %al,%eax
80102dc4:	89 43 08             	mov    %eax,0x8(%ebx)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102dc7:	b2 70                	mov    $0x70,%dl
80102dc9:	b0 07                	mov    $0x7,%al
80102dcb:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102dcc:	89 ca                	mov    %ecx,%edx
80102dce:	ec                   	in     (%dx),%al
80102dcf:	0f b6 c0             	movzbl %al,%eax
80102dd2:	89 43 0c             	mov    %eax,0xc(%ebx)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102dd5:	b2 70                	mov    $0x70,%dl
80102dd7:	b0 08                	mov    $0x8,%al
80102dd9:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102dda:	89 ca                	mov    %ecx,%edx
80102ddc:	ec                   	in     (%dx),%al
80102ddd:	0f b6 c0             	movzbl %al,%eax
80102de0:	89 43 10             	mov    %eax,0x10(%ebx)
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102de3:	b2 70                	mov    $0x70,%dl
80102de5:	b0 09                	mov    $0x9,%al
80102de7:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102de8:	89 ca                	mov    %ecx,%edx
80102dea:	ec                   	in     (%dx),%al
80102deb:	0f b6 c8             	movzbl %al,%ecx
80102dee:	89 4b 14             	mov    %ecx,0x14(%ebx)
  r->minute = cmos_read(MINS);
  r->hour   = cmos_read(HOURS);
  r->day    = cmos_read(DAY);
  r->month  = cmos_read(MONTH);
  r->year   = cmos_read(YEAR);
}
80102df1:	5b                   	pop    %ebx
80102df2:	5d                   	pop    %ebp
80102df3:	c3                   	ret    

80102df4 <lapicinit>:
{
80102df4:	55                   	push   %ebp
80102df5:	89 e5                	mov    %esp,%ebp
  if(!lapic)
80102df7:	a1 7c 12 11 80       	mov    0x8011127c,%eax
80102dfc:	85 c0                	test   %eax,%eax
80102dfe:	0f 84 c0 00 00 00    	je     80102ec4 <lapicinit+0xd0>
  lapic[index] = value;
80102e04:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
80102e0b:	01 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102e0e:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e11:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
80102e18:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102e1b:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e1e:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
80102e25:	00 02 00 
  lapic[ID];  // wait for write to finish, by reading
80102e28:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e2b:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
80102e32:	96 98 00 
  lapic[ID];  // wait for write to finish, by reading
80102e35:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e38:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
80102e3f:	00 01 00 
  lapic[ID];  // wait for write to finish, by reading
80102e42:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e45:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
80102e4c:	00 01 00 
  lapic[ID];  // wait for write to finish, by reading
80102e4f:	8b 50 20             	mov    0x20(%eax),%edx
  if(((lapic[VER]>>16) & 0xFF) >= 4)
80102e52:	8b 50 30             	mov    0x30(%eax),%edx
80102e55:	c1 ea 10             	shr    $0x10,%edx
80102e58:	80 fa 03             	cmp    $0x3,%dl
80102e5b:	77 6b                	ja     80102ec8 <lapicinit+0xd4>
  lapic[index] = value;
80102e5d:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
80102e64:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102e67:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e6a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
80102e71:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102e74:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e77:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
80102e7e:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102e81:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e84:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
80102e8b:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102e8e:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e91:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
80102e98:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102e9b:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102e9e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
80102ea5:	85 08 00 
  lapic[ID];  // wait for write to finish, by reading
80102ea8:	8b 50 20             	mov    0x20(%eax),%edx
80102eab:	90                   	nop
  while(lapic[ICRLO] & DELIVS)
80102eac:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
80102eb2:	80 e6 10             	and    $0x10,%dh
80102eb5:	75 f5                	jne    80102eac <lapicinit+0xb8>
  lapic[index] = value;
80102eb7:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
80102ebe:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102ec1:	8b 40 20             	mov    0x20(%eax),%eax
}
80102ec4:	5d                   	pop    %ebp
80102ec5:	c3                   	ret    
80102ec6:	66 90                	xchg   %ax,%ax
  lapic[index] = value;
80102ec8:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
80102ecf:	00 01 00 
  lapic[ID];  // wait for write to finish, by reading
80102ed2:	8b 50 20             	mov    0x20(%eax),%edx
80102ed5:	eb 86                	jmp    80102e5d <lapicinit+0x69>
80102ed7:	90                   	nop

80102ed8 <lapicid>:
{
80102ed8:	55                   	push   %ebp
80102ed9:	89 e5                	mov    %esp,%ebp
  if (!lapic)
80102edb:	a1 7c 12 11 80       	mov    0x8011127c,%eax
80102ee0:	85 c0                	test   %eax,%eax
80102ee2:	74 08                	je     80102eec <lapicid+0x14>
  return lapic[ID] >> 24;
80102ee4:	8b 40 20             	mov    0x20(%eax),%eax
80102ee7:	c1 e8 18             	shr    $0x18,%eax
}
80102eea:	5d                   	pop    %ebp
80102eeb:	c3                   	ret    
    return 0;
80102eec:	31 c0                	xor    %eax,%eax
}
80102eee:	5d                   	pop    %ebp
80102eef:	c3                   	ret    

80102ef0 <lapiceoi>:
{
80102ef0:	55                   	push   %ebp
80102ef1:	89 e5                	mov    %esp,%ebp
  if(lapic)
80102ef3:	a1 7c 12 11 80       	mov    0x8011127c,%eax
80102ef8:	85 c0                	test   %eax,%eax
80102efa:	74 0d                	je     80102f09 <lapiceoi+0x19>
  lapic[index] = value;
80102efc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
80102f03:	00 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102f06:	8b 40 20             	mov    0x20(%eax),%eax
}
80102f09:	5d                   	pop    %ebp
80102f0a:	c3                   	ret    
80102f0b:	90                   	nop

80102f0c <microdelay>:
{
80102f0c:	55                   	push   %ebp
80102f0d:	89 e5                	mov    %esp,%ebp
}
80102f0f:	5d                   	pop    %ebp
80102f10:	c3                   	ret    
80102f11:	8d 76 00             	lea    0x0(%esi),%esi

80102f14 <lapicstartap>:
{
80102f14:	55                   	push   %ebp
80102f15:	89 e5                	mov    %esp,%ebp
80102f17:	53                   	push   %ebx
80102f18:	8b 5d 08             	mov    0x8(%ebp),%ebx
80102f1b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102f1e:	ba 70 00 00 00       	mov    $0x70,%edx
80102f23:	b0 0f                	mov    $0xf,%al
80102f25:	ee                   	out    %al,(%dx)
80102f26:	b2 71                	mov    $0x71,%dl
80102f28:	b0 0a                	mov    $0xa,%al
80102f2a:	ee                   	out    %al,(%dx)
  wrv[0] = 0;
80102f2b:	66 c7 05 67 04 00 80 	movw   $0x0,0x80000467
80102f32:	00 00 
  wrv[1] = addr >> 4;
80102f34:	89 c8                	mov    %ecx,%eax
80102f36:	c1 e8 04             	shr    $0x4,%eax
80102f39:	66 a3 69 04 00 80    	mov    %ax,0x80000469
  lapic[index] = value;
80102f3f:	a1 7c 12 11 80       	mov    0x8011127c,%eax
  lapicw(ICRHI, apicid<<24);
80102f44:	c1 e3 18             	shl    $0x18,%ebx
80102f47:	89 da                	mov    %ebx,%edx
  lapic[index] = value;
80102f49:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
  lapic[ID];  // wait for write to finish, by reading
80102f4f:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
80102f52:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
80102f59:	c5 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102f5c:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
80102f5f:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
80102f66:	85 00 00 
  lapic[ID];  // wait for write to finish, by reading
80102f69:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
80102f6c:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
  lapic[ID];  // wait for write to finish, by reading
80102f72:	8b 58 20             	mov    0x20(%eax),%ebx
    lapicw(ICRLO, STARTUP | (addr>>12));
80102f75:	c1 e9 0c             	shr    $0xc,%ecx
80102f78:	80 cd 06             	or     $0x6,%ch
  lapic[index] = value;
80102f7b:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
  lapic[ID];  // wait for write to finish, by reading
80102f81:	8b 58 20             	mov    0x20(%eax),%ebx
  lapic[index] = value;
80102f84:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
  lapic[ID];  // wait for write to finish, by reading
80102f8a:	8b 50 20             	mov    0x20(%eax),%edx
  lapic[index] = value;
80102f8d:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
  lapic[ID];  // wait for write to finish, by reading
80102f93:	8b 40 20             	mov    0x20(%eax),%eax
}
80102f96:	5b                   	pop    %ebx
80102f97:	5d                   	pop    %ebp
80102f98:	c3                   	ret    
80102f99:	8d 76 00             	lea    0x0(%esi),%esi

80102f9c <cmostime>:

// qemu seems to use 24-hour GWT and the values are BCD encoded
void cmostime(struct rtcdate *r)
{
80102f9c:	55                   	push   %ebp
80102f9d:	89 e5                	mov    %esp,%ebp
80102f9f:	57                   	push   %edi
80102fa0:	56                   	push   %esi
80102fa1:	53                   	push   %ebx
80102fa2:	83 ec 4c             	sub    $0x4c,%esp
80102fa5:	ba 70 00 00 00       	mov    $0x70,%edx
80102faa:	b0 0b                	mov    $0xb,%al
80102fac:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102fad:	b2 71                	mov    $0x71,%dl
80102faf:	ec                   	in     (%dx),%al
  struct rtcdate t1, t2;
  int sb, bcd;

  sb = cmos_read(CMOS_STATB);

  bcd = (sb & (1 << 2)) == 0;
80102fb0:	83 e0 04             	and    $0x4,%eax
80102fb3:	88 45 b7             	mov    %al,-0x49(%ebp)
80102fb6:	8d 75 b8             	lea    -0x48(%ebp),%esi
80102fb9:	8d 7d d0             	lea    -0x30(%ebp),%edi
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80102fbc:	bb 70 00 00 00       	mov    $0x70,%ebx

  // make sure CMOS doesn't modify time while we read it
  for(;;) {
    fill_rtcdate(&t1);
80102fc1:	89 f0                	mov    %esi,%eax
80102fc3:	e8 c8 fd ff ff       	call   80102d90 <fill_rtcdate>
80102fc8:	b0 0a                	mov    $0xa,%al
80102fca:	89 da                	mov    %ebx,%edx
80102fcc:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80102fcd:	ba 71 00 00 00       	mov    $0x71,%edx
80102fd2:	ec                   	in     (%dx),%al
    if(cmos_read(CMOS_STATA) & CMOS_UIP)
80102fd3:	84 c0                	test   %al,%al
80102fd5:	78 ea                	js     80102fc1 <cmostime+0x25>
        continue;
    fill_rtcdate(&t2);
80102fd7:	89 f8                	mov    %edi,%eax
80102fd9:	e8 b2 fd ff ff       	call   80102d90 <fill_rtcdate>
    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
80102fde:	50                   	push   %eax
80102fdf:	6a 18                	push   $0x18
80102fe1:	57                   	push   %edi
80102fe2:	56                   	push   %esi
80102fe3:	e8 6c 18 00 00       	call   80104854 <memcmp>
80102fe8:	83 c4 10             	add    $0x10,%esp
80102feb:	85 c0                	test   %eax,%eax
80102fed:	75 cd                	jne    80102fbc <cmostime+0x20>
      break;
  }

  // convert
  if(bcd) {
80102fef:	80 7d b7 00          	cmpb   $0x0,-0x49(%ebp)
80102ff3:	75 78                	jne    8010306d <cmostime+0xd1>
#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
    CONV(second);
80102ff5:	8b 45 b8             	mov    -0x48(%ebp),%eax
80102ff8:	89 c2                	mov    %eax,%edx
80102ffa:	c1 ea 04             	shr    $0x4,%edx
80102ffd:	8d 14 92             	lea    (%edx,%edx,4),%edx
80103000:	83 e0 0f             	and    $0xf,%eax
80103003:	8d 04 50             	lea    (%eax,%edx,2),%eax
80103006:	89 45 b8             	mov    %eax,-0x48(%ebp)
    CONV(minute);
80103009:	8b 45 bc             	mov    -0x44(%ebp),%eax
8010300c:	89 c2                	mov    %eax,%edx
8010300e:	c1 ea 04             	shr    $0x4,%edx
80103011:	8d 14 92             	lea    (%edx,%edx,4),%edx
80103014:	83 e0 0f             	and    $0xf,%eax
80103017:	8d 04 50             	lea    (%eax,%edx,2),%eax
8010301a:	89 45 bc             	mov    %eax,-0x44(%ebp)
    CONV(hour  );
8010301d:	8b 45 c0             	mov    -0x40(%ebp),%eax
80103020:	89 c2                	mov    %eax,%edx
80103022:	c1 ea 04             	shr    $0x4,%edx
80103025:	8d 14 92             	lea    (%edx,%edx,4),%edx
80103028:	83 e0 0f             	and    $0xf,%eax
8010302b:	8d 04 50             	lea    (%eax,%edx,2),%eax
8010302e:	89 45 c0             	mov    %eax,-0x40(%ebp)
    CONV(day   );
80103031:	8b 45 c4             	mov    -0x3c(%ebp),%eax
80103034:	89 c2                	mov    %eax,%edx
80103036:	c1 ea 04             	shr    $0x4,%edx
80103039:	8d 14 92             	lea    (%edx,%edx,4),%edx
8010303c:	83 e0 0f             	and    $0xf,%eax
8010303f:	8d 04 50             	lea    (%eax,%edx,2),%eax
80103042:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    CONV(month );
80103045:	8b 45 c8             	mov    -0x38(%ebp),%eax
80103048:	89 c2                	mov    %eax,%edx
8010304a:	c1 ea 04             	shr    $0x4,%edx
8010304d:	8d 14 92             	lea    (%edx,%edx,4),%edx
80103050:	83 e0 0f             	and    $0xf,%eax
80103053:	8d 04 50             	lea    (%eax,%edx,2),%eax
80103056:	89 45 c8             	mov    %eax,-0x38(%ebp)
    CONV(year  );
80103059:	8b 45 cc             	mov    -0x34(%ebp),%eax
8010305c:	89 c2                	mov    %eax,%edx
8010305e:	c1 ea 04             	shr    $0x4,%edx
80103061:	8d 14 92             	lea    (%edx,%edx,4),%edx
80103064:	83 e0 0f             	and    $0xf,%eax
80103067:	8d 04 50             	lea    (%eax,%edx,2),%eax
8010306a:	89 45 cc             	mov    %eax,-0x34(%ebp)
#undef     CONV
  }

  *r = t1;
8010306d:	b9 06 00 00 00       	mov    $0x6,%ecx
80103072:	8b 7d 08             	mov    0x8(%ebp),%edi
80103075:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  r->year += 2000;
80103077:	8b 45 08             	mov    0x8(%ebp),%eax
8010307a:	81 40 14 d0 07 00 00 	addl   $0x7d0,0x14(%eax)
}
80103081:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103084:	5b                   	pop    %ebx
80103085:	5e                   	pop    %esi
80103086:	5f                   	pop    %edi
80103087:	5d                   	pop    %ebp
80103088:	c3                   	ret    
80103089:	66 90                	xchg   %ax,%ax
8010308b:	90                   	nop

8010308c <install_trans>:
}

// Copy committed blocks from log to their home location
static void
install_trans(void)
{
8010308c:	55                   	push   %ebp
8010308d:	89 e5                	mov    %esp,%ebp
8010308f:	57                   	push   %edi
80103090:	56                   	push   %esi
80103091:	53                   	push   %ebx
80103092:	83 ec 0c             	sub    $0xc,%esp
  int tail;

  for (tail = 0; tail < log.lh.n; tail++) {
80103095:	31 db                	xor    %ebx,%ebx
80103097:	8b 0d c8 12 11 80    	mov    0x801112c8,%ecx
8010309d:	85 c9                	test   %ecx,%ecx
8010309f:	7e 6b                	jle    8010310c <install_trans+0x80>
801030a1:	8d 76 00             	lea    0x0(%esi),%esi
    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
801030a4:	83 ec 08             	sub    $0x8,%esp
801030a7:	a1 b4 12 11 80       	mov    0x801112b4,%eax
801030ac:	01 d8                	add    %ebx,%eax
801030ae:	40                   	inc    %eax
801030af:	50                   	push   %eax
801030b0:	ff 35 c4 12 11 80    	pushl  0x801112c4
801030b6:	e8 a5 da ff ff       	call   80100b60 <bread>
801030bb:	89 c7                	mov    %eax,%edi
    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
801030bd:	58                   	pop    %eax
801030be:	5a                   	pop    %edx
801030bf:	ff 34 9d cc 12 11 80 	pushl  -0x7feeed34(,%ebx,4)
801030c6:	ff 35 c4 12 11 80    	pushl  0x801112c4
801030cc:	e8 8f da ff ff       	call   80100b60 <bread>
801030d1:	89 c6                	mov    %eax,%esi
    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
801030d3:	83 c4 0c             	add    $0xc,%esp
801030d6:	68 00 02 00 00       	push   $0x200
801030db:	8d 47 5c             	lea    0x5c(%edi),%eax
801030de:	50                   	push   %eax
801030df:	8d 46 5c             	lea    0x5c(%esi),%eax
801030e2:	50                   	push   %eax
801030e3:	e8 b4 17 00 00       	call   8010489c <memmove>
    bwrite(dbuf);  // write dst to disk
801030e8:	89 34 24             	mov    %esi,(%esp)
801030eb:	e8 3c db ff ff       	call   80100c2c <bwrite>
    brelse(lbuf);
801030f0:	89 3c 24             	mov    %edi,(%esp)
801030f3:	e8 6c db ff ff       	call   80100c64 <brelse>
    brelse(dbuf);
801030f8:	89 34 24             	mov    %esi,(%esp)
801030fb:	e8 64 db ff ff       	call   80100c64 <brelse>
  for (tail = 0; tail < log.lh.n; tail++) {
80103100:	43                   	inc    %ebx
80103101:	83 c4 10             	add    $0x10,%esp
80103104:	39 1d c8 12 11 80    	cmp    %ebx,0x801112c8
8010310a:	7f 98                	jg     801030a4 <install_trans+0x18>
  }
}
8010310c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010310f:	5b                   	pop    %ebx
80103110:	5e                   	pop    %esi
80103111:	5f                   	pop    %edi
80103112:	5d                   	pop    %ebp
80103113:	c3                   	ret    

80103114 <write_head>:
// Write in-memory log header to disk.
// This is the true point at which the
// current transaction commits.
static void
write_head(void)
{
80103114:	55                   	push   %ebp
80103115:	89 e5                	mov    %esp,%ebp
80103117:	53                   	push   %ebx
80103118:	83 ec 0c             	sub    $0xc,%esp
  struct buf *buf = bread(log.dev, log.start);
8010311b:	ff 35 b4 12 11 80    	pushl  0x801112b4
80103121:	ff 35 c4 12 11 80    	pushl  0x801112c4
80103127:	e8 34 da ff ff       	call   80100b60 <bread>
8010312c:	89 c3                	mov    %eax,%ebx
  struct logheader *hb = (struct logheader *) (buf->data);
  int i;
  hb->n = log.lh.n;
8010312e:	a1 c8 12 11 80       	mov    0x801112c8,%eax
80103133:	89 43 5c             	mov    %eax,0x5c(%ebx)
  for (i = 0; i < log.lh.n; i++) {
80103136:	83 c4 10             	add    $0x10,%esp
80103139:	31 d2                	xor    %edx,%edx
8010313b:	85 c0                	test   %eax,%eax
8010313d:	7e 11                	jle    80103150 <write_head+0x3c>
8010313f:	90                   	nop
    hb->block[i] = log.lh.block[i];
80103140:	8b 0c 95 cc 12 11 80 	mov    -0x7feeed34(,%edx,4),%ecx
80103147:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
  for (i = 0; i < log.lh.n; i++) {
8010314b:	42                   	inc    %edx
8010314c:	39 c2                	cmp    %eax,%edx
8010314e:	75 f0                	jne    80103140 <write_head+0x2c>
  }
  bwrite(buf);
80103150:	83 ec 0c             	sub    $0xc,%esp
80103153:	53                   	push   %ebx
80103154:	e8 d3 da ff ff       	call   80100c2c <bwrite>
  brelse(buf);
80103159:	89 1c 24             	mov    %ebx,(%esp)
8010315c:	e8 03 db ff ff       	call   80100c64 <brelse>
}
80103161:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103164:	c9                   	leave  
80103165:	c3                   	ret    
80103166:	66 90                	xchg   %ax,%ax

80103168 <initlog>:
{
80103168:	55                   	push   %ebp
80103169:	89 e5                	mov    %esp,%ebp
8010316b:	53                   	push   %ebx
8010316c:	83 ec 2c             	sub    $0x2c,%esp
8010316f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  initlock(&log.lock, "log");
80103172:	68 c0 68 10 80       	push   $0x801068c0
80103177:	68 80 12 11 80       	push   $0x80111280
8010317c:	e8 a3 14 00 00       	call   80104624 <initlock>
  readsb(dev, &sb);
80103181:	58                   	pop    %eax
80103182:	5a                   	pop    %edx
80103183:	8d 45 dc             	lea    -0x24(%ebp),%eax
80103186:	50                   	push   %eax
80103187:	53                   	push   %ebx
80103188:	e8 37 eb ff ff       	call   80101cc4 <readsb>
  log.start = sb.logstart;
8010318d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80103190:	a3 b4 12 11 80       	mov    %eax,0x801112b4
  log.size = sb.nlog;
80103195:	8b 55 e8             	mov    -0x18(%ebp),%edx
80103198:	89 15 b8 12 11 80    	mov    %edx,0x801112b8
  log.dev = dev;
8010319e:	89 1d c4 12 11 80    	mov    %ebx,0x801112c4
  struct buf *buf = bread(log.dev, log.start);
801031a4:	59                   	pop    %ecx
801031a5:	5a                   	pop    %edx
801031a6:	50                   	push   %eax
801031a7:	53                   	push   %ebx
801031a8:	e8 b3 d9 ff ff       	call   80100b60 <bread>
  log.lh.n = lh->n;
801031ad:	8b 58 5c             	mov    0x5c(%eax),%ebx
801031b0:	89 1d c8 12 11 80    	mov    %ebx,0x801112c8
  for (i = 0; i < log.lh.n; i++) {
801031b6:	83 c4 10             	add    $0x10,%esp
801031b9:	31 d2                	xor    %edx,%edx
801031bb:	85 db                	test   %ebx,%ebx
801031bd:	7e 11                	jle    801031d0 <initlog+0x68>
801031bf:	90                   	nop
    log.lh.block[i] = lh->block[i];
801031c0:	8b 4c 90 60          	mov    0x60(%eax,%edx,4),%ecx
801031c4:	89 0c 95 cc 12 11 80 	mov    %ecx,-0x7feeed34(,%edx,4)
  for (i = 0; i < log.lh.n; i++) {
801031cb:	42                   	inc    %edx
801031cc:	39 da                	cmp    %ebx,%edx
801031ce:	75 f0                	jne    801031c0 <initlog+0x58>
  brelse(buf);
801031d0:	83 ec 0c             	sub    $0xc,%esp
801031d3:	50                   	push   %eax
801031d4:	e8 8b da ff ff       	call   80100c64 <brelse>

static void
recover_from_log(void)
{
  read_head();
  install_trans(); // if committed, copy from log to disk
801031d9:	e8 ae fe ff ff       	call   8010308c <install_trans>
  log.lh.n = 0;
801031de:	c7 05 c8 12 11 80 00 	movl   $0x0,0x801112c8
801031e5:	00 00 00 
  write_head(); // clear the log
801031e8:	e8 27 ff ff ff       	call   80103114 <write_head>
}
801031ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801031f0:	c9                   	leave  
801031f1:	c3                   	ret    
801031f2:	66 90                	xchg   %ax,%ax

801031f4 <begin_op>:
}

// called at the start of each FS system call.
void
begin_op(void)
{
801031f4:	55                   	push   %ebp
801031f5:	89 e5                	mov    %esp,%ebp
801031f7:	83 ec 14             	sub    $0x14,%esp
  acquire(&log.lock);
801031fa:	68 80 12 11 80       	push   $0x80111280
801031ff:	e8 e4 14 00 00       	call   801046e8 <acquire>
80103204:	83 c4 10             	add    $0x10,%esp
80103207:	eb 18                	jmp    80103221 <begin_op+0x2d>
80103209:	8d 76 00             	lea    0x0(%esi),%esi
  while(1){
    if(log.committing){
      sleep(&log, &log.lock);
8010320c:	83 ec 08             	sub    $0x8,%esp
8010320f:	68 80 12 11 80       	push   $0x80111280
80103214:	68 80 12 11 80       	push   $0x80111280
80103219:	e8 0e 10 00 00       	call   8010422c <sleep>
8010321e:	83 c4 10             	add    $0x10,%esp
    if(log.committing){
80103221:	a1 c0 12 11 80       	mov    0x801112c0,%eax
80103226:	85 c0                	test   %eax,%eax
80103228:	75 e2                	jne    8010320c <begin_op+0x18>
    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
8010322a:	a1 bc 12 11 80       	mov    0x801112bc,%eax
8010322f:	8d 50 01             	lea    0x1(%eax),%edx
80103232:	8d 04 92             	lea    (%edx,%edx,4),%eax
80103235:	01 c0                	add    %eax,%eax
80103237:	03 05 c8 12 11 80    	add    0x801112c8,%eax
8010323d:	83 f8 1e             	cmp    $0x1e,%eax
80103240:	7f ca                	jg     8010320c <begin_op+0x18>
      // this op might exhaust log space; wait for commit.
      sleep(&log, &log.lock);
    } else {
      log.outstanding += 1;
80103242:	89 15 bc 12 11 80    	mov    %edx,0x801112bc
      release(&log.lock);
80103248:	83 ec 0c             	sub    $0xc,%esp
8010324b:	68 80 12 11 80       	push   $0x80111280
80103250:	e8 67 15 00 00       	call   801047bc <release>
80103255:	83 c4 10             	add    $0x10,%esp
      break;
    }
  }
}
80103258:	c9                   	leave  
80103259:	c3                   	ret    
8010325a:	66 90                	xchg   %ax,%ax

8010325c <end_op>:

// called at the end of each FS system call.
// commits if this was the last outstanding operation.
void
end_op(void)
{
8010325c:	55                   	push   %ebp
8010325d:	89 e5                	mov    %esp,%ebp
8010325f:	57                   	push   %edi
80103260:	56                   	push   %esi
80103261:	53                   	push   %ebx
80103262:	83 ec 18             	sub    $0x18,%esp
  int do_commit = 0;

  acquire(&log.lock);
80103265:	68 80 12 11 80       	push   $0x80111280
8010326a:	e8 79 14 00 00       	call   801046e8 <acquire>
  log.outstanding -= 1;
8010326f:	a1 bc 12 11 80       	mov    0x801112bc,%eax
80103274:	48                   	dec    %eax
80103275:	a3 bc 12 11 80       	mov    %eax,0x801112bc
  if(log.committing)
8010327a:	83 c4 10             	add    $0x10,%esp
8010327d:	8b 1d c0 12 11 80    	mov    0x801112c0,%ebx
80103283:	85 db                	test   %ebx,%ebx
80103285:	0f 85 15 01 00 00    	jne    801033a0 <end_op+0x144>
    panic("log.committing");
  if(log.outstanding == 0){
8010328b:	85 c0                	test   %eax,%eax
8010328d:	0f 85 e9 00 00 00    	jne    8010337c <end_op+0x120>
    do_commit = 1;
    log.committing = 1;
80103293:	c7 05 c0 12 11 80 01 	movl   $0x1,0x801112c0
8010329a:	00 00 00 
    // begin_op() may be waiting for log space,
    // and decrementing log.outstanding has decreased
    // the amount of reserved space.
    wakeup(&log);
  }
  release(&log.lock);
8010329d:	83 ec 0c             	sub    $0xc,%esp
801032a0:	68 80 12 11 80       	push   $0x80111280
801032a5:	e8 12 15 00 00       	call   801047bc <release>
}

static void
commit()
{
  if (log.lh.n > 0) {
801032aa:	83 c4 10             	add    $0x10,%esp
801032ad:	8b 0d c8 12 11 80    	mov    0x801112c8,%ecx
801032b3:	85 c9                	test   %ecx,%ecx
801032b5:	0f 8e 86 00 00 00    	jle    80103341 <end_op+0xe5>
801032bb:	31 db                	xor    %ebx,%ebx
801032bd:	8d 76 00             	lea    0x0(%esi),%esi
    struct buf *to = bread(log.dev, log.start+tail+1); // log block
801032c0:	83 ec 08             	sub    $0x8,%esp
801032c3:	a1 b4 12 11 80       	mov    0x801112b4,%eax
801032c8:	01 d8                	add    %ebx,%eax
801032ca:	40                   	inc    %eax
801032cb:	50                   	push   %eax
801032cc:	ff 35 c4 12 11 80    	pushl  0x801112c4
801032d2:	e8 89 d8 ff ff       	call   80100b60 <bread>
801032d7:	89 c6                	mov    %eax,%esi
    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
801032d9:	58                   	pop    %eax
801032da:	5a                   	pop    %edx
801032db:	ff 34 9d cc 12 11 80 	pushl  -0x7feeed34(,%ebx,4)
801032e2:	ff 35 c4 12 11 80    	pushl  0x801112c4
801032e8:	e8 73 d8 ff ff       	call   80100b60 <bread>
801032ed:	89 c7                	mov    %eax,%edi
    memmove(to->data, from->data, BSIZE);
801032ef:	83 c4 0c             	add    $0xc,%esp
801032f2:	68 00 02 00 00       	push   $0x200
801032f7:	8d 40 5c             	lea    0x5c(%eax),%eax
801032fa:	50                   	push   %eax
801032fb:	8d 46 5c             	lea    0x5c(%esi),%eax
801032fe:	50                   	push   %eax
801032ff:	e8 98 15 00 00       	call   8010489c <memmove>
    bwrite(to);  // write the log
80103304:	89 34 24             	mov    %esi,(%esp)
80103307:	e8 20 d9 ff ff       	call   80100c2c <bwrite>
    brelse(from);
8010330c:	89 3c 24             	mov    %edi,(%esp)
8010330f:	e8 50 d9 ff ff       	call   80100c64 <brelse>
    brelse(to);
80103314:	89 34 24             	mov    %esi,(%esp)
80103317:	e8 48 d9 ff ff       	call   80100c64 <brelse>
  for (tail = 0; tail < log.lh.n; tail++) {
8010331c:	43                   	inc    %ebx
8010331d:	83 c4 10             	add    $0x10,%esp
80103320:	3b 1d c8 12 11 80    	cmp    0x801112c8,%ebx
80103326:	7c 98                	jl     801032c0 <end_op+0x64>
    write_log();     // Write modified blocks from cache to log
    write_head();    // Write header to disk -- the real commit
80103328:	e8 e7 fd ff ff       	call   80103114 <write_head>
    install_trans(); // Now install writes to home locations
8010332d:	e8 5a fd ff ff       	call   8010308c <install_trans>
    log.lh.n = 0;
80103332:	c7 05 c8 12 11 80 00 	movl   $0x0,0x801112c8
80103339:	00 00 00 
    write_head();    // Erase the transaction from the log
8010333c:	e8 d3 fd ff ff       	call   80103114 <write_head>
    acquire(&log.lock);
80103341:	83 ec 0c             	sub    $0xc,%esp
80103344:	68 80 12 11 80       	push   $0x80111280
80103349:	e8 9a 13 00 00       	call   801046e8 <acquire>
    log.committing = 0;
8010334e:	c7 05 c0 12 11 80 00 	movl   $0x0,0x801112c0
80103355:	00 00 00 
    wakeup(&log);
80103358:	c7 04 24 80 12 11 80 	movl   $0x80111280,(%esp)
8010335f:	e8 54 10 00 00       	call   801043b8 <wakeup>
    release(&log.lock);
80103364:	c7 04 24 80 12 11 80 	movl   $0x80111280,(%esp)
8010336b:	e8 4c 14 00 00       	call   801047bc <release>
80103370:	83 c4 10             	add    $0x10,%esp
}
80103373:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103376:	5b                   	pop    %ebx
80103377:	5e                   	pop    %esi
80103378:	5f                   	pop    %edi
80103379:	5d                   	pop    %ebp
8010337a:	c3                   	ret    
8010337b:	90                   	nop
    wakeup(&log);
8010337c:	83 ec 0c             	sub    $0xc,%esp
8010337f:	68 80 12 11 80       	push   $0x80111280
80103384:	e8 2f 10 00 00       	call   801043b8 <wakeup>
  release(&log.lock);
80103389:	c7 04 24 80 12 11 80 	movl   $0x80111280,(%esp)
80103390:	e8 27 14 00 00       	call   801047bc <release>
80103395:	83 c4 10             	add    $0x10,%esp
}
80103398:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010339b:	5b                   	pop    %ebx
8010339c:	5e                   	pop    %esi
8010339d:	5f                   	pop    %edi
8010339e:	5d                   	pop    %ebp
8010339f:	c3                   	ret    
    panic("log.committing");
801033a0:	83 ec 0c             	sub    $0xc,%esp
801033a3:	68 c4 68 10 80       	push   $0x801068c4
801033a8:	e8 37 da ff ff       	call   80100de4 <panic>
801033ad:	8d 76 00             	lea    0x0(%esi),%esi

801033b0 <log_write>:
//   modify bp->data[]
//   log_write(bp)
//   brelse(bp)
void
log_write(struct buf *b)
{
801033b0:	55                   	push   %ebp
801033b1:	89 e5                	mov    %esp,%ebp
801033b3:	53                   	push   %ebx
801033b4:	52                   	push   %edx
801033b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  int i;

  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
801033b8:	8b 15 c8 12 11 80    	mov    0x801112c8,%edx
801033be:	83 fa 1d             	cmp    $0x1d,%edx
801033c1:	0f 8f 85 00 00 00    	jg     8010344c <log_write+0x9c>
801033c7:	a1 b8 12 11 80       	mov    0x801112b8,%eax
801033cc:	48                   	dec    %eax
801033cd:	39 c2                	cmp    %eax,%edx
801033cf:	7d 7b                	jge    8010344c <log_write+0x9c>
    panic("too big a transaction");
  if (log.outstanding < 1)
801033d1:	a1 bc 12 11 80       	mov    0x801112bc,%eax
801033d6:	85 c0                	test   %eax,%eax
801033d8:	7e 7f                	jle    80103459 <log_write+0xa9>
    panic("log_write outside of trans");

  acquire(&log.lock);
801033da:	83 ec 0c             	sub    $0xc,%esp
801033dd:	68 80 12 11 80       	push   $0x80111280
801033e2:	e8 01 13 00 00       	call   801046e8 <acquire>
  for (i = 0; i < log.lh.n; i++) {
801033e7:	8b 15 c8 12 11 80    	mov    0x801112c8,%edx
801033ed:	83 c4 10             	add    $0x10,%esp
801033f0:	83 fa 00             	cmp    $0x0,%edx
801033f3:	7e 48                	jle    8010343d <log_write+0x8d>
    if (log.lh.block[i] == b->blockno)   // log absorbtion
801033f5:	8b 4b 08             	mov    0x8(%ebx),%ecx
  for (i = 0; i < log.lh.n; i++) {
801033f8:	31 c0                	xor    %eax,%eax
    if (log.lh.block[i] == b->blockno)   // log absorbtion
801033fa:	39 0d cc 12 11 80    	cmp    %ecx,0x801112cc
80103400:	75 0b                	jne    8010340d <log_write+0x5d>
80103402:	eb 30                	jmp    80103434 <log_write+0x84>
80103404:	39 0c 85 cc 12 11 80 	cmp    %ecx,-0x7feeed34(,%eax,4)
8010340b:	74 27                	je     80103434 <log_write+0x84>
  for (i = 0; i < log.lh.n; i++) {
8010340d:	40                   	inc    %eax
8010340e:	39 d0                	cmp    %edx,%eax
80103410:	75 f2                	jne    80103404 <log_write+0x54>
      break;
  }
  log.lh.block[i] = b->blockno;
80103412:	89 0c 95 cc 12 11 80 	mov    %ecx,-0x7feeed34(,%edx,4)
  if (i == log.lh.n)
    log.lh.n++;
80103419:	42                   	inc    %edx
8010341a:	89 15 c8 12 11 80    	mov    %edx,0x801112c8
  b->flags |= B_DIRTY; // prevent eviction
80103420:	83 0b 04             	orl    $0x4,(%ebx)
  release(&log.lock);
80103423:	c7 45 08 80 12 11 80 	movl   $0x80111280,0x8(%ebp)
}
8010342a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010342d:	c9                   	leave  
  release(&log.lock);
8010342e:	e9 89 13 00 00       	jmp    801047bc <release>
80103433:	90                   	nop
  log.lh.block[i] = b->blockno;
80103434:	89 0c 85 cc 12 11 80 	mov    %ecx,-0x7feeed34(,%eax,4)
8010343b:	eb e3                	jmp    80103420 <log_write+0x70>
8010343d:	8b 43 08             	mov    0x8(%ebx),%eax
80103440:	a3 cc 12 11 80       	mov    %eax,0x801112cc
  if (i == log.lh.n)
80103445:	75 d9                	jne    80103420 <log_write+0x70>
80103447:	eb d0                	jmp    80103419 <log_write+0x69>
80103449:	8d 76 00             	lea    0x0(%esi),%esi
    panic("too big a transaction");
8010344c:	83 ec 0c             	sub    $0xc,%esp
8010344f:	68 d3 68 10 80       	push   $0x801068d3
80103454:	e8 8b d9 ff ff       	call   80100de4 <panic>
    panic("log_write outside of trans");
80103459:	83 ec 0c             	sub    $0xc,%esp
8010345c:	68 e9 68 10 80       	push   $0x801068e9
80103461:	e8 7e d9 ff ff       	call   80100de4 <panic>
80103466:	66 90                	xchg   %ax,%ax

80103468 <mpmain>:
}

// Common CPU setup code.
static void
mpmain(void)
{
80103468:	55                   	push   %ebp
80103469:	89 e5                	mov    %esp,%ebp
8010346b:	53                   	push   %ebx
8010346c:	50                   	push   %eax
  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
8010346d:	e8 92 08 00 00       	call   80103d04 <cpuid>
80103472:	89 c3                	mov    %eax,%ebx
80103474:	e8 8b 08 00 00       	call   80103d04 <cpuid>
80103479:	52                   	push   %edx
8010347a:	53                   	push   %ebx
8010347b:	50                   	push   %eax
8010347c:	68 04 69 10 80       	push   $0x80106904
80103481:	e8 0e dc ff ff       	call   80101094 <cprintf>
  idtinit();       // load idt register
80103486:	e8 a9 23 00 00       	call   80105834 <idtinit>
  xchg(&(mycpu()->started), 1); // tell startothers() we're up
8010348b:	e8 fc 07 00 00       	call   80103c8c <mycpu>
80103490:	89 c2                	mov    %eax,%edx
xchg(volatile uint *addr, uint newval)
{
  uint result;

  // The + in "+m" denotes a read-modify-write operand.
  asm volatile("lock; xchgl %0, %1" :
80103492:	b8 01 00 00 00       	mov    $0x1,%eax
80103497:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
  scheduler();     // start running processes
8010349e:	e8 01 0b 00 00       	call   80103fa4 <scheduler>
801034a3:	90                   	nop

801034a4 <mpenter>:
{
801034a4:	55                   	push   %ebp
801034a5:	89 e5                	mov    %esp,%ebp
801034a7:	83 ec 08             	sub    $0x8,%esp
  switchkvm();
801034aa:	e8 79 29 00 00       	call   80105e28 <switchkvm>
  seginit();
801034af:	e8 84 28 00 00       	call   80105d38 <seginit>
  lapicinit();
801034b4:	e8 3b f9 ff ff       	call   80102df4 <lapicinit>
  mpmain();
801034b9:	e8 aa ff ff ff       	call   80103468 <mpmain>
801034be:	66 90                	xchg   %ax,%ax

801034c0 <main>:
{
801034c0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
801034c4:	83 e4 f0             	and    $0xfffffff0,%esp
801034c7:	ff 71 fc             	pushl  -0x4(%ecx)
801034ca:	55                   	push   %ebp
801034cb:	89 e5                	mov    %esp,%ebp
801034cd:	53                   	push   %ebx
801034ce:	51                   	push   %ecx
  kinit1(end, P2V(4*1024*1024)); // phys page allocator
801034cf:	83 ec 08             	sub    $0x8,%esp
801034d2:	68 00 00 40 80       	push   $0x80400000
801034d7:	68 a8 40 11 80       	push   $0x801140a8
801034dc:	e8 c3 f6 ff ff       	call   80102ba4 <kinit1>
  kvmalloc();      // kernel page table
801034e1:	e8 5e 2d 00 00       	call   80106244 <kvmalloc>
  mpinit();        // detect other processors
801034e6:	e8 59 01 00 00       	call   80103644 <mpinit>
  lapicinit();     // interrupt controller
801034eb:	e8 04 f9 ff ff       	call   80102df4 <lapicinit>
  seginit();       // segment descriptors
801034f0:	e8 43 28 00 00       	call   80105d38 <seginit>
  picinit();       // disable pic
801034f5:	e8 ea 02 00 00       	call   801037e4 <picinit>
  ioapicinit();    // another interrupt controller
801034fa:	e8 fd f4 ff ff       	call   801029fc <ioapicinit>
  consoleinit();   // console hardware
801034ff:	e8 60 de ff ff       	call   80101364 <consoleinit>
  uartinit();      // serial port
80103504:	e8 d3 25 00 00       	call   80105adc <uartinit>
  pinit();         // process table
80103509:	e8 62 07 00 00       	call   80103c70 <pinit>
  tvinit();        // trap vectors
8010350e:	e8 99 22 00 00       	call   801057ac <tvinit>
  binit();         // buffer cache
80103513:	e8 c8 d5 ff ff       	call   80100ae0 <binit>
  fileinit();      // file table
80103518:	e8 db e1 ff ff       	call   801016f8 <fileinit>
  ideinit();       // disk 
8010351d:	e8 f2 f2 ff ff       	call   80102814 <ideinit>

  // Write entry code to unused memory at 0x7000.
  // The linker has placed the image of entryother.S in
  // _binary_entryother_start.
  code = P2V(0x7000);
  memmove(code, _binary____bootblockother_entryother_start,
80103522:	83 c4 0c             	add    $0xc,%esp
80103525:	68 8a 00 00 00       	push   $0x8a
8010352a:	68 8c 90 10 80       	push   $0x8010908c
8010352f:	68 00 70 00 80       	push   $0x80007000
80103534:	e8 63 13 00 00       	call   8010489c <memmove>
    (uint)_binary____bootblockother_entryother_size);

  for(c = cpus; c < cpus+ncpu; c++){
80103539:	a1 00 19 11 80       	mov    0x80111900,%eax
8010353e:	8d 14 80             	lea    (%eax,%eax,4),%edx
80103541:	01 d2                	add    %edx,%edx
80103543:	01 d0                	add    %edx,%eax
80103545:	c1 e0 04             	shl    $0x4,%eax
80103548:	05 80 13 11 80       	add    $0x80111380,%eax
8010354d:	83 c4 10             	add    $0x10,%esp
80103550:	bb 80 13 11 80       	mov    $0x80111380,%ebx
80103555:	39 d8                	cmp    %ebx,%eax
80103557:	76 6b                	jbe    801035c4 <main+0x104>
80103559:	8d 76 00             	lea    0x0(%esi),%esi
    if(c == mycpu())  // We've started already.
8010355c:	e8 2b 07 00 00       	call   80103c8c <mycpu>
80103561:	39 d8                	cmp    %ebx,%eax
80103563:	74 41                	je     801035a6 <main+0xe6>
      continue;

    // Tell entryother.S what stack to use, where to enter, and what
    // pgdir to use. We cannot use kpgdir yet, because the AP processor
    // is running in low  memory, so we use entrypgdir for the APs too.
    stack = kalloc();
80103565:	e8 f2 f6 ff ff       	call   80102c5c <kalloc>
    *(void**)(code-4) = stack + KSTACKSIZE;
8010356a:	05 00 10 00 00       	add    $0x1000,%eax
8010356f:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
    *(void**)(code-8) = mpenter;
80103574:	c7 05 f8 6f 00 80 a4 	movl   $0x801034a4,0x80006ff8
8010357b:	34 10 80 
    *(int**)(code-12) = (void *) V2P(entrypgdir);
8010357e:	c7 05 f4 6f 00 80 00 	movl   $0x108000,0x80006ff4
80103585:	80 10 00 

    lapicstartap(c->apicid, V2P(code));
80103588:	83 ec 08             	sub    $0x8,%esp
8010358b:	68 00 70 00 00       	push   $0x7000
80103590:	0f b6 03             	movzbl (%ebx),%eax
80103593:	50                   	push   %eax
80103594:	e8 7b f9 ff ff       	call   80102f14 <lapicstartap>
80103599:	83 c4 10             	add    $0x10,%esp

    // wait for cpu to finish mpmain()
    while(c->started == 0)
8010359c:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
801035a2:	85 c0                	test   %eax,%eax
801035a4:	74 f6                	je     8010359c <main+0xdc>
  for(c = cpus; c < cpus+ncpu; c++){
801035a6:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
801035ac:	a1 00 19 11 80       	mov    0x80111900,%eax
801035b1:	8d 14 80             	lea    (%eax,%eax,4),%edx
801035b4:	01 d2                	add    %edx,%edx
801035b6:	01 d0                	add    %edx,%eax
801035b8:	c1 e0 04             	shl    $0x4,%eax
801035bb:	05 80 13 11 80       	add    $0x80111380,%eax
801035c0:	39 c3                	cmp    %eax,%ebx
801035c2:	72 98                	jb     8010355c <main+0x9c>
  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
801035c4:	83 ec 08             	sub    $0x8,%esp
801035c7:	68 00 00 00 8e       	push   $0x8e000000
801035cc:	68 00 00 40 80       	push   $0x80400000
801035d1:	e8 32 f6 ff ff       	call   80102c08 <kinit2>
  userinit();      // first user process
801035d6:	e8 7d 07 00 00       	call   80103d58 <userinit>
  mpmain();        // finish this processor's setup
801035db:	e8 88 fe ff ff       	call   80103468 <mpmain>

801035e0 <mpsearch1>:
}

// Look for an MP structure in the len bytes at addr.
static struct mp*
mpsearch1(uint a, int len)
{
801035e0:	55                   	push   %ebp
801035e1:	89 e5                	mov    %esp,%ebp
801035e3:	57                   	push   %edi
801035e4:	56                   	push   %esi
801035e5:	53                   	push   %ebx
801035e6:	83 ec 0c             	sub    $0xc,%esp
  uchar *e, *p, *addr;

  addr = P2V(a);
801035e9:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
  e = addr+len;
801035ef:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
  for(p = addr; p < e; p += sizeof(struct mp))
801035f2:	39 de                	cmp    %ebx,%esi
801035f4:	72 0b                	jb     80103601 <mpsearch1+0x21>
801035f6:	eb 40                	jmp    80103638 <mpsearch1+0x58>
801035f8:	8d 7e 10             	lea    0x10(%esi),%edi
801035fb:	89 fe                	mov    %edi,%esi
801035fd:	39 fb                	cmp    %edi,%ebx
801035ff:	76 37                	jbe    80103638 <mpsearch1+0x58>
    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
80103601:	50                   	push   %eax
80103602:	6a 04                	push   $0x4
80103604:	68 18 69 10 80       	push   $0x80106918
80103609:	56                   	push   %esi
8010360a:	e8 45 12 00 00       	call   80104854 <memcmp>
8010360f:	83 c4 10             	add    $0x10,%esp
80103612:	85 c0                	test   %eax,%eax
80103614:	75 e2                	jne    801035f8 <mpsearch1+0x18>
80103616:	89 f2                	mov    %esi,%edx
80103618:	8d 7e 10             	lea    0x10(%esi),%edi
8010361b:	31 c9                	xor    %ecx,%ecx
8010361d:	8d 76 00             	lea    0x0(%esi),%esi
    sum += addr[i];
80103620:	0f b6 02             	movzbl (%edx),%eax
80103623:	01 c1                	add    %eax,%ecx
80103625:	42                   	inc    %edx
  for(i=0; i<len; i++)
80103626:	39 fa                	cmp    %edi,%edx
80103628:	75 f6                	jne    80103620 <mpsearch1+0x40>
    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
8010362a:	84 c9                	test   %cl,%cl
8010362c:	75 cd                	jne    801035fb <mpsearch1+0x1b>
      return (struct mp*)p;
8010362e:	89 f0                	mov    %esi,%eax
  return 0;
}
80103630:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103633:	5b                   	pop    %ebx
80103634:	5e                   	pop    %esi
80103635:	5f                   	pop    %edi
80103636:	5d                   	pop    %ebp
80103637:	c3                   	ret    
  return 0;
80103638:	31 c0                	xor    %eax,%eax
}
8010363a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010363d:	5b                   	pop    %ebx
8010363e:	5e                   	pop    %esi
8010363f:	5f                   	pop    %edi
80103640:	5d                   	pop    %ebp
80103641:	c3                   	ret    
80103642:	66 90                	xchg   %ax,%ax

80103644 <mpinit>:
  return conf;
}

void
mpinit(void)
{
80103644:	55                   	push   %ebp
80103645:	89 e5                	mov    %esp,%ebp
80103647:	57                   	push   %edi
80103648:	56                   	push   %esi
80103649:	53                   	push   %ebx
8010364a:	83 ec 1c             	sub    $0x1c,%esp
  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
8010364d:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
80103654:	c1 e0 08             	shl    $0x8,%eax
80103657:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
8010365e:	09 d0                	or     %edx,%eax
80103660:	c1 e0 04             	shl    $0x4,%eax
80103663:	75 1b                	jne    80103680 <mpinit+0x3c>
    p = ((bda[0x14]<<8)|bda[0x13])*1024;
80103665:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
8010366c:	c1 e0 08             	shl    $0x8,%eax
8010366f:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
80103676:	09 d0                	or     %edx,%eax
80103678:	c1 e0 0a             	shl    $0xa,%eax
    if((mp = mpsearch1(p-1024, 1024)))
8010367b:	2d 00 04 00 00       	sub    $0x400,%eax
80103680:	ba 00 04 00 00       	mov    $0x400,%edx
80103685:	e8 56 ff ff ff       	call   801035e0 <mpsearch1>
8010368a:	85 c0                	test   %eax,%eax
8010368c:	0f 84 20 01 00 00    	je     801037b2 <mpinit+0x16e>
80103692:	89 c7                	mov    %eax,%edi
  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
80103694:	8b 77 04             	mov    0x4(%edi),%esi
80103697:	85 f6                	test   %esi,%esi
80103699:	0f 84 2c 01 00 00    	je     801037cb <mpinit+0x187>
  conf = (struct mpconf*) P2V((uint) mp->physaddr);
8010369f:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
801036a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  if(memcmp(conf, "PCMP", 4) != 0)
801036a8:	52                   	push   %edx
801036a9:	6a 04                	push   $0x4
801036ab:	68 1d 69 10 80       	push   $0x8010691d
801036b0:	50                   	push   %eax
801036b1:	e8 9e 11 00 00       	call   80104854 <memcmp>
801036b6:	83 c4 10             	add    $0x10,%esp
801036b9:	85 c0                	test   %eax,%eax
801036bb:	0f 85 0a 01 00 00    	jne    801037cb <mpinit+0x187>
  if(conf->version != 1 && conf->version != 4)
801036c1:	8a 86 06 00 00 80    	mov    -0x7ffffffa(%esi),%al
801036c7:	3c 01                	cmp    $0x1,%al
801036c9:	74 08                	je     801036d3 <mpinit+0x8f>
801036cb:	3c 04                	cmp    $0x4,%al
801036cd:	0f 85 f8 00 00 00    	jne    801037cb <mpinit+0x187>
  if(sum((uchar*)conf, conf->length) != 0)
801036d3:	0f b7 86 04 00 00 80 	movzwl -0x7ffffffc(%esi),%eax
  for(i=0; i<len; i++)
801036da:	66 85 c0             	test   %ax,%ax
801036dd:	74 1f                	je     801036fe <mpinit+0xba>
801036df:	89 f2                	mov    %esi,%edx
801036e1:	01 f0                	add    %esi,%eax
801036e3:	31 c9                	xor    %ecx,%ecx
801036e5:	8d 76 00             	lea    0x0(%esi),%esi
    sum += addr[i];
801036e8:	0f b6 9a 00 00 00 80 	movzbl -0x80000000(%edx),%ebx
801036ef:	01 d9                	add    %ebx,%ecx
801036f1:	42                   	inc    %edx
  for(i=0; i<len; i++)
801036f2:	39 c2                	cmp    %eax,%edx
801036f4:	75 f2                	jne    801036e8 <mpinit+0xa4>
  if(sum((uchar*)conf, conf->length) != 0)
801036f6:	84 c9                	test   %cl,%cl
801036f8:	0f 85 cd 00 00 00    	jne    801037cb <mpinit+0x187>
  struct mp *mp;
  struct mpconf *conf;
  struct mpproc *proc;
  struct mpioapic *ioapic;

  if((conf = mpconfig(&mp)) == 0)
801036fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103701:	85 c0                	test   %eax,%eax
80103703:	0f 84 c2 00 00 00    	je     801037cb <mpinit+0x187>
    panic("Expect to run on an SMP");
  ismp = 1;
  lapic = (uint*)conf->lapicaddr;
80103709:	8b 86 24 00 00 80    	mov    -0x7fffffdc(%esi),%eax
8010370f:	a3 7c 12 11 80       	mov    %eax,0x8011127c
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
80103714:	8d 96 2c 00 00 80    	lea    -0x7fffffd4(%esi),%edx
8010371a:	0f b7 8e 04 00 00 80 	movzwl -0x7ffffffc(%esi),%ecx
80103721:	03 4d e4             	add    -0x1c(%ebp),%ecx
  ismp = 1;
80103724:	bb 01 00 00 00       	mov    $0x1,%ebx
80103729:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
8010372c:	39 d1                	cmp    %edx,%ecx
8010372e:	76 1b                	jbe    8010374b <mpinit+0x107>
80103730:	0f b6 02             	movzbl (%edx),%eax
    switch(*p){
80103733:	3c 04                	cmp    $0x4,%al
80103735:	0f 87 9d 00 00 00    	ja     801037d8 <mpinit+0x194>
8010373b:	ff 24 85 5c 69 10 80 	jmp    *-0x7fef96a4(,%eax,4)
80103742:	66 90                	xchg   %ax,%ax
      p += sizeof(struct mpioapic);
      continue;
    case MPBUS:
    case MPIOINTR:
    case MPLINTR:
      p += 8;
80103744:	83 c2 08             	add    $0x8,%edx
  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
80103747:	39 d1                	cmp    %edx,%ecx
80103749:	77 e5                	ja     80103730 <mpinit+0xec>
8010374b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
    default:
      ismp = 0;
      break;
    }
  }
  if(!ismp)
8010374e:	85 db                	test   %ebx,%ebx
80103750:	74 53                	je     801037a5 <mpinit+0x161>
    panic("Didn't find a suitable machine");

  if(mp->imcrp){
80103752:	80 7f 0c 00          	cmpb   $0x0,0xc(%edi)
80103756:	74 0f                	je     80103767 <mpinit+0x123>
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103758:	ba 22 00 00 00       	mov    $0x22,%edx
8010375d:	b0 70                	mov    $0x70,%al
8010375f:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80103760:	b2 23                	mov    $0x23,%dl
80103762:	ec                   	in     (%dx),%al
    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
    // But it would on real hardware.
    outb(0x22, 0x70);   // Select IMCR
    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
80103763:	83 c8 01             	or     $0x1,%eax
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80103766:	ee                   	out    %al,(%dx)
  }
}
80103767:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010376a:	5b                   	pop    %ebx
8010376b:	5e                   	pop    %esi
8010376c:	5f                   	pop    %edi
8010376d:	5d                   	pop    %ebp
8010376e:	c3                   	ret    
8010376f:	90                   	nop
      if(ncpu < NCPU) {
80103770:	a1 00 19 11 80       	mov    0x80111900,%eax
80103775:	83 f8 07             	cmp    $0x7,%eax
80103778:	7f 19                	jg     80103793 <mpinit+0x14f>
        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
8010377a:	8d 34 80             	lea    (%eax,%eax,4),%esi
8010377d:	01 f6                	add    %esi,%esi
8010377f:	01 f0                	add    %esi,%eax
80103781:	c1 e0 04             	shl    $0x4,%eax
80103784:	8a 5a 01             	mov    0x1(%edx),%bl
80103787:	88 98 80 13 11 80    	mov    %bl,-0x7feeec80(%eax)
        ncpu++;
8010378d:	ff 05 00 19 11 80    	incl   0x80111900
      p += sizeof(struct mpproc);
80103793:	83 c2 14             	add    $0x14,%edx
      continue;
80103796:	eb 94                	jmp    8010372c <mpinit+0xe8>
      ioapicid = ioapic->apicno;
80103798:	8a 42 01             	mov    0x1(%edx),%al
8010379b:	a2 60 13 11 80       	mov    %al,0x80111360
      p += sizeof(struct mpioapic);
801037a0:	83 c2 08             	add    $0x8,%edx
      continue;
801037a3:	eb 87                	jmp    8010372c <mpinit+0xe8>
    panic("Didn't find a suitable machine");
801037a5:	83 ec 0c             	sub    $0xc,%esp
801037a8:	68 3c 69 10 80       	push   $0x8010693c
801037ad:	e8 32 d6 ff ff       	call   80100de4 <panic>
  return mpsearch1(0xF0000, 0x10000);
801037b2:	ba 00 00 01 00       	mov    $0x10000,%edx
801037b7:	b8 00 00 0f 00       	mov    $0xf0000,%eax
801037bc:	e8 1f fe ff ff       	call   801035e0 <mpsearch1>
801037c1:	89 c7                	mov    %eax,%edi
  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
801037c3:	85 c0                	test   %eax,%eax
801037c5:	0f 85 c9 fe ff ff    	jne    80103694 <mpinit+0x50>
    panic("Expect to run on an SMP");
801037cb:	83 ec 0c             	sub    $0xc,%esp
801037ce:	68 22 69 10 80       	push   $0x80106922
801037d3:	e8 0c d6 ff ff       	call   80100de4 <panic>
      ismp = 0;
801037d8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
801037df:	e9 4f ff ff ff       	jmp    80103733 <mpinit+0xef>

801037e4 <picinit>:
#define IO_PIC2         0xA0    // Slave (IRQs 8-15)

// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
void
picinit(void)
{
801037e4:	55                   	push   %ebp
801037e5:	89 e5                	mov    %esp,%ebp
801037e7:	ba 21 00 00 00       	mov    $0x21,%edx
801037ec:	b0 ff                	mov    $0xff,%al
801037ee:	ee                   	out    %al,(%dx)
801037ef:	b2 a1                	mov    $0xa1,%dl
801037f1:	ee                   	out    %al,(%dx)
  // mask all interrupts
  outb(IO_PIC1+1, 0xFF);
  outb(IO_PIC2+1, 0xFF);
}
801037f2:	5d                   	pop    %ebp
801037f3:	c3                   	ret    

801037f4 <pipealloc>:
  int writeopen;  // write fd is still open
};

int
pipealloc(struct file **f0, struct file **f1)
{
801037f4:	55                   	push   %ebp
801037f5:	89 e5                	mov    %esp,%ebp
801037f7:	56                   	push   %esi
801037f8:	53                   	push   %ebx
801037f9:	83 ec 10             	sub    $0x10,%esp
801037fc:	8b 5d 08             	mov    0x8(%ebp),%ebx
801037ff:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct pipe *p;

  p = 0;
  *f0 = *f1 = 0;
80103802:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
80103808:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
8010380e:	e8 01 df ff ff       	call   80101714 <filealloc>
80103813:	89 03                	mov    %eax,(%ebx)
80103815:	85 c0                	test   %eax,%eax
80103817:	0f 84 a9 00 00 00    	je     801038c6 <pipealloc+0xd2>
8010381d:	e8 f2 de ff ff       	call   80101714 <filealloc>
80103822:	89 06                	mov    %eax,(%esi)
80103824:	85 c0                	test   %eax,%eax
80103826:	0f 84 88 00 00 00    	je     801038b4 <pipealloc+0xc0>
    goto bad;
  if((p = (struct pipe*)kalloc()) == 0)
8010382c:	e8 2b f4 ff ff       	call   80102c5c <kalloc>
80103831:	85 c0                	test   %eax,%eax
80103833:	0f 84 ab 00 00 00    	je     801038e4 <pipealloc+0xf0>
    goto bad;
  p->readopen = 1;
80103839:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
80103840:	00 00 00 
  p->writeopen = 1;
80103843:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
8010384a:	00 00 00 
  p->nwrite = 0;
8010384d:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
80103854:	00 00 00 
  p->nread = 0;
80103857:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
8010385e:	00 00 00 
  initlock(&p->lock, "pipe");
80103861:	83 ec 08             	sub    $0x8,%esp
80103864:	68 70 69 10 80       	push   $0x80106970
80103869:	50                   	push   %eax
8010386a:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010386d:	e8 b2 0d 00 00       	call   80104624 <initlock>
  (*f0)->type = FD_PIPE;
80103872:	8b 13                	mov    (%ebx),%edx
80103874:	c7 02 01 00 00 00    	movl   $0x1,(%edx)
  (*f0)->readable = 1;
8010387a:	8b 13                	mov    (%ebx),%edx
8010387c:	c6 42 08 01          	movb   $0x1,0x8(%edx)
  (*f0)->writable = 0;
80103880:	8b 13                	mov    (%ebx),%edx
80103882:	c6 42 09 00          	movb   $0x0,0x9(%edx)
  (*f0)->pipe = p;
80103886:	8b 13                	mov    (%ebx),%edx
80103888:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010388b:	89 42 0c             	mov    %eax,0xc(%edx)
  (*f1)->type = FD_PIPE;
8010388e:	8b 16                	mov    (%esi),%edx
80103890:	c7 02 01 00 00 00    	movl   $0x1,(%edx)
  (*f1)->readable = 0;
80103896:	8b 16                	mov    (%esi),%edx
80103898:	c6 42 08 00          	movb   $0x0,0x8(%edx)
  (*f1)->writable = 1;
8010389c:	8b 16                	mov    (%esi),%edx
8010389e:	c6 42 09 01          	movb   $0x1,0x9(%edx)
  (*f1)->pipe = p;
801038a2:	8b 16                	mov    (%esi),%edx
801038a4:	89 42 0c             	mov    %eax,0xc(%edx)
  return 0;
801038a7:	83 c4 10             	add    $0x10,%esp
801038aa:	31 c0                	xor    %eax,%eax
  if(*f0)
    fileclose(*f0);
  if(*f1)
    fileclose(*f1);
  return -1;
}
801038ac:	8d 65 f8             	lea    -0x8(%ebp),%esp
801038af:	5b                   	pop    %ebx
801038b0:	5e                   	pop    %esi
801038b1:	5d                   	pop    %ebp
801038b2:	c3                   	ret    
801038b3:	90                   	nop
  if(*f0)
801038b4:	8b 03                	mov    (%ebx),%eax
801038b6:	85 c0                	test   %eax,%eax
801038b8:	74 1e                	je     801038d8 <pipealloc+0xe4>
    fileclose(*f0);
801038ba:	83 ec 0c             	sub    $0xc,%esp
801038bd:	50                   	push   %eax
801038be:	e8 f9 de ff ff       	call   801017bc <fileclose>
801038c3:	83 c4 10             	add    $0x10,%esp
  if(*f1)
801038c6:	8b 06                	mov    (%esi),%eax
801038c8:	85 c0                	test   %eax,%eax
801038ca:	74 0c                	je     801038d8 <pipealloc+0xe4>
    fileclose(*f1);
801038cc:	83 ec 0c             	sub    $0xc,%esp
801038cf:	50                   	push   %eax
801038d0:	e8 e7 de ff ff       	call   801017bc <fileclose>
801038d5:	83 c4 10             	add    $0x10,%esp
  return -1;
801038d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801038dd:	8d 65 f8             	lea    -0x8(%ebp),%esp
801038e0:	5b                   	pop    %ebx
801038e1:	5e                   	pop    %esi
801038e2:	5d                   	pop    %ebp
801038e3:	c3                   	ret    
  if(*f0)
801038e4:	8b 03                	mov    (%ebx),%eax
801038e6:	85 c0                	test   %eax,%eax
801038e8:	75 d0                	jne    801038ba <pipealloc+0xc6>
801038ea:	eb da                	jmp    801038c6 <pipealloc+0xd2>

801038ec <pipeclose>:

void
pipeclose(struct pipe *p, int writable)
{
801038ec:	55                   	push   %ebp
801038ed:	89 e5                	mov    %esp,%ebp
801038ef:	56                   	push   %esi
801038f0:	53                   	push   %ebx
801038f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
801038f4:	8b 75 0c             	mov    0xc(%ebp),%esi
  acquire(&p->lock);
801038f7:	83 ec 0c             	sub    $0xc,%esp
801038fa:	53                   	push   %ebx
801038fb:	e8 e8 0d 00 00       	call   801046e8 <acquire>
  if(writable){
80103900:	83 c4 10             	add    $0x10,%esp
80103903:	85 f6                	test   %esi,%esi
80103905:	74 41                	je     80103948 <pipeclose+0x5c>
    p->writeopen = 0;
80103907:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
8010390e:	00 00 00 
    wakeup(&p->nread);
80103911:	83 ec 0c             	sub    $0xc,%esp
80103914:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
8010391a:	50                   	push   %eax
8010391b:	e8 98 0a 00 00       	call   801043b8 <wakeup>
80103920:	83 c4 10             	add    $0x10,%esp
  } else {
    p->readopen = 0;
    wakeup(&p->nwrite);
  }
  if(p->readopen == 0 && p->writeopen == 0){
80103923:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
80103929:	85 d2                	test   %edx,%edx
8010392b:	75 0a                	jne    80103937 <pipeclose+0x4b>
8010392d:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
80103933:	85 c0                	test   %eax,%eax
80103935:	74 31                	je     80103968 <pipeclose+0x7c>
    release(&p->lock);
    kfree((char*)p);
  } else
    release(&p->lock);
80103937:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
8010393a:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010393d:	5b                   	pop    %ebx
8010393e:	5e                   	pop    %esi
8010393f:	5d                   	pop    %ebp
    release(&p->lock);
80103940:	e9 77 0e 00 00       	jmp    801047bc <release>
80103945:	8d 76 00             	lea    0x0(%esi),%esi
    p->readopen = 0;
80103948:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
8010394f:	00 00 00 
    wakeup(&p->nwrite);
80103952:	83 ec 0c             	sub    $0xc,%esp
80103955:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
8010395b:	50                   	push   %eax
8010395c:	e8 57 0a 00 00       	call   801043b8 <wakeup>
80103961:	83 c4 10             	add    $0x10,%esp
80103964:	eb bd                	jmp    80103923 <pipeclose+0x37>
80103966:	66 90                	xchg   %ax,%ax
    release(&p->lock);
80103968:	83 ec 0c             	sub    $0xc,%esp
8010396b:	53                   	push   %ebx
8010396c:	e8 4b 0e 00 00       	call   801047bc <release>
    kfree((char*)p);
80103971:	83 c4 10             	add    $0x10,%esp
80103974:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
80103977:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010397a:	5b                   	pop    %ebx
8010397b:	5e                   	pop    %esi
8010397c:	5d                   	pop    %ebp
    kfree((char*)p);
8010397d:	e9 4e f1 ff ff       	jmp    80102ad0 <kfree>
80103982:	66 90                	xchg   %ax,%ax

80103984 <pipewrite>:

//PAGEBREAK: 40
int
pipewrite(struct pipe *p, char *addr, int n)
{
80103984:	55                   	push   %ebp
80103985:	89 e5                	mov    %esp,%ebp
80103987:	57                   	push   %edi
80103988:	56                   	push   %esi
80103989:	53                   	push   %ebx
8010398a:	83 ec 28             	sub    $0x28,%esp
8010398d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  int i;

  acquire(&p->lock);
80103990:	53                   	push   %ebx
80103991:	e8 52 0d 00 00       	call   801046e8 <acquire>
  for(i = 0; i < n; i++){
80103996:	83 c4 10             	add    $0x10,%esp
80103999:	8b 45 10             	mov    0x10(%ebp),%eax
8010399c:	85 c0                	test   %eax,%eax
8010399e:	0f 8e b6 00 00 00    	jle    80103a5a <pipewrite+0xd6>
801039a4:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
801039aa:	8b 4d 0c             	mov    0xc(%ebp),%ecx
801039ad:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
801039b0:	03 4d 10             	add    0x10(%ebp),%ecx
801039b3:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
      if(p->readopen == 0 || myproc()->killed){
        release(&p->lock);
        return -1;
      }
      wakeup(&p->nread);
801039b6:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
801039bc:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
801039c2:	8b 8b 34 02 00 00    	mov    0x234(%ebx),%ecx
801039c8:	8d 91 00 02 00 00    	lea    0x200(%ecx),%edx
801039ce:	39 d0                	cmp    %edx,%eax
801039d0:	74 38                	je     80103a0a <pipewrite+0x86>
801039d2:	eb 59                	jmp    80103a2d <pipewrite+0xa9>
      if(p->readopen == 0 || myproc()->killed){
801039d4:	e8 5f 03 00 00       	call   80103d38 <myproc>
801039d9:	8b 48 24             	mov    0x24(%eax),%ecx
801039dc:	85 c9                	test   %ecx,%ecx
801039de:	75 34                	jne    80103a14 <pipewrite+0x90>
      wakeup(&p->nread);
801039e0:	83 ec 0c             	sub    $0xc,%esp
801039e3:	57                   	push   %edi
801039e4:	e8 cf 09 00 00       	call   801043b8 <wakeup>
      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
801039e9:	58                   	pop    %eax
801039ea:	5a                   	pop    %edx
801039eb:	53                   	push   %ebx
801039ec:	56                   	push   %esi
801039ed:	e8 3a 08 00 00       	call   8010422c <sleep>
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
801039f2:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
801039f8:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
801039fe:	05 00 02 00 00       	add    $0x200,%eax
80103a03:	83 c4 10             	add    $0x10,%esp
80103a06:	39 c2                	cmp    %eax,%edx
80103a08:	75 26                	jne    80103a30 <pipewrite+0xac>
      if(p->readopen == 0 || myproc()->killed){
80103a0a:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
80103a10:	85 c0                	test   %eax,%eax
80103a12:	75 c0                	jne    801039d4 <pipewrite+0x50>
        release(&p->lock);
80103a14:	83 ec 0c             	sub    $0xc,%esp
80103a17:	53                   	push   %ebx
80103a18:	e8 9f 0d 00 00       	call   801047bc <release>
        return -1;
80103a1d:	83 c4 10             	add    $0x10,%esp
80103a20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    p->data[p->nwrite++ % PIPESIZE] = addr[i];
  }
  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
  release(&p->lock);
  return n;
}
80103a25:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103a28:	5b                   	pop    %ebx
80103a29:	5e                   	pop    %esi
80103a2a:	5f                   	pop    %edi
80103a2b:	5d                   	pop    %ebp
80103a2c:	c3                   	ret    
    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
80103a2d:	89 c2                	mov    %eax,%edx
80103a2f:	90                   	nop
    p->data[p->nwrite++ % PIPESIZE] = addr[i];
80103a30:	8d 42 01             	lea    0x1(%edx),%eax
80103a33:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
80103a39:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80103a3c:	8a 09                	mov    (%ecx),%cl
80103a3e:	88 4d df             	mov    %cl,-0x21(%ebp)
80103a41:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
80103a47:	88 4c 13 34          	mov    %cl,0x34(%ebx,%edx,1)
80103a4b:	ff 45 e4             	incl   -0x1c(%ebp)
80103a4e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  for(i = 0; i < n; i++){
80103a51:	3b 4d e0             	cmp    -0x20(%ebp),%ecx
80103a54:	0f 85 68 ff ff ff    	jne    801039c2 <pipewrite+0x3e>
  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
80103a5a:	83 ec 0c             	sub    $0xc,%esp
80103a5d:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
80103a63:	50                   	push   %eax
80103a64:	e8 4f 09 00 00       	call   801043b8 <wakeup>
  release(&p->lock);
80103a69:	89 1c 24             	mov    %ebx,(%esp)
80103a6c:	e8 4b 0d 00 00       	call   801047bc <release>
  return n;
80103a71:	83 c4 10             	add    $0x10,%esp
80103a74:	8b 45 10             	mov    0x10(%ebp),%eax
80103a77:	eb ac                	jmp    80103a25 <pipewrite+0xa1>
80103a79:	8d 76 00             	lea    0x0(%esi),%esi

80103a7c <piperead>:

int
piperead(struct pipe *p, char *addr, int n)
{
80103a7c:	55                   	push   %ebp
80103a7d:	89 e5                	mov    %esp,%ebp
80103a7f:	57                   	push   %edi
80103a80:	56                   	push   %esi
80103a81:	53                   	push   %ebx
80103a82:	83 ec 18             	sub    $0x18,%esp
80103a85:	8b 5d 08             	mov    0x8(%ebp),%ebx
80103a88:	8b 7d 0c             	mov    0xc(%ebp),%edi
  int i;

  acquire(&p->lock);
80103a8b:	53                   	push   %ebx
80103a8c:	e8 57 0c 00 00       	call   801046e8 <acquire>
  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
80103a91:	83 c4 10             	add    $0x10,%esp
80103a94:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80103a9a:	3b 83 38 02 00 00    	cmp    0x238(%ebx),%eax
80103aa0:	0f 85 8a 00 00 00    	jne    80103b30 <piperead+0xb4>
80103aa6:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
80103aac:	85 c0                	test   %eax,%eax
80103aae:	74 54                	je     80103b04 <piperead+0x88>
    if(myproc()->killed){
      release(&p->lock);
      return -1;
    }
    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
80103ab0:	8d b3 34 02 00 00    	lea    0x234(%ebx),%esi
80103ab6:	eb 25                	jmp    80103add <piperead+0x61>
80103ab8:	83 ec 08             	sub    $0x8,%esp
80103abb:	53                   	push   %ebx
80103abc:	56                   	push   %esi
80103abd:	e8 6a 07 00 00       	call   8010422c <sleep>
  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
80103ac2:	83 c4 10             	add    $0x10,%esp
80103ac5:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80103acb:	3b 83 38 02 00 00    	cmp    0x238(%ebx),%eax
80103ad1:	75 5d                	jne    80103b30 <piperead+0xb4>
80103ad3:	8b 8b 40 02 00 00    	mov    0x240(%ebx),%ecx
80103ad9:	85 c9                	test   %ecx,%ecx
80103adb:	74 27                	je     80103b04 <piperead+0x88>
    if(myproc()->killed){
80103add:	e8 56 02 00 00       	call   80103d38 <myproc>
80103ae2:	8b 40 24             	mov    0x24(%eax),%eax
80103ae5:	85 c0                	test   %eax,%eax
80103ae7:	74 cf                	je     80103ab8 <piperead+0x3c>
      release(&p->lock);
80103ae9:	83 ec 0c             	sub    $0xc,%esp
80103aec:	53                   	push   %ebx
80103aed:	e8 ca 0c 00 00       	call   801047bc <release>
      return -1;
80103af2:	83 c4 10             	add    $0x10,%esp
80103af5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    addr[i] = p->data[p->nread++ % PIPESIZE];
  }
  wakeup(&p->nwrite);  //DOC: piperead-wakeup
  release(&p->lock);
  return i;
}
80103afa:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103afd:	5b                   	pop    %ebx
80103afe:	5e                   	pop    %esi
80103aff:	5f                   	pop    %edi
80103b00:	5d                   	pop    %ebp
80103b01:	c3                   	ret    
80103b02:	66 90                	xchg   %ax,%ax
  for(i = 0; i < n; i++){  //DOC: piperead-copy
80103b04:	c7 45 10 00 00 00 00 	movl   $0x0,0x10(%ebp)
  wakeup(&p->nwrite);  //DOC: piperead-wakeup
80103b0b:	83 ec 0c             	sub    $0xc,%esp
80103b0e:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
80103b14:	50                   	push   %eax
80103b15:	e8 9e 08 00 00       	call   801043b8 <wakeup>
  release(&p->lock);
80103b1a:	89 1c 24             	mov    %ebx,(%esp)
80103b1d:	e8 9a 0c 00 00       	call   801047bc <release>
  return i;
80103b22:	83 c4 10             	add    $0x10,%esp
80103b25:	8b 45 10             	mov    0x10(%ebp),%eax
}
80103b28:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103b2b:	5b                   	pop    %ebx
80103b2c:	5e                   	pop    %esi
80103b2d:	5f                   	pop    %edi
80103b2e:	5d                   	pop    %ebp
80103b2f:	c3                   	ret    
  for(i = 0; i < n; i++){  //DOC: piperead-copy
80103b30:	8b 55 10             	mov    0x10(%ebp),%edx
    if(p->nread == p->nwrite)
80103b33:	31 c9                	xor    %ecx,%ecx
  for(i = 0; i < n; i++){  //DOC: piperead-copy
80103b35:	85 d2                	test   %edx,%edx
80103b37:	7e cb                	jle    80103b04 <piperead+0x88>
80103b39:	8d 76 00             	lea    0x0(%esi),%esi
    addr[i] = p->data[p->nread++ % PIPESIZE];
80103b3c:	8d 70 01             	lea    0x1(%eax),%esi
80103b3f:	89 b3 34 02 00 00    	mov    %esi,0x234(%ebx)
80103b45:	25 ff 01 00 00       	and    $0x1ff,%eax
80103b4a:	8a 44 03 34          	mov    0x34(%ebx,%eax,1),%al
80103b4e:	88 04 0f             	mov    %al,(%edi,%ecx,1)
  for(i = 0; i < n; i++){  //DOC: piperead-copy
80103b51:	41                   	inc    %ecx
80103b52:	3b 4d 10             	cmp    0x10(%ebp),%ecx
80103b55:	74 b4                	je     80103b0b <piperead+0x8f>
    if(p->nread == p->nwrite)
80103b57:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80103b5d:	3b 83 38 02 00 00    	cmp    0x238(%ebx),%eax
80103b63:	75 d7                	jne    80103b3c <piperead+0xc0>
80103b65:	89 4d 10             	mov    %ecx,0x10(%ebp)
80103b68:	eb a1                	jmp    80103b0b <piperead+0x8f>
80103b6a:	66 90                	xchg   %ax,%ax

80103b6c <allocproc>:
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
80103b6c:	55                   	push   %ebp
80103b6d:	89 e5                	mov    %esp,%ebp
80103b6f:	53                   	push   %ebx
80103b70:	83 ec 10             	sub    $0x10,%esp
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);
80103b73:	68 20 19 11 80       	push   $0x80111920
80103b78:	e8 6b 0b 00 00       	call   801046e8 <acquire>
80103b7d:	83 c4 10             	add    $0x10,%esp

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80103b80:	bb 54 19 11 80       	mov    $0x80111954,%ebx
80103b85:	eb 0c                	jmp    80103b93 <allocproc+0x27>
80103b87:	90                   	nop
80103b88:	83 c3 7c             	add    $0x7c,%ebx
80103b8b:	81 fb 54 38 11 80    	cmp    $0x80113854,%ebx
80103b91:	74 75                	je     80103c08 <allocproc+0x9c>
    if(p->state == UNUSED)
80103b93:	8b 4b 0c             	mov    0xc(%ebx),%ecx
80103b96:	85 c9                	test   %ecx,%ecx
80103b98:	75 ee                	jne    80103b88 <allocproc+0x1c>

  release(&ptable.lock);
  return 0;

found:
  p->state = EMBRYO;
80103b9a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
  p->pid = nextpid++;
80103ba1:	a1 04 90 10 80       	mov    0x80109004,%eax
80103ba6:	8d 50 01             	lea    0x1(%eax),%edx
80103ba9:	89 15 04 90 10 80    	mov    %edx,0x80109004
80103baf:	89 43 10             	mov    %eax,0x10(%ebx)

  release(&ptable.lock);
80103bb2:	83 ec 0c             	sub    $0xc,%esp
80103bb5:	68 20 19 11 80       	push   $0x80111920
80103bba:	e8 fd 0b 00 00       	call   801047bc <release>

  // Allocate kernel stack.
  if((p->kstack = kalloc()) == 0){
80103bbf:	e8 98 f0 ff ff       	call   80102c5c <kalloc>
80103bc4:	89 43 08             	mov    %eax,0x8(%ebx)
80103bc7:	83 c4 10             	add    $0x10,%esp
80103bca:	85 c0                	test   %eax,%eax
80103bcc:	74 51                	je     80103c1f <allocproc+0xb3>
    return 0;
  }
  sp = p->kstack + KSTACKSIZE;

  // Leave room for trap frame.
  sp -= sizeof *p->tf;
80103bce:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
80103bd4:	89 53 18             	mov    %edx,0x18(%ebx)
  p->tf = (struct trapframe*)sp;

  // Set up new context to start executing at forkret,
  // which returns to trapret.
  sp -= 4;
  *(uint*)sp = (uint)trapret;
80103bd7:	c7 80 b0 0f 00 00 61 	movl   $0x80100061,0xfb0(%eax)
80103bde:	00 10 80 

  sp -= sizeof *p->context;
80103be1:	05 9c 0f 00 00       	add    $0xf9c,%eax
  p->context = (struct context*)sp;
80103be6:	89 43 1c             	mov    %eax,0x1c(%ebx)
  memset(p->context, 0, sizeof *p->context);
80103be9:	52                   	push   %edx
80103bea:	6a 14                	push   $0x14
80103bec:	6a 00                	push   $0x0
80103bee:	50                   	push   %eax
80103bef:	e8 14 0c 00 00       	call   80104808 <memset>
  p->context->eip = (uint)forkret;
80103bf4:	8b 43 1c             	mov    0x1c(%ebx),%eax
80103bf7:	c7 40 10 28 3c 10 80 	movl   $0x80103c28,0x10(%eax)

  return p;
80103bfe:	83 c4 10             	add    $0x10,%esp
80103c01:	89 d8                	mov    %ebx,%eax
}
80103c03:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103c06:	c9                   	leave  
80103c07:	c3                   	ret    
  release(&ptable.lock);
80103c08:	83 ec 0c             	sub    $0xc,%esp
80103c0b:	68 20 19 11 80       	push   $0x80111920
80103c10:	e8 a7 0b 00 00       	call   801047bc <release>
  return 0;
80103c15:	83 c4 10             	add    $0x10,%esp
80103c18:	31 c0                	xor    %eax,%eax
}
80103c1a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103c1d:	c9                   	leave  
80103c1e:	c3                   	ret    
    p->state = UNUSED;
80103c1f:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
    return 0;
80103c26:	eb db                	jmp    80103c03 <allocproc+0x97>

80103c28 <forkret>:

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
80103c28:	55                   	push   %ebp
80103c29:	89 e5                	mov    %esp,%ebp
80103c2b:	83 ec 14             	sub    $0x14,%esp
  static int first = 1;
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);
80103c2e:	68 20 19 11 80       	push   $0x80111920
80103c33:	e8 84 0b 00 00       	call   801047bc <release>

  if (first) {
80103c38:	83 c4 10             	add    $0x10,%esp
80103c3b:	a1 00 90 10 80       	mov    0x80109000,%eax
80103c40:	85 c0                	test   %eax,%eax
80103c42:	75 04                	jne    80103c48 <forkret+0x20>
    iinit(ROOTDEV);
    initlog(ROOTDEV);
  }

  // Return to "caller", actually trapret (see allocproc).
}
80103c44:	c9                   	leave  
80103c45:	c3                   	ret    
80103c46:	66 90                	xchg   %ax,%ax
    first = 0;
80103c48:	c7 05 00 90 10 80 00 	movl   $0x0,0x80109000
80103c4f:	00 00 00 
    iinit(ROOTDEV);
80103c52:	83 ec 0c             	sub    $0xc,%esp
80103c55:	6a 01                	push   $0x1
80103c57:	e8 20 e1 ff ff       	call   80101d7c <iinit>
    initlog(ROOTDEV);
80103c5c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
80103c63:	e8 00 f5 ff ff       	call   80103168 <initlog>
80103c68:	83 c4 10             	add    $0x10,%esp
}
80103c6b:	c9                   	leave  
80103c6c:	c3                   	ret    
80103c6d:	8d 76 00             	lea    0x0(%esi),%esi

80103c70 <pinit>:
{
80103c70:	55                   	push   %ebp
80103c71:	89 e5                	mov    %esp,%ebp
80103c73:	83 ec 10             	sub    $0x10,%esp
  initlock(&ptable.lock, "ptable");
80103c76:	68 75 69 10 80       	push   $0x80106975
80103c7b:	68 20 19 11 80       	push   $0x80111920
80103c80:	e8 9f 09 00 00       	call   80104624 <initlock>
80103c85:	83 c4 10             	add    $0x10,%esp
}
80103c88:	c9                   	leave  
80103c89:	c3                   	ret    
80103c8a:	66 90                	xchg   %ax,%ax

80103c8c <mycpu>:
{
80103c8c:	55                   	push   %ebp
80103c8d:	89 e5                	mov    %esp,%ebp
80103c8f:	56                   	push   %esi
80103c90:	53                   	push   %ebx
  asm volatile("pushfl; popl %0" : "=r" (eflags));
80103c91:	9c                   	pushf  
80103c92:	58                   	pop    %eax
  if(readeflags()&FL_IF)
80103c93:	f6 c4 02             	test   $0x2,%ah
80103c96:	75 5e                	jne    80103cf6 <mycpu+0x6a>
  apicid = lapicid();
80103c98:	e8 3b f2 ff ff       	call   80102ed8 <lapicid>
  for (i = 0; i < ncpu; ++i) {
80103c9d:	8b 35 00 19 11 80    	mov    0x80111900,%esi
80103ca3:	85 f6                	test   %esi,%esi
80103ca5:	7e 42                	jle    80103ce9 <mycpu+0x5d>
    if (cpus[i].apicid == apicid)
80103ca7:	0f b6 15 80 13 11 80 	movzbl 0x80111380,%edx
80103cae:	39 c2                	cmp    %eax,%edx
80103cb0:	74 33                	je     80103ce5 <mycpu+0x59>
80103cb2:	b9 30 14 11 80       	mov    $0x80111430,%ecx
80103cb7:	31 d2                	xor    %edx,%edx
80103cb9:	8d 76 00             	lea    0x0(%esi),%esi
  for (i = 0; i < ncpu; ++i) {
80103cbc:	42                   	inc    %edx
80103cbd:	39 f2                	cmp    %esi,%edx
80103cbf:	74 28                	je     80103ce9 <mycpu+0x5d>
    if (cpus[i].apicid == apicid)
80103cc1:	0f b6 19             	movzbl (%ecx),%ebx
80103cc4:	81 c1 b0 00 00 00    	add    $0xb0,%ecx
80103cca:	39 c3                	cmp    %eax,%ebx
80103ccc:	75 ee                	jne    80103cbc <mycpu+0x30>
      return &cpus[i];
80103cce:	8d 04 92             	lea    (%edx,%edx,4),%eax
80103cd1:	01 c0                	add    %eax,%eax
80103cd3:	01 d0                	add    %edx,%eax
80103cd5:	c1 e0 04             	shl    $0x4,%eax
80103cd8:	8d 80 80 13 11 80    	lea    -0x7feeec80(%eax),%eax
}
80103cde:	8d 65 f8             	lea    -0x8(%ebp),%esp
80103ce1:	5b                   	pop    %ebx
80103ce2:	5e                   	pop    %esi
80103ce3:	5d                   	pop    %ebp
80103ce4:	c3                   	ret    
  for (i = 0; i < ncpu; ++i) {
80103ce5:	31 d2                	xor    %edx,%edx
80103ce7:	eb e5                	jmp    80103cce <mycpu+0x42>
  panic("unknown apicid\n");
80103ce9:	83 ec 0c             	sub    $0xc,%esp
80103cec:	68 7c 69 10 80       	push   $0x8010697c
80103cf1:	e8 ee d0 ff ff       	call   80100de4 <panic>
    panic("mycpu called with interrupts enabled\n");
80103cf6:	83 ec 0c             	sub    $0xc,%esp
80103cf9:	68 58 6a 10 80       	push   $0x80106a58
80103cfe:	e8 e1 d0 ff ff       	call   80100de4 <panic>
80103d03:	90                   	nop

80103d04 <cpuid>:
cpuid() {
80103d04:	55                   	push   %ebp
80103d05:	89 e5                	mov    %esp,%ebp
80103d07:	83 ec 08             	sub    $0x8,%esp
  return mycpu()-cpus;
80103d0a:	e8 7d ff ff ff       	call   80103c8c <mycpu>
80103d0f:	2d 80 13 11 80       	sub    $0x80111380,%eax
80103d14:	c1 f8 04             	sar    $0x4,%eax
80103d17:	8d 0c c0             	lea    (%eax,%eax,8),%ecx
80103d1a:	89 ca                	mov    %ecx,%edx
80103d1c:	c1 e2 05             	shl    $0x5,%edx
80103d1f:	29 ca                	sub    %ecx,%edx
80103d21:	8d 14 90             	lea    (%eax,%edx,4),%edx
80103d24:	8d 0c d0             	lea    (%eax,%edx,8),%ecx
80103d27:	89 ca                	mov    %ecx,%edx
80103d29:	c1 e2 0f             	shl    $0xf,%edx
80103d2c:	29 ca                	sub    %ecx,%edx
80103d2e:	8d 04 90             	lea    (%eax,%edx,4),%eax
80103d31:	f7 d8                	neg    %eax
}
80103d33:	c9                   	leave  
80103d34:	c3                   	ret    
80103d35:	8d 76 00             	lea    0x0(%esi),%esi

80103d38 <myproc>:
myproc(void) {
80103d38:	55                   	push   %ebp
80103d39:	89 e5                	mov    %esp,%ebp
80103d3b:	53                   	push   %ebx
80103d3c:	50                   	push   %eax
  pushcli();
80103d3d:	e8 6e 09 00 00       	call   801046b0 <pushcli>
  c = mycpu();
80103d42:	e8 45 ff ff ff       	call   80103c8c <mycpu>
  p = c->proc;
80103d47:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
  popcli();
80103d4d:	e8 06 0a 00 00       	call   80104758 <popcli>
}
80103d52:	89 d8                	mov    %ebx,%eax
80103d54:	5a                   	pop    %edx
80103d55:	5b                   	pop    %ebx
80103d56:	5d                   	pop    %ebp
80103d57:	c3                   	ret    

80103d58 <userinit>:
{
80103d58:	55                   	push   %ebp
80103d59:	89 e5                	mov    %esp,%ebp
80103d5b:	53                   	push   %ebx
80103d5c:	51                   	push   %ecx
  p = allocproc();
80103d5d:	e8 0a fe ff ff       	call   80103b6c <allocproc>
80103d62:	89 c3                	mov    %eax,%ebx
  initproc = p;
80103d64:	a3 b8 91 10 80       	mov    %eax,0x801091b8
  if((p->pgdir = setupkvm()) == 0)
80103d69:	e8 5e 24 00 00       	call   801061cc <setupkvm>
80103d6e:	89 43 04             	mov    %eax,0x4(%ebx)
80103d71:	85 c0                	test   %eax,%eax
80103d73:	0f 84 b3 00 00 00    	je     80103e2c <userinit+0xd4>
  inituvm(p->pgdir, _binary____initcode_initcode_start, (int)_binary____initcode_initcode_size);
80103d79:	52                   	push   %edx
80103d7a:	68 2c 00 00 00       	push   $0x2c
80103d7f:	68 60 90 10 80       	push   $0x80109060
80103d84:	50                   	push   %eax
80103d85:	e8 b2 21 00 00       	call   80105f3c <inituvm>
  p->sz = PGSIZE;
80103d8a:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
  memset(p->tf, 0, sizeof(*p->tf));
80103d90:	83 c4 0c             	add    $0xc,%esp
80103d93:	6a 4c                	push   $0x4c
80103d95:	6a 00                	push   $0x0
80103d97:	ff 73 18             	pushl  0x18(%ebx)
80103d9a:	e8 69 0a 00 00       	call   80104808 <memset>
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
80103d9f:	8b 43 18             	mov    0x18(%ebx),%eax
80103da2:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
80103da8:	8b 43 18             	mov    0x18(%ebx),%eax
80103dab:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
  p->tf->es = p->tf->ds;
80103db1:	8b 43 18             	mov    0x18(%ebx),%eax
80103db4:	8b 50 2c             	mov    0x2c(%eax),%edx
80103db7:	66 89 50 28          	mov    %dx,0x28(%eax)
  p->tf->ss = p->tf->ds;
80103dbb:	8b 43 18             	mov    0x18(%ebx),%eax
80103dbe:	8b 50 2c             	mov    0x2c(%eax),%edx
80103dc1:	66 89 50 48          	mov    %dx,0x48(%eax)
  p->tf->eflags = FL_IF;
80103dc5:	8b 43 18             	mov    0x18(%ebx),%eax
80103dc8:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
  p->tf->esp = PGSIZE;
80103dcf:	8b 43 18             	mov    0x18(%ebx),%eax
80103dd2:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
  p->tf->eip = 0;  // beginning of initcode.S
80103dd9:	8b 43 18             	mov    0x18(%ebx),%eax
80103ddc:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
  safestrcpy(p->name, "initcode", sizeof(p->name));
80103de3:	83 c4 0c             	add    $0xc,%esp
80103de6:	6a 10                	push   $0x10
80103de8:	68 a5 69 10 80       	push   $0x801069a5
80103ded:	8d 43 6c             	lea    0x6c(%ebx),%eax
80103df0:	50                   	push   %eax
80103df1:	e8 9a 0b 00 00       	call   80104990 <safestrcpy>
  p->cwd = namei("/");
80103df6:	c7 04 24 ae 69 10 80 	movl   $0x801069ae,(%esp)
80103dfd:	e8 3e e9 ff ff       	call   80102740 <namei>
80103e02:	89 43 68             	mov    %eax,0x68(%ebx)
  acquire(&ptable.lock);
80103e05:	c7 04 24 20 19 11 80 	movl   $0x80111920,(%esp)
80103e0c:	e8 d7 08 00 00       	call   801046e8 <acquire>
  p->state = RUNNABLE;
80103e11:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
  release(&ptable.lock);
80103e18:	c7 04 24 20 19 11 80 	movl   $0x80111920,(%esp)
80103e1f:	e8 98 09 00 00       	call   801047bc <release>
80103e24:	83 c4 10             	add    $0x10,%esp
}
80103e27:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103e2a:	c9                   	leave  
80103e2b:	c3                   	ret    
    panic("userinit: out of memory?");
80103e2c:	83 ec 0c             	sub    $0xc,%esp
80103e2f:	68 8c 69 10 80       	push   $0x8010698c
80103e34:	e8 ab cf ff ff       	call   80100de4 <panic>
80103e39:	8d 76 00             	lea    0x0(%esi),%esi

80103e3c <growproc>:
{
80103e3c:	55                   	push   %ebp
80103e3d:	89 e5                	mov    %esp,%ebp
80103e3f:	53                   	push   %ebx
80103e40:	53                   	push   %ebx
  struct proc *curproc = myproc();
80103e41:	e8 f2 fe ff ff       	call   80103d38 <myproc>
80103e46:	89 c3                	mov    %eax,%ebx
  sz = curproc->sz;
80103e48:	8b 00                	mov    (%eax),%eax
  if(n > 0){
80103e4a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80103e4e:	7e 2c                	jle    80103e7c <growproc+0x40>
    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
80103e50:	51                   	push   %ecx
80103e51:	8b 55 08             	mov    0x8(%ebp),%edx
80103e54:	01 c2                	add    %eax,%edx
80103e56:	52                   	push   %edx
80103e57:	50                   	push   %eax
80103e58:	ff 73 04             	pushl  0x4(%ebx)
80103e5b:	e8 00 22 00 00       	call   80106060 <allocuvm>
80103e60:	83 c4 10             	add    $0x10,%esp
80103e63:	85 c0                	test   %eax,%eax
80103e65:	74 31                	je     80103e98 <growproc+0x5c>
  curproc->sz = sz;
80103e67:	89 03                	mov    %eax,(%ebx)
  switchuvm(curproc);
80103e69:	83 ec 0c             	sub    $0xc,%esp
80103e6c:	53                   	push   %ebx
80103e6d:	e8 ca 1f 00 00       	call   80105e3c <switchuvm>
  return 0;
80103e72:	83 c4 10             	add    $0x10,%esp
80103e75:	31 c0                	xor    %eax,%eax
}
80103e77:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103e7a:	c9                   	leave  
80103e7b:	c3                   	ret    
  } else if(n < 0){
80103e7c:	74 e9                	je     80103e67 <growproc+0x2b>
    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
80103e7e:	52                   	push   %edx
80103e7f:	8b 55 08             	mov    0x8(%ebp),%edx
80103e82:	01 c2                	add    %eax,%edx
80103e84:	52                   	push   %edx
80103e85:	50                   	push   %eax
80103e86:	ff 73 04             	pushl  0x4(%ebx)
80103e89:	e8 b2 22 00 00       	call   80106140 <deallocuvm>
80103e8e:	83 c4 10             	add    $0x10,%esp
80103e91:	85 c0                	test   %eax,%eax
80103e93:	75 d2                	jne    80103e67 <growproc+0x2b>
80103e95:	8d 76 00             	lea    0x0(%esi),%esi
      return -1;
80103e98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103e9d:	eb d8                	jmp    80103e77 <growproc+0x3b>
80103e9f:	90                   	nop

80103ea0 <fork>:
{
80103ea0:	55                   	push   %ebp
80103ea1:	89 e5                	mov    %esp,%ebp
80103ea3:	57                   	push   %edi
80103ea4:	56                   	push   %esi
80103ea5:	53                   	push   %ebx
80103ea6:	83 ec 1c             	sub    $0x1c,%esp
  struct proc *curproc = myproc();
80103ea9:	e8 8a fe ff ff       	call   80103d38 <myproc>
80103eae:	89 c3                	mov    %eax,%ebx
  if((np = allocproc()) == 0){
80103eb0:	e8 b7 fc ff ff       	call   80103b6c <allocproc>
80103eb5:	89 c7                	mov    %eax,%edi
80103eb7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80103eba:	85 c0                	test   %eax,%eax
80103ebc:	0f 84 b5 00 00 00    	je     80103f77 <fork+0xd7>
  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
80103ec2:	83 ec 08             	sub    $0x8,%esp
80103ec5:	ff 33                	pushl  (%ebx)
80103ec7:	ff 73 04             	pushl  0x4(%ebx)
80103eca:	e8 bd 23 00 00       	call   8010628c <copyuvm>
80103ecf:	89 47 04             	mov    %eax,0x4(%edi)
80103ed2:	83 c4 10             	add    $0x10,%esp
80103ed5:	85 c0                	test   %eax,%eax
80103ed7:	0f 84 a1 00 00 00    	je     80103f7e <fork+0xde>
  np->sz = curproc->sz;
80103edd:	8b 03                	mov    (%ebx),%eax
80103edf:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80103ee2:	89 01                	mov    %eax,(%ecx)
  np->parent = curproc;
80103ee4:	89 59 14             	mov    %ebx,0x14(%ecx)
  *np->tf = *curproc->tf;
80103ee7:	89 c8                	mov    %ecx,%eax
80103ee9:	8b 79 18             	mov    0x18(%ecx),%edi
80103eec:	8b 73 18             	mov    0x18(%ebx),%esi
80103eef:	b9 13 00 00 00       	mov    $0x13,%ecx
80103ef4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  np->tf->eax = 0;
80103ef6:	8b 40 18             	mov    0x18(%eax),%eax
80103ef9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  for(i = 0; i < NOFILE; i++)
80103f00:	31 f6                	xor    %esi,%esi
80103f02:	66 90                	xchg   %ax,%ax
    if(curproc->ofile[i])
80103f04:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
80103f08:	85 c0                	test   %eax,%eax
80103f0a:	74 13                	je     80103f1f <fork+0x7f>
      np->ofile[i] = filedup(curproc->ofile[i]);
80103f0c:	83 ec 0c             	sub    $0xc,%esp
80103f0f:	50                   	push   %eax
80103f10:	e8 63 d8 ff ff       	call   80101778 <filedup>
80103f15:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80103f18:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
80103f1c:	83 c4 10             	add    $0x10,%esp
  for(i = 0; i < NOFILE; i++)
80103f1f:	46                   	inc    %esi
80103f20:	83 fe 10             	cmp    $0x10,%esi
80103f23:	75 df                	jne    80103f04 <fork+0x64>
  np->cwd = idup(curproc->cwd);
80103f25:	83 ec 0c             	sub    $0xc,%esp
80103f28:	ff 73 68             	pushl  0x68(%ebx)
80103f2b:	e8 04 e0 ff ff       	call   80101f34 <idup>
80103f30:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80103f33:	89 47 68             	mov    %eax,0x68(%edi)
  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
80103f36:	83 c4 0c             	add    $0xc,%esp
80103f39:	6a 10                	push   $0x10
80103f3b:	83 c3 6c             	add    $0x6c,%ebx
80103f3e:	53                   	push   %ebx
80103f3f:	8d 47 6c             	lea    0x6c(%edi),%eax
80103f42:	50                   	push   %eax
80103f43:	e8 48 0a 00 00       	call   80104990 <safestrcpy>
  pid = np->pid;
80103f48:	8b 5f 10             	mov    0x10(%edi),%ebx
  acquire(&ptable.lock);
80103f4b:	c7 04 24 20 19 11 80 	movl   $0x80111920,(%esp)
80103f52:	e8 91 07 00 00       	call   801046e8 <acquire>
  np->state = RUNNABLE;
80103f57:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
  release(&ptable.lock);
80103f5e:	c7 04 24 20 19 11 80 	movl   $0x80111920,(%esp)
80103f65:	e8 52 08 00 00       	call   801047bc <release>
  return pid;
80103f6a:	83 c4 10             	add    $0x10,%esp
80103f6d:	89 d8                	mov    %ebx,%eax
}
80103f6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103f72:	5b                   	pop    %ebx
80103f73:	5e                   	pop    %esi
80103f74:	5f                   	pop    %edi
80103f75:	5d                   	pop    %ebp
80103f76:	c3                   	ret    
    return -1;
80103f77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103f7c:	eb f1                	jmp    80103f6f <fork+0xcf>
    kfree(np->kstack);
80103f7e:	83 ec 0c             	sub    $0xc,%esp
80103f81:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80103f84:	ff 77 08             	pushl  0x8(%edi)
80103f87:	e8 44 eb ff ff       	call   80102ad0 <kfree>
    np->kstack = 0;
80103f8c:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%edi)
    np->state = UNUSED;
80103f93:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%edi)
    return -1;
80103f9a:	83 c4 10             	add    $0x10,%esp
80103f9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103fa2:	eb cb                	jmp    80103f6f <fork+0xcf>

80103fa4 <scheduler>:
{
80103fa4:	55                   	push   %ebp
80103fa5:	89 e5                	mov    %esp,%ebp
80103fa7:	57                   	push   %edi
80103fa8:	56                   	push   %esi
80103fa9:	53                   	push   %ebx
80103faa:	83 ec 0c             	sub    $0xc,%esp
  struct cpu *c = mycpu();
80103fad:	e8 da fc ff ff       	call   80103c8c <mycpu>
80103fb2:	89 c6                	mov    %eax,%esi
  c->proc = 0;
80103fb4:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
80103fbb:	00 00 00 
80103fbe:	8d 78 04             	lea    0x4(%eax),%edi
80103fc1:	8d 76 00             	lea    0x0(%esi),%esi
  asm volatile("sti");
80103fc4:	fb                   	sti    
    acquire(&ptable.lock);
80103fc5:	83 ec 0c             	sub    $0xc,%esp
80103fc8:	68 20 19 11 80       	push   $0x80111920
80103fcd:	e8 16 07 00 00       	call   801046e8 <acquire>
80103fd2:	83 c4 10             	add    $0x10,%esp
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80103fd5:	bb 54 19 11 80       	mov    $0x80111954,%ebx
80103fda:	eb 0b                	jmp    80103fe7 <scheduler+0x43>
80103fdc:	83 c3 7c             	add    $0x7c,%ebx
80103fdf:	81 fb 54 38 11 80    	cmp    $0x80113854,%ebx
80103fe5:	74 45                	je     8010402c <scheduler+0x88>
      if(p->state != RUNNABLE)
80103fe7:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
80103feb:	75 ef                	jne    80103fdc <scheduler+0x38>
      c->proc = p;
80103fed:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
      switchuvm(p);
80103ff3:	83 ec 0c             	sub    $0xc,%esp
80103ff6:	53                   	push   %ebx
80103ff7:	e8 40 1e 00 00       	call   80105e3c <switchuvm>
      p->state = RUNNING;
80103ffc:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
      swtch(&(c->scheduler), p->context);
80104003:	58                   	pop    %eax
80104004:	5a                   	pop    %edx
80104005:	ff 73 1c             	pushl  0x1c(%ebx)
80104008:	57                   	push   %edi
80104009:	e8 26 c0 ff ff       	call   80100034 <swtch>
      switchkvm();
8010400e:	e8 15 1e 00 00       	call   80105e28 <switchkvm>
      c->proc = 0;
80104013:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
8010401a:	00 00 00 
8010401d:	83 c4 10             	add    $0x10,%esp
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104020:	83 c3 7c             	add    $0x7c,%ebx
80104023:	81 fb 54 38 11 80    	cmp    $0x80113854,%ebx
80104029:	75 bc                	jne    80103fe7 <scheduler+0x43>
8010402b:	90                   	nop
    release(&ptable.lock);
8010402c:	83 ec 0c             	sub    $0xc,%esp
8010402f:	68 20 19 11 80       	push   $0x80111920
80104034:	e8 83 07 00 00       	call   801047bc <release>
  }
80104039:	83 c4 10             	add    $0x10,%esp
8010403c:	eb 86                	jmp    80103fc4 <scheduler+0x20>
8010403e:	66 90                	xchg   %ax,%ax

80104040 <sched>:
{
80104040:	55                   	push   %ebp
80104041:	89 e5                	mov    %esp,%ebp
80104043:	56                   	push   %esi
80104044:	53                   	push   %ebx
  struct proc *p = myproc();
80104045:	e8 ee fc ff ff       	call   80103d38 <myproc>
8010404a:	89 c3                	mov    %eax,%ebx
  if(!holding(&ptable.lock))
8010404c:	83 ec 0c             	sub    $0xc,%esp
8010404f:	68 20 19 11 80       	push   $0x80111920
80104054:	e8 2f 06 00 00       	call   80104688 <holding>
80104059:	83 c4 10             	add    $0x10,%esp
8010405c:	85 c0                	test   %eax,%eax
8010405e:	74 4f                	je     801040af <sched+0x6f>
  if(mycpu()->ncli != 1)
80104060:	e8 27 fc ff ff       	call   80103c8c <mycpu>
80104065:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
8010406c:	75 68                	jne    801040d6 <sched+0x96>
  if(p->state == RUNNING)
8010406e:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
80104072:	74 55                	je     801040c9 <sched+0x89>
  asm volatile("pushfl; popl %0" : "=r" (eflags));
80104074:	9c                   	pushf  
80104075:	58                   	pop    %eax
  if(readeflags()&FL_IF)
80104076:	f6 c4 02             	test   $0x2,%ah
80104079:	75 41                	jne    801040bc <sched+0x7c>
  intena = mycpu()->intena;
8010407b:	e8 0c fc ff ff       	call   80103c8c <mycpu>
80104080:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
  swtch(&p->context, mycpu()->scheduler);
80104086:	e8 01 fc ff ff       	call   80103c8c <mycpu>
8010408b:	83 ec 08             	sub    $0x8,%esp
8010408e:	ff 70 04             	pushl  0x4(%eax)
80104091:	83 c3 1c             	add    $0x1c,%ebx
80104094:	53                   	push   %ebx
80104095:	e8 9a bf ff ff       	call   80100034 <swtch>
  mycpu()->intena = intena;
8010409a:	e8 ed fb ff ff       	call   80103c8c <mycpu>
8010409f:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
801040a5:	83 c4 10             	add    $0x10,%esp
}
801040a8:	8d 65 f8             	lea    -0x8(%ebp),%esp
801040ab:	5b                   	pop    %ebx
801040ac:	5e                   	pop    %esi
801040ad:	5d                   	pop    %ebp
801040ae:	c3                   	ret    
    panic("sched ptable.lock");
801040af:	83 ec 0c             	sub    $0xc,%esp
801040b2:	68 b0 69 10 80       	push   $0x801069b0
801040b7:	e8 28 cd ff ff       	call   80100de4 <panic>
    panic("sched interruptible");
801040bc:	83 ec 0c             	sub    $0xc,%esp
801040bf:	68 dc 69 10 80       	push   $0x801069dc
801040c4:	e8 1b cd ff ff       	call   80100de4 <panic>
    panic("sched running");
801040c9:	83 ec 0c             	sub    $0xc,%esp
801040cc:	68 ce 69 10 80       	push   $0x801069ce
801040d1:	e8 0e cd ff ff       	call   80100de4 <panic>
    panic("sched locks");
801040d6:	83 ec 0c             	sub    $0xc,%esp
801040d9:	68 c2 69 10 80       	push   $0x801069c2
801040de:	e8 01 cd ff ff       	call   80100de4 <panic>
801040e3:	90                   	nop

801040e4 <exit>:
{
801040e4:	55                   	push   %ebp
801040e5:	89 e5                	mov    %esp,%ebp
801040e7:	57                   	push   %edi
801040e8:	56                   	push   %esi
801040e9:	53                   	push   %ebx
801040ea:	83 ec 0c             	sub    $0xc,%esp
  struct proc *curproc = myproc();
801040ed:	e8 46 fc ff ff       	call   80103d38 <myproc>
801040f2:	89 c6                	mov    %eax,%esi
  if(curproc == initproc)
801040f4:	3b 05 b8 91 10 80    	cmp    0x801091b8,%eax
801040fa:	0f 84 e8 00 00 00    	je     801041e8 <exit+0x104>
80104100:	8d 58 28             	lea    0x28(%eax),%ebx
80104103:	8d 78 68             	lea    0x68(%eax),%edi
80104106:	66 90                	xchg   %ax,%ax
    if(curproc->ofile[fd]){
80104108:	8b 03                	mov    (%ebx),%eax
8010410a:	85 c0                	test   %eax,%eax
8010410c:	74 12                	je     80104120 <exit+0x3c>
      fileclose(curproc->ofile[fd]);
8010410e:	83 ec 0c             	sub    $0xc,%esp
80104111:	50                   	push   %eax
80104112:	e8 a5 d6 ff ff       	call   801017bc <fileclose>
      curproc->ofile[fd] = 0;
80104117:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
8010411d:	83 c4 10             	add    $0x10,%esp
80104120:	83 c3 04             	add    $0x4,%ebx
  for(fd = 0; fd < NOFILE; fd++){
80104123:	39 fb                	cmp    %edi,%ebx
80104125:	75 e1                	jne    80104108 <exit+0x24>
  begin_op();
80104127:	e8 c8 f0 ff ff       	call   801031f4 <begin_op>
  iput(curproc->cwd);
8010412c:	83 ec 0c             	sub    $0xc,%esp
8010412f:	ff 76 68             	pushl  0x68(%esi)
80104132:	e8 35 df ff ff       	call   8010206c <iput>
  end_op();
80104137:	e8 20 f1 ff ff       	call   8010325c <end_op>
  curproc->cwd = 0;
8010413c:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
  acquire(&ptable.lock);
80104143:	c7 04 24 20 19 11 80 	movl   $0x80111920,(%esp)
8010414a:	e8 99 05 00 00       	call   801046e8 <acquire>
  wakeup1(curproc->parent);
8010414f:	8b 46 14             	mov    0x14(%esi),%eax
80104152:	83 c4 10             	add    $0x10,%esp
static void
wakeup1(void *chan)
{
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104155:	ba 54 19 11 80       	mov    $0x80111954,%edx
8010415a:	eb 0b                	jmp    80104167 <exit+0x83>
8010415c:	83 c2 7c             	add    $0x7c,%edx
8010415f:	81 fa 54 38 11 80    	cmp    $0x80113854,%edx
80104165:	74 1d                	je     80104184 <exit+0xa0>
    if(p->state == SLEEPING && p->chan == chan)
80104167:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
8010416b:	75 ef                	jne    8010415c <exit+0x78>
8010416d:	3b 42 20             	cmp    0x20(%edx),%eax
80104170:	75 ea                	jne    8010415c <exit+0x78>
      p->state = RUNNABLE;
80104172:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80104179:	83 c2 7c             	add    $0x7c,%edx
8010417c:	81 fa 54 38 11 80    	cmp    $0x80113854,%edx
80104182:	75 e3                	jne    80104167 <exit+0x83>
      p->parent = initproc;
80104184:	a1 b8 91 10 80       	mov    0x801091b8,%eax
80104189:	b9 54 19 11 80       	mov    $0x80111954,%ecx
8010418e:	eb 0b                	jmp    8010419b <exit+0xb7>
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104190:	83 c1 7c             	add    $0x7c,%ecx
80104193:	81 f9 54 38 11 80    	cmp    $0x80113854,%ecx
80104199:	74 34                	je     801041cf <exit+0xeb>
    if(p->parent == curproc){
8010419b:	39 71 14             	cmp    %esi,0x14(%ecx)
8010419e:	75 f0                	jne    80104190 <exit+0xac>
      p->parent = initproc;
801041a0:	89 41 14             	mov    %eax,0x14(%ecx)
      if(p->state == ZOMBIE)
801041a3:	83 79 0c 05          	cmpl   $0x5,0xc(%ecx)
801041a7:	75 e7                	jne    80104190 <exit+0xac>
801041a9:	ba 54 19 11 80       	mov    $0x80111954,%edx
801041ae:	eb 0b                	jmp    801041bb <exit+0xd7>
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801041b0:	83 c2 7c             	add    $0x7c,%edx
801041b3:	81 fa 54 38 11 80    	cmp    $0x80113854,%edx
801041b9:	74 d5                	je     80104190 <exit+0xac>
    if(p->state == SLEEPING && p->chan == chan)
801041bb:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
801041bf:	75 ef                	jne    801041b0 <exit+0xcc>
801041c1:	3b 42 20             	cmp    0x20(%edx),%eax
801041c4:	75 ea                	jne    801041b0 <exit+0xcc>
      p->state = RUNNABLE;
801041c6:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
801041cd:	eb e1                	jmp    801041b0 <exit+0xcc>
  curproc->state = ZOMBIE;
801041cf:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
  sched();
801041d6:	e8 65 fe ff ff       	call   80104040 <sched>
  panic("zombie exit");
801041db:	83 ec 0c             	sub    $0xc,%esp
801041de:	68 fd 69 10 80       	push   $0x801069fd
801041e3:	e8 fc cb ff ff       	call   80100de4 <panic>
    panic("init exiting");
801041e8:	83 ec 0c             	sub    $0xc,%esp
801041eb:	68 f0 69 10 80       	push   $0x801069f0
801041f0:	e8 ef cb ff ff       	call   80100de4 <panic>
801041f5:	8d 76 00             	lea    0x0(%esi),%esi

801041f8 <yield>:
{
801041f8:	55                   	push   %ebp
801041f9:	89 e5                	mov    %esp,%ebp
801041fb:	83 ec 14             	sub    $0x14,%esp
  acquire(&ptable.lock);  //DOC: yieldlock
801041fe:	68 20 19 11 80       	push   $0x80111920
80104203:	e8 e0 04 00 00       	call   801046e8 <acquire>
  myproc()->state = RUNNABLE;
80104208:	e8 2b fb ff ff       	call   80103d38 <myproc>
8010420d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  sched();
80104214:	e8 27 fe ff ff       	call   80104040 <sched>
  release(&ptable.lock);
80104219:	c7 04 24 20 19 11 80 	movl   $0x80111920,(%esp)
80104220:	e8 97 05 00 00       	call   801047bc <release>
80104225:	83 c4 10             	add    $0x10,%esp
}
80104228:	c9                   	leave  
80104229:	c3                   	ret    
8010422a:	66 90                	xchg   %ax,%ax

8010422c <sleep>:
{
8010422c:	55                   	push   %ebp
8010422d:	89 e5                	mov    %esp,%ebp
8010422f:	57                   	push   %edi
80104230:	56                   	push   %esi
80104231:	53                   	push   %ebx
80104232:	83 ec 0c             	sub    $0xc,%esp
80104235:	8b 7d 08             	mov    0x8(%ebp),%edi
80104238:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct proc *p = myproc();
8010423b:	e8 f8 fa ff ff       	call   80103d38 <myproc>
80104240:	89 c3                	mov    %eax,%ebx
  if(p == 0)
80104242:	85 c0                	test   %eax,%eax
80104244:	0f 84 81 00 00 00    	je     801042cb <sleep+0x9f>
  if(lk == 0)
8010424a:	85 f6                	test   %esi,%esi
8010424c:	74 70                	je     801042be <sleep+0x92>
  if(lk != &ptable.lock){  //DOC: sleeplock0
8010424e:	81 fe 20 19 11 80    	cmp    $0x80111920,%esi
80104254:	74 4a                	je     801042a0 <sleep+0x74>
    acquire(&ptable.lock);  //DOC: sleeplock1
80104256:	83 ec 0c             	sub    $0xc,%esp
80104259:	68 20 19 11 80       	push   $0x80111920
8010425e:	e8 85 04 00 00       	call   801046e8 <acquire>
    release(lk);
80104263:	89 34 24             	mov    %esi,(%esp)
80104266:	e8 51 05 00 00       	call   801047bc <release>
  p->chan = chan;
8010426b:	89 7b 20             	mov    %edi,0x20(%ebx)
  p->state = SLEEPING;
8010426e:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
  sched();
80104275:	e8 c6 fd ff ff       	call   80104040 <sched>
  p->chan = 0;
8010427a:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
    release(&ptable.lock);
80104281:	c7 04 24 20 19 11 80 	movl   $0x80111920,(%esp)
80104288:	e8 2f 05 00 00       	call   801047bc <release>
    acquire(lk);
8010428d:	83 c4 10             	add    $0x10,%esp
80104290:	89 75 08             	mov    %esi,0x8(%ebp)
}
80104293:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104296:	5b                   	pop    %ebx
80104297:	5e                   	pop    %esi
80104298:	5f                   	pop    %edi
80104299:	5d                   	pop    %ebp
    acquire(lk);
8010429a:	e9 49 04 00 00       	jmp    801046e8 <acquire>
8010429f:	90                   	nop
  p->chan = chan;
801042a0:	89 78 20             	mov    %edi,0x20(%eax)
  p->state = SLEEPING;
801042a3:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
  sched();
801042aa:	e8 91 fd ff ff       	call   80104040 <sched>
  p->chan = 0;
801042af:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
}
801042b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
801042b9:	5b                   	pop    %ebx
801042ba:	5e                   	pop    %esi
801042bb:	5f                   	pop    %edi
801042bc:	5d                   	pop    %ebp
801042bd:	c3                   	ret    
    panic("sleep without lk");
801042be:	83 ec 0c             	sub    $0xc,%esp
801042c1:	68 0f 6a 10 80       	push   $0x80106a0f
801042c6:	e8 19 cb ff ff       	call   80100de4 <panic>
    panic("sleep");
801042cb:	83 ec 0c             	sub    $0xc,%esp
801042ce:	68 09 6a 10 80       	push   $0x80106a09
801042d3:	e8 0c cb ff ff       	call   80100de4 <panic>

801042d8 <wait>:
{
801042d8:	55                   	push   %ebp
801042d9:	89 e5                	mov    %esp,%ebp
801042db:	56                   	push   %esi
801042dc:	53                   	push   %ebx
  struct proc *curproc = myproc();
801042dd:	e8 56 fa ff ff       	call   80103d38 <myproc>
801042e2:	89 c6                	mov    %eax,%esi
  acquire(&ptable.lock);
801042e4:	83 ec 0c             	sub    $0xc,%esp
801042e7:	68 20 19 11 80       	push   $0x80111920
801042ec:	e8 f7 03 00 00       	call   801046e8 <acquire>
801042f1:	83 c4 10             	add    $0x10,%esp
    havekids = 0;
801042f4:	31 c0                	xor    %eax,%eax
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
801042f6:	bb 54 19 11 80       	mov    $0x80111954,%ebx
801042fb:	eb 0e                	jmp    8010430b <wait+0x33>
801042fd:	8d 76 00             	lea    0x0(%esi),%esi
80104300:	83 c3 7c             	add    $0x7c,%ebx
80104303:	81 fb 54 38 11 80    	cmp    $0x80113854,%ebx
80104309:	74 1d                	je     80104328 <wait+0x50>
      if(p->parent != curproc)
8010430b:	39 73 14             	cmp    %esi,0x14(%ebx)
8010430e:	75 f0                	jne    80104300 <wait+0x28>
      if(p->state == ZOMBIE){
80104310:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
80104314:	74 30                	je     80104346 <wait+0x6e>
      havekids = 1;
80104316:	b8 01 00 00 00       	mov    $0x1,%eax
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
8010431b:	83 c3 7c             	add    $0x7c,%ebx
8010431e:	81 fb 54 38 11 80    	cmp    $0x80113854,%ebx
80104324:	75 e5                	jne    8010430b <wait+0x33>
80104326:	66 90                	xchg   %ax,%ax
    if(!havekids || curproc->killed){
80104328:	85 c0                	test   %eax,%eax
8010432a:	74 70                	je     8010439c <wait+0xc4>
8010432c:	8b 46 24             	mov    0x24(%esi),%eax
8010432f:	85 c0                	test   %eax,%eax
80104331:	75 69                	jne    8010439c <wait+0xc4>
    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
80104333:	83 ec 08             	sub    $0x8,%esp
80104336:	68 20 19 11 80       	push   $0x80111920
8010433b:	56                   	push   %esi
8010433c:	e8 eb fe ff ff       	call   8010422c <sleep>
  }
80104341:	83 c4 10             	add    $0x10,%esp
80104344:	eb ae                	jmp    801042f4 <wait+0x1c>
        pid = p->pid;
80104346:	8b 73 10             	mov    0x10(%ebx),%esi
        kfree(p->kstack);
80104349:	83 ec 0c             	sub    $0xc,%esp
8010434c:	ff 73 08             	pushl  0x8(%ebx)
8010434f:	e8 7c e7 ff ff       	call   80102ad0 <kfree>
        p->kstack = 0;
80104354:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
        freevm(p->pgdir);
8010435b:	5a                   	pop    %edx
8010435c:	ff 73 04             	pushl  0x4(%ebx)
8010435f:	e8 f8 1d 00 00       	call   8010615c <freevm>
        p->pid = 0;
80104364:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
        p->parent = 0;
8010436b:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
        p->name[0] = 0;
80104372:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
        p->killed = 0;
80104376:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
        p->state = UNUSED;
8010437d:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
        release(&ptable.lock);
80104384:	c7 04 24 20 19 11 80 	movl   $0x80111920,(%esp)
8010438b:	e8 2c 04 00 00       	call   801047bc <release>
        return pid;
80104390:	83 c4 10             	add    $0x10,%esp
80104393:	89 f0                	mov    %esi,%eax
}
80104395:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104398:	5b                   	pop    %ebx
80104399:	5e                   	pop    %esi
8010439a:	5d                   	pop    %ebp
8010439b:	c3                   	ret    
      release(&ptable.lock);
8010439c:	83 ec 0c             	sub    $0xc,%esp
8010439f:	68 20 19 11 80       	push   $0x80111920
801043a4:	e8 13 04 00 00       	call   801047bc <release>
      return -1;
801043a9:	83 c4 10             	add    $0x10,%esp
801043ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801043b1:	8d 65 f8             	lea    -0x8(%ebp),%esp
801043b4:	5b                   	pop    %ebx
801043b5:	5e                   	pop    %esi
801043b6:	5d                   	pop    %ebp
801043b7:	c3                   	ret    

801043b8 <wakeup>:
}

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
801043b8:	55                   	push   %ebp
801043b9:	89 e5                	mov    %esp,%ebp
801043bb:	53                   	push   %ebx
801043bc:	83 ec 10             	sub    $0x10,%esp
801043bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&ptable.lock);
801043c2:	68 20 19 11 80       	push   $0x80111920
801043c7:	e8 1c 03 00 00       	call   801046e8 <acquire>
801043cc:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801043cf:	b8 54 19 11 80       	mov    $0x80111954,%eax
801043d4:	eb 0c                	jmp    801043e2 <wakeup+0x2a>
801043d6:	66 90                	xchg   %ax,%ax
801043d8:	83 c0 7c             	add    $0x7c,%eax
801043db:	3d 54 38 11 80       	cmp    $0x80113854,%eax
801043e0:	74 1e                	je     80104400 <wakeup+0x48>
    if(p->state == SLEEPING && p->chan == chan)
801043e2:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
801043e6:	75 f0                	jne    801043d8 <wakeup+0x20>
801043e8:	3b 58 20             	cmp    0x20(%eax),%ebx
801043eb:	75 eb                	jne    801043d8 <wakeup+0x20>
      p->state = RUNNABLE;
801043ed:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801043f4:	83 c0 7c             	add    $0x7c,%eax
801043f7:	3d 54 38 11 80       	cmp    $0x80113854,%eax
801043fc:	75 e4                	jne    801043e2 <wakeup+0x2a>
801043fe:	66 90                	xchg   %ax,%ax
  wakeup1(chan);
  release(&ptable.lock);
80104400:	c7 45 08 20 19 11 80 	movl   $0x80111920,0x8(%ebp)
}
80104407:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010440a:	c9                   	leave  
  release(&ptable.lock);
8010440b:	e9 ac 03 00 00       	jmp    801047bc <release>

80104410 <kill>:
// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
80104410:	55                   	push   %ebp
80104411:	89 e5                	mov    %esp,%ebp
80104413:	53                   	push   %ebx
80104414:	83 ec 10             	sub    $0x10,%esp
80104417:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct proc *p;

  acquire(&ptable.lock);
8010441a:	68 20 19 11 80       	push   $0x80111920
8010441f:	e8 c4 02 00 00       	call   801046e8 <acquire>
80104424:	83 c4 10             	add    $0x10,%esp
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
80104427:	b8 54 19 11 80       	mov    $0x80111954,%eax
8010442c:	eb 0c                	jmp    8010443a <kill+0x2a>
8010442e:	66 90                	xchg   %ax,%ax
80104430:	83 c0 7c             	add    $0x7c,%eax
80104433:	3d 54 38 11 80       	cmp    $0x80113854,%eax
80104438:	74 36                	je     80104470 <kill+0x60>
    if(p->pid == pid){
8010443a:	39 58 10             	cmp    %ebx,0x10(%eax)
8010443d:	75 f1                	jne    80104430 <kill+0x20>
      p->killed = 1;
8010443f:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
      // Wake process from sleep if necessary.
      if(p->state == SLEEPING)
80104446:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
8010444a:	74 18                	je     80104464 <kill+0x54>
        p->state = RUNNABLE;
      release(&ptable.lock);
8010444c:	83 ec 0c             	sub    $0xc,%esp
8010444f:	68 20 19 11 80       	push   $0x80111920
80104454:	e8 63 03 00 00       	call   801047bc <release>
      return 0;
80104459:	83 c4 10             	add    $0x10,%esp
8010445c:	31 c0                	xor    %eax,%eax
    }
  }
  release(&ptable.lock);
  return -1;
}
8010445e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104461:	c9                   	leave  
80104462:	c3                   	ret    
80104463:	90                   	nop
        p->state = RUNNABLE;
80104464:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
8010446b:	eb df                	jmp    8010444c <kill+0x3c>
8010446d:	8d 76 00             	lea    0x0(%esi),%esi
  release(&ptable.lock);
80104470:	83 ec 0c             	sub    $0xc,%esp
80104473:	68 20 19 11 80       	push   $0x80111920
80104478:	e8 3f 03 00 00       	call   801047bc <release>
  return -1;
8010447d:	83 c4 10             	add    $0x10,%esp
80104480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104485:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104488:	c9                   	leave  
80104489:	c3                   	ret    
8010448a:	66 90                	xchg   %ax,%ax

8010448c <procdump>:
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
8010448c:	55                   	push   %ebp
8010448d:	89 e5                	mov    %esp,%ebp
8010448f:	57                   	push   %edi
80104490:	56                   	push   %esi
80104491:	53                   	push   %ebx
80104492:	83 ec 3c             	sub    $0x3c,%esp
80104495:	bb c0 19 11 80       	mov    $0x801119c0,%ebx
8010449a:	8d 75 e8             	lea    -0x18(%ebp),%esi
8010449d:	eb 3f                	jmp    801044de <procdump+0x52>
8010449f:	90                   	nop
  uint pc[10];

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->state == UNUSED)
      continue;
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
801044a0:	8b 04 85 80 6a 10 80 	mov    -0x7fef9580(,%eax,4),%eax
801044a7:	85 c0                	test   %eax,%eax
801044a9:	74 3f                	je     801044ea <procdump+0x5e>
      state = states[p->state];
    else
      state = "???";
    cprintf("%d %s %s", p->pid, state, p->name);
801044ab:	53                   	push   %ebx
801044ac:	50                   	push   %eax
801044ad:	ff 73 a4             	pushl  -0x5c(%ebx)
801044b0:	68 24 6a 10 80       	push   $0x80106a24
801044b5:	e8 da cb ff ff       	call   80101094 <cprintf>
    if(p->state == SLEEPING){
801044ba:	83 c4 10             	add    $0x10,%esp
801044bd:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
801044c1:	74 31                	je     801044f4 <procdump+0x68>
      getcallerpcs((uint*)p->context->ebp+2, pc);
      for(i=0; i<10 && pc[i] != 0; i++)
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
801044c3:	83 ec 0c             	sub    $0xc,%esp
801044c6:	68 97 6d 10 80       	push   $0x80106d97
801044cb:	e8 c4 cb ff ff       	call   80101094 <cprintf>
801044d0:	83 c4 10             	add    $0x10,%esp
801044d3:	83 c3 7c             	add    $0x7c,%ebx
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
801044d6:	81 fb c0 38 11 80    	cmp    $0x801138c0,%ebx
801044dc:	74 52                	je     80104530 <procdump+0xa4>
    if(p->state == UNUSED)
801044de:	8b 43 a0             	mov    -0x60(%ebx),%eax
801044e1:	85 c0                	test   %eax,%eax
801044e3:	74 ee                	je     801044d3 <procdump+0x47>
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
801044e5:	83 f8 05             	cmp    $0x5,%eax
801044e8:	76 b6                	jbe    801044a0 <procdump+0x14>
      state = "???";
801044ea:	b8 20 6a 10 80       	mov    $0x80106a20,%eax
801044ef:	eb ba                	jmp    801044ab <procdump+0x1f>
801044f1:	8d 76 00             	lea    0x0(%esi),%esi
      getcallerpcs((uint*)p->context->ebp+2, pc);
801044f4:	83 ec 08             	sub    $0x8,%esp
801044f7:	8d 45 c0             	lea    -0x40(%ebp),%eax
801044fa:	50                   	push   %eax
801044fb:	8b 43 b0             	mov    -0x50(%ebx),%eax
801044fe:	8b 40 0c             	mov    0xc(%eax),%eax
80104501:	83 c0 08             	add    $0x8,%eax
80104504:	50                   	push   %eax
80104505:	e8 36 01 00 00       	call   80104640 <getcallerpcs>
8010450a:	8d 7d c0             	lea    -0x40(%ebp),%edi
8010450d:	83 c4 10             	add    $0x10,%esp
      for(i=0; i<10 && pc[i] != 0; i++)
80104510:	8b 17                	mov    (%edi),%edx
80104512:	85 d2                	test   %edx,%edx
80104514:	74 ad                	je     801044c3 <procdump+0x37>
        cprintf(" %p", pc[i]);
80104516:	83 ec 08             	sub    $0x8,%esp
80104519:	52                   	push   %edx
8010451a:	68 61 64 10 80       	push   $0x80106461
8010451f:	e8 70 cb ff ff       	call   80101094 <cprintf>
80104524:	83 c7 04             	add    $0x4,%edi
      for(i=0; i<10 && pc[i] != 0; i++)
80104527:	83 c4 10             	add    $0x10,%esp
8010452a:	39 f7                	cmp    %esi,%edi
8010452c:	75 e2                	jne    80104510 <procdump+0x84>
8010452e:	eb 93                	jmp    801044c3 <procdump+0x37>
  }
}
80104530:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104533:	5b                   	pop    %ebx
80104534:	5e                   	pop    %esi
80104535:	5f                   	pop    %edi
80104536:	5d                   	pop    %ebp
80104537:	c3                   	ret    

80104538 <initsleeplock>:
#include "spinlock.h"
#include "sleeplock.h"

void
initsleeplock(struct sleeplock *lk, char *name)
{
80104538:	55                   	push   %ebp
80104539:	89 e5                	mov    %esp,%ebp
8010453b:	53                   	push   %ebx
8010453c:	83 ec 0c             	sub    $0xc,%esp
8010453f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  initlock(&lk->lk, "sleep lock");
80104542:	68 98 6a 10 80       	push   $0x80106a98
80104547:	8d 43 04             	lea    0x4(%ebx),%eax
8010454a:	50                   	push   %eax
8010454b:	e8 d4 00 00 00       	call   80104624 <initlock>
  lk->name = name;
80104550:	8b 45 0c             	mov    0xc(%ebp),%eax
80104553:	89 43 38             	mov    %eax,0x38(%ebx)
  lk->locked = 0;
80104556:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  lk->pid = 0;
8010455c:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
80104563:	83 c4 10             	add    $0x10,%esp
}
80104566:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104569:	c9                   	leave  
8010456a:	c3                   	ret    
8010456b:	90                   	nop

8010456c <acquiresleep>:

void
acquiresleep(struct sleeplock *lk)
{
8010456c:	55                   	push   %ebp
8010456d:	89 e5                	mov    %esp,%ebp
8010456f:	56                   	push   %esi
80104570:	53                   	push   %ebx
80104571:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&lk->lk);
80104574:	8d 73 04             	lea    0x4(%ebx),%esi
80104577:	83 ec 0c             	sub    $0xc,%esp
8010457a:	56                   	push   %esi
8010457b:	e8 68 01 00 00       	call   801046e8 <acquire>
  while (lk->locked) {
80104580:	83 c4 10             	add    $0x10,%esp
80104583:	8b 13                	mov    (%ebx),%edx
80104585:	85 d2                	test   %edx,%edx
80104587:	74 16                	je     8010459f <acquiresleep+0x33>
80104589:	8d 76 00             	lea    0x0(%esi),%esi
    sleep(lk, &lk->lk);
8010458c:	83 ec 08             	sub    $0x8,%esp
8010458f:	56                   	push   %esi
80104590:	53                   	push   %ebx
80104591:	e8 96 fc ff ff       	call   8010422c <sleep>
  while (lk->locked) {
80104596:	83 c4 10             	add    $0x10,%esp
80104599:	8b 03                	mov    (%ebx),%eax
8010459b:	85 c0                	test   %eax,%eax
8010459d:	75 ed                	jne    8010458c <acquiresleep+0x20>
  }
  lk->locked = 1;
8010459f:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
  lk->pid = myproc()->pid;
801045a5:	e8 8e f7 ff ff       	call   80103d38 <myproc>
801045aa:	8b 40 10             	mov    0x10(%eax),%eax
801045ad:	89 43 3c             	mov    %eax,0x3c(%ebx)
  release(&lk->lk);
801045b0:	89 75 08             	mov    %esi,0x8(%ebp)
}
801045b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
801045b6:	5b                   	pop    %ebx
801045b7:	5e                   	pop    %esi
801045b8:	5d                   	pop    %ebp
  release(&lk->lk);
801045b9:	e9 fe 01 00 00       	jmp    801047bc <release>
801045be:	66 90                	xchg   %ax,%ax

801045c0 <releasesleep>:

void
releasesleep(struct sleeplock *lk)
{
801045c0:	55                   	push   %ebp
801045c1:	89 e5                	mov    %esp,%ebp
801045c3:	56                   	push   %esi
801045c4:	53                   	push   %ebx
801045c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  acquire(&lk->lk);
801045c8:	8d 73 04             	lea    0x4(%ebx),%esi
801045cb:	83 ec 0c             	sub    $0xc,%esp
801045ce:	56                   	push   %esi
801045cf:	e8 14 01 00 00       	call   801046e8 <acquire>
  lk->locked = 0;
801045d4:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  lk->pid = 0;
801045da:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
  wakeup(lk);
801045e1:	89 1c 24             	mov    %ebx,(%esp)
801045e4:	e8 cf fd ff ff       	call   801043b8 <wakeup>
  release(&lk->lk);
801045e9:	83 c4 10             	add    $0x10,%esp
801045ec:	89 75 08             	mov    %esi,0x8(%ebp)
}
801045ef:	8d 65 f8             	lea    -0x8(%ebp),%esp
801045f2:	5b                   	pop    %ebx
801045f3:	5e                   	pop    %esi
801045f4:	5d                   	pop    %ebp
  release(&lk->lk);
801045f5:	e9 c2 01 00 00       	jmp    801047bc <release>
801045fa:	66 90                	xchg   %ax,%ax

801045fc <holdingsleep>:

int
holdingsleep(struct sleeplock *lk)
{
801045fc:	55                   	push   %ebp
801045fd:	89 e5                	mov    %esp,%ebp
801045ff:	56                   	push   %esi
80104600:	53                   	push   %ebx
80104601:	8b 75 08             	mov    0x8(%ebp),%esi
  int r;
  
  acquire(&lk->lk);
80104604:	8d 5e 04             	lea    0x4(%esi),%ebx
80104607:	83 ec 0c             	sub    $0xc,%esp
8010460a:	53                   	push   %ebx
8010460b:	e8 d8 00 00 00       	call   801046e8 <acquire>
  r = lk->locked;
80104610:	8b 36                	mov    (%esi),%esi
  release(&lk->lk);
80104612:	89 1c 24             	mov    %ebx,(%esp)
80104615:	e8 a2 01 00 00       	call   801047bc <release>
  return r;
}
8010461a:	89 f0                	mov    %esi,%eax
8010461c:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010461f:	5b                   	pop    %ebx
80104620:	5e                   	pop    %esi
80104621:	5d                   	pop    %ebp
80104622:	c3                   	ret    
80104623:	90                   	nop

80104624 <initlock>:
#include "proc.h"
#include "spinlock.h"

void
initlock(struct spinlock *lk, char *name)
{
80104624:	55                   	push   %ebp
80104625:	89 e5                	mov    %esp,%ebp
80104627:	8b 45 08             	mov    0x8(%ebp),%eax
  lk->name = name;
8010462a:	8b 55 0c             	mov    0xc(%ebp),%edx
8010462d:	89 50 04             	mov    %edx,0x4(%eax)
  lk->locked = 0;
80104630:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  lk->cpu = 0;
80104636:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
8010463d:	5d                   	pop    %ebp
8010463e:	c3                   	ret    
8010463f:	90                   	nop

80104640 <getcallerpcs>:
}

// Record the current call stack in pcs[] by following the %ebp chain.
void
getcallerpcs(void *v, uint pcs[])
{
80104640:	55                   	push   %ebp
80104641:	89 e5                	mov    %esp,%ebp
80104643:	53                   	push   %ebx
80104644:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  uint *ebp;
  int i;

  ebp = (uint*)v - 2;
80104647:	8b 45 08             	mov    0x8(%ebp),%eax
8010464a:	83 e8 08             	sub    $0x8,%eax
  for(i = 0; i < 10; i++){
8010464d:	31 d2                	xor    %edx,%edx
8010464f:	90                   	nop
    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
80104650:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
80104656:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
8010465c:	77 12                	ja     80104670 <getcallerpcs+0x30>
      break;
    pcs[i] = ebp[1];     // saved %eip
8010465e:	8b 58 04             	mov    0x4(%eax),%ebx
80104661:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
    ebp = (uint*)ebp[0]; // saved %ebp
80104664:	8b 00                	mov    (%eax),%eax
  for(i = 0; i < 10; i++){
80104666:	42                   	inc    %edx
80104667:	83 fa 0a             	cmp    $0xa,%edx
8010466a:	75 e4                	jne    80104650 <getcallerpcs+0x10>
  }
  for(; i < 10; i++)
    pcs[i] = 0;
}
8010466c:	5b                   	pop    %ebx
8010466d:	5d                   	pop    %ebp
8010466e:	c3                   	ret    
8010466f:	90                   	nop
80104670:	8d 04 91             	lea    (%ecx,%edx,4),%eax
80104673:	8d 51 28             	lea    0x28(%ecx),%edx
80104676:	66 90                	xchg   %ax,%ax
    pcs[i] = 0;
80104678:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
8010467e:	83 c0 04             	add    $0x4,%eax
  for(; i < 10; i++)
80104681:	39 d0                	cmp    %edx,%eax
80104683:	75 f3                	jne    80104678 <getcallerpcs+0x38>
}
80104685:	5b                   	pop    %ebx
80104686:	5d                   	pop    %ebp
80104687:	c3                   	ret    

80104688 <holding>:

// Check whether this cpu is holding the lock.
int
holding(struct spinlock *lock)
{
80104688:	55                   	push   %ebp
80104689:	89 e5                	mov    %esp,%ebp
8010468b:	53                   	push   %ebx
8010468c:	51                   	push   %ecx
8010468d:	8b 45 08             	mov    0x8(%ebp),%eax
  return lock->locked && lock->cpu == mycpu();
80104690:	8b 18                	mov    (%eax),%ebx
80104692:	85 db                	test   %ebx,%ebx
80104694:	75 06                	jne    8010469c <holding+0x14>
80104696:	31 c0                	xor    %eax,%eax
}
80104698:	5a                   	pop    %edx
80104699:	5b                   	pop    %ebx
8010469a:	5d                   	pop    %ebp
8010469b:	c3                   	ret    
  return lock->locked && lock->cpu == mycpu();
8010469c:	8b 58 08             	mov    0x8(%eax),%ebx
8010469f:	e8 e8 f5 ff ff       	call   80103c8c <mycpu>
801046a4:	39 c3                	cmp    %eax,%ebx
801046a6:	0f 94 c0             	sete   %al
801046a9:	0f b6 c0             	movzbl %al,%eax
}
801046ac:	5a                   	pop    %edx
801046ad:	5b                   	pop    %ebx
801046ae:	5d                   	pop    %ebp
801046af:	c3                   	ret    

801046b0 <pushcli>:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void
pushcli(void)
{
801046b0:	55                   	push   %ebp
801046b1:	89 e5                	mov    %esp,%ebp
801046b3:	53                   	push   %ebx
801046b4:	52                   	push   %edx
801046b5:	9c                   	pushf  
801046b6:	5b                   	pop    %ebx
  asm volatile("cli");
801046b7:	fa                   	cli    
  int eflags;

  eflags = readeflags();
  cli();
  if(mycpu()->ncli == 0)
801046b8:	e8 cf f5 ff ff       	call   80103c8c <mycpu>
801046bd:	8b 88 a4 00 00 00    	mov    0xa4(%eax),%ecx
801046c3:	85 c9                	test   %ecx,%ecx
801046c5:	75 11                	jne    801046d8 <pushcli+0x28>
    mycpu()->intena = eflags & FL_IF;
801046c7:	e8 c0 f5 ff ff       	call   80103c8c <mycpu>
801046cc:	81 e3 00 02 00 00    	and    $0x200,%ebx
801046d2:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
  mycpu()->ncli += 1;
801046d8:	e8 af f5 ff ff       	call   80103c8c <mycpu>
801046dd:	ff 80 a4 00 00 00    	incl   0xa4(%eax)
}
801046e3:	58                   	pop    %eax
801046e4:	5b                   	pop    %ebx
801046e5:	5d                   	pop    %ebp
801046e6:	c3                   	ret    
801046e7:	90                   	nop

801046e8 <acquire>:
{
801046e8:	55                   	push   %ebp
801046e9:	89 e5                	mov    %esp,%ebp
801046eb:	53                   	push   %ebx
801046ec:	50                   	push   %eax
  pushcli(); // disable interrupts to avoid deadlock.
801046ed:	e8 be ff ff ff       	call   801046b0 <pushcli>
  if(holding(lk))
801046f2:	8b 55 08             	mov    0x8(%ebp),%edx
  return lock->locked && lock->cpu == mycpu();
801046f5:	8b 0a                	mov    (%edx),%ecx
801046f7:	85 c9                	test   %ecx,%ecx
801046f9:	75 3d                	jne    80104738 <acquire+0x50>
  asm volatile("lock; xchgl %0, %1" :
801046fb:	b9 01 00 00 00       	mov    $0x1,%ecx
80104700:	eb 05                	jmp    80104707 <acquire+0x1f>
80104702:	66 90                	xchg   %ax,%ax
80104704:	8b 55 08             	mov    0x8(%ebp),%edx
80104707:	89 c8                	mov    %ecx,%eax
80104709:	f0 87 02             	lock xchg %eax,(%edx)
  while(xchg(&lk->locked, 1) != 0)
8010470c:	85 c0                	test   %eax,%eax
8010470e:	75 f4                	jne    80104704 <acquire+0x1c>
  __sync_synchronize();
80104710:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
  lk->cpu = mycpu();
80104715:	8b 5d 08             	mov    0x8(%ebp),%ebx
80104718:	e8 6f f5 ff ff       	call   80103c8c <mycpu>
8010471d:	89 43 08             	mov    %eax,0x8(%ebx)
  getcallerpcs(&lk, lk->pcs);
80104720:	83 ec 08             	sub    $0x8,%esp
80104723:	8b 45 08             	mov    0x8(%ebp),%eax
80104726:	83 c0 0c             	add    $0xc,%eax
80104729:	50                   	push   %eax
8010472a:	8d 45 08             	lea    0x8(%ebp),%eax
8010472d:	50                   	push   %eax
8010472e:	e8 0d ff ff ff       	call   80104640 <getcallerpcs>
}
80104733:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104736:	c9                   	leave  
80104737:	c3                   	ret    
  return lock->locked && lock->cpu == mycpu();
80104738:	8b 5a 08             	mov    0x8(%edx),%ebx
8010473b:	e8 4c f5 ff ff       	call   80103c8c <mycpu>
80104740:	39 c3                	cmp    %eax,%ebx
80104742:	74 05                	je     80104749 <acquire+0x61>
80104744:	8b 55 08             	mov    0x8(%ebp),%edx
80104747:	eb b2                	jmp    801046fb <acquire+0x13>
    panic("acquire");
80104749:	83 ec 0c             	sub    $0xc,%esp
8010474c:	68 a3 6a 10 80       	push   $0x80106aa3
80104751:	e8 8e c6 ff ff       	call   80100de4 <panic>
80104756:	66 90                	xchg   %ax,%ax

80104758 <popcli>:

void
popcli(void)
{
80104758:	55                   	push   %ebp
80104759:	89 e5                	mov    %esp,%ebp
8010475b:	83 ec 08             	sub    $0x8,%esp
  asm volatile("pushfl; popl %0" : "=r" (eflags));
8010475e:	9c                   	pushf  
8010475f:	58                   	pop    %eax
  if(readeflags()&FL_IF)
80104760:	f6 c4 02             	test   $0x2,%ah
80104763:	75 4a                	jne    801047af <popcli+0x57>
    panic("popcli - interruptible");
  if(--mycpu()->ncli < 0)
80104765:	e8 22 f5 ff ff       	call   80103c8c <mycpu>
8010476a:	8b 88 a4 00 00 00    	mov    0xa4(%eax),%ecx
80104770:	8d 51 ff             	lea    -0x1(%ecx),%edx
80104773:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
80104779:	85 d2                	test   %edx,%edx
8010477b:	78 25                	js     801047a2 <popcli+0x4a>
    panic("popcli");
  if(mycpu()->ncli == 0 && mycpu()->intena)
8010477d:	e8 0a f5 ff ff       	call   80103c8c <mycpu>
80104782:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
80104788:	85 d2                	test   %edx,%edx
8010478a:	74 04                	je     80104790 <popcli+0x38>
    sti();
}
8010478c:	c9                   	leave  
8010478d:	c3                   	ret    
8010478e:	66 90                	xchg   %ax,%ax
  if(mycpu()->ncli == 0 && mycpu()->intena)
80104790:	e8 f7 f4 ff ff       	call   80103c8c <mycpu>
80104795:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
8010479b:	85 c0                	test   %eax,%eax
8010479d:	74 ed                	je     8010478c <popcli+0x34>
  asm volatile("sti");
8010479f:	fb                   	sti    
}
801047a0:	c9                   	leave  
801047a1:	c3                   	ret    
    panic("popcli");
801047a2:	83 ec 0c             	sub    $0xc,%esp
801047a5:	68 c2 6a 10 80       	push   $0x80106ac2
801047aa:	e8 35 c6 ff ff       	call   80100de4 <panic>
    panic("popcli - interruptible");
801047af:	83 ec 0c             	sub    $0xc,%esp
801047b2:	68 ab 6a 10 80       	push   $0x80106aab
801047b7:	e8 28 c6 ff ff       	call   80100de4 <panic>

801047bc <release>:
{
801047bc:	55                   	push   %ebp
801047bd:	89 e5                	mov    %esp,%ebp
801047bf:	56                   	push   %esi
801047c0:	53                   	push   %ebx
801047c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  return lock->locked && lock->cpu == mycpu();
801047c4:	8b 03                	mov    (%ebx),%eax
801047c6:	85 c0                	test   %eax,%eax
801047c8:	75 0e                	jne    801047d8 <release+0x1c>
    panic("release");
801047ca:	83 ec 0c             	sub    $0xc,%esp
801047cd:	68 c9 6a 10 80       	push   $0x80106ac9
801047d2:	e8 0d c6 ff ff       	call   80100de4 <panic>
801047d7:	90                   	nop
  return lock->locked && lock->cpu == mycpu();
801047d8:	8b 73 08             	mov    0x8(%ebx),%esi
801047db:	e8 ac f4 ff ff       	call   80103c8c <mycpu>
801047e0:	39 c6                	cmp    %eax,%esi
801047e2:	75 e6                	jne    801047ca <release+0xe>
  lk->pcs[0] = 0;
801047e4:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  lk->cpu = 0;
801047eb:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  __sync_synchronize();
801047f2:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
801047f7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
}
801047fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104800:	5b                   	pop    %ebx
80104801:	5e                   	pop    %esi
80104802:	5d                   	pop    %ebp
  popcli();
80104803:	e9 50 ff ff ff       	jmp    80104758 <popcli>

80104808 <memset>:
#include "types.h"
#include "x86.h"

void*
memset(void *dst, int c, uint n)
{
80104808:	55                   	push   %ebp
80104809:	89 e5                	mov    %esp,%ebp
8010480b:	57                   	push   %edi
8010480c:	53                   	push   %ebx
8010480d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  if ((int)dst%4 == 0 && n%4 == 0){
80104810:	f6 c3 03             	test   $0x3,%bl
80104813:	75 06                	jne    8010481b <memset+0x13>
80104815:	f6 45 10 03          	testb  $0x3,0x10(%ebp)
80104819:	74 11                	je     8010482c <memset+0x24>
  asm volatile("cld; rep stosb" :
8010481b:	89 df                	mov    %ebx,%edi
8010481d:	8b 4d 10             	mov    0x10(%ebp),%ecx
80104820:	8b 45 0c             	mov    0xc(%ebp),%eax
80104823:	fc                   	cld    
80104824:	f3 aa                	rep stos %al,%es:(%edi)
    c &= 0xFF;
    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
  } else
    stosb(dst, c, n);
  return dst;
}
80104826:	89 d8                	mov    %ebx,%eax
80104828:	5b                   	pop    %ebx
80104829:	5f                   	pop    %edi
8010482a:	5d                   	pop    %ebp
8010482b:	c3                   	ret    
    c &= 0xFF;
8010482c:	0f b6 55 0c          	movzbl 0xc(%ebp),%edx
    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
80104830:	8b 4d 10             	mov    0x10(%ebp),%ecx
80104833:	c1 e9 02             	shr    $0x2,%ecx
80104836:	89 d7                	mov    %edx,%edi
80104838:	c1 e7 18             	shl    $0x18,%edi
8010483b:	89 d0                	mov    %edx,%eax
8010483d:	c1 e0 10             	shl    $0x10,%eax
80104840:	09 f8                	or     %edi,%eax
80104842:	09 d0                	or     %edx,%eax
80104844:	c1 e2 08             	shl    $0x8,%edx
80104847:	09 d0                	or     %edx,%eax
  asm volatile("cld; rep stosl" :
80104849:	89 df                	mov    %ebx,%edi
8010484b:	fc                   	cld    
8010484c:	f3 ab                	rep stos %eax,%es:(%edi)
}
8010484e:	89 d8                	mov    %ebx,%eax
80104850:	5b                   	pop    %ebx
80104851:	5f                   	pop    %edi
80104852:	5d                   	pop    %ebp
80104853:	c3                   	ret    

80104854 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
80104854:	55                   	push   %ebp
80104855:	89 e5                	mov    %esp,%ebp
80104857:	57                   	push   %edi
80104858:	56                   	push   %esi
80104859:	53                   	push   %ebx
8010485a:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010485d:	8b 75 0c             	mov    0xc(%ebp),%esi
80104860:	8b 45 10             	mov    0x10(%ebp),%eax
  const uchar *s1, *s2;

  s1 = v1;
  s2 = v2;
  while(n-- > 0){
80104863:	8d 78 ff             	lea    -0x1(%eax),%edi
80104866:	85 c0                	test   %eax,%eax
80104868:	74 1f                	je     80104889 <memcmp+0x35>
    if(*s1 != *s2)
8010486a:	8a 13                	mov    (%ebx),%dl
8010486c:	0f b6 0e             	movzbl (%esi),%ecx
8010486f:	38 ca                	cmp    %cl,%dl
80104871:	75 1d                	jne    80104890 <memcmp+0x3c>
80104873:	31 c0                	xor    %eax,%eax
80104875:	eb 0e                	jmp    80104885 <memcmp+0x31>
80104877:	90                   	nop
80104878:	8a 54 03 01          	mov    0x1(%ebx,%eax,1),%dl
8010487c:	40                   	inc    %eax
8010487d:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
80104881:	38 ca                	cmp    %cl,%dl
80104883:	75 0b                	jne    80104890 <memcmp+0x3c>
  while(n-- > 0){
80104885:	39 f8                	cmp    %edi,%eax
80104887:	75 ef                	jne    80104878 <memcmp+0x24>
      return *s1 - *s2;
    s1++, s2++;
  }

  return 0;
80104889:	31 c0                	xor    %eax,%eax
}
8010488b:	5b                   	pop    %ebx
8010488c:	5e                   	pop    %esi
8010488d:	5f                   	pop    %edi
8010488e:	5d                   	pop    %ebp
8010488f:	c3                   	ret    
      return *s1 - *s2;
80104890:	0f b6 c2             	movzbl %dl,%eax
80104893:	29 c8                	sub    %ecx,%eax
}
80104895:	5b                   	pop    %ebx
80104896:	5e                   	pop    %esi
80104897:	5f                   	pop    %edi
80104898:	5d                   	pop    %ebp
80104899:	c3                   	ret    
8010489a:	66 90                	xchg   %ax,%ax

8010489c <memmove>:

void*
memmove(void *dst, const void *src, uint n)
{
8010489c:	55                   	push   %ebp
8010489d:	89 e5                	mov    %esp,%ebp
8010489f:	57                   	push   %edi
801048a0:	56                   	push   %esi
801048a1:	53                   	push   %ebx
801048a2:	8b 45 08             	mov    0x8(%ebp),%eax
801048a5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
801048a8:	8b 7d 10             	mov    0x10(%ebp),%edi
  const char *s;
  char *d;

  s = src;
  d = dst;
  if(s < d && s + n > d){
801048ab:	39 c3                	cmp    %eax,%ebx
801048ad:	73 29                	jae    801048d8 <memmove+0x3c>
801048af:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
801048b2:	39 f0                	cmp    %esi,%eax
801048b4:	73 22                	jae    801048d8 <memmove+0x3c>
    s += n;
    d += n;
    while(n-- > 0)
801048b6:	8d 57 ff             	lea    -0x1(%edi),%edx
801048b9:	85 ff                	test   %edi,%edi
801048bb:	74 13                	je     801048d0 <memmove+0x34>
801048bd:	29 fe                	sub    %edi,%esi
801048bf:	89 f1                	mov    %esi,%ecx
801048c1:	8d 76 00             	lea    0x0(%esi),%esi
      *--d = *--s;
801048c4:	8a 1c 11             	mov    (%ecx,%edx,1),%bl
801048c7:	88 1c 10             	mov    %bl,(%eax,%edx,1)
    while(n-- > 0)
801048ca:	4a                   	dec    %edx
801048cb:	83 fa ff             	cmp    $0xffffffff,%edx
801048ce:	75 f4                	jne    801048c4 <memmove+0x28>
  } else
    while(n-- > 0)
      *d++ = *s++;

  return dst;
}
801048d0:	5b                   	pop    %ebx
801048d1:	5e                   	pop    %esi
801048d2:	5f                   	pop    %edi
801048d3:	5d                   	pop    %ebp
801048d4:	c3                   	ret    
801048d5:	8d 76 00             	lea    0x0(%esi),%esi
    while(n-- > 0)
801048d8:	31 d2                	xor    %edx,%edx
801048da:	85 ff                	test   %edi,%edi
801048dc:	74 f2                	je     801048d0 <memmove+0x34>
801048de:	66 90                	xchg   %ax,%ax
      *d++ = *s++;
801048e0:	8a 0c 13             	mov    (%ebx,%edx,1),%cl
801048e3:	88 0c 10             	mov    %cl,(%eax,%edx,1)
801048e6:	42                   	inc    %edx
    while(n-- > 0)
801048e7:	39 fa                	cmp    %edi,%edx
801048e9:	75 f5                	jne    801048e0 <memmove+0x44>
}
801048eb:	5b                   	pop    %ebx
801048ec:	5e                   	pop    %esi
801048ed:	5f                   	pop    %edi
801048ee:	5d                   	pop    %ebp
801048ef:	c3                   	ret    

801048f0 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void*
memcpy(void *dst, const void *src, uint n)
{
801048f0:	55                   	push   %ebp
801048f1:	89 e5                	mov    %esp,%ebp
  return memmove(dst, src, n);
}
801048f3:	5d                   	pop    %ebp
  return memmove(dst, src, n);
801048f4:	eb a6                	jmp    8010489c <memmove>
801048f6:	66 90                	xchg   %ax,%ax

801048f8 <strncmp>:

int
strncmp(const char *p, const char *q, uint n)
{
801048f8:	55                   	push   %ebp
801048f9:	89 e5                	mov    %esp,%ebp
801048fb:	57                   	push   %edi
801048fc:	56                   	push   %esi
801048fd:	53                   	push   %ebx
801048fe:	8b 7d 08             	mov    0x8(%ebp),%edi
80104901:	8b 75 0c             	mov    0xc(%ebp),%esi
80104904:	8b 5d 10             	mov    0x10(%ebp),%ebx
  while(n > 0 && *p && *p == *q)
80104907:	85 db                	test   %ebx,%ebx
80104909:	74 2c                	je     80104937 <strncmp+0x3f>
8010490b:	8a 17                	mov    (%edi),%dl
8010490d:	0f b6 0e             	movzbl (%esi),%ecx
80104910:	84 d2                	test   %dl,%dl
80104912:	74 3a                	je     8010494e <strncmp+0x56>
80104914:	38 ca                	cmp    %cl,%dl
80104916:	75 2c                	jne    80104944 <strncmp+0x4c>
80104918:	8d 47 01             	lea    0x1(%edi),%eax
8010491b:	01 df                	add    %ebx,%edi
8010491d:	eb 11                	jmp    80104930 <strncmp+0x38>
8010491f:	90                   	nop
80104920:	8a 10                	mov    (%eax),%dl
80104922:	84 d2                	test   %dl,%dl
80104924:	74 1a                	je     80104940 <strncmp+0x48>
80104926:	0f b6 0b             	movzbl (%ebx),%ecx
80104929:	40                   	inc    %eax
8010492a:	89 de                	mov    %ebx,%esi
8010492c:	38 ca                	cmp    %cl,%dl
8010492e:	75 14                	jne    80104944 <strncmp+0x4c>
    n--, p++, q++;
80104930:	8d 5e 01             	lea    0x1(%esi),%ebx
  while(n > 0 && *p && *p == *q)
80104933:	39 f8                	cmp    %edi,%eax
80104935:	75 e9                	jne    80104920 <strncmp+0x28>
  if(n == 0)
    return 0;
80104937:	31 c0                	xor    %eax,%eax
  return (uchar)*p - (uchar)*q;
}
80104939:	5b                   	pop    %ebx
8010493a:	5e                   	pop    %esi
8010493b:	5f                   	pop    %edi
8010493c:	5d                   	pop    %ebp
8010493d:	c3                   	ret    
8010493e:	66 90                	xchg   %ax,%ax
80104940:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
  return (uchar)*p - (uchar)*q;
80104944:	0f b6 c2             	movzbl %dl,%eax
80104947:	29 c8                	sub    %ecx,%eax
}
80104949:	5b                   	pop    %ebx
8010494a:	5e                   	pop    %esi
8010494b:	5f                   	pop    %edi
8010494c:	5d                   	pop    %ebp
8010494d:	c3                   	ret    
  while(n > 0 && *p && *p == *q)
8010494e:	31 d2                	xor    %edx,%edx
80104950:	eb f2                	jmp    80104944 <strncmp+0x4c>
80104952:	66 90                	xchg   %ax,%ax

80104954 <strncpy>:

char*
strncpy(char *s, const char *t, int n)
{
80104954:	55                   	push   %ebp
80104955:	89 e5                	mov    %esp,%ebp
80104957:	56                   	push   %esi
80104958:	53                   	push   %ebx
80104959:	8b 5d 0c             	mov    0xc(%ebp),%ebx
8010495c:	8b 4d 10             	mov    0x10(%ebp),%ecx
  char *os;

  os = s;
  while(n-- > 0 && (*s++ = *t++) != 0)
8010495f:	8b 55 08             	mov    0x8(%ebp),%edx
80104962:	eb 0c                	jmp    80104970 <strncpy+0x1c>
80104964:	42                   	inc    %edx
80104965:	43                   	inc    %ebx
80104966:	8a 43 ff             	mov    -0x1(%ebx),%al
80104969:	88 42 ff             	mov    %al,-0x1(%edx)
8010496c:	84 c0                	test   %al,%al
8010496e:	74 08                	je     80104978 <strncpy+0x24>
80104970:	49                   	dec    %ecx
80104971:	8d 71 01             	lea    0x1(%ecx),%esi
80104974:	85 f6                	test   %esi,%esi
80104976:	7f ec                	jg     80104964 <strncpy+0x10>
80104978:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
    ;
  while(n-- > 0)
8010497b:	85 c9                	test   %ecx,%ecx
8010497d:	7e 0a                	jle    80104989 <strncpy+0x35>
8010497f:	90                   	nop
    *s++ = 0;
80104980:	42                   	inc    %edx
80104981:	c6 42 ff 00          	movb   $0x0,-0x1(%edx)
  while(n-- > 0)
80104985:	39 c2                	cmp    %eax,%edx
80104987:	75 f7                	jne    80104980 <strncpy+0x2c>
  return os;
}
80104989:	8b 45 08             	mov    0x8(%ebp),%eax
8010498c:	5b                   	pop    %ebx
8010498d:	5e                   	pop    %esi
8010498e:	5d                   	pop    %ebp
8010498f:	c3                   	ret    

80104990 <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char*
safestrcpy(char *s, const char *t, int n)
{
80104990:	55                   	push   %ebp
80104991:	89 e5                	mov    %esp,%ebp
80104993:	56                   	push   %esi
80104994:	53                   	push   %ebx
80104995:	8b 45 08             	mov    0x8(%ebp),%eax
80104998:	8b 55 0c             	mov    0xc(%ebp),%edx
8010499b:	8b 4d 10             	mov    0x10(%ebp),%ecx
  char *os;

  os = s;
  if(n <= 0)
8010499e:	85 c9                	test   %ecx,%ecx
801049a0:	7e 1d                	jle    801049bf <safestrcpy+0x2f>
801049a2:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
801049a6:	89 c1                	mov    %eax,%ecx
801049a8:	eb 0e                	jmp    801049b8 <safestrcpy+0x28>
801049aa:	66 90                	xchg   %ax,%ax
    return os;
  while(--n > 0 && (*s++ = *t++) != 0)
801049ac:	41                   	inc    %ecx
801049ad:	42                   	inc    %edx
801049ae:	8a 5a ff             	mov    -0x1(%edx),%bl
801049b1:	88 59 ff             	mov    %bl,-0x1(%ecx)
801049b4:	84 db                	test   %bl,%bl
801049b6:	74 04                	je     801049bc <safestrcpy+0x2c>
801049b8:	39 f2                	cmp    %esi,%edx
801049ba:	75 f0                	jne    801049ac <safestrcpy+0x1c>
    ;
  *s = 0;
801049bc:	c6 01 00             	movb   $0x0,(%ecx)
  return os;
}
801049bf:	5b                   	pop    %ebx
801049c0:	5e                   	pop    %esi
801049c1:	5d                   	pop    %ebp
801049c2:	c3                   	ret    
801049c3:	90                   	nop

801049c4 <strlen>:

int
strlen(const char *s)
{
801049c4:	55                   	push   %ebp
801049c5:	89 e5                	mov    %esp,%ebp
801049c7:	8b 55 08             	mov    0x8(%ebp),%edx
  int n;

  for(n = 0; s[n]; n++)
801049ca:	31 c0                	xor    %eax,%eax
801049cc:	80 3a 00             	cmpb   $0x0,(%edx)
801049cf:	74 0a                	je     801049db <strlen+0x17>
801049d1:	8d 76 00             	lea    0x0(%esi),%esi
801049d4:	40                   	inc    %eax
801049d5:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
801049d9:	75 f9                	jne    801049d4 <strlen+0x10>
    ;
  return n;
}
801049db:	5d                   	pop    %ebp
801049dc:	c3                   	ret    
801049dd:	66 90                	xchg   %ax,%ax
801049df:	90                   	nop

801049e0 <fetchint>:
// to a saved program counter, and then the first argument.

// Fetch the int at addr from the current process.
int
fetchint(uint addr, int *ip)
{
801049e0:	55                   	push   %ebp
801049e1:	89 e5                	mov    %esp,%ebp
801049e3:	53                   	push   %ebx
801049e4:	51                   	push   %ecx
801049e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct proc *curproc = myproc();
801049e8:	e8 4b f3 ff ff       	call   80103d38 <myproc>

  if(addr >= curproc->sz || addr+4 > curproc->sz)
801049ed:	8b 00                	mov    (%eax),%eax
801049ef:	39 d8                	cmp    %ebx,%eax
801049f1:	76 15                	jbe    80104a08 <fetchint+0x28>
801049f3:	8d 53 04             	lea    0x4(%ebx),%edx
801049f6:	39 d0                	cmp    %edx,%eax
801049f8:	72 0e                	jb     80104a08 <fetchint+0x28>
    return -1;
  *ip = *(int*)(addr);
801049fa:	8b 13                	mov    (%ebx),%edx
801049fc:	8b 45 0c             	mov    0xc(%ebp),%eax
801049ff:	89 10                	mov    %edx,(%eax)
  return 0;
80104a01:	31 c0                	xor    %eax,%eax
}
80104a03:	5a                   	pop    %edx
80104a04:	5b                   	pop    %ebx
80104a05:	5d                   	pop    %ebp
80104a06:	c3                   	ret    
80104a07:	90                   	nop
    return -1;
80104a08:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104a0d:	eb f4                	jmp    80104a03 <fetchint+0x23>
80104a0f:	90                   	nop

80104a10 <fetchstr>:
// Fetch the nul-terminated string at addr from the current process.
// Doesn't actually copy the string - just sets *pp to point at it.
// Returns length of string, not including nul.
int
fetchstr(uint addr, char **pp)
{
80104a10:	55                   	push   %ebp
80104a11:	89 e5                	mov    %esp,%ebp
80104a13:	53                   	push   %ebx
80104a14:	51                   	push   %ecx
80104a15:	8b 5d 08             	mov    0x8(%ebp),%ebx
  char *s, *ep;
  struct proc *curproc = myproc();
80104a18:	e8 1b f3 ff ff       	call   80103d38 <myproc>

  if(addr >= curproc->sz)
80104a1d:	39 18                	cmp    %ebx,(%eax)
80104a1f:	76 21                	jbe    80104a42 <fetchstr+0x32>
    return -1;
  *pp = (char*)addr;
80104a21:	89 da                	mov    %ebx,%edx
80104a23:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80104a26:	89 19                	mov    %ebx,(%ecx)
  ep = (char*)curproc->sz;
80104a28:	8b 00                	mov    (%eax),%eax
  for(s = *pp; s < ep; s++){
80104a2a:	39 c3                	cmp    %eax,%ebx
80104a2c:	73 14                	jae    80104a42 <fetchstr+0x32>
    if(*s == 0)
80104a2e:	80 3b 00             	cmpb   $0x0,(%ebx)
80104a31:	75 0a                	jne    80104a3d <fetchstr+0x2d>
80104a33:	eb 17                	jmp    80104a4c <fetchstr+0x3c>
80104a35:	8d 76 00             	lea    0x0(%esi),%esi
80104a38:	80 3a 00             	cmpb   $0x0,(%edx)
80104a3b:	74 0f                	je     80104a4c <fetchstr+0x3c>
  for(s = *pp; s < ep; s++){
80104a3d:	42                   	inc    %edx
80104a3e:	39 d0                	cmp    %edx,%eax
80104a40:	77 f6                	ja     80104a38 <fetchstr+0x28>
    return -1;
80104a42:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
      return s - *pp;
  }
  return -1;
}
80104a47:	5a                   	pop    %edx
80104a48:	5b                   	pop    %ebx
80104a49:	5d                   	pop    %ebp
80104a4a:	c3                   	ret    
80104a4b:	90                   	nop
      return s - *pp;
80104a4c:	89 d0                	mov    %edx,%eax
80104a4e:	29 d8                	sub    %ebx,%eax
}
80104a50:	5a                   	pop    %edx
80104a51:	5b                   	pop    %ebx
80104a52:	5d                   	pop    %ebp
80104a53:	c3                   	ret    

80104a54 <argint>:

// Fetch the nth 32-bit system call argument.
int
argint(int n, int *ip)
{
80104a54:	55                   	push   %ebp
80104a55:	89 e5                	mov    %esp,%ebp
80104a57:	56                   	push   %esi
80104a58:	53                   	push   %ebx
80104a59:	8b 5d 08             	mov    0x8(%ebp),%ebx
80104a5c:	8b 75 0c             	mov    0xc(%ebp),%esi
  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
80104a5f:	e8 d4 f2 ff ff       	call   80103d38 <myproc>
80104a64:	89 75 0c             	mov    %esi,0xc(%ebp)
80104a67:	8b 40 18             	mov    0x18(%eax),%eax
80104a6a:	8b 40 44             	mov    0x44(%eax),%eax
80104a6d:	8d 44 98 04          	lea    0x4(%eax,%ebx,4),%eax
80104a71:	89 45 08             	mov    %eax,0x8(%ebp)
}
80104a74:	5b                   	pop    %ebx
80104a75:	5e                   	pop    %esi
80104a76:	5d                   	pop    %ebp
  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
80104a77:	e9 64 ff ff ff       	jmp    801049e0 <fetchint>

80104a7c <argptr>:
// Fetch the nth word-sized system call argument as a pointer
// to a block of memory of size bytes.  Check that the pointer
// lies within the process address space.
int
argptr(int n, char **pp, int size)
{
80104a7c:	55                   	push   %ebp
80104a7d:	89 e5                	mov    %esp,%ebp
80104a7f:	56                   	push   %esi
80104a80:	53                   	push   %ebx
80104a81:	83 ec 10             	sub    $0x10,%esp
80104a84:	8b 5d 10             	mov    0x10(%ebp),%ebx
  int i;
  struct proc *curproc = myproc();
80104a87:	e8 ac f2 ff ff       	call   80103d38 <myproc>
80104a8c:	89 c6                	mov    %eax,%esi
 
  if(argint(n, &i) < 0)
80104a8e:	83 ec 08             	sub    $0x8,%esp
80104a91:	8d 45 f4             	lea    -0xc(%ebp),%eax
80104a94:	50                   	push   %eax
80104a95:	ff 75 08             	pushl  0x8(%ebp)
80104a98:	e8 b7 ff ff ff       	call   80104a54 <argint>
80104a9d:	83 c4 10             	add    $0x10,%esp
80104aa0:	85 c0                	test   %eax,%eax
80104aa2:	78 24                	js     80104ac8 <argptr+0x4c>
    return -1;
  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
80104aa4:	85 db                	test   %ebx,%ebx
80104aa6:	78 20                	js     80104ac8 <argptr+0x4c>
80104aa8:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104aab:	8b 06                	mov    (%esi),%eax
80104aad:	39 c2                	cmp    %eax,%edx
80104aaf:	73 17                	jae    80104ac8 <argptr+0x4c>
80104ab1:	01 d3                	add    %edx,%ebx
80104ab3:	39 d8                	cmp    %ebx,%eax
80104ab5:	72 11                	jb     80104ac8 <argptr+0x4c>
    return -1;
  *pp = (char*)i;
80104ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
80104aba:	89 10                	mov    %edx,(%eax)
  return 0;
80104abc:	31 c0                	xor    %eax,%eax
}
80104abe:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104ac1:	5b                   	pop    %ebx
80104ac2:	5e                   	pop    %esi
80104ac3:	5d                   	pop    %ebp
80104ac4:	c3                   	ret    
80104ac5:	8d 76 00             	lea    0x0(%esi),%esi
    return -1;
80104ac8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104acd:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104ad0:	5b                   	pop    %ebx
80104ad1:	5e                   	pop    %esi
80104ad2:	5d                   	pop    %ebp
80104ad3:	c3                   	ret    

80104ad4 <argstr>:
// Check that the pointer is valid and the string is nul-terminated.
// (There is no shared writable memory, so the string can't change
// between this check and being used by the kernel.)
int
argstr(int n, char **pp)
{
80104ad4:	55                   	push   %ebp
80104ad5:	89 e5                	mov    %esp,%ebp
80104ad7:	83 ec 20             	sub    $0x20,%esp
  int addr;
  if(argint(n, &addr) < 0)
80104ada:	8d 45 f4             	lea    -0xc(%ebp),%eax
80104add:	50                   	push   %eax
80104ade:	ff 75 08             	pushl  0x8(%ebp)
80104ae1:	e8 6e ff ff ff       	call   80104a54 <argint>
80104ae6:	83 c4 10             	add    $0x10,%esp
80104ae9:	85 c0                	test   %eax,%eax
80104aeb:	78 13                	js     80104b00 <argstr+0x2c>
    return -1;
  return fetchstr(addr, pp);
80104aed:	83 ec 08             	sub    $0x8,%esp
80104af0:	ff 75 0c             	pushl  0xc(%ebp)
80104af3:	ff 75 f4             	pushl  -0xc(%ebp)
80104af6:	e8 15 ff ff ff       	call   80104a10 <fetchstr>
80104afb:	83 c4 10             	add    $0x10,%esp
}
80104afe:	c9                   	leave  
80104aff:	c3                   	ret    
    return -1;
80104b00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104b05:	c9                   	leave  
80104b06:	c3                   	ret    
80104b07:	90                   	nop

80104b08 <syscall>:
[SYS_close]   sys_close,
};

void
syscall(void)
{
80104b08:	55                   	push   %ebp
80104b09:	89 e5                	mov    %esp,%ebp
80104b0b:	53                   	push   %ebx
80104b0c:	83 ec 14             	sub    $0x14,%esp
  int num;
  struct proc *curproc = myproc();
80104b0f:	e8 24 f2 ff ff       	call   80103d38 <myproc>

  num = curproc->tf->eax;
80104b14:	8b 58 18             	mov    0x18(%eax),%ebx
80104b17:	8b 53 1c             	mov    0x1c(%ebx),%edx
  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
80104b1a:	8d 4a ff             	lea    -0x1(%edx),%ecx
80104b1d:	83 f9 14             	cmp    $0x14,%ecx
80104b20:	77 16                	ja     80104b38 <syscall+0x30>
80104b22:	8b 0c 95 00 6b 10 80 	mov    -0x7fef9500(,%edx,4),%ecx
80104b29:	85 c9                	test   %ecx,%ecx
80104b2b:	74 0b                	je     80104b38 <syscall+0x30>
    curproc->tf->eax = syscalls[num]();
80104b2d:	ff d1                	call   *%ecx
80104b2f:	89 43 1c             	mov    %eax,0x1c(%ebx)
  } else {
    cprintf("%d %s: unknown sys call %d\n",
            curproc->pid, curproc->name, num);
    curproc->tf->eax = -1;
  }
}
80104b32:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104b35:	c9                   	leave  
80104b36:	c3                   	ret    
80104b37:	90                   	nop
    cprintf("%d %s: unknown sys call %d\n",
80104b38:	52                   	push   %edx
            curproc->pid, curproc->name, num);
80104b39:	8d 50 6c             	lea    0x6c(%eax),%edx
    cprintf("%d %s: unknown sys call %d\n",
80104b3c:	52                   	push   %edx
80104b3d:	ff 70 10             	pushl  0x10(%eax)
80104b40:	89 45 f4             	mov    %eax,-0xc(%ebp)
80104b43:	68 d1 6a 10 80       	push   $0x80106ad1
80104b48:	e8 47 c5 ff ff       	call   80101094 <cprintf>
    curproc->tf->eax = -1;
80104b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b50:	8b 40 18             	mov    0x18(%eax),%eax
80104b53:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
80104b5a:	83 c4 10             	add    $0x10,%esp
}
80104b5d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104b60:	c9                   	leave  
80104b61:	c3                   	ret    
80104b62:	66 90                	xchg   %ax,%ax

80104b64 <fdalloc>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
static int
fdalloc(struct file *f)
{
80104b64:	55                   	push   %ebp
80104b65:	89 e5                	mov    %esp,%ebp
80104b67:	53                   	push   %ebx
80104b68:	53                   	push   %ebx
80104b69:	89 c3                	mov    %eax,%ebx
  int fd;
  struct proc *curproc = myproc();
80104b6b:	e8 c8 f1 ff ff       	call   80103d38 <myproc>

  for(fd = 0; fd < NOFILE; fd++){
80104b70:	31 d2                	xor    %edx,%edx
80104b72:	66 90                	xchg   %ax,%ax
    if(curproc->ofile[fd] == 0){
80104b74:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
80104b78:	85 c9                	test   %ecx,%ecx
80104b7a:	74 10                	je     80104b8c <fdalloc+0x28>
  for(fd = 0; fd < NOFILE; fd++){
80104b7c:	42                   	inc    %edx
80104b7d:	83 fa 10             	cmp    $0x10,%edx
80104b80:	75 f2                	jne    80104b74 <fdalloc+0x10>
      curproc->ofile[fd] = f;
      return fd;
    }
  }
  return -1;
80104b82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104b87:	5a                   	pop    %edx
80104b88:	5b                   	pop    %ebx
80104b89:	5d                   	pop    %ebp
80104b8a:	c3                   	ret    
80104b8b:	90                   	nop
      curproc->ofile[fd] = f;
80104b8c:	89 5c 90 28          	mov    %ebx,0x28(%eax,%edx,4)
      return fd;
80104b90:	89 d0                	mov    %edx,%eax
}
80104b92:	5a                   	pop    %edx
80104b93:	5b                   	pop    %ebx
80104b94:	5d                   	pop    %ebp
80104b95:	c3                   	ret    
80104b96:	66 90                	xchg   %ax,%ax

80104b98 <create>:
  return -1;
}

static struct inode*
create(char *path, short type, short major, short minor)
{
80104b98:	55                   	push   %ebp
80104b99:	89 e5                	mov    %esp,%ebp
80104b9b:	57                   	push   %edi
80104b9c:	56                   	push   %esi
80104b9d:	53                   	push   %ebx
80104b9e:	83 ec 44             	sub    $0x44,%esp
80104ba1:	89 55 c4             	mov    %edx,-0x3c(%ebp)
80104ba4:	89 4d c0             	mov    %ecx,-0x40(%ebp)
80104ba7:	8b 4d 08             	mov    0x8(%ebp),%ecx
80104baa:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  uint off;
  struct inode *ip, *dp;
  char name[DIRSIZ];

  if((dp = nameiparent(path, name)) == 0)
80104bad:	8d 75 da             	lea    -0x26(%ebp),%esi
80104bb0:	56                   	push   %esi
80104bb1:	50                   	push   %eax
80104bb2:	e8 a1 db ff ff       	call   80102758 <nameiparent>
80104bb7:	89 c7                	mov    %eax,%edi
80104bb9:	83 c4 10             	add    $0x10,%esp
80104bbc:	85 c0                	test   %eax,%eax
80104bbe:	0f 84 d8 00 00 00    	je     80104c9c <create+0x104>
    return 0;
  ilock(dp);
80104bc4:	83 ec 0c             	sub    $0xc,%esp
80104bc7:	50                   	push   %eax
80104bc8:	e8 93 d3 ff ff       	call   80101f60 <ilock>

  if((ip = dirlookup(dp, name, &off)) != 0){
80104bcd:	83 c4 0c             	add    $0xc,%esp
80104bd0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
80104bd3:	50                   	push   %eax
80104bd4:	56                   	push   %esi
80104bd5:	57                   	push   %edi
80104bd6:	e8 61 d8 ff ff       	call   8010243c <dirlookup>
80104bdb:	89 c3                	mov    %eax,%ebx
80104bdd:	83 c4 10             	add    $0x10,%esp
80104be0:	85 c0                	test   %eax,%eax
80104be2:	74 44                	je     80104c28 <create+0x90>
    iunlockput(dp);
80104be4:	83 ec 0c             	sub    $0xc,%esp
80104be7:	57                   	push   %edi
80104be8:	e8 c7 d5 ff ff       	call   801021b4 <iunlockput>
    ilock(ip);
80104bed:	89 1c 24             	mov    %ebx,(%esp)
80104bf0:	e8 6b d3 ff ff       	call   80101f60 <ilock>
    if(type == T_FILE && ip->type == T_FILE)
80104bf5:	83 c4 10             	add    $0x10,%esp
80104bf8:	66 83 7d c4 02       	cmpw   $0x2,-0x3c(%ebp)
80104bfd:	75 11                	jne    80104c10 <create+0x78>
80104bff:	66 83 7b 50 02       	cmpw   $0x2,0x50(%ebx)
80104c04:	75 0a                	jne    80104c10 <create+0x78>
80104c06:	89 d8                	mov    %ebx,%eax
    panic("create: dirlink");

  iunlockput(dp);

  return ip;
}
80104c08:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104c0b:	5b                   	pop    %ebx
80104c0c:	5e                   	pop    %esi
80104c0d:	5f                   	pop    %edi
80104c0e:	5d                   	pop    %ebp
80104c0f:	c3                   	ret    
    iunlockput(ip);
80104c10:	83 ec 0c             	sub    $0xc,%esp
80104c13:	53                   	push   %ebx
80104c14:	e8 9b d5 ff ff       	call   801021b4 <iunlockput>
    return 0;
80104c19:	83 c4 10             	add    $0x10,%esp
80104c1c:	31 c0                	xor    %eax,%eax
}
80104c1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104c21:	5b                   	pop    %ebx
80104c22:	5e                   	pop    %esi
80104c23:	5f                   	pop    %edi
80104c24:	5d                   	pop    %ebp
80104c25:	c3                   	ret    
80104c26:	66 90                	xchg   %ax,%ax
  if((ip = ialloc(dp->dev, type)) == 0)
80104c28:	83 ec 08             	sub    $0x8,%esp
80104c2b:	0f bf 45 c4          	movswl -0x3c(%ebp),%eax
80104c2f:	50                   	push   %eax
80104c30:	ff 37                	pushl  (%edi)
80104c32:	e8 d1 d1 ff ff       	call   80101e08 <ialloc>
80104c37:	89 c3                	mov    %eax,%ebx
80104c39:	83 c4 10             	add    $0x10,%esp
80104c3c:	85 c0                	test   %eax,%eax
80104c3e:	0f 84 b5 00 00 00    	je     80104cf9 <create+0x161>
  ilock(ip);
80104c44:	83 ec 0c             	sub    $0xc,%esp
80104c47:	50                   	push   %eax
80104c48:	e8 13 d3 ff ff       	call   80101f60 <ilock>
  ip->major = major;
80104c4d:	8b 45 c0             	mov    -0x40(%ebp),%eax
80104c50:	66 89 43 52          	mov    %ax,0x52(%ebx)
  ip->minor = minor;
80104c54:	8b 45 bc             	mov    -0x44(%ebp),%eax
80104c57:	66 89 43 54          	mov    %ax,0x54(%ebx)
  ip->nlink = 1;
80104c5b:	66 c7 43 56 01 00    	movw   $0x1,0x56(%ebx)
  iupdate(ip);
80104c61:	89 1c 24             	mov    %ebx,(%esp)
80104c64:	e8 4f d2 ff ff       	call   80101eb8 <iupdate>
  if(type == T_DIR){  // Create . and .. entries.
80104c69:	83 c4 10             	add    $0x10,%esp
80104c6c:	66 83 7d c4 01       	cmpw   $0x1,-0x3c(%ebp)
80104c71:	74 31                	je     80104ca4 <create+0x10c>
  if(dirlink(dp, name, ip->inum) < 0)
80104c73:	50                   	push   %eax
80104c74:	ff 73 04             	pushl  0x4(%ebx)
80104c77:	56                   	push   %esi
80104c78:	57                   	push   %edi
80104c79:	e8 0e da ff ff       	call   8010268c <dirlink>
80104c7e:	83 c4 10             	add    $0x10,%esp
80104c81:	85 c0                	test   %eax,%eax
80104c83:	78 67                	js     80104cec <create+0x154>
  iunlockput(dp);
80104c85:	83 ec 0c             	sub    $0xc,%esp
80104c88:	57                   	push   %edi
80104c89:	e8 26 d5 ff ff       	call   801021b4 <iunlockput>
  return ip;
80104c8e:	83 c4 10             	add    $0x10,%esp
80104c91:	89 d8                	mov    %ebx,%eax
}
80104c93:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104c96:	5b                   	pop    %ebx
80104c97:	5e                   	pop    %esi
80104c98:	5f                   	pop    %edi
80104c99:	5d                   	pop    %ebp
80104c9a:	c3                   	ret    
80104c9b:	90                   	nop
    return 0;
80104c9c:	31 c0                	xor    %eax,%eax
80104c9e:	e9 65 ff ff ff       	jmp    80104c08 <create+0x70>
80104ca3:	90                   	nop
    dp->nlink++;  // for ".."
80104ca4:	66 ff 47 56          	incw   0x56(%edi)
    iupdate(dp);
80104ca8:	83 ec 0c             	sub    $0xc,%esp
80104cab:	57                   	push   %edi
80104cac:	e8 07 d2 ff ff       	call   80101eb8 <iupdate>
    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
80104cb1:	83 c4 0c             	add    $0xc,%esp
80104cb4:	ff 73 04             	pushl  0x4(%ebx)
80104cb7:	68 74 6b 10 80       	push   $0x80106b74
80104cbc:	53                   	push   %ebx
80104cbd:	e8 ca d9 ff ff       	call   8010268c <dirlink>
80104cc2:	83 c4 10             	add    $0x10,%esp
80104cc5:	85 c0                	test   %eax,%eax
80104cc7:	78 16                	js     80104cdf <create+0x147>
80104cc9:	52                   	push   %edx
80104cca:	ff 77 04             	pushl  0x4(%edi)
80104ccd:	68 73 6b 10 80       	push   $0x80106b73
80104cd2:	53                   	push   %ebx
80104cd3:	e8 b4 d9 ff ff       	call   8010268c <dirlink>
80104cd8:	83 c4 10             	add    $0x10,%esp
80104cdb:	85 c0                	test   %eax,%eax
80104cdd:	79 94                	jns    80104c73 <create+0xdb>
      panic("create dots");
80104cdf:	83 ec 0c             	sub    $0xc,%esp
80104ce2:	68 67 6b 10 80       	push   $0x80106b67
80104ce7:	e8 f8 c0 ff ff       	call   80100de4 <panic>
    panic("create: dirlink");
80104cec:	83 ec 0c             	sub    $0xc,%esp
80104cef:	68 76 6b 10 80       	push   $0x80106b76
80104cf4:	e8 eb c0 ff ff       	call   80100de4 <panic>
    panic("create: ialloc");
80104cf9:	83 ec 0c             	sub    $0xc,%esp
80104cfc:	68 58 6b 10 80       	push   $0x80106b58
80104d01:	e8 de c0 ff ff       	call   80100de4 <panic>
80104d06:	66 90                	xchg   %ax,%ax

80104d08 <argfd.constprop.0>:
argfd(int n, int *pfd, struct file **pf)
80104d08:	55                   	push   %ebp
80104d09:	89 e5                	mov    %esp,%ebp
80104d0b:	56                   	push   %esi
80104d0c:	53                   	push   %ebx
80104d0d:	83 ec 18             	sub    $0x18,%esp
80104d10:	89 c6                	mov    %eax,%esi
80104d12:	89 d3                	mov    %edx,%ebx
  if(argint(n, &fd) < 0)
80104d14:	8d 45 f4             	lea    -0xc(%ebp),%eax
80104d17:	50                   	push   %eax
80104d18:	6a 00                	push   $0x0
80104d1a:	e8 35 fd ff ff       	call   80104a54 <argint>
80104d1f:	83 c4 10             	add    $0x10,%esp
80104d22:	85 c0                	test   %eax,%eax
80104d24:	78 2e                	js     80104d54 <argfd.constprop.0+0x4c>
  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
80104d26:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80104d2a:	77 28                	ja     80104d54 <argfd.constprop.0+0x4c>
80104d2c:	e8 07 f0 ff ff       	call   80103d38 <myproc>
80104d31:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104d34:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
80104d38:	85 c0                	test   %eax,%eax
80104d3a:	74 18                	je     80104d54 <argfd.constprop.0+0x4c>
  if(pfd)
80104d3c:	85 f6                	test   %esi,%esi
80104d3e:	74 02                	je     80104d42 <argfd.constprop.0+0x3a>
    *pfd = fd;
80104d40:	89 16                	mov    %edx,(%esi)
  if(pf)
80104d42:	85 db                	test   %ebx,%ebx
80104d44:	74 1a                	je     80104d60 <argfd.constprop.0+0x58>
    *pf = f;
80104d46:	89 03                	mov    %eax,(%ebx)
  return 0;
80104d48:	31 c0                	xor    %eax,%eax
}
80104d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104d4d:	5b                   	pop    %ebx
80104d4e:	5e                   	pop    %esi
80104d4f:	5d                   	pop    %ebp
80104d50:	c3                   	ret    
80104d51:	8d 76 00             	lea    0x0(%esi),%esi
    return -1;
80104d54:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104d59:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104d5c:	5b                   	pop    %ebx
80104d5d:	5e                   	pop    %esi
80104d5e:	5d                   	pop    %ebp
80104d5f:	c3                   	ret    
  return 0;
80104d60:	31 c0                	xor    %eax,%eax
80104d62:	eb e6                	jmp    80104d4a <argfd.constprop.0+0x42>

80104d64 <sys_dup>:
{
80104d64:	55                   	push   %ebp
80104d65:	89 e5                	mov    %esp,%ebp
80104d67:	53                   	push   %ebx
80104d68:	83 ec 14             	sub    $0x14,%esp
  if(argfd(0, 0, &f) < 0)
80104d6b:	8d 55 f4             	lea    -0xc(%ebp),%edx
80104d6e:	31 c0                	xor    %eax,%eax
80104d70:	e8 93 ff ff ff       	call   80104d08 <argfd.constprop.0>
80104d75:	85 c0                	test   %eax,%eax
80104d77:	78 23                	js     80104d9c <sys_dup+0x38>
  if((fd=fdalloc(f)) < 0)
80104d79:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104d7c:	e8 e3 fd ff ff       	call   80104b64 <fdalloc>
80104d81:	89 c3                	mov    %eax,%ebx
80104d83:	85 c0                	test   %eax,%eax
80104d85:	78 15                	js     80104d9c <sys_dup+0x38>
  filedup(f);
80104d87:	83 ec 0c             	sub    $0xc,%esp
80104d8a:	ff 75 f4             	pushl  -0xc(%ebp)
80104d8d:	e8 e6 c9 ff ff       	call   80101778 <filedup>
  return fd;
80104d92:	83 c4 10             	add    $0x10,%esp
80104d95:	89 d8                	mov    %ebx,%eax
}
80104d97:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104d9a:	c9                   	leave  
80104d9b:	c3                   	ret    
    return -1;
80104d9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104da1:	eb f4                	jmp    80104d97 <sys_dup+0x33>
80104da3:	90                   	nop

80104da4 <sys_read>:
{
80104da4:	55                   	push   %ebp
80104da5:	89 e5                	mov    %esp,%ebp
80104da7:	83 ec 18             	sub    $0x18,%esp
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
80104daa:	8d 55 ec             	lea    -0x14(%ebp),%edx
80104dad:	31 c0                	xor    %eax,%eax
80104daf:	e8 54 ff ff ff       	call   80104d08 <argfd.constprop.0>
80104db4:	85 c0                	test   %eax,%eax
80104db6:	78 40                	js     80104df8 <sys_read+0x54>
80104db8:	83 ec 08             	sub    $0x8,%esp
80104dbb:	8d 45 f0             	lea    -0x10(%ebp),%eax
80104dbe:	50                   	push   %eax
80104dbf:	6a 02                	push   $0x2
80104dc1:	e8 8e fc ff ff       	call   80104a54 <argint>
80104dc6:	83 c4 10             	add    $0x10,%esp
80104dc9:	85 c0                	test   %eax,%eax
80104dcb:	78 2b                	js     80104df8 <sys_read+0x54>
80104dcd:	52                   	push   %edx
80104dce:	ff 75 f0             	pushl  -0x10(%ebp)
80104dd1:	8d 45 f4             	lea    -0xc(%ebp),%eax
80104dd4:	50                   	push   %eax
80104dd5:	6a 01                	push   $0x1
80104dd7:	e8 a0 fc ff ff       	call   80104a7c <argptr>
80104ddc:	83 c4 10             	add    $0x10,%esp
80104ddf:	85 c0                	test   %eax,%eax
80104de1:	78 15                	js     80104df8 <sys_read+0x54>
  return fileread(f, p, n);
80104de3:	50                   	push   %eax
80104de4:	ff 75 f0             	pushl  -0x10(%ebp)
80104de7:	ff 75 f4             	pushl  -0xc(%ebp)
80104dea:	ff 75 ec             	pushl  -0x14(%ebp)
80104ded:	e8 ca ca ff ff       	call   801018bc <fileread>
80104df2:	83 c4 10             	add    $0x10,%esp
}
80104df5:	c9                   	leave  
80104df6:	c3                   	ret    
80104df7:	90                   	nop
    return -1;
80104df8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104dfd:	c9                   	leave  
80104dfe:	c3                   	ret    
80104dff:	90                   	nop

80104e00 <sys_write>:
{
80104e00:	55                   	push   %ebp
80104e01:	89 e5                	mov    %esp,%ebp
80104e03:	83 ec 18             	sub    $0x18,%esp
  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
80104e06:	8d 55 ec             	lea    -0x14(%ebp),%edx
80104e09:	31 c0                	xor    %eax,%eax
80104e0b:	e8 f8 fe ff ff       	call   80104d08 <argfd.constprop.0>
80104e10:	85 c0                	test   %eax,%eax
80104e12:	78 40                	js     80104e54 <sys_write+0x54>
80104e14:	83 ec 08             	sub    $0x8,%esp
80104e17:	8d 45 f0             	lea    -0x10(%ebp),%eax
80104e1a:	50                   	push   %eax
80104e1b:	6a 02                	push   $0x2
80104e1d:	e8 32 fc ff ff       	call   80104a54 <argint>
80104e22:	83 c4 10             	add    $0x10,%esp
80104e25:	85 c0                	test   %eax,%eax
80104e27:	78 2b                	js     80104e54 <sys_write+0x54>
80104e29:	52                   	push   %edx
80104e2a:	ff 75 f0             	pushl  -0x10(%ebp)
80104e2d:	8d 45 f4             	lea    -0xc(%ebp),%eax
80104e30:	50                   	push   %eax
80104e31:	6a 01                	push   $0x1
80104e33:	e8 44 fc ff ff       	call   80104a7c <argptr>
80104e38:	83 c4 10             	add    $0x10,%esp
80104e3b:	85 c0                	test   %eax,%eax
80104e3d:	78 15                	js     80104e54 <sys_write+0x54>
  return filewrite(f, p, n);
80104e3f:	50                   	push   %eax
80104e40:	ff 75 f0             	pushl  -0x10(%ebp)
80104e43:	ff 75 f4             	pushl  -0xc(%ebp)
80104e46:	ff 75 ec             	pushl  -0x14(%ebp)
80104e49:	e8 f6 ca ff ff       	call   80101944 <filewrite>
80104e4e:	83 c4 10             	add    $0x10,%esp
}
80104e51:	c9                   	leave  
80104e52:	c3                   	ret    
80104e53:	90                   	nop
    return -1;
80104e54:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104e59:	c9                   	leave  
80104e5a:	c3                   	ret    
80104e5b:	90                   	nop

80104e5c <sys_close>:
{
80104e5c:	55                   	push   %ebp
80104e5d:	89 e5                	mov    %esp,%ebp
80104e5f:	83 ec 18             	sub    $0x18,%esp
  if(argfd(0, &fd, &f) < 0)
80104e62:	8d 55 f4             	lea    -0xc(%ebp),%edx
80104e65:	8d 45 f0             	lea    -0x10(%ebp),%eax
80104e68:	e8 9b fe ff ff       	call   80104d08 <argfd.constprop.0>
80104e6d:	85 c0                	test   %eax,%eax
80104e6f:	78 23                	js     80104e94 <sys_close+0x38>
  myproc()->ofile[fd] = 0;
80104e71:	e8 c2 ee ff ff       	call   80103d38 <myproc>
80104e76:	8b 55 f0             	mov    -0x10(%ebp),%edx
80104e79:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
80104e80:	00 
  fileclose(f);
80104e81:	83 ec 0c             	sub    $0xc,%esp
80104e84:	ff 75 f4             	pushl  -0xc(%ebp)
80104e87:	e8 30 c9 ff ff       	call   801017bc <fileclose>
  return 0;
80104e8c:	83 c4 10             	add    $0x10,%esp
80104e8f:	31 c0                	xor    %eax,%eax
}
80104e91:	c9                   	leave  
80104e92:	c3                   	ret    
80104e93:	90                   	nop
    return -1;
80104e94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104e99:	c9                   	leave  
80104e9a:	c3                   	ret    
80104e9b:	90                   	nop

80104e9c <sys_fstat>:
{
80104e9c:	55                   	push   %ebp
80104e9d:	89 e5                	mov    %esp,%ebp
80104e9f:	83 ec 18             	sub    $0x18,%esp
  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
80104ea2:	8d 55 f0             	lea    -0x10(%ebp),%edx
80104ea5:	31 c0                	xor    %eax,%eax
80104ea7:	e8 5c fe ff ff       	call   80104d08 <argfd.constprop.0>
80104eac:	85 c0                	test   %eax,%eax
80104eae:	78 28                	js     80104ed8 <sys_fstat+0x3c>
80104eb0:	50                   	push   %eax
80104eb1:	6a 14                	push   $0x14
80104eb3:	8d 45 f4             	lea    -0xc(%ebp),%eax
80104eb6:	50                   	push   %eax
80104eb7:	6a 01                	push   $0x1
80104eb9:	e8 be fb ff ff       	call   80104a7c <argptr>
80104ebe:	83 c4 10             	add    $0x10,%esp
80104ec1:	85 c0                	test   %eax,%eax
80104ec3:	78 13                	js     80104ed8 <sys_fstat+0x3c>
  return filestat(f, st);
80104ec5:	83 ec 08             	sub    $0x8,%esp
80104ec8:	ff 75 f4             	pushl  -0xc(%ebp)
80104ecb:	ff 75 f0             	pushl  -0x10(%ebp)
80104ece:	e8 a5 c9 ff ff       	call   80101878 <filestat>
80104ed3:	83 c4 10             	add    $0x10,%esp
}
80104ed6:	c9                   	leave  
80104ed7:	c3                   	ret    
    return -1;
80104ed8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104edd:	c9                   	leave  
80104ede:	c3                   	ret    
80104edf:	90                   	nop

80104ee0 <sys_link>:
{
80104ee0:	55                   	push   %ebp
80104ee1:	89 e5                	mov    %esp,%ebp
80104ee3:	57                   	push   %edi
80104ee4:	56                   	push   %esi
80104ee5:	53                   	push   %ebx
80104ee6:	83 ec 34             	sub    $0x34,%esp
  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
80104ee9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
80104eec:	50                   	push   %eax
80104eed:	6a 00                	push   $0x0
80104eef:	e8 e0 fb ff ff       	call   80104ad4 <argstr>
80104ef4:	83 c4 10             	add    $0x10,%esp
80104ef7:	85 c0                	test   %eax,%eax
80104ef9:	0f 88 f2 00 00 00    	js     80104ff1 <sys_link+0x111>
80104eff:	83 ec 08             	sub    $0x8,%esp
80104f02:	8d 45 d0             	lea    -0x30(%ebp),%eax
80104f05:	50                   	push   %eax
80104f06:	6a 01                	push   $0x1
80104f08:	e8 c7 fb ff ff       	call   80104ad4 <argstr>
80104f0d:	83 c4 10             	add    $0x10,%esp
80104f10:	85 c0                	test   %eax,%eax
80104f12:	0f 88 d9 00 00 00    	js     80104ff1 <sys_link+0x111>
  begin_op();
80104f18:	e8 d7 e2 ff ff       	call   801031f4 <begin_op>
  if((ip = namei(old)) == 0){
80104f1d:	83 ec 0c             	sub    $0xc,%esp
80104f20:	ff 75 d4             	pushl  -0x2c(%ebp)
80104f23:	e8 18 d8 ff ff       	call   80102740 <namei>
80104f28:	89 c3                	mov    %eax,%ebx
80104f2a:	83 c4 10             	add    $0x10,%esp
80104f2d:	85 c0                	test   %eax,%eax
80104f2f:	0f 84 e3 00 00 00    	je     80105018 <sys_link+0x138>
  ilock(ip);
80104f35:	83 ec 0c             	sub    $0xc,%esp
80104f38:	50                   	push   %eax
80104f39:	e8 22 d0 ff ff       	call   80101f60 <ilock>
  if(ip->type == T_DIR){
80104f3e:	83 c4 10             	add    $0x10,%esp
80104f41:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
80104f46:	0f 84 b4 00 00 00    	je     80105000 <sys_link+0x120>
  ip->nlink++;
80104f4c:	66 ff 43 56          	incw   0x56(%ebx)
  iupdate(ip);
80104f50:	83 ec 0c             	sub    $0xc,%esp
80104f53:	53                   	push   %ebx
80104f54:	e8 5f cf ff ff       	call   80101eb8 <iupdate>
  iunlock(ip);
80104f59:	89 1c 24             	mov    %ebx,(%esp)
80104f5c:	e8 c7 d0 ff ff       	call   80102028 <iunlock>
  if((dp = nameiparent(new, name)) == 0)
80104f61:	5a                   	pop    %edx
80104f62:	59                   	pop    %ecx
80104f63:	8d 7d da             	lea    -0x26(%ebp),%edi
80104f66:	57                   	push   %edi
80104f67:	ff 75 d0             	pushl  -0x30(%ebp)
80104f6a:	e8 e9 d7 ff ff       	call   80102758 <nameiparent>
80104f6f:	89 c6                	mov    %eax,%esi
80104f71:	83 c4 10             	add    $0x10,%esp
80104f74:	85 c0                	test   %eax,%eax
80104f76:	74 54                	je     80104fcc <sys_link+0xec>
  ilock(dp);
80104f78:	83 ec 0c             	sub    $0xc,%esp
80104f7b:	50                   	push   %eax
80104f7c:	e8 df cf ff ff       	call   80101f60 <ilock>
  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
80104f81:	83 c4 10             	add    $0x10,%esp
80104f84:	8b 03                	mov    (%ebx),%eax
80104f86:	39 06                	cmp    %eax,(%esi)
80104f88:	75 36                	jne    80104fc0 <sys_link+0xe0>
80104f8a:	50                   	push   %eax
80104f8b:	ff 73 04             	pushl  0x4(%ebx)
80104f8e:	57                   	push   %edi
80104f8f:	56                   	push   %esi
80104f90:	e8 f7 d6 ff ff       	call   8010268c <dirlink>
80104f95:	83 c4 10             	add    $0x10,%esp
80104f98:	85 c0                	test   %eax,%eax
80104f9a:	78 24                	js     80104fc0 <sys_link+0xe0>
  iunlockput(dp);
80104f9c:	83 ec 0c             	sub    $0xc,%esp
80104f9f:	56                   	push   %esi
80104fa0:	e8 0f d2 ff ff       	call   801021b4 <iunlockput>
  iput(ip);
80104fa5:	89 1c 24             	mov    %ebx,(%esp)
80104fa8:	e8 bf d0 ff ff       	call   8010206c <iput>
  end_op();
80104fad:	e8 aa e2 ff ff       	call   8010325c <end_op>
  return 0;
80104fb2:	83 c4 10             	add    $0x10,%esp
80104fb5:	31 c0                	xor    %eax,%eax
}
80104fb7:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104fba:	5b                   	pop    %ebx
80104fbb:	5e                   	pop    %esi
80104fbc:	5f                   	pop    %edi
80104fbd:	5d                   	pop    %ebp
80104fbe:	c3                   	ret    
80104fbf:	90                   	nop
    iunlockput(dp);
80104fc0:	83 ec 0c             	sub    $0xc,%esp
80104fc3:	56                   	push   %esi
80104fc4:	e8 eb d1 ff ff       	call   801021b4 <iunlockput>
    goto bad;
80104fc9:	83 c4 10             	add    $0x10,%esp
  ilock(ip);
80104fcc:	83 ec 0c             	sub    $0xc,%esp
80104fcf:	53                   	push   %ebx
80104fd0:	e8 8b cf ff ff       	call   80101f60 <ilock>
  ip->nlink--;
80104fd5:	66 ff 4b 56          	decw   0x56(%ebx)
  iupdate(ip);
80104fd9:	89 1c 24             	mov    %ebx,(%esp)
80104fdc:	e8 d7 ce ff ff       	call   80101eb8 <iupdate>
  iunlockput(ip);
80104fe1:	89 1c 24             	mov    %ebx,(%esp)
80104fe4:	e8 cb d1 ff ff       	call   801021b4 <iunlockput>
  end_op();
80104fe9:	e8 6e e2 ff ff       	call   8010325c <end_op>
  return -1;
80104fee:	83 c4 10             	add    $0x10,%esp
80104ff1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104ff6:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104ff9:	5b                   	pop    %ebx
80104ffa:	5e                   	pop    %esi
80104ffb:	5f                   	pop    %edi
80104ffc:	5d                   	pop    %ebp
80104ffd:	c3                   	ret    
80104ffe:	66 90                	xchg   %ax,%ax
    iunlockput(ip);
80105000:	83 ec 0c             	sub    $0xc,%esp
80105003:	53                   	push   %ebx
80105004:	e8 ab d1 ff ff       	call   801021b4 <iunlockput>
    end_op();
80105009:	e8 4e e2 ff ff       	call   8010325c <end_op>
    return -1;
8010500e:	83 c4 10             	add    $0x10,%esp
80105011:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105016:	eb 9f                	jmp    80104fb7 <sys_link+0xd7>
    end_op();
80105018:	e8 3f e2 ff ff       	call   8010325c <end_op>
    return -1;
8010501d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105022:	eb 93                	jmp    80104fb7 <sys_link+0xd7>

80105024 <sys_unlink>:
{
80105024:	55                   	push   %ebp
80105025:	89 e5                	mov    %esp,%ebp
80105027:	57                   	push   %edi
80105028:	56                   	push   %esi
80105029:	53                   	push   %ebx
8010502a:	83 ec 54             	sub    $0x54,%esp
  if(argstr(0, &path) < 0)
8010502d:	8d 45 c0             	lea    -0x40(%ebp),%eax
80105030:	50                   	push   %eax
80105031:	6a 00                	push   $0x0
80105033:	e8 9c fa ff ff       	call   80104ad4 <argstr>
80105038:	83 c4 10             	add    $0x10,%esp
8010503b:	85 c0                	test   %eax,%eax
8010503d:	0f 88 75 01 00 00    	js     801051b8 <sys_unlink+0x194>
  begin_op();
80105043:	e8 ac e1 ff ff       	call   801031f4 <begin_op>
  if((dp = nameiparent(path, name)) == 0){
80105048:	83 ec 08             	sub    $0x8,%esp
8010504b:	8d 5d ca             	lea    -0x36(%ebp),%ebx
8010504e:	53                   	push   %ebx
8010504f:	ff 75 c0             	pushl  -0x40(%ebp)
80105052:	e8 01 d7 ff ff       	call   80102758 <nameiparent>
80105057:	89 45 b4             	mov    %eax,-0x4c(%ebp)
8010505a:	83 c4 10             	add    $0x10,%esp
8010505d:	85 c0                	test   %eax,%eax
8010505f:	0f 84 5d 01 00 00    	je     801051c2 <sys_unlink+0x19e>
  ilock(dp);
80105065:	83 ec 0c             	sub    $0xc,%esp
80105068:	8b 75 b4             	mov    -0x4c(%ebp),%esi
8010506b:	56                   	push   %esi
8010506c:	e8 ef ce ff ff       	call   80101f60 <ilock>
  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
80105071:	59                   	pop    %ecx
80105072:	5f                   	pop    %edi
80105073:	68 74 6b 10 80       	push   $0x80106b74
80105078:	53                   	push   %ebx
80105079:	e8 a6 d3 ff ff       	call   80102424 <namecmp>
8010507e:	83 c4 10             	add    $0x10,%esp
80105081:	85 c0                	test   %eax,%eax
80105083:	0f 84 f4 00 00 00    	je     8010517d <sys_unlink+0x159>
80105089:	83 ec 08             	sub    $0x8,%esp
8010508c:	68 73 6b 10 80       	push   $0x80106b73
80105091:	53                   	push   %ebx
80105092:	e8 8d d3 ff ff       	call   80102424 <namecmp>
80105097:	83 c4 10             	add    $0x10,%esp
8010509a:	85 c0                	test   %eax,%eax
8010509c:	0f 84 db 00 00 00    	je     8010517d <sys_unlink+0x159>
  if((ip = dirlookup(dp, name, &off)) == 0)
801050a2:	52                   	push   %edx
801050a3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
801050a6:	50                   	push   %eax
801050a7:	53                   	push   %ebx
801050a8:	56                   	push   %esi
801050a9:	e8 8e d3 ff ff       	call   8010243c <dirlookup>
801050ae:	89 c7                	mov    %eax,%edi
801050b0:	83 c4 10             	add    $0x10,%esp
801050b3:	85 c0                	test   %eax,%eax
801050b5:	0f 84 c2 00 00 00    	je     8010517d <sys_unlink+0x159>
  ilock(ip);
801050bb:	83 ec 0c             	sub    $0xc,%esp
801050be:	50                   	push   %eax
801050bf:	e8 9c ce ff ff       	call   80101f60 <ilock>
  if(ip->nlink < 1)
801050c4:	83 c4 10             	add    $0x10,%esp
801050c7:	66 83 7f 56 00       	cmpw   $0x0,0x56(%edi)
801050cc:	0f 8e 19 01 00 00    	jle    801051eb <sys_unlink+0x1c7>
  if(ip->type == T_DIR && !isdirempty(ip)){
801050d2:	66 83 7f 50 01       	cmpw   $0x1,0x50(%edi)
801050d7:	74 67                	je     80105140 <sys_unlink+0x11c>
801050d9:	8d 75 d8             	lea    -0x28(%ebp),%esi
  memset(&de, 0, sizeof(de));
801050dc:	50                   	push   %eax
801050dd:	6a 10                	push   $0x10
801050df:	6a 00                	push   $0x0
801050e1:	56                   	push   %esi
801050e2:	e8 21 f7 ff ff       	call   80104808 <memset>
  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
801050e7:	6a 10                	push   $0x10
801050e9:	ff 75 c4             	pushl  -0x3c(%ebp)
801050ec:	56                   	push   %esi
801050ed:	ff 75 b4             	pushl  -0x4c(%ebp)
801050f0:	e8 0f d2 ff ff       	call   80102304 <writei>
801050f5:	83 c4 20             	add    $0x20,%esp
801050f8:	83 f8 10             	cmp    $0x10,%eax
801050fb:	0f 85 dd 00 00 00    	jne    801051de <sys_unlink+0x1ba>
  if(ip->type == T_DIR){
80105101:	66 83 7f 50 01       	cmpw   $0x1,0x50(%edi)
80105106:	0f 84 94 00 00 00    	je     801051a0 <sys_unlink+0x17c>
  iunlockput(dp);
8010510c:	83 ec 0c             	sub    $0xc,%esp
8010510f:	ff 75 b4             	pushl  -0x4c(%ebp)
80105112:	e8 9d d0 ff ff       	call   801021b4 <iunlockput>
  ip->nlink--;
80105117:	66 ff 4f 56          	decw   0x56(%edi)
  iupdate(ip);
8010511b:	89 3c 24             	mov    %edi,(%esp)
8010511e:	e8 95 cd ff ff       	call   80101eb8 <iupdate>
  iunlockput(ip);
80105123:	89 3c 24             	mov    %edi,(%esp)
80105126:	e8 89 d0 ff ff       	call   801021b4 <iunlockput>
  end_op();
8010512b:	e8 2c e1 ff ff       	call   8010325c <end_op>
  return 0;
80105130:	83 c4 10             	add    $0x10,%esp
80105133:	31 c0                	xor    %eax,%eax
}
80105135:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105138:	5b                   	pop    %ebx
80105139:	5e                   	pop    %esi
8010513a:	5f                   	pop    %edi
8010513b:	5d                   	pop    %ebp
8010513c:	c3                   	ret    
8010513d:	8d 76 00             	lea    0x0(%esi),%esi
  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
80105140:	83 7f 58 20          	cmpl   $0x20,0x58(%edi)
80105144:	76 93                	jbe    801050d9 <sys_unlink+0xb5>
80105146:	bb 20 00 00 00       	mov    $0x20,%ebx
8010514b:	8d 75 d8             	lea    -0x28(%ebp),%esi
8010514e:	eb 08                	jmp    80105158 <sys_unlink+0x134>
80105150:	83 c3 10             	add    $0x10,%ebx
80105153:	3b 5f 58             	cmp    0x58(%edi),%ebx
80105156:	73 84                	jae    801050dc <sys_unlink+0xb8>
    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
80105158:	6a 10                	push   $0x10
8010515a:	53                   	push   %ebx
8010515b:	56                   	push   %esi
8010515c:	57                   	push   %edi
8010515d:	e8 9e d0 ff ff       	call   80102200 <readi>
80105162:	83 c4 10             	add    $0x10,%esp
80105165:	83 f8 10             	cmp    $0x10,%eax
80105168:	75 67                	jne    801051d1 <sys_unlink+0x1ad>
    if(de.inum != 0)
8010516a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
8010516f:	74 df                	je     80105150 <sys_unlink+0x12c>
    iunlockput(ip);
80105171:	83 ec 0c             	sub    $0xc,%esp
80105174:	57                   	push   %edi
80105175:	e8 3a d0 ff ff       	call   801021b4 <iunlockput>
    goto bad;
8010517a:	83 c4 10             	add    $0x10,%esp
  iunlockput(dp);
8010517d:	83 ec 0c             	sub    $0xc,%esp
80105180:	ff 75 b4             	pushl  -0x4c(%ebp)
80105183:	e8 2c d0 ff ff       	call   801021b4 <iunlockput>
  end_op();
80105188:	e8 cf e0 ff ff       	call   8010325c <end_op>
  return -1;
8010518d:	83 c4 10             	add    $0x10,%esp
80105190:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105195:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105198:	5b                   	pop    %ebx
80105199:	5e                   	pop    %esi
8010519a:	5f                   	pop    %edi
8010519b:	5d                   	pop    %ebp
8010519c:	c3                   	ret    
8010519d:	8d 76 00             	lea    0x0(%esi),%esi
    dp->nlink--;
801051a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
801051a3:	66 ff 48 56          	decw   0x56(%eax)
    iupdate(dp);
801051a7:	83 ec 0c             	sub    $0xc,%esp
801051aa:	50                   	push   %eax
801051ab:	e8 08 cd ff ff       	call   80101eb8 <iupdate>
801051b0:	83 c4 10             	add    $0x10,%esp
801051b3:	e9 54 ff ff ff       	jmp    8010510c <sys_unlink+0xe8>
    return -1;
801051b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801051bd:	e9 73 ff ff ff       	jmp    80105135 <sys_unlink+0x111>
    end_op();
801051c2:	e8 95 e0 ff ff       	call   8010325c <end_op>
    return -1;
801051c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801051cc:	e9 64 ff ff ff       	jmp    80105135 <sys_unlink+0x111>
      panic("isdirempty: readi");
801051d1:	83 ec 0c             	sub    $0xc,%esp
801051d4:	68 98 6b 10 80       	push   $0x80106b98
801051d9:	e8 06 bc ff ff       	call   80100de4 <panic>
    panic("unlink: writei");
801051de:	83 ec 0c             	sub    $0xc,%esp
801051e1:	68 aa 6b 10 80       	push   $0x80106baa
801051e6:	e8 f9 bb ff ff       	call   80100de4 <panic>
    panic("unlink: nlink < 1");
801051eb:	83 ec 0c             	sub    $0xc,%esp
801051ee:	68 86 6b 10 80       	push   $0x80106b86
801051f3:	e8 ec bb ff ff       	call   80100de4 <panic>

801051f8 <sys_open>:

int
sys_open(void)
{
801051f8:	55                   	push   %ebp
801051f9:	89 e5                	mov    %esp,%ebp
801051fb:	57                   	push   %edi
801051fc:	56                   	push   %esi
801051fd:	53                   	push   %ebx
801051fe:	83 ec 24             	sub    $0x24,%esp
  char *path;
  int fd, omode;
  struct file *f;
  struct inode *ip;

  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
80105201:	8d 45 e0             	lea    -0x20(%ebp),%eax
80105204:	50                   	push   %eax
80105205:	6a 00                	push   $0x0
80105207:	e8 c8 f8 ff ff       	call   80104ad4 <argstr>
8010520c:	83 c4 10             	add    $0x10,%esp
8010520f:	85 c0                	test   %eax,%eax
80105211:	0f 88 fe 00 00 00    	js     80105315 <sys_open+0x11d>
80105217:	83 ec 08             	sub    $0x8,%esp
8010521a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010521d:	50                   	push   %eax
8010521e:	6a 01                	push   $0x1
80105220:	e8 2f f8 ff ff       	call   80104a54 <argint>
80105225:	83 c4 10             	add    $0x10,%esp
80105228:	85 c0                	test   %eax,%eax
8010522a:	0f 88 e5 00 00 00    	js     80105315 <sys_open+0x11d>
    return -1;

  begin_op();
80105230:	e8 bf df ff ff       	call   801031f4 <begin_op>

  if(omode & O_CREATE){
80105235:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
80105239:	0f 85 8d 00 00 00    	jne    801052cc <sys_open+0xd4>
    if(ip == 0){
      end_op();
      return -1;
    }
  } else {
    if((ip = namei(path)) == 0){
8010523f:	83 ec 0c             	sub    $0xc,%esp
80105242:	ff 75 e0             	pushl  -0x20(%ebp)
80105245:	e8 f6 d4 ff ff       	call   80102740 <namei>
8010524a:	89 c7                	mov    %eax,%edi
8010524c:	83 c4 10             	add    $0x10,%esp
8010524f:	85 c0                	test   %eax,%eax
80105251:	0f 84 92 00 00 00    	je     801052e9 <sys_open+0xf1>
      end_op();
      return -1;
    }
    ilock(ip);
80105257:	83 ec 0c             	sub    $0xc,%esp
8010525a:	50                   	push   %eax
8010525b:	e8 00 cd ff ff       	call   80101f60 <ilock>
    if(ip->type == T_DIR && omode != O_RDONLY){
80105260:	83 c4 10             	add    $0x10,%esp
80105263:	66 83 7f 50 01       	cmpw   $0x1,0x50(%edi)
80105268:	0f 84 8a 00 00 00    	je     801052f8 <sys_open+0x100>
      end_op();
      return -1;
    }
  }

  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
8010526e:	e8 a1 c4 ff ff       	call   80101714 <filealloc>
80105273:	89 c3                	mov    %eax,%ebx
80105275:	85 c0                	test   %eax,%eax
80105277:	0f 84 87 00 00 00    	je     80105304 <sys_open+0x10c>
8010527d:	e8 e2 f8 ff ff       	call   80104b64 <fdalloc>
80105282:	89 c6                	mov    %eax,%esi
80105284:	85 c0                	test   %eax,%eax
80105286:	0f 88 98 00 00 00    	js     80105324 <sys_open+0x12c>
      fileclose(f);
    iunlockput(ip);
    end_op();
    return -1;
  }
  iunlock(ip);
8010528c:	83 ec 0c             	sub    $0xc,%esp
8010528f:	57                   	push   %edi
80105290:	e8 93 cd ff ff       	call   80102028 <iunlock>
  end_op();
80105295:	e8 c2 df ff ff       	call   8010325c <end_op>

  f->type = FD_INODE;
8010529a:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
  f->ip = ip;
801052a0:	89 7b 10             	mov    %edi,0x10(%ebx)
  f->off = 0;
801052a3:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
  f->readable = !(omode & O_WRONLY);
801052aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801052ad:	89 d0                	mov    %edx,%eax
801052af:	83 e0 01             	and    $0x1,%eax
801052b2:	83 f0 01             	xor    $0x1,%eax
801052b5:	88 43 08             	mov    %al,0x8(%ebx)
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
801052b8:	83 c4 10             	add    $0x10,%esp
801052bb:	83 e2 03             	and    $0x3,%edx
801052be:	0f 95 43 09          	setne  0x9(%ebx)
  return fd;
801052c2:	89 f0                	mov    %esi,%eax
}
801052c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
801052c7:	5b                   	pop    %ebx
801052c8:	5e                   	pop    %esi
801052c9:	5f                   	pop    %edi
801052ca:	5d                   	pop    %ebp
801052cb:	c3                   	ret    
    ip = create(path, T_FILE, 0, 0);
801052cc:	83 ec 0c             	sub    $0xc,%esp
801052cf:	6a 00                	push   $0x0
801052d1:	31 c9                	xor    %ecx,%ecx
801052d3:	ba 02 00 00 00       	mov    $0x2,%edx
801052d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
801052db:	e8 b8 f8 ff ff       	call   80104b98 <create>
801052e0:	89 c7                	mov    %eax,%edi
    if(ip == 0){
801052e2:	83 c4 10             	add    $0x10,%esp
801052e5:	85 c0                	test   %eax,%eax
801052e7:	75 85                	jne    8010526e <sys_open+0x76>
      end_op();
801052e9:	e8 6e df ff ff       	call   8010325c <end_op>
      return -1;
801052ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801052f3:	eb cf                	jmp    801052c4 <sys_open+0xcc>
801052f5:	8d 76 00             	lea    0x0(%esi),%esi
    if(ip->type == T_DIR && omode != O_RDONLY){
801052f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801052fb:	85 c0                	test   %eax,%eax
801052fd:	0f 84 6b ff ff ff    	je     8010526e <sys_open+0x76>
80105303:	90                   	nop
    iunlockput(ip);
80105304:	83 ec 0c             	sub    $0xc,%esp
80105307:	57                   	push   %edi
80105308:	e8 a7 ce ff ff       	call   801021b4 <iunlockput>
    end_op();
8010530d:	e8 4a df ff ff       	call   8010325c <end_op>
    return -1;
80105312:	83 c4 10             	add    $0x10,%esp
80105315:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010531a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010531d:	5b                   	pop    %ebx
8010531e:	5e                   	pop    %esi
8010531f:	5f                   	pop    %edi
80105320:	5d                   	pop    %ebp
80105321:	c3                   	ret    
80105322:	66 90                	xchg   %ax,%ax
      fileclose(f);
80105324:	83 ec 0c             	sub    $0xc,%esp
80105327:	53                   	push   %ebx
80105328:	e8 8f c4 ff ff       	call   801017bc <fileclose>
8010532d:	83 c4 10             	add    $0x10,%esp
80105330:	eb d2                	jmp    80105304 <sys_open+0x10c>
80105332:	66 90                	xchg   %ax,%ax

80105334 <sys_mkdir>:

int
sys_mkdir(void)
{
80105334:	55                   	push   %ebp
80105335:	89 e5                	mov    %esp,%ebp
80105337:	83 ec 18             	sub    $0x18,%esp
  char *path;
  struct inode *ip;

  begin_op();
8010533a:	e8 b5 de ff ff       	call   801031f4 <begin_op>
  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
8010533f:	83 ec 08             	sub    $0x8,%esp
80105342:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105345:	50                   	push   %eax
80105346:	6a 00                	push   $0x0
80105348:	e8 87 f7 ff ff       	call   80104ad4 <argstr>
8010534d:	83 c4 10             	add    $0x10,%esp
80105350:	85 c0                	test   %eax,%eax
80105352:	78 30                	js     80105384 <sys_mkdir+0x50>
80105354:	83 ec 0c             	sub    $0xc,%esp
80105357:	6a 00                	push   $0x0
80105359:	31 c9                	xor    %ecx,%ecx
8010535b:	ba 01 00 00 00       	mov    $0x1,%edx
80105360:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105363:	e8 30 f8 ff ff       	call   80104b98 <create>
80105368:	83 c4 10             	add    $0x10,%esp
8010536b:	85 c0                	test   %eax,%eax
8010536d:	74 15                	je     80105384 <sys_mkdir+0x50>
    end_op();
    return -1;
  }
  iunlockput(ip);
8010536f:	83 ec 0c             	sub    $0xc,%esp
80105372:	50                   	push   %eax
80105373:	e8 3c ce ff ff       	call   801021b4 <iunlockput>
  end_op();
80105378:	e8 df de ff ff       	call   8010325c <end_op>
  return 0;
8010537d:	83 c4 10             	add    $0x10,%esp
80105380:	31 c0                	xor    %eax,%eax
}
80105382:	c9                   	leave  
80105383:	c3                   	ret    
    end_op();
80105384:	e8 d3 de ff ff       	call   8010325c <end_op>
    return -1;
80105389:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010538e:	c9                   	leave  
8010538f:	c3                   	ret    

80105390 <sys_mknod>:

int
sys_mknod(void)
{
80105390:	55                   	push   %ebp
80105391:	89 e5                	mov    %esp,%ebp
80105393:	83 ec 18             	sub    $0x18,%esp
  struct inode *ip;
  char *path;
  int major, minor;

  begin_op();
80105396:	e8 59 de ff ff       	call   801031f4 <begin_op>
  if((argstr(0, &path)) < 0 ||
8010539b:	83 ec 08             	sub    $0x8,%esp
8010539e:	8d 45 ec             	lea    -0x14(%ebp),%eax
801053a1:	50                   	push   %eax
801053a2:	6a 00                	push   $0x0
801053a4:	e8 2b f7 ff ff       	call   80104ad4 <argstr>
801053a9:	83 c4 10             	add    $0x10,%esp
801053ac:	85 c0                	test   %eax,%eax
801053ae:	78 60                	js     80105410 <sys_mknod+0x80>
     argint(1, &major) < 0 ||
801053b0:	83 ec 08             	sub    $0x8,%esp
801053b3:	8d 45 f0             	lea    -0x10(%ebp),%eax
801053b6:	50                   	push   %eax
801053b7:	6a 01                	push   $0x1
801053b9:	e8 96 f6 ff ff       	call   80104a54 <argint>
  if((argstr(0, &path)) < 0 ||
801053be:	83 c4 10             	add    $0x10,%esp
801053c1:	85 c0                	test   %eax,%eax
801053c3:	78 4b                	js     80105410 <sys_mknod+0x80>
     argint(2, &minor) < 0 ||
801053c5:	83 ec 08             	sub    $0x8,%esp
801053c8:	8d 45 f4             	lea    -0xc(%ebp),%eax
801053cb:	50                   	push   %eax
801053cc:	6a 02                	push   $0x2
801053ce:	e8 81 f6 ff ff       	call   80104a54 <argint>
     argint(1, &major) < 0 ||
801053d3:	83 c4 10             	add    $0x10,%esp
801053d6:	85 c0                	test   %eax,%eax
801053d8:	78 36                	js     80105410 <sys_mknod+0x80>
     (ip = create(path, T_DEV, major, minor)) == 0){
801053da:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
     argint(2, &minor) < 0 ||
801053de:	83 ec 0c             	sub    $0xc,%esp
     (ip = create(path, T_DEV, major, minor)) == 0){
801053e1:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
     argint(2, &minor) < 0 ||
801053e5:	50                   	push   %eax
801053e6:	ba 03 00 00 00       	mov    $0x3,%edx
801053eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
801053ee:	e8 a5 f7 ff ff       	call   80104b98 <create>
801053f3:	83 c4 10             	add    $0x10,%esp
801053f6:	85 c0                	test   %eax,%eax
801053f8:	74 16                	je     80105410 <sys_mknod+0x80>
    end_op();
    return -1;
  }
  iunlockput(ip);
801053fa:	83 ec 0c             	sub    $0xc,%esp
801053fd:	50                   	push   %eax
801053fe:	e8 b1 cd ff ff       	call   801021b4 <iunlockput>
  end_op();
80105403:	e8 54 de ff ff       	call   8010325c <end_op>
  return 0;
80105408:	83 c4 10             	add    $0x10,%esp
8010540b:	31 c0                	xor    %eax,%eax
}
8010540d:	c9                   	leave  
8010540e:	c3                   	ret    
8010540f:	90                   	nop
    end_op();
80105410:	e8 47 de ff ff       	call   8010325c <end_op>
    return -1;
80105415:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010541a:	c9                   	leave  
8010541b:	c3                   	ret    

8010541c <sys_chdir>:

int
sys_chdir(void)
{
8010541c:	55                   	push   %ebp
8010541d:	89 e5                	mov    %esp,%ebp
8010541f:	56                   	push   %esi
80105420:	53                   	push   %ebx
80105421:	83 ec 10             	sub    $0x10,%esp
  char *path;
  struct inode *ip;
  struct proc *curproc = myproc();
80105424:	e8 0f e9 ff ff       	call   80103d38 <myproc>
80105429:	89 c6                	mov    %eax,%esi
  
  begin_op();
8010542b:	e8 c4 dd ff ff       	call   801031f4 <begin_op>
  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
80105430:	83 ec 08             	sub    $0x8,%esp
80105433:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105436:	50                   	push   %eax
80105437:	6a 00                	push   $0x0
80105439:	e8 96 f6 ff ff       	call   80104ad4 <argstr>
8010543e:	83 c4 10             	add    $0x10,%esp
80105441:	85 c0                	test   %eax,%eax
80105443:	78 67                	js     801054ac <sys_chdir+0x90>
80105445:	83 ec 0c             	sub    $0xc,%esp
80105448:	ff 75 f4             	pushl  -0xc(%ebp)
8010544b:	e8 f0 d2 ff ff       	call   80102740 <namei>
80105450:	89 c3                	mov    %eax,%ebx
80105452:	83 c4 10             	add    $0x10,%esp
80105455:	85 c0                	test   %eax,%eax
80105457:	74 53                	je     801054ac <sys_chdir+0x90>
    end_op();
    return -1;
  }
  ilock(ip);
80105459:	83 ec 0c             	sub    $0xc,%esp
8010545c:	50                   	push   %eax
8010545d:	e8 fe ca ff ff       	call   80101f60 <ilock>
  if(ip->type != T_DIR){
80105462:	83 c4 10             	add    $0x10,%esp
80105465:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
8010546a:	75 28                	jne    80105494 <sys_chdir+0x78>
    iunlockput(ip);
    end_op();
    return -1;
  }
  iunlock(ip);
8010546c:	83 ec 0c             	sub    $0xc,%esp
8010546f:	53                   	push   %ebx
80105470:	e8 b3 cb ff ff       	call   80102028 <iunlock>
  iput(curproc->cwd);
80105475:	58                   	pop    %eax
80105476:	ff 76 68             	pushl  0x68(%esi)
80105479:	e8 ee cb ff ff       	call   8010206c <iput>
  end_op();
8010547e:	e8 d9 dd ff ff       	call   8010325c <end_op>
  curproc->cwd = ip;
80105483:	89 5e 68             	mov    %ebx,0x68(%esi)
  return 0;
80105486:	83 c4 10             	add    $0x10,%esp
80105489:	31 c0                	xor    %eax,%eax
}
8010548b:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010548e:	5b                   	pop    %ebx
8010548f:	5e                   	pop    %esi
80105490:	5d                   	pop    %ebp
80105491:	c3                   	ret    
80105492:	66 90                	xchg   %ax,%ax
    iunlockput(ip);
80105494:	83 ec 0c             	sub    $0xc,%esp
80105497:	53                   	push   %ebx
80105498:	e8 17 cd ff ff       	call   801021b4 <iunlockput>
    end_op();
8010549d:	e8 ba dd ff ff       	call   8010325c <end_op>
    return -1;
801054a2:	83 c4 10             	add    $0x10,%esp
801054a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801054aa:	eb df                	jmp    8010548b <sys_chdir+0x6f>
    end_op();
801054ac:	e8 ab dd ff ff       	call   8010325c <end_op>
    return -1;
801054b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801054b6:	eb d3                	jmp    8010548b <sys_chdir+0x6f>

801054b8 <sys_exec>:

int
sys_exec(void)
{
801054b8:	55                   	push   %ebp
801054b9:	89 e5                	mov    %esp,%ebp
801054bb:	57                   	push   %edi
801054bc:	56                   	push   %esi
801054bd:	53                   	push   %ebx
801054be:	81 ec b4 00 00 00    	sub    $0xb4,%esp
  char *path, *argv[MAXARG];
  int i;
  uint uargv, uarg;

  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
801054c4:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
801054ca:	50                   	push   %eax
801054cb:	6a 00                	push   $0x0
801054cd:	e8 02 f6 ff ff       	call   80104ad4 <argstr>
801054d2:	83 c4 10             	add    $0x10,%esp
801054d5:	85 c0                	test   %eax,%eax
801054d7:	0f 88 8b 00 00 00    	js     80105568 <sys_exec+0xb0>
801054dd:	83 ec 08             	sub    $0x8,%esp
801054e0:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
801054e6:	50                   	push   %eax
801054e7:	6a 01                	push   $0x1
801054e9:	e8 66 f5 ff ff       	call   80104a54 <argint>
801054ee:	83 c4 10             	add    $0x10,%esp
801054f1:	85 c0                	test   %eax,%eax
801054f3:	78 73                	js     80105568 <sys_exec+0xb0>
    return -1;
  }
  memset(argv, 0, sizeof(argv));
801054f5:	50                   	push   %eax
801054f6:	68 80 00 00 00       	push   $0x80
801054fb:	6a 00                	push   $0x0
801054fd:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
80105503:	56                   	push   %esi
80105504:	e8 ff f2 ff ff       	call   80104808 <memset>
80105509:	83 c4 10             	add    $0x10,%esp
8010550c:	31 db                	xor    %ebx,%ebx
8010550e:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%ebp)
80105515:	00 00 00 
80105518:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
8010551e:	66 90                	xchg   %ax,%ax
  for(i=0;; i++){
    if(i >= NELEM(argv))
      return -1;
    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
80105520:	83 ec 08             	sub    $0x8,%esp
80105523:	57                   	push   %edi
80105524:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
8010552a:	01 d8                	add    %ebx,%eax
8010552c:	50                   	push   %eax
8010552d:	e8 ae f4 ff ff       	call   801049e0 <fetchint>
80105532:	83 c4 10             	add    $0x10,%esp
80105535:	85 c0                	test   %eax,%eax
80105537:	78 2f                	js     80105568 <sys_exec+0xb0>
      return -1;
    if(uarg == 0){
80105539:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
8010553f:	85 c0                	test   %eax,%eax
80105541:	74 35                	je     80105578 <sys_exec+0xc0>
      argv[i] = 0;
      break;
    }
    if(fetchstr(uarg, &argv[i]) < 0)
80105543:	83 ec 08             	sub    $0x8,%esp
80105546:	8d 14 1e             	lea    (%esi,%ebx,1),%edx
80105549:	52                   	push   %edx
8010554a:	50                   	push   %eax
8010554b:	e8 c0 f4 ff ff       	call   80104a10 <fetchstr>
80105550:	83 c4 10             	add    $0x10,%esp
80105553:	85 c0                	test   %eax,%eax
80105555:	78 11                	js     80105568 <sys_exec+0xb0>
  for(i=0;; i++){
80105557:	ff 85 54 ff ff ff    	incl   -0xac(%ebp)
8010555d:	83 c3 04             	add    $0x4,%ebx
    if(i >= NELEM(argv))
80105560:	81 fb 80 00 00 00    	cmp    $0x80,%ebx
80105566:	75 b8                	jne    80105520 <sys_exec+0x68>
    return -1;
80105568:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
      return -1;
  }
  return exec(path, argv);
}
8010556d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105570:	5b                   	pop    %ebx
80105571:	5e                   	pop    %esi
80105572:	5f                   	pop    %edi
80105573:	5d                   	pop    %ebp
80105574:	c3                   	ret    
80105575:	8d 76 00             	lea    0x0(%esi),%esi
      argv[i] = 0;
80105578:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
8010557e:	c7 84 85 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%eax,4)
80105585:	00 00 00 00 
  return exec(path, argv);
80105589:	83 ec 08             	sub    $0x8,%esp
8010558c:	56                   	push   %esi
8010558d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
80105593:	e8 10 be ff ff       	call   801013a8 <exec>
80105598:	83 c4 10             	add    $0x10,%esp
}
8010559b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010559e:	5b                   	pop    %ebx
8010559f:	5e                   	pop    %esi
801055a0:	5f                   	pop    %edi
801055a1:	5d                   	pop    %ebp
801055a2:	c3                   	ret    
801055a3:	90                   	nop

801055a4 <sys_pipe>:

int
sys_pipe(void)
{
801055a4:	55                   	push   %ebp
801055a5:	89 e5                	mov    %esp,%ebp
801055a7:	53                   	push   %ebx
801055a8:	83 ec 18             	sub    $0x18,%esp
  int *fd;
  struct file *rf, *wf;
  int fd0, fd1;

  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
801055ab:	6a 08                	push   $0x8
801055ad:	8d 45 ec             	lea    -0x14(%ebp),%eax
801055b0:	50                   	push   %eax
801055b1:	6a 00                	push   $0x0
801055b3:	e8 c4 f4 ff ff       	call   80104a7c <argptr>
801055b8:	83 c4 10             	add    $0x10,%esp
801055bb:	85 c0                	test   %eax,%eax
801055bd:	78 69                	js     80105628 <sys_pipe+0x84>
    return -1;
  if(pipealloc(&rf, &wf) < 0)
801055bf:	83 ec 08             	sub    $0x8,%esp
801055c2:	8d 45 f4             	lea    -0xc(%ebp),%eax
801055c5:	50                   	push   %eax
801055c6:	8d 45 f0             	lea    -0x10(%ebp),%eax
801055c9:	50                   	push   %eax
801055ca:	e8 25 e2 ff ff       	call   801037f4 <pipealloc>
801055cf:	83 c4 10             	add    $0x10,%esp
801055d2:	85 c0                	test   %eax,%eax
801055d4:	78 52                	js     80105628 <sys_pipe+0x84>
    return -1;
  fd0 = -1;
  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
801055d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
801055d9:	e8 86 f5 ff ff       	call   80104b64 <fdalloc>
801055de:	89 c3                	mov    %eax,%ebx
801055e0:	85 c0                	test   %eax,%eax
801055e2:	78 2d                	js     80105611 <sys_pipe+0x6d>
801055e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801055e7:	e8 78 f5 ff ff       	call   80104b64 <fdalloc>
801055ec:	85 c0                	test   %eax,%eax
801055ee:	78 14                	js     80105604 <sys_pipe+0x60>
      myproc()->ofile[fd0] = 0;
    fileclose(rf);
    fileclose(wf);
    return -1;
  }
  fd[0] = fd0;
801055f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
801055f3:	89 1a                	mov    %ebx,(%edx)
  fd[1] = fd1;
801055f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
801055f8:	89 42 04             	mov    %eax,0x4(%edx)
  return 0;
801055fb:	31 c0                	xor    %eax,%eax
}
801055fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80105600:	c9                   	leave  
80105601:	c3                   	ret    
80105602:	66 90                	xchg   %ax,%ax
      myproc()->ofile[fd0] = 0;
80105604:	e8 2f e7 ff ff       	call   80103d38 <myproc>
80105609:	c7 44 98 28 00 00 00 	movl   $0x0,0x28(%eax,%ebx,4)
80105610:	00 
    fileclose(rf);
80105611:	83 ec 0c             	sub    $0xc,%esp
80105614:	ff 75 f0             	pushl  -0x10(%ebp)
80105617:	e8 a0 c1 ff ff       	call   801017bc <fileclose>
    fileclose(wf);
8010561c:	58                   	pop    %eax
8010561d:	ff 75 f4             	pushl  -0xc(%ebp)
80105620:	e8 97 c1 ff ff       	call   801017bc <fileclose>
    return -1;
80105625:	83 c4 10             	add    $0x10,%esp
80105628:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010562d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80105630:	c9                   	leave  
80105631:	c3                   	ret    
80105632:	66 90                	xchg   %ax,%ax

80105634 <sys_fork>:
#include "mmu.h"
#include "proc.h"

int
sys_fork(void)
{
80105634:	55                   	push   %ebp
80105635:	89 e5                	mov    %esp,%ebp
  return fork();
}
80105637:	5d                   	pop    %ebp
  return fork();
80105638:	e9 63 e8 ff ff       	jmp    80103ea0 <fork>
8010563d:	8d 76 00             	lea    0x0(%esi),%esi

80105640 <sys_exit>:

int
sys_exit(void)
{
80105640:	55                   	push   %ebp
80105641:	89 e5                	mov    %esp,%ebp
80105643:	83 ec 08             	sub    $0x8,%esp
  exit();
80105646:	e8 99 ea ff ff       	call   801040e4 <exit>
  return 0;  // not reached
}
8010564b:	31 c0                	xor    %eax,%eax
8010564d:	c9                   	leave  
8010564e:	c3                   	ret    
8010564f:	90                   	nop

80105650 <sys_wait>:

int
sys_wait(void)
{
80105650:	55                   	push   %ebp
80105651:	89 e5                	mov    %esp,%ebp
  return wait();
}
80105653:	5d                   	pop    %ebp
  return wait();
80105654:	e9 7f ec ff ff       	jmp    801042d8 <wait>
80105659:	8d 76 00             	lea    0x0(%esi),%esi

8010565c <sys_kill>:

int
sys_kill(void)
{
8010565c:	55                   	push   %ebp
8010565d:	89 e5                	mov    %esp,%ebp
8010565f:	83 ec 20             	sub    $0x20,%esp
  int pid;

  if(argint(0, &pid) < 0)
80105662:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105665:	50                   	push   %eax
80105666:	6a 00                	push   $0x0
80105668:	e8 e7 f3 ff ff       	call   80104a54 <argint>
8010566d:	83 c4 10             	add    $0x10,%esp
80105670:	85 c0                	test   %eax,%eax
80105672:	78 10                	js     80105684 <sys_kill+0x28>
    return -1;
  return kill(pid);
80105674:	83 ec 0c             	sub    $0xc,%esp
80105677:	ff 75 f4             	pushl  -0xc(%ebp)
8010567a:	e8 91 ed ff ff       	call   80104410 <kill>
8010567f:	83 c4 10             	add    $0x10,%esp
}
80105682:	c9                   	leave  
80105683:	c3                   	ret    
    return -1;
80105684:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105689:	c9                   	leave  
8010568a:	c3                   	ret    
8010568b:	90                   	nop

8010568c <sys_getpid>:

int
sys_getpid(void)
{
8010568c:	55                   	push   %ebp
8010568d:	89 e5                	mov    %esp,%ebp
8010568f:	83 ec 08             	sub    $0x8,%esp
  return myproc()->pid;
80105692:	e8 a1 e6 ff ff       	call   80103d38 <myproc>
80105697:	8b 40 10             	mov    0x10(%eax),%eax
}
8010569a:	c9                   	leave  
8010569b:	c3                   	ret    

8010569c <sys_sbrk>:

int
sys_sbrk(void)
{
8010569c:	55                   	push   %ebp
8010569d:	89 e5                	mov    %esp,%ebp
8010569f:	53                   	push   %ebx
801056a0:	83 ec 1c             	sub    $0x1c,%esp
  int addr;
  int n;

  if(argint(0, &n) < 0)
801056a3:	8d 45 f4             	lea    -0xc(%ebp),%eax
801056a6:	50                   	push   %eax
801056a7:	6a 00                	push   $0x0
801056a9:	e8 a6 f3 ff ff       	call   80104a54 <argint>
801056ae:	83 c4 10             	add    $0x10,%esp
801056b1:	85 c0                	test   %eax,%eax
801056b3:	78 23                	js     801056d8 <sys_sbrk+0x3c>
    return -1;
  addr = myproc()->sz;
801056b5:	e8 7e e6 ff ff       	call   80103d38 <myproc>
801056ba:	8b 18                	mov    (%eax),%ebx
  if(growproc(n) < 0)
801056bc:	83 ec 0c             	sub    $0xc,%esp
801056bf:	ff 75 f4             	pushl  -0xc(%ebp)
801056c2:	e8 75 e7 ff ff       	call   80103e3c <growproc>
801056c7:	83 c4 10             	add    $0x10,%esp
801056ca:	85 c0                	test   %eax,%eax
801056cc:	78 0a                	js     801056d8 <sys_sbrk+0x3c>
    return -1;
  return addr;
801056ce:	89 d8                	mov    %ebx,%eax
}
801056d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801056d3:	c9                   	leave  
801056d4:	c3                   	ret    
801056d5:	8d 76 00             	lea    0x0(%esi),%esi
    return -1;
801056d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801056dd:	eb f1                	jmp    801056d0 <sys_sbrk+0x34>
801056df:	90                   	nop

801056e0 <sys_sleep>:

int
sys_sleep(void)
{
801056e0:	55                   	push   %ebp
801056e1:	89 e5                	mov    %esp,%ebp
801056e3:	53                   	push   %ebx
801056e4:	83 ec 1c             	sub    $0x1c,%esp
  int n;
  uint ticks0;

  if(argint(0, &n) < 0)
801056e7:	8d 45 f4             	lea    -0xc(%ebp),%eax
801056ea:	50                   	push   %eax
801056eb:	6a 00                	push   $0x0
801056ed:	e8 62 f3 ff ff       	call   80104a54 <argint>
801056f2:	83 c4 10             	add    $0x10,%esp
801056f5:	85 c0                	test   %eax,%eax
801056f7:	78 7e                	js     80105777 <sys_sleep+0x97>
    return -1;
  acquire(&tickslock);
801056f9:	83 ec 0c             	sub    $0xc,%esp
801056fc:	68 60 38 11 80       	push   $0x80113860
80105701:	e8 e2 ef ff ff       	call   801046e8 <acquire>
  ticks0 = ticks;
80105706:	8b 1d a0 40 11 80    	mov    0x801140a0,%ebx
  while(ticks - ticks0 < n){
8010570c:	83 c4 10             	add    $0x10,%esp
8010570f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105712:	85 d2                	test   %edx,%edx
80105714:	75 23                	jne    80105739 <sys_sleep+0x59>
80105716:	eb 48                	jmp    80105760 <sys_sleep+0x80>
    if(myproc()->killed){
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
80105718:	83 ec 08             	sub    $0x8,%esp
8010571b:	68 60 38 11 80       	push   $0x80113860
80105720:	68 a0 40 11 80       	push   $0x801140a0
80105725:	e8 02 eb ff ff       	call   8010422c <sleep>
  while(ticks - ticks0 < n){
8010572a:	a1 a0 40 11 80       	mov    0x801140a0,%eax
8010572f:	29 d8                	sub    %ebx,%eax
80105731:	83 c4 10             	add    $0x10,%esp
80105734:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80105737:	73 27                	jae    80105760 <sys_sleep+0x80>
    if(myproc()->killed){
80105739:	e8 fa e5 ff ff       	call   80103d38 <myproc>
8010573e:	8b 40 24             	mov    0x24(%eax),%eax
80105741:	85 c0                	test   %eax,%eax
80105743:	74 d3                	je     80105718 <sys_sleep+0x38>
      release(&tickslock);
80105745:	83 ec 0c             	sub    $0xc,%esp
80105748:	68 60 38 11 80       	push   $0x80113860
8010574d:	e8 6a f0 ff ff       	call   801047bc <release>
      return -1;
80105752:	83 c4 10             	add    $0x10,%esp
80105755:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  }
  release(&tickslock);
  return 0;
}
8010575a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010575d:	c9                   	leave  
8010575e:	c3                   	ret    
8010575f:	90                   	nop
  release(&tickslock);
80105760:	83 ec 0c             	sub    $0xc,%esp
80105763:	68 60 38 11 80       	push   $0x80113860
80105768:	e8 4f f0 ff ff       	call   801047bc <release>
  return 0;
8010576d:	83 c4 10             	add    $0x10,%esp
80105770:	31 c0                	xor    %eax,%eax
}
80105772:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80105775:	c9                   	leave  
80105776:	c3                   	ret    
    return -1;
80105777:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010577c:	eb dc                	jmp    8010575a <sys_sleep+0x7a>
8010577e:	66 90                	xchg   %ax,%ax

80105780 <sys_uptime>:

// return how many clock tick interrupts have occurred
// since start.
int
sys_uptime(void)
{
80105780:	55                   	push   %ebp
80105781:	89 e5                	mov    %esp,%ebp
80105783:	53                   	push   %ebx
80105784:	83 ec 10             	sub    $0x10,%esp
  uint xticks;

  acquire(&tickslock);
80105787:	68 60 38 11 80       	push   $0x80113860
8010578c:	e8 57 ef ff ff       	call   801046e8 <acquire>
  xticks = ticks;
80105791:	8b 1d a0 40 11 80    	mov    0x801140a0,%ebx
  release(&tickslock);
80105797:	c7 04 24 60 38 11 80 	movl   $0x80113860,(%esp)
8010579e:	e8 19 f0 ff ff       	call   801047bc <release>
  return xticks;
}
801057a3:	89 d8                	mov    %ebx,%eax
801057a5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801057a8:	c9                   	leave  
801057a9:	c3                   	ret    
801057aa:	66 90                	xchg   %ax,%ax

801057ac <tvinit>:
void
tvinit(void)
{
  int i;

  for(i = 0; i < 256; i++)
801057ac:	31 c0                	xor    %eax,%eax
801057ae:	66 90                	xchg   %ax,%ax
    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
801057b0:	8b 14 85 00 70 10 80 	mov    -0x7fef9000(,%eax,4),%edx
801057b7:	66 89 14 c5 a0 38 11 	mov    %dx,-0x7feec760(,%eax,8)
801057be:	80 
801057bf:	66 c7 04 c5 a2 38 11 	movw   $0x8,-0x7feec75e(,%eax,8)
801057c6:	80 08 00 
801057c9:	c6 04 c5 a4 38 11 80 	movb   $0x0,-0x7feec75c(,%eax,8)
801057d0:	00 
801057d1:	c6 04 c5 a5 38 11 80 	movb   $0x8e,-0x7feec75b(,%eax,8)
801057d8:	8e 
801057d9:	c1 ea 10             	shr    $0x10,%edx
801057dc:	66 89 14 c5 a6 38 11 	mov    %dx,-0x7feec75a(,%eax,8)
801057e3:	80 
  for(i = 0; i < 256; i++)
801057e4:	40                   	inc    %eax
801057e5:	3d 00 01 00 00       	cmp    $0x100,%eax
801057ea:	75 c4                	jne    801057b0 <tvinit+0x4>
{
801057ec:	55                   	push   %ebp
801057ed:	89 e5                	mov    %esp,%ebp
801057ef:	83 ec 10             	sub    $0x10,%esp
  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
801057f2:	a1 00 71 10 80       	mov    0x80107100,%eax
801057f7:	66 a3 a0 3a 11 80    	mov    %ax,0x80113aa0
801057fd:	66 c7 05 a2 3a 11 80 	movw   $0x8,0x80113aa2
80105804:	08 00 
80105806:	c6 05 a4 3a 11 80 00 	movb   $0x0,0x80113aa4
8010580d:	c6 05 a5 3a 11 80 ef 	movb   $0xef,0x80113aa5
80105814:	c1 e8 10             	shr    $0x10,%eax
80105817:	66 a3 a6 3a 11 80    	mov    %ax,0x80113aa6

  initlock(&tickslock, "time");
8010581d:	68 b9 6b 10 80       	push   $0x80106bb9
80105822:	68 60 38 11 80       	push   $0x80113860
80105827:	e8 f8 ed ff ff       	call   80104624 <initlock>
8010582c:	83 c4 10             	add    $0x10,%esp
}
8010582f:	c9                   	leave  
80105830:	c3                   	ret    
80105831:	8d 76 00             	lea    0x0(%esi),%esi

80105834 <idtinit>:

void
idtinit(void)
{
80105834:	55                   	push   %ebp
80105835:	89 e5                	mov    %esp,%ebp
80105837:	83 ec 10             	sub    $0x10,%esp
  pd[0] = size-1;
8010583a:	66 c7 45 fa ff 07    	movw   $0x7ff,-0x6(%ebp)
  pd[1] = (uint)p;
80105840:	b8 a0 38 11 80       	mov    $0x801138a0,%eax
80105845:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  pd[2] = (uint)p >> 16;
80105849:	c1 e8 10             	shr    $0x10,%eax
8010584c:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  asm volatile("lidt (%0)" : : "r" (pd));
80105850:	8d 45 fa             	lea    -0x6(%ebp),%eax
80105853:	0f 01 18             	lidtl  (%eax)
  lidt(idt, sizeof(idt));
}
80105856:	c9                   	leave  
80105857:	c3                   	ret    

80105858 <trap>:

//PAGEBREAK: 41
void
trap(struct trapframe *tf)
{
80105858:	55                   	push   %ebp
80105859:	89 e5                	mov    %esp,%ebp
8010585b:	57                   	push   %edi
8010585c:	56                   	push   %esi
8010585d:	53                   	push   %ebx
8010585e:	83 ec 1c             	sub    $0x1c,%esp
80105861:	8b 7d 08             	mov    0x8(%ebp),%edi
  if(tf->trapno == T_SYSCALL){
80105864:	8b 47 30             	mov    0x30(%edi),%eax
80105867:	83 f8 40             	cmp    $0x40,%eax
8010586a:	0f 84 64 01 00 00    	je     801059d4 <trap+0x17c>
    if(myproc()->killed)
      exit();
    return;
  }

  switch(tf->trapno){
80105870:	83 e8 20             	sub    $0x20,%eax
80105873:	83 f8 1f             	cmp    $0x1f,%eax
80105876:	77 08                	ja     80105880 <trap+0x28>
80105878:	ff 24 85 60 6c 10 80 	jmp    *-0x7fef93a0(,%eax,4)
8010587f:	90                   	nop
    lapiceoi();
    break;

  //PAGEBREAK: 13
  default:
    if(myproc() == 0 || (tf->cs&3) == 0){
80105880:	e8 b3 e4 ff ff       	call   80103d38 <myproc>
80105885:	85 c0                	test   %eax,%eax
80105887:	0f 84 ba 01 00 00    	je     80105a47 <trap+0x1ef>
8010588d:	f6 47 3c 03          	testb  $0x3,0x3c(%edi)
80105891:	0f 84 b0 01 00 00    	je     80105a47 <trap+0x1ef>

static inline uint
rcr2(void)
{
  uint val;
  asm volatile("movl %%cr2,%0" : "=r" (val));
80105897:	0f 20 d1             	mov    %cr2,%ecx
8010589a:	89 4d d8             	mov    %ecx,-0x28(%ebp)
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
              tf->trapno, cpuid(), tf->eip, rcr2());
      panic("trap");
    }
    // In user space, assume process misbehaved.
    cprintf("pid %d %s: trap %d err %d on cpu %d "
8010589d:	8b 57 38             	mov    0x38(%edi),%edx
801058a0:	89 55 dc             	mov    %edx,-0x24(%ebp)
801058a3:	e8 5c e4 ff ff       	call   80103d04 <cpuid>
801058a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801058ab:	8b 77 34             	mov    0x34(%edi),%esi
801058ae:	8b 5f 30             	mov    0x30(%edi),%ebx
            "eip 0x%x addr 0x%x--kill proc\n",
            myproc()->pid, myproc()->name, tf->trapno,
801058b1:	e8 82 e4 ff ff       	call   80103d38 <myproc>
801058b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
801058b9:	e8 7a e4 ff ff       	call   80103d38 <myproc>
    cprintf("pid %d %s: trap %d err %d on cpu %d "
801058be:	8b 4d d8             	mov    -0x28(%ebp),%ecx
801058c1:	51                   	push   %ecx
801058c2:	8b 55 dc             	mov    -0x24(%ebp),%edx
801058c5:	52                   	push   %edx
801058c6:	ff 75 e4             	pushl  -0x1c(%ebp)
801058c9:	56                   	push   %esi
801058ca:	53                   	push   %ebx
            myproc()->pid, myproc()->name, tf->trapno,
801058cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
801058ce:	83 c2 6c             	add    $0x6c,%edx
    cprintf("pid %d %s: trap %d err %d on cpu %d "
801058d1:	52                   	push   %edx
801058d2:	ff 70 10             	pushl  0x10(%eax)
801058d5:	68 1c 6c 10 80       	push   $0x80106c1c
801058da:	e8 b5 b7 ff ff       	call   80101094 <cprintf>
            tf->err, cpuid(), tf->eip, rcr2());
    myproc()->killed = 1;
801058df:	83 c4 20             	add    $0x20,%esp
801058e2:	e8 51 e4 ff ff       	call   80103d38 <myproc>
801058e7:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
801058ee:	66 90                	xchg   %ax,%ax
  }

  // Force process exit if it has been killed and is in user space.
  // (If it is still executing in the kernel, let it keep running
  // until it gets to the regular system call return.)
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
801058f0:	e8 43 e4 ff ff       	call   80103d38 <myproc>
801058f5:	85 c0                	test   %eax,%eax
801058f7:	74 0c                	je     80105905 <trap+0xad>
801058f9:	e8 3a e4 ff ff       	call   80103d38 <myproc>
801058fe:	8b 50 24             	mov    0x24(%eax),%edx
80105901:	85 d2                	test   %edx,%edx
80105903:	75 43                	jne    80105948 <trap+0xf0>
    exit();

  // Force process to give up CPU on clock tick.
  // If interrupts were on while locks held, would need to check nlock.
  if(myproc() && myproc()->state == RUNNING &&
80105905:	e8 2e e4 ff ff       	call   80103d38 <myproc>
8010590a:	85 c0                	test   %eax,%eax
8010590c:	74 0b                	je     80105919 <trap+0xc1>
8010590e:	e8 25 e4 ff ff       	call   80103d38 <myproc>
80105913:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
80105917:	74 43                	je     8010595c <trap+0x104>
     tf->trapno == T_IRQ0+IRQ_TIMER)
    yield();

  // Check if the process has been killed since we yielded
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
80105919:	e8 1a e4 ff ff       	call   80103d38 <myproc>
8010591e:	85 c0                	test   %eax,%eax
80105920:	74 1c                	je     8010593e <trap+0xe6>
80105922:	e8 11 e4 ff ff       	call   80103d38 <myproc>
80105927:	8b 40 24             	mov    0x24(%eax),%eax
8010592a:	85 c0                	test   %eax,%eax
8010592c:	74 10                	je     8010593e <trap+0xe6>
8010592e:	8b 47 3c             	mov    0x3c(%edi),%eax
80105931:	83 e0 03             	and    $0x3,%eax
80105934:	66 83 f8 03          	cmp    $0x3,%ax
80105938:	0f 84 bf 00 00 00    	je     801059fd <trap+0x1a5>
    exit();
}
8010593e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105941:	5b                   	pop    %ebx
80105942:	5e                   	pop    %esi
80105943:	5f                   	pop    %edi
80105944:	5d                   	pop    %ebp
80105945:	c3                   	ret    
80105946:	66 90                	xchg   %ax,%ax
  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
80105948:	8b 47 3c             	mov    0x3c(%edi),%eax
8010594b:	83 e0 03             	and    $0x3,%eax
8010594e:	66 83 f8 03          	cmp    $0x3,%ax
80105952:	75 b1                	jne    80105905 <trap+0xad>
    exit();
80105954:	e8 8b e7 ff ff       	call   801040e4 <exit>
80105959:	eb aa                	jmp    80105905 <trap+0xad>
8010595b:	90                   	nop
  if(myproc() && myproc()->state == RUNNING &&
8010595c:	83 7f 30 20          	cmpl   $0x20,0x30(%edi)
80105960:	75 b7                	jne    80105919 <trap+0xc1>
    yield();
80105962:	e8 91 e8 ff ff       	call   801041f8 <yield>
80105967:	eb b0                	jmp    80105919 <trap+0xc1>
80105969:	8d 76 00             	lea    0x0(%esi),%esi
    if(cpuid() == 0){
8010596c:	e8 93 e3 ff ff       	call   80103d04 <cpuid>
80105971:	85 c0                	test   %eax,%eax
80105973:	0f 84 9b 00 00 00    	je     80105a14 <trap+0x1bc>
    lapiceoi();
80105979:	e8 72 d5 ff ff       	call   80102ef0 <lapiceoi>
    break;
8010597e:	e9 6d ff ff ff       	jmp    801058f0 <trap+0x98>
80105983:	90                   	nop
    kbdintr();
80105984:	e8 ef d3 ff ff       	call   80102d78 <kbdintr>
    lapiceoi();
80105989:	e8 62 d5 ff ff       	call   80102ef0 <lapiceoi>
    break;
8010598e:	e9 5d ff ff ff       	jmp    801058f0 <trap+0x98>
80105993:	90                   	nop
    uartintr();
80105994:	e8 fb 01 00 00       	call   80105b94 <uartintr>
    lapiceoi();
80105999:	e8 52 d5 ff ff       	call   80102ef0 <lapiceoi>
    break;
8010599e:	e9 4d ff ff ff       	jmp    801058f0 <trap+0x98>
801059a3:	90                   	nop
    cprintf("cpu%d: spurious interrupt at %x:%x\n",
801059a4:	8b 77 38             	mov    0x38(%edi),%esi
801059a7:	0f b7 5f 3c          	movzwl 0x3c(%edi),%ebx
801059ab:	e8 54 e3 ff ff       	call   80103d04 <cpuid>
801059b0:	56                   	push   %esi
801059b1:	53                   	push   %ebx
801059b2:	50                   	push   %eax
801059b3:	68 c4 6b 10 80       	push   $0x80106bc4
801059b8:	e8 d7 b6 ff ff       	call   80101094 <cprintf>
    lapiceoi();
801059bd:	e8 2e d5 ff ff       	call   80102ef0 <lapiceoi>
    break;
801059c2:	83 c4 10             	add    $0x10,%esp
801059c5:	e9 26 ff ff ff       	jmp    801058f0 <trap+0x98>
801059ca:	66 90                	xchg   %ax,%ax
    ideintr();
801059cc:	e8 ab ce ff ff       	call   8010287c <ideintr>
801059d1:	eb a6                	jmp    80105979 <trap+0x121>
801059d3:	90                   	nop
    if(myproc()->killed)
801059d4:	e8 5f e3 ff ff       	call   80103d38 <myproc>
801059d9:	8b 58 24             	mov    0x24(%eax),%ebx
801059dc:	85 db                	test   %ebx,%ebx
801059de:	75 2c                	jne    80105a0c <trap+0x1b4>
    myproc()->tf = tf;
801059e0:	e8 53 e3 ff ff       	call   80103d38 <myproc>
801059e5:	89 78 18             	mov    %edi,0x18(%eax)
    syscall();
801059e8:	e8 1b f1 ff ff       	call   80104b08 <syscall>
    if(myproc()->killed)
801059ed:	e8 46 e3 ff ff       	call   80103d38 <myproc>
801059f2:	8b 48 24             	mov    0x24(%eax),%ecx
801059f5:	85 c9                	test   %ecx,%ecx
801059f7:	0f 84 41 ff ff ff    	je     8010593e <trap+0xe6>
}
801059fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105a00:	5b                   	pop    %ebx
80105a01:	5e                   	pop    %esi
80105a02:	5f                   	pop    %edi
80105a03:	5d                   	pop    %ebp
      exit();
80105a04:	e9 db e6 ff ff       	jmp    801040e4 <exit>
80105a09:	8d 76 00             	lea    0x0(%esi),%esi
      exit();
80105a0c:	e8 d3 e6 ff ff       	call   801040e4 <exit>
80105a11:	eb cd                	jmp    801059e0 <trap+0x188>
80105a13:	90                   	nop
      acquire(&tickslock);
80105a14:	83 ec 0c             	sub    $0xc,%esp
80105a17:	68 60 38 11 80       	push   $0x80113860
80105a1c:	e8 c7 ec ff ff       	call   801046e8 <acquire>
      ticks++;
80105a21:	ff 05 a0 40 11 80    	incl   0x801140a0
      wakeup(&ticks);
80105a27:	c7 04 24 a0 40 11 80 	movl   $0x801140a0,(%esp)
80105a2e:	e8 85 e9 ff ff       	call   801043b8 <wakeup>
      release(&tickslock);
80105a33:	c7 04 24 60 38 11 80 	movl   $0x80113860,(%esp)
80105a3a:	e8 7d ed ff ff       	call   801047bc <release>
80105a3f:	83 c4 10             	add    $0x10,%esp
80105a42:	e9 32 ff ff ff       	jmp    80105979 <trap+0x121>
80105a47:	0f 20 d6             	mov    %cr2,%esi
      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
80105a4a:	8b 5f 38             	mov    0x38(%edi),%ebx
80105a4d:	e8 b2 e2 ff ff       	call   80103d04 <cpuid>
80105a52:	83 ec 0c             	sub    $0xc,%esp
80105a55:	56                   	push   %esi
80105a56:	53                   	push   %ebx
80105a57:	50                   	push   %eax
80105a58:	ff 77 30             	pushl  0x30(%edi)
80105a5b:	68 e8 6b 10 80       	push   $0x80106be8
80105a60:	e8 2f b6 ff ff       	call   80101094 <cprintf>
      panic("trap");
80105a65:	83 c4 14             	add    $0x14,%esp
80105a68:	68 be 6b 10 80       	push   $0x80106bbe
80105a6d:	e8 72 b3 ff ff       	call   80100de4 <panic>
80105a72:	66 90                	xchg   %ax,%ax

80105a74 <uartgetc>:
  outb(COM1+0, c);
}

static int
uartgetc(void)
{
80105a74:	55                   	push   %ebp
80105a75:	89 e5                	mov    %esp,%ebp
  if(!uart)
80105a77:	a1 bc 91 10 80       	mov    0x801091bc,%eax
80105a7c:	85 c0                	test   %eax,%eax
80105a7e:	74 14                	je     80105a94 <uartgetc+0x20>
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80105a80:	ba fd 03 00 00       	mov    $0x3fd,%edx
80105a85:	ec                   	in     (%dx),%al
    return -1;
  if(!(inb(COM1+5) & 0x01))
80105a86:	a8 01                	test   $0x1,%al
80105a88:	74 0a                	je     80105a94 <uartgetc+0x20>
80105a8a:	b2 f8                	mov    $0xf8,%dl
80105a8c:	ec                   	in     (%dx),%al
    return -1;
  return inb(COM1+0);
80105a8d:	0f b6 c0             	movzbl %al,%eax
}
80105a90:	5d                   	pop    %ebp
80105a91:	c3                   	ret    
80105a92:	66 90                	xchg   %ax,%ax
    return -1;
80105a94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105a99:	5d                   	pop    %ebp
80105a9a:	c3                   	ret    
80105a9b:	90                   	nop

80105a9c <uartputc.part.0>:
uartputc(int c)
80105a9c:	55                   	push   %ebp
80105a9d:	89 e5                	mov    %esp,%ebp
80105a9f:	57                   	push   %edi
80105aa0:	56                   	push   %esi
80105aa1:	53                   	push   %ebx
80105aa2:	83 ec 0c             	sub    $0xc,%esp
80105aa5:	89 c7                	mov    %eax,%edi
80105aa7:	bb 80 00 00 00       	mov    $0x80,%ebx
80105aac:	be fd 03 00 00       	mov    $0x3fd,%esi
80105ab1:	eb 11                	jmp    80105ac4 <uartputc.part.0+0x28>
80105ab3:	90                   	nop
    microdelay(10);
80105ab4:	83 ec 0c             	sub    $0xc,%esp
80105ab7:	6a 0a                	push   $0xa
80105ab9:	e8 4e d4 ff ff       	call   80102f0c <microdelay>
  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
80105abe:	83 c4 10             	add    $0x10,%esp
80105ac1:	4b                   	dec    %ebx
80105ac2:	74 07                	je     80105acb <uartputc.part.0+0x2f>
80105ac4:	89 f2                	mov    %esi,%edx
80105ac6:	ec                   	in     (%dx),%al
80105ac7:	a8 20                	test   $0x20,%al
80105ac9:	74 e9                	je     80105ab4 <uartputc.part.0+0x18>
  asm volatile("out %0,%1" : : "a" (data), "d" (port));
80105acb:	ba f8 03 00 00       	mov    $0x3f8,%edx
80105ad0:	89 f8                	mov    %edi,%eax
80105ad2:	ee                   	out    %al,(%dx)
}
80105ad3:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105ad6:	5b                   	pop    %ebx
80105ad7:	5e                   	pop    %esi
80105ad8:	5f                   	pop    %edi
80105ad9:	5d                   	pop    %ebp
80105ada:	c3                   	ret    
80105adb:	90                   	nop

80105adc <uartinit>:
{
80105adc:	55                   	push   %ebp
80105add:	89 e5                	mov    %esp,%ebp
80105adf:	57                   	push   %edi
80105ae0:	56                   	push   %esi
80105ae1:	53                   	push   %ebx
80105ae2:	83 ec 0c             	sub    $0xc,%esp
80105ae5:	bb fa 03 00 00       	mov    $0x3fa,%ebx
80105aea:	31 c0                	xor    %eax,%eax
80105aec:	89 da                	mov    %ebx,%edx
80105aee:	ee                   	out    %al,(%dx)
80105aef:	bf fb 03 00 00       	mov    $0x3fb,%edi
80105af4:	b0 80                	mov    $0x80,%al
80105af6:	89 fa                	mov    %edi,%edx
80105af8:	ee                   	out    %al,(%dx)
80105af9:	b9 f8 03 00 00       	mov    $0x3f8,%ecx
80105afe:	b0 0c                	mov    $0xc,%al
80105b00:	89 ca                	mov    %ecx,%edx
80105b02:	ee                   	out    %al,(%dx)
80105b03:	be f9 03 00 00       	mov    $0x3f9,%esi
80105b08:	31 c0                	xor    %eax,%eax
80105b0a:	89 f2                	mov    %esi,%edx
80105b0c:	ee                   	out    %al,(%dx)
80105b0d:	b0 03                	mov    $0x3,%al
80105b0f:	89 fa                	mov    %edi,%edx
80105b11:	ee                   	out    %al,(%dx)
80105b12:	b2 fc                	mov    $0xfc,%dl
80105b14:	31 c0                	xor    %eax,%eax
80105b16:	ee                   	out    %al,(%dx)
80105b17:	b0 01                	mov    $0x1,%al
80105b19:	89 f2                	mov    %esi,%edx
80105b1b:	ee                   	out    %al,(%dx)
  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
80105b1c:	b2 fd                	mov    $0xfd,%dl
80105b1e:	ec                   	in     (%dx),%al
  if(inb(COM1+5) == 0xFF)
80105b1f:	fe c0                	inc    %al
80105b21:	74 4d                	je     80105b70 <uartinit+0x94>
  uart = 1;
80105b23:	c7 05 bc 91 10 80 01 	movl   $0x1,0x801091bc
80105b2a:	00 00 00 
80105b2d:	89 da                	mov    %ebx,%edx
80105b2f:	ec                   	in     (%dx),%al
80105b30:	89 ca                	mov    %ecx,%edx
80105b32:	ec                   	in     (%dx),%al
  ioapicenable(IRQ_COM1, 0);
80105b33:	83 ec 08             	sub    $0x8,%esp
80105b36:	6a 00                	push   $0x0
80105b38:	6a 04                	push   $0x4
80105b3a:	e8 5d cf ff ff       	call   80102a9c <ioapicenable>
80105b3f:	83 c4 10             	add    $0x10,%esp
80105b42:	b8 78 00 00 00       	mov    $0x78,%eax
80105b47:	bb e0 6c 10 80       	mov    $0x80106ce0,%ebx
80105b4c:	eb 0a                	jmp    80105b58 <uartinit+0x7c>
80105b4e:	66 90                	xchg   %ax,%ax
  for(p="xv6...\n"; *p; p++)
80105b50:	43                   	inc    %ebx
80105b51:	0f be 03             	movsbl (%ebx),%eax
80105b54:	84 c0                	test   %al,%al
80105b56:	74 18                	je     80105b70 <uartinit+0x94>
  if(!uart)
80105b58:	8b 15 bc 91 10 80    	mov    0x801091bc,%edx
80105b5e:	85 d2                	test   %edx,%edx
80105b60:	74 ee                	je     80105b50 <uartinit+0x74>
80105b62:	e8 35 ff ff ff       	call   80105a9c <uartputc.part.0>
  for(p="xv6...\n"; *p; p++)
80105b67:	43                   	inc    %ebx
80105b68:	0f be 03             	movsbl (%ebx),%eax
80105b6b:	84 c0                	test   %al,%al
80105b6d:	75 e9                	jne    80105b58 <uartinit+0x7c>
80105b6f:	90                   	nop
}
80105b70:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105b73:	5b                   	pop    %ebx
80105b74:	5e                   	pop    %esi
80105b75:	5f                   	pop    %edi
80105b76:	5d                   	pop    %ebp
80105b77:	c3                   	ret    

80105b78 <uartputc>:
{
80105b78:	55                   	push   %ebp
80105b79:	89 e5                	mov    %esp,%ebp
80105b7b:	8b 45 08             	mov    0x8(%ebp),%eax
  if(!uart)
80105b7e:	8b 15 bc 91 10 80    	mov    0x801091bc,%edx
80105b84:	85 d2                	test   %edx,%edx
80105b86:	74 08                	je     80105b90 <uartputc+0x18>
}
80105b88:	5d                   	pop    %ebp
80105b89:	e9 0e ff ff ff       	jmp    80105a9c <uartputc.part.0>
80105b8e:	66 90                	xchg   %ax,%ax
80105b90:	5d                   	pop    %ebp
80105b91:	c3                   	ret    
80105b92:	66 90                	xchg   %ax,%ax

80105b94 <uartintr>:

void
uartintr(void)
{
80105b94:	55                   	push   %ebp
80105b95:	89 e5                	mov    %esp,%ebp
80105b97:	83 ec 14             	sub    $0x14,%esp
  consoleintr(uartgetc);
80105b9a:	68 74 5a 10 80       	push   $0x80105a74
80105b9f:	e8 3c b6 ff ff       	call   801011e0 <consoleintr>
80105ba4:	83 c4 10             	add    $0x10,%esp
}
80105ba7:	c9                   	leave  
80105ba8:	c3                   	ret    
80105ba9:	66 90                	xchg   %ax,%ax
80105bab:	90                   	nop

80105bac <walkpgdir>:
// Return the address of the PTE in page table pgdir
// that corresponds to virtual address va.  If alloc!=0,
// create any required page table pages.
static pte_t *
walkpgdir(pde_t *pgdir, const void *va, int alloc)
{
80105bac:	55                   	push   %ebp
80105bad:	89 e5                	mov    %esp,%ebp
80105baf:	57                   	push   %edi
80105bb0:	56                   	push   %esi
80105bb1:	53                   	push   %ebx
80105bb2:	83 ec 0c             	sub    $0xc,%esp
80105bb5:	89 d3                	mov    %edx,%ebx
  pde_t *pde;
  pte_t *pgtab;

  pde = &pgdir[PDX(va)];
80105bb7:	c1 ea 16             	shr    $0x16,%edx
80105bba:	8d 3c 90             	lea    (%eax,%edx,4),%edi
  if(*pde & PTE_P){
80105bbd:	8b 07                	mov    (%edi),%eax
80105bbf:	a8 01                	test   $0x1,%al
80105bc1:	74 21                	je     80105be4 <walkpgdir+0x38>
    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
80105bc3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80105bc8:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
    // The permissions here are overly generous, but they can
    // be further restricted by the permissions in the page table
    // entries, if necessary.
    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
  }
  return &pgtab[PTX(va)];
80105bce:	c1 eb 0a             	shr    $0xa,%ebx
80105bd1:	81 e3 fc 0f 00 00    	and    $0xffc,%ebx
80105bd7:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
}
80105bda:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105bdd:	5b                   	pop    %ebx
80105bde:	5e                   	pop    %esi
80105bdf:	5f                   	pop    %edi
80105be0:	5d                   	pop    %ebp
80105be1:	c3                   	ret    
80105be2:	66 90                	xchg   %ax,%ax
    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
80105be4:	85 c9                	test   %ecx,%ecx
80105be6:	74 2c                	je     80105c14 <walkpgdir+0x68>
80105be8:	e8 6f d0 ff ff       	call   80102c5c <kalloc>
80105bed:	89 c6                	mov    %eax,%esi
80105bef:	85 c0                	test   %eax,%eax
80105bf1:	74 21                	je     80105c14 <walkpgdir+0x68>
    memset(pgtab, 0, PGSIZE);
80105bf3:	50                   	push   %eax
80105bf4:	68 00 10 00 00       	push   $0x1000
80105bf9:	6a 00                	push   $0x0
80105bfb:	56                   	push   %esi
80105bfc:	e8 07 ec ff ff       	call   80104808 <memset>
    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
80105c01:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
80105c07:	83 c8 07             	or     $0x7,%eax
80105c0a:	89 07                	mov    %eax,(%edi)
80105c0c:	83 c4 10             	add    $0x10,%esp
80105c0f:	eb bd                	jmp    80105bce <walkpgdir+0x22>
80105c11:	8d 76 00             	lea    0x0(%esi),%esi
      return 0;
80105c14:	31 c0                	xor    %eax,%eax
}
80105c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105c19:	5b                   	pop    %ebx
80105c1a:	5e                   	pop    %esi
80105c1b:	5f                   	pop    %edi
80105c1c:	5d                   	pop    %ebp
80105c1d:	c3                   	ret    
80105c1e:	66 90                	xchg   %ax,%ax

80105c20 <mappages>:
// Create PTEs for virtual addresses starting at va that refer to
// physical addresses starting at pa. va and size might not
// be page-aligned.
static int
mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
{
80105c20:	55                   	push   %ebp
80105c21:	89 e5                	mov    %esp,%ebp
80105c23:	57                   	push   %edi
80105c24:	56                   	push   %esi
80105c25:	53                   	push   %ebx
80105c26:	83 ec 1c             	sub    $0x1c,%esp
80105c29:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  char *a, *last;
  pte_t *pte;

  a = (char*)PGROUNDDOWN((uint)va);
80105c2c:	89 d3                	mov    %edx,%ebx
80105c2e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
80105c34:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
80105c38:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80105c3d:	89 45 e0             	mov    %eax,-0x20(%ebp)
80105c40:	8b 7d 08             	mov    0x8(%ebp),%edi
80105c43:	29 df                	sub    %ebx,%edi
80105c45:	8b 45 0c             	mov    0xc(%ebp),%eax
80105c48:	83 c8 01             	or     $0x1,%eax
80105c4b:	89 45 dc             	mov    %eax,-0x24(%ebp)
80105c4e:	eb 15                	jmp    80105c65 <mappages+0x45>
  for(;;){
    if((pte = walkpgdir(pgdir, a, 1)) == 0)
      return -1;
    if(*pte & PTE_P)
80105c50:	f6 00 01             	testb  $0x1,(%eax)
80105c53:	75 3d                	jne    80105c92 <mappages+0x72>
      panic("remap");
    *pte = pa | perm | PTE_P;
80105c55:	0b 75 dc             	or     -0x24(%ebp),%esi
80105c58:	89 30                	mov    %esi,(%eax)
    if(a == last)
80105c5a:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
80105c5d:	74 29                	je     80105c88 <mappages+0x68>
      break;
    a += PGSIZE;
80105c5f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80105c65:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
    if((pte = walkpgdir(pgdir, a, 1)) == 0)
80105c68:	b9 01 00 00 00       	mov    $0x1,%ecx
80105c6d:	89 da                	mov    %ebx,%edx
80105c6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80105c72:	e8 35 ff ff ff       	call   80105bac <walkpgdir>
80105c77:	85 c0                	test   %eax,%eax
80105c79:	75 d5                	jne    80105c50 <mappages+0x30>
      return -1;
80105c7b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    pa += PGSIZE;
  }
  return 0;
}
80105c80:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105c83:	5b                   	pop    %ebx
80105c84:	5e                   	pop    %esi
80105c85:	5f                   	pop    %edi
80105c86:	5d                   	pop    %ebp
80105c87:	c3                   	ret    
  return 0;
80105c88:	31 c0                	xor    %eax,%eax
}
80105c8a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105c8d:	5b                   	pop    %ebx
80105c8e:	5e                   	pop    %esi
80105c8f:	5f                   	pop    %edi
80105c90:	5d                   	pop    %ebp
80105c91:	c3                   	ret    
      panic("remap");
80105c92:	83 ec 0c             	sub    $0xc,%esp
80105c95:	68 e8 6c 10 80       	push   $0x80106ce8
80105c9a:	e8 45 b1 ff ff       	call   80100de4 <panic>
80105c9f:	90                   	nop

80105ca0 <deallocuvm.part.0>:
// Deallocate user pages to bring the process size from oldsz to
// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
// need to be less than oldsz.  oldsz can be larger than the actual
// process size.  Returns the new process size.
int
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
80105ca0:	55                   	push   %ebp
80105ca1:	89 e5                	mov    %esp,%ebp
80105ca3:	57                   	push   %edi
80105ca4:	56                   	push   %esi
80105ca5:	53                   	push   %ebx
80105ca6:	83 ec 1c             	sub    $0x1c,%esp
80105ca9:	89 c7                	mov    %eax,%edi
80105cab:	89 d6                	mov    %edx,%esi
80105cad:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  uint a, pa;

  if(newsz >= oldsz)
    return oldsz;

  a = PGROUNDUP(newsz);
80105cb0:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
80105cb6:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  for(; a  < oldsz; a += PGSIZE){
80105cbc:	39 d3                	cmp    %edx,%ebx
80105cbe:	72 3b                	jb     80105cfb <deallocuvm.part.0+0x5b>
80105cc0:	eb 5e                	jmp    80105d20 <deallocuvm.part.0+0x80>
80105cc2:	66 90                	xchg   %ax,%ax
    pte = walkpgdir(pgdir, (char*)a, 0);
    if(!pte)
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
    else if((*pte & PTE_P) != 0){
80105cc4:	8b 10                	mov    (%eax),%edx
80105cc6:	f6 c2 01             	test   $0x1,%dl
80105cc9:	74 26                	je     80105cf1 <deallocuvm.part.0+0x51>
      pa = PTE_ADDR(*pte);
      if(pa == 0)
80105ccb:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
80105cd1:	74 58                	je     80105d2b <deallocuvm.part.0+0x8b>
80105cd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        panic("kfree");
      char *v = P2V(pa);
      kfree(v);
80105cd6:	83 ec 0c             	sub    $0xc,%esp
      char *v = P2V(pa);
80105cd9:	81 c2 00 00 00 80    	add    $0x80000000,%edx
      kfree(v);
80105cdf:	52                   	push   %edx
80105ce0:	e8 eb cd ff ff       	call   80102ad0 <kfree>
      *pte = 0;
80105ce5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80105ce8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
80105cee:	83 c4 10             	add    $0x10,%esp
  for(; a  < oldsz; a += PGSIZE){
80105cf1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80105cf7:	39 f3                	cmp    %esi,%ebx
80105cf9:	73 25                	jae    80105d20 <deallocuvm.part.0+0x80>
    pte = walkpgdir(pgdir, (char*)a, 0);
80105cfb:	31 c9                	xor    %ecx,%ecx
80105cfd:	89 da                	mov    %ebx,%edx
80105cff:	89 f8                	mov    %edi,%eax
80105d01:	e8 a6 fe ff ff       	call   80105bac <walkpgdir>
    if(!pte)
80105d06:	85 c0                	test   %eax,%eax
80105d08:	75 ba                	jne    80105cc4 <deallocuvm.part.0+0x24>
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
80105d0a:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
80105d10:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
  for(; a  < oldsz; a += PGSIZE){
80105d16:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80105d1c:	39 f3                	cmp    %esi,%ebx
80105d1e:	72 db                	jb     80105cfb <deallocuvm.part.0+0x5b>
    }
  }
  return newsz;
}
80105d20:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105d23:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105d26:	5b                   	pop    %ebx
80105d27:	5e                   	pop    %esi
80105d28:	5f                   	pop    %edi
80105d29:	5d                   	pop    %ebp
80105d2a:	c3                   	ret    
        panic("kfree");
80105d2b:	83 ec 0c             	sub    $0xc,%esp
80105d2e:	68 86 66 10 80       	push   $0x80106686
80105d33:	e8 ac b0 ff ff       	call   80100de4 <panic>

80105d38 <seginit>:
{
80105d38:	55                   	push   %ebp
80105d39:	89 e5                	mov    %esp,%ebp
80105d3b:	53                   	push   %ebx
80105d3c:	83 ec 14             	sub    $0x14,%esp
  c = &cpus[cpuid()];
80105d3f:	e8 c0 df ff ff       	call   80103d04 <cpuid>
  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
80105d44:	8d 14 80             	lea    (%eax,%eax,4),%edx
80105d47:	01 d2                	add    %edx,%edx
80105d49:	01 d0                	add    %edx,%eax
80105d4b:	c1 e0 04             	shl    $0x4,%eax
80105d4e:	8d 90 80 13 11 80    	lea    -0x7feeec80(%eax),%edx
80105d54:	66 c7 42 78 ff ff    	movw   $0xffff,0x78(%edx)
80105d5a:	66 c7 42 7a 00 00    	movw   $0x0,0x7a(%edx)
80105d60:	c6 42 7c 00          	movb   $0x0,0x7c(%edx)
80105d64:	c6 80 fd 13 11 80 9a 	movb   $0x9a,-0x7feeec03(%eax)
80105d6b:	c6 80 fe 13 11 80 cf 	movb   $0xcf,-0x7feeec02(%eax)
80105d72:	c6 42 7f 00          	movb   $0x0,0x7f(%edx)
  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
80105d76:	66 c7 82 80 00 00 00 	movw   $0xffff,0x80(%edx)
80105d7d:	ff ff 
80105d7f:	66 c7 82 82 00 00 00 	movw   $0x0,0x82(%edx)
80105d86:	00 00 
80105d88:	c6 82 84 00 00 00 00 	movb   $0x0,0x84(%edx)
80105d8f:	c6 80 05 14 11 80 92 	movb   $0x92,-0x7feeebfb(%eax)
80105d96:	c6 80 06 14 11 80 cf 	movb   $0xcf,-0x7feeebfa(%eax)
80105d9d:	c6 82 87 00 00 00 00 	movb   $0x0,0x87(%edx)
  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
80105da4:	66 c7 82 88 00 00 00 	movw   $0xffff,0x88(%edx)
80105dab:	ff ff 
80105dad:	66 c7 82 8a 00 00 00 	movw   $0x0,0x8a(%edx)
80105db4:	00 00 
80105db6:	c6 82 8c 00 00 00 00 	movb   $0x0,0x8c(%edx)
80105dbd:	c6 80 0d 14 11 80 fa 	movb   $0xfa,-0x7feeebf3(%eax)
80105dc4:	c6 80 0e 14 11 80 cf 	movb   $0xcf,-0x7feeebf2(%eax)
80105dcb:	c6 82 8f 00 00 00 00 	movb   $0x0,0x8f(%edx)
  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
80105dd2:	8d 8a 90 00 00 00    	lea    0x90(%edx),%ecx
80105dd8:	66 c7 82 90 00 00 00 	movw   $0xffff,0x90(%edx)
80105ddf:	ff ff 
80105de1:	66 c7 82 92 00 00 00 	movw   $0x0,0x92(%edx)
80105de8:	00 00 
80105dea:	c6 82 94 00 00 00 00 	movb   $0x0,0x94(%edx)
80105df1:	c6 80 15 14 11 80 f2 	movb   $0xf2,-0x7feeebeb(%eax)
80105df8:	c6 80 16 14 11 80 cf 	movb   $0xcf,-0x7feeebea(%eax)
80105dff:	c6 41 07 00          	movb   $0x0,0x7(%ecx)
  lgdt(c->gdt, sizeof(c->gdt));
80105e03:	05 f0 13 11 80       	add    $0x801113f0,%eax
  pd[0] = size-1;
80105e08:	66 c7 45 f2 2f 00    	movw   $0x2f,-0xe(%ebp)
  pd[1] = (uint)p;
80105e0e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
  pd[2] = (uint)p >> 16;
80105e12:	c1 e8 10             	shr    $0x10,%eax
80105e15:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
  asm volatile("lgdt (%0)" : : "r" (pd));
80105e19:	8d 45 f2             	lea    -0xe(%ebp),%eax
80105e1c:	0f 01 10             	lgdtl  (%eax)
}
80105e1f:	83 c4 14             	add    $0x14,%esp
80105e22:	5b                   	pop    %ebx
80105e23:	5d                   	pop    %ebp
80105e24:	c3                   	ret    
80105e25:	8d 76 00             	lea    0x0(%esi),%esi

80105e28 <switchkvm>:
{
80105e28:	55                   	push   %ebp
80105e29:	89 e5                	mov    %esp,%ebp
  lcr3(V2P(kpgdir));   // switch to the kernel page table
80105e2b:	a1 a4 40 11 80       	mov    0x801140a4,%eax
80105e30:	05 00 00 00 80       	add    $0x80000000,%eax
}

static inline void
lcr3(uint val)
{
  asm volatile("movl %0,%%cr3" : : "r" (val));
80105e35:	0f 22 d8             	mov    %eax,%cr3
}
80105e38:	5d                   	pop    %ebp
80105e39:	c3                   	ret    
80105e3a:	66 90                	xchg   %ax,%ax

80105e3c <switchuvm>:
{
80105e3c:	55                   	push   %ebp
80105e3d:	89 e5                	mov    %esp,%ebp
80105e3f:	57                   	push   %edi
80105e40:	56                   	push   %esi
80105e41:	53                   	push   %ebx
80105e42:	83 ec 1c             	sub    $0x1c,%esp
80105e45:	8b 75 08             	mov    0x8(%ebp),%esi
  if(p == 0)
80105e48:	85 f6                	test   %esi,%esi
80105e4a:	0f 84 c4 00 00 00    	je     80105f14 <switchuvm+0xd8>
  if(p->kstack == 0)
80105e50:	8b 56 08             	mov    0x8(%esi),%edx
80105e53:	85 d2                	test   %edx,%edx
80105e55:	0f 84 d3 00 00 00    	je     80105f2e <switchuvm+0xf2>
  if(p->pgdir == 0)
80105e5b:	8b 46 04             	mov    0x4(%esi),%eax
80105e5e:	85 c0                	test   %eax,%eax
80105e60:	0f 84 bb 00 00 00    	je     80105f21 <switchuvm+0xe5>
  pushcli();
80105e66:	e8 45 e8 ff ff       	call   801046b0 <pushcli>
  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
80105e6b:	e8 1c de ff ff       	call   80103c8c <mycpu>
80105e70:	89 c3                	mov    %eax,%ebx
80105e72:	e8 15 de ff ff       	call   80103c8c <mycpu>
80105e77:	89 c7                	mov    %eax,%edi
80105e79:	e8 0e de ff ff       	call   80103c8c <mycpu>
80105e7e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80105e81:	e8 06 de ff ff       	call   80103c8c <mycpu>
80105e86:	66 c7 83 98 00 00 00 	movw   $0x67,0x98(%ebx)
80105e8d:	67 00 
80105e8f:	83 c7 08             	add    $0x8,%edi
80105e92:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
80105e99:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80105e9c:	83 c1 08             	add    $0x8,%ecx
80105e9f:	c1 e9 10             	shr    $0x10,%ecx
80105ea2:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
80105ea8:	c6 83 9d 00 00 00 99 	movb   $0x99,0x9d(%ebx)
80105eaf:	c6 83 9e 00 00 00 40 	movb   $0x40,0x9e(%ebx)
80105eb6:	83 c0 08             	add    $0x8,%eax
80105eb9:	c1 e8 18             	shr    $0x18,%eax
80105ebc:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
  mycpu()->gdt[SEG_TSS].s = 0;
80105ec2:	e8 c5 dd ff ff       	call   80103c8c <mycpu>
80105ec7:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
  mycpu()->ts.ss0 = SEG_KDATA << 3;
80105ece:	e8 b9 dd ff ff       	call   80103c8c <mycpu>
80105ed3:	66 c7 40 10 10 00    	movw   $0x10,0x10(%eax)
  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
80105ed9:	e8 ae dd ff ff       	call   80103c8c <mycpu>
80105ede:	8b 56 08             	mov    0x8(%esi),%edx
80105ee1:	8d 8a 00 10 00 00    	lea    0x1000(%edx),%ecx
80105ee7:	89 48 0c             	mov    %ecx,0xc(%eax)
  mycpu()->ts.iomb = (ushort) 0xFFFF;
80105eea:	e8 9d dd ff ff       	call   80103c8c <mycpu>
80105eef:	66 c7 40 6e ff ff    	movw   $0xffff,0x6e(%eax)
  asm volatile("ltr %0" : : "r" (sel));
80105ef5:	b8 28 00 00 00       	mov    $0x28,%eax
80105efa:	0f 00 d8             	ltr    %ax
  lcr3(V2P(p->pgdir));  // switch to process's address space
80105efd:	8b 46 04             	mov    0x4(%esi),%eax
80105f00:	05 00 00 00 80       	add    $0x80000000,%eax
  asm volatile("movl %0,%%cr3" : : "r" (val));
80105f05:	0f 22 d8             	mov    %eax,%cr3
}
80105f08:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105f0b:	5b                   	pop    %ebx
80105f0c:	5e                   	pop    %esi
80105f0d:	5f                   	pop    %edi
80105f0e:	5d                   	pop    %ebp
  popcli();
80105f0f:	e9 44 e8 ff ff       	jmp    80104758 <popcli>
    panic("switchuvm: no process");
80105f14:	83 ec 0c             	sub    $0xc,%esp
80105f17:	68 ee 6c 10 80       	push   $0x80106cee
80105f1c:	e8 c3 ae ff ff       	call   80100de4 <panic>
    panic("switchuvm: no pgdir");
80105f21:	83 ec 0c             	sub    $0xc,%esp
80105f24:	68 19 6d 10 80       	push   $0x80106d19
80105f29:	e8 b6 ae ff ff       	call   80100de4 <panic>
    panic("switchuvm: no kstack");
80105f2e:	83 ec 0c             	sub    $0xc,%esp
80105f31:	68 04 6d 10 80       	push   $0x80106d04
80105f36:	e8 a9 ae ff ff       	call   80100de4 <panic>
80105f3b:	90                   	nop

80105f3c <inituvm>:
{
80105f3c:	55                   	push   %ebp
80105f3d:	89 e5                	mov    %esp,%ebp
80105f3f:	57                   	push   %edi
80105f40:	56                   	push   %esi
80105f41:	53                   	push   %ebx
80105f42:	83 ec 1c             	sub    $0x1c,%esp
80105f45:	8b 45 08             	mov    0x8(%ebp),%eax
80105f48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80105f4b:	8b 7d 0c             	mov    0xc(%ebp),%edi
80105f4e:	8b 75 10             	mov    0x10(%ebp),%esi
  if(sz >= PGSIZE)
80105f51:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
80105f57:	77 47                	ja     80105fa0 <inituvm+0x64>
  mem = kalloc();
80105f59:	e8 fe cc ff ff       	call   80102c5c <kalloc>
80105f5e:	89 c3                	mov    %eax,%ebx
  memset(mem, 0, PGSIZE);
80105f60:	50                   	push   %eax
80105f61:	68 00 10 00 00       	push   $0x1000
80105f66:	6a 00                	push   $0x0
80105f68:	53                   	push   %ebx
80105f69:	e8 9a e8 ff ff       	call   80104808 <memset>
  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
80105f6e:	5a                   	pop    %edx
80105f6f:	59                   	pop    %ecx
80105f70:	6a 06                	push   $0x6
80105f72:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80105f78:	50                   	push   %eax
80105f79:	b9 00 10 00 00       	mov    $0x1000,%ecx
80105f7e:	31 d2                	xor    %edx,%edx
80105f80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80105f83:	e8 98 fc ff ff       	call   80105c20 <mappages>
  memmove(mem, init, sz);
80105f88:	83 c4 10             	add    $0x10,%esp
80105f8b:	89 75 10             	mov    %esi,0x10(%ebp)
80105f8e:	89 7d 0c             	mov    %edi,0xc(%ebp)
80105f91:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
80105f94:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105f97:	5b                   	pop    %ebx
80105f98:	5e                   	pop    %esi
80105f99:	5f                   	pop    %edi
80105f9a:	5d                   	pop    %ebp
  memmove(mem, init, sz);
80105f9b:	e9 fc e8 ff ff       	jmp    8010489c <memmove>
    panic("inituvm: more than a page");
80105fa0:	83 ec 0c             	sub    $0xc,%esp
80105fa3:	68 2d 6d 10 80       	push   $0x80106d2d
80105fa8:	e8 37 ae ff ff       	call   80100de4 <panic>
80105fad:	8d 76 00             	lea    0x0(%esi),%esi

80105fb0 <loaduvm>:
{
80105fb0:	55                   	push   %ebp
80105fb1:	89 e5                	mov    %esp,%ebp
80105fb3:	57                   	push   %edi
80105fb4:	56                   	push   %esi
80105fb5:	53                   	push   %ebx
80105fb6:	83 ec 0c             	sub    $0xc,%esp
  if((uint) addr % PGSIZE != 0)
80105fb9:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
80105fc0:	0f 85 8c 00 00 00    	jne    80106052 <loaduvm+0xa2>
  for(i = 0; i < sz; i += PGSIZE){
80105fc6:	8b 45 18             	mov    0x18(%ebp),%eax
80105fc9:	85 c0                	test   %eax,%eax
80105fcb:	74 5f                	je     8010602c <loaduvm+0x7c>
80105fcd:	8b 75 18             	mov    0x18(%ebp),%esi
80105fd0:	31 db                	xor    %ebx,%ebx
80105fd2:	eb 2f                	jmp    80106003 <loaduvm+0x53>
    if(sz - i < PGSIZE)
80105fd4:	89 f7                	mov    %esi,%edi
    if(readi(ip, P2V(pa), offset+i, n) != n)
80105fd6:	57                   	push   %edi
80105fd7:	8b 4d 14             	mov    0x14(%ebp),%ecx
80105fda:	01 d9                	add    %ebx,%ecx
80105fdc:	51                   	push   %ecx
80105fdd:	05 00 00 00 80       	add    $0x80000000,%eax
80105fe2:	50                   	push   %eax
80105fe3:	ff 75 10             	pushl  0x10(%ebp)
80105fe6:	e8 15 c2 ff ff       	call   80102200 <readi>
80105feb:	83 c4 10             	add    $0x10,%esp
80105fee:	39 f8                	cmp    %edi,%eax
80105ff0:	75 46                	jne    80106038 <loaduvm+0x88>
  for(i = 0; i < sz; i += PGSIZE){
80105ff2:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80105ff8:	81 ee 00 10 00 00    	sub    $0x1000,%esi
80105ffe:	39 5d 18             	cmp    %ebx,0x18(%ebp)
80106001:	76 29                	jbe    8010602c <loaduvm+0x7c>
80106003:	8b 55 0c             	mov    0xc(%ebp),%edx
80106006:	01 da                	add    %ebx,%edx
    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
80106008:	31 c9                	xor    %ecx,%ecx
8010600a:	8b 45 08             	mov    0x8(%ebp),%eax
8010600d:	e8 9a fb ff ff       	call   80105bac <walkpgdir>
80106012:	85 c0                	test   %eax,%eax
80106014:	74 2f                	je     80106045 <loaduvm+0x95>
    pa = PTE_ADDR(*pte);
80106016:	8b 00                	mov    (%eax),%eax
80106018:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    if(sz - i < PGSIZE)
8010601d:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
80106023:	76 af                	jbe    80105fd4 <loaduvm+0x24>
      n = PGSIZE;
80106025:	bf 00 10 00 00       	mov    $0x1000,%edi
8010602a:	eb aa                	jmp    80105fd6 <loaduvm+0x26>
  return 0;
8010602c:	31 c0                	xor    %eax,%eax
}
8010602e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106031:	5b                   	pop    %ebx
80106032:	5e                   	pop    %esi
80106033:	5f                   	pop    %edi
80106034:	5d                   	pop    %ebp
80106035:	c3                   	ret    
80106036:	66 90                	xchg   %ax,%ax
      return -1;
80106038:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010603d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106040:	5b                   	pop    %ebx
80106041:	5e                   	pop    %esi
80106042:	5f                   	pop    %edi
80106043:	5d                   	pop    %ebp
80106044:	c3                   	ret    
      panic("loaduvm: address should exist");
80106045:	83 ec 0c             	sub    $0xc,%esp
80106048:	68 47 6d 10 80       	push   $0x80106d47
8010604d:	e8 92 ad ff ff       	call   80100de4 <panic>
    panic("loaduvm: addr must be page aligned");
80106052:	83 ec 0c             	sub    $0xc,%esp
80106055:	68 e8 6d 10 80       	push   $0x80106de8
8010605a:	e8 85 ad ff ff       	call   80100de4 <panic>
8010605f:	90                   	nop

80106060 <allocuvm>:
{
80106060:	55                   	push   %ebp
80106061:	89 e5                	mov    %esp,%ebp
80106063:	57                   	push   %edi
80106064:	56                   	push   %esi
80106065:	53                   	push   %ebx
80106066:	83 ec 0c             	sub    $0xc,%esp
80106069:	8b 7d 10             	mov    0x10(%ebp),%edi
  if(newsz >= KERNBASE)
8010606c:	85 ff                	test   %edi,%edi
8010606e:	78 75                	js     801060e5 <allocuvm+0x85>
    return oldsz;
80106070:	8b 45 0c             	mov    0xc(%ebp),%eax
  if(newsz < oldsz)
80106073:	3b 7d 0c             	cmp    0xc(%ebp),%edi
80106076:	72 6f                	jb     801060e7 <allocuvm+0x87>
  a = PGROUNDUP(oldsz);
80106078:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
8010607e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  for(; a < newsz; a += PGSIZE){
80106084:	39 df                	cmp    %ebx,%edi
80106086:	77 3d                	ja     801060c5 <allocuvm+0x65>
80106088:	eb 66                	jmp    801060f0 <allocuvm+0x90>
8010608a:	66 90                	xchg   %ax,%ax
    memset(mem, 0, PGSIZE);
8010608c:	50                   	push   %eax
8010608d:	68 00 10 00 00       	push   $0x1000
80106092:	6a 00                	push   $0x0
80106094:	56                   	push   %esi
80106095:	e8 6e e7 ff ff       	call   80104808 <memset>
    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
8010609a:	5a                   	pop    %edx
8010609b:	59                   	pop    %ecx
8010609c:	6a 06                	push   $0x6
8010609e:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
801060a4:	50                   	push   %eax
801060a5:	b9 00 10 00 00       	mov    $0x1000,%ecx
801060aa:	89 da                	mov    %ebx,%edx
801060ac:	8b 45 08             	mov    0x8(%ebp),%eax
801060af:	e8 6c fb ff ff       	call   80105c20 <mappages>
801060b4:	83 c4 10             	add    $0x10,%esp
801060b7:	85 c0                	test   %eax,%eax
801060b9:	78 41                	js     801060fc <allocuvm+0x9c>
  for(; a < newsz; a += PGSIZE){
801060bb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
801060c1:	39 df                	cmp    %ebx,%edi
801060c3:	76 2b                	jbe    801060f0 <allocuvm+0x90>
    mem = kalloc();
801060c5:	e8 92 cb ff ff       	call   80102c5c <kalloc>
801060ca:	89 c6                	mov    %eax,%esi
    if(mem == 0){
801060cc:	85 c0                	test   %eax,%eax
801060ce:	75 bc                	jne    8010608c <allocuvm+0x2c>
      cprintf("allocuvm out of memory\n");
801060d0:	83 ec 0c             	sub    $0xc,%esp
801060d3:	68 65 6d 10 80       	push   $0x80106d65
801060d8:	e8 b7 af ff ff       	call   80101094 <cprintf>
  if(newsz >= oldsz)
801060dd:	83 c4 10             	add    $0x10,%esp
801060e0:	3b 7d 0c             	cmp    0xc(%ebp),%edi
801060e3:	77 49                	ja     8010612e <allocuvm+0xce>
      return 0;
801060e5:	31 c0                	xor    %eax,%eax
}
801060e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
801060ea:	5b                   	pop    %ebx
801060eb:	5e                   	pop    %esi
801060ec:	5f                   	pop    %edi
801060ed:	5d                   	pop    %ebp
801060ee:	c3                   	ret    
801060ef:	90                   	nop
  for(; a < newsz; a += PGSIZE){
801060f0:	89 f8                	mov    %edi,%eax
}
801060f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
801060f5:	5b                   	pop    %ebx
801060f6:	5e                   	pop    %esi
801060f7:	5f                   	pop    %edi
801060f8:	5d                   	pop    %ebp
801060f9:	c3                   	ret    
801060fa:	66 90                	xchg   %ax,%ax
      cprintf("allocuvm out of memory (2)\n");
801060fc:	83 ec 0c             	sub    $0xc,%esp
801060ff:	68 7d 6d 10 80       	push   $0x80106d7d
80106104:	e8 8b af ff ff       	call   80101094 <cprintf>
  if(newsz >= oldsz)
80106109:	83 c4 10             	add    $0x10,%esp
8010610c:	3b 7d 0c             	cmp    0xc(%ebp),%edi
8010610f:	76 0d                	jbe    8010611e <allocuvm+0xbe>
80106111:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80106114:	89 fa                	mov    %edi,%edx
80106116:	8b 45 08             	mov    0x8(%ebp),%eax
80106119:	e8 82 fb ff ff       	call   80105ca0 <deallocuvm.part.0>
      kfree(mem);
8010611e:	83 ec 0c             	sub    $0xc,%esp
80106121:	56                   	push   %esi
80106122:	e8 a9 c9 ff ff       	call   80102ad0 <kfree>
      return 0;
80106127:	83 c4 10             	add    $0x10,%esp
8010612a:	31 c0                	xor    %eax,%eax
8010612c:	eb b9                	jmp    801060e7 <allocuvm+0x87>
8010612e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80106131:	89 fa                	mov    %edi,%edx
80106133:	8b 45 08             	mov    0x8(%ebp),%eax
80106136:	e8 65 fb ff ff       	call   80105ca0 <deallocuvm.part.0>
      return 0;
8010613b:	31 c0                	xor    %eax,%eax
8010613d:	eb a8                	jmp    801060e7 <allocuvm+0x87>
8010613f:	90                   	nop

80106140 <deallocuvm>:
{
80106140:	55                   	push   %ebp
80106141:	89 e5                	mov    %esp,%ebp
80106143:	8b 45 08             	mov    0x8(%ebp),%eax
80106146:	8b 55 0c             	mov    0xc(%ebp),%edx
80106149:	8b 4d 10             	mov    0x10(%ebp),%ecx
  if(newsz >= oldsz)
8010614c:	39 d1                	cmp    %edx,%ecx
8010614e:	73 08                	jae    80106158 <deallocuvm+0x18>
}
80106150:	5d                   	pop    %ebp
80106151:	e9 4a fb ff ff       	jmp    80105ca0 <deallocuvm.part.0>
80106156:	66 90                	xchg   %ax,%ax
80106158:	89 d0                	mov    %edx,%eax
8010615a:	5d                   	pop    %ebp
8010615b:	c3                   	ret    

8010615c <freevm>:

// Free a page table and all the physical memory pages
// in the user part.
void
freevm(pde_t *pgdir)
{
8010615c:	55                   	push   %ebp
8010615d:	89 e5                	mov    %esp,%ebp
8010615f:	57                   	push   %edi
80106160:	56                   	push   %esi
80106161:	53                   	push   %ebx
80106162:	83 ec 0c             	sub    $0xc,%esp
80106165:	8b 7d 08             	mov    0x8(%ebp),%edi
  uint i;

  if(pgdir == 0)
80106168:	85 ff                	test   %edi,%edi
8010616a:	74 51                	je     801061bd <freevm+0x61>
8010616c:	31 c9                	xor    %ecx,%ecx
8010616e:	ba 00 00 00 80       	mov    $0x80000000,%edx
80106173:	89 f8                	mov    %edi,%eax
80106175:	e8 26 fb ff ff       	call   80105ca0 <deallocuvm.part.0>
8010617a:	89 fb                	mov    %edi,%ebx
8010617c:	8d b7 00 10 00 00    	lea    0x1000(%edi),%esi
80106182:	eb 07                	jmp    8010618b <freevm+0x2f>
80106184:	83 c3 04             	add    $0x4,%ebx
    panic("freevm: no pgdir");
  deallocuvm(pgdir, KERNBASE, 0);
  for(i = 0; i < NPDENTRIES; i++){
80106187:	39 f3                	cmp    %esi,%ebx
80106189:	74 23                	je     801061ae <freevm+0x52>
    if(pgdir[i] & PTE_P){
8010618b:	8b 03                	mov    (%ebx),%eax
8010618d:	a8 01                	test   $0x1,%al
8010618f:	74 f3                	je     80106184 <freevm+0x28>
      char * v = P2V(PTE_ADDR(pgdir[i]));
      kfree(v);
80106191:	83 ec 0c             	sub    $0xc,%esp
      char * v = P2V(PTE_ADDR(pgdir[i]));
80106194:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80106199:	05 00 00 00 80       	add    $0x80000000,%eax
      kfree(v);
8010619e:	50                   	push   %eax
8010619f:	e8 2c c9 ff ff       	call   80102ad0 <kfree>
801061a4:	83 c4 10             	add    $0x10,%esp
801061a7:	83 c3 04             	add    $0x4,%ebx
  for(i = 0; i < NPDENTRIES; i++){
801061aa:	39 f3                	cmp    %esi,%ebx
801061ac:	75 dd                	jne    8010618b <freevm+0x2f>
    }
  }
  kfree((char*)pgdir);
801061ae:	89 7d 08             	mov    %edi,0x8(%ebp)
}
801061b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801061b4:	5b                   	pop    %ebx
801061b5:	5e                   	pop    %esi
801061b6:	5f                   	pop    %edi
801061b7:	5d                   	pop    %ebp
  kfree((char*)pgdir);
801061b8:	e9 13 c9 ff ff       	jmp    80102ad0 <kfree>
    panic("freevm: no pgdir");
801061bd:	83 ec 0c             	sub    $0xc,%esp
801061c0:	68 99 6d 10 80       	push   $0x80106d99
801061c5:	e8 1a ac ff ff       	call   80100de4 <panic>
801061ca:	66 90                	xchg   %ax,%ax

801061cc <setupkvm>:
{
801061cc:	55                   	push   %ebp
801061cd:	89 e5                	mov    %esp,%ebp
801061cf:	56                   	push   %esi
801061d0:	53                   	push   %ebx
  if((pgdir = (pde_t*)kalloc()) == 0)
801061d1:	e8 86 ca ff ff       	call   80102c5c <kalloc>
801061d6:	89 c6                	mov    %eax,%esi
801061d8:	85 c0                	test   %eax,%eax
801061da:	74 64                	je     80106240 <setupkvm+0x74>
  memset(pgdir, 0, PGSIZE);
801061dc:	50                   	push   %eax
801061dd:	68 00 10 00 00       	push   $0x1000
801061e2:	6a 00                	push   $0x0
801061e4:	56                   	push   %esi
801061e5:	e8 1e e6 ff ff       	call   80104808 <memset>
801061ea:	83 c4 10             	add    $0x10,%esp
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
801061ed:	bb 20 90 10 80       	mov    $0x80109020,%ebx
    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
801061f2:	8b 43 04             	mov    0x4(%ebx),%eax
801061f5:	8b 4b 08             	mov    0x8(%ebx),%ecx
801061f8:	29 c1                	sub    %eax,%ecx
801061fa:	83 ec 08             	sub    $0x8,%esp
801061fd:	ff 73 0c             	pushl  0xc(%ebx)
80106200:	50                   	push   %eax
80106201:	8b 13                	mov    (%ebx),%edx
80106203:	89 f0                	mov    %esi,%eax
80106205:	e8 16 fa ff ff       	call   80105c20 <mappages>
8010620a:	83 c4 10             	add    $0x10,%esp
8010620d:	85 c0                	test   %eax,%eax
8010620f:	78 17                	js     80106228 <setupkvm+0x5c>
  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
80106211:	83 c3 10             	add    $0x10,%ebx
80106214:	81 fb 60 90 10 80    	cmp    $0x80109060,%ebx
8010621a:	72 d6                	jb     801061f2 <setupkvm+0x26>
8010621c:	89 f0                	mov    %esi,%eax
}
8010621e:	8d 65 f8             	lea    -0x8(%ebp),%esp
80106221:	5b                   	pop    %ebx
80106222:	5e                   	pop    %esi
80106223:	5d                   	pop    %ebp
80106224:	c3                   	ret    
80106225:	8d 76 00             	lea    0x0(%esi),%esi
      freevm(pgdir);
80106228:	83 ec 0c             	sub    $0xc,%esp
8010622b:	56                   	push   %esi
8010622c:	e8 2b ff ff ff       	call   8010615c <freevm>
      return 0;
80106231:	83 c4 10             	add    $0x10,%esp
80106234:	31 c0                	xor    %eax,%eax
}
80106236:	8d 65 f8             	lea    -0x8(%ebp),%esp
80106239:	5b                   	pop    %ebx
8010623a:	5e                   	pop    %esi
8010623b:	5d                   	pop    %ebp
8010623c:	c3                   	ret    
8010623d:	8d 76 00             	lea    0x0(%esi),%esi
    return 0;
80106240:	31 c0                	xor    %eax,%eax
80106242:	eb da                	jmp    8010621e <setupkvm+0x52>

80106244 <kvmalloc>:
{
80106244:	55                   	push   %ebp
80106245:	89 e5                	mov    %esp,%ebp
80106247:	83 ec 08             	sub    $0x8,%esp
  kpgdir = setupkvm();
8010624a:	e8 7d ff ff ff       	call   801061cc <setupkvm>
8010624f:	a3 a4 40 11 80       	mov    %eax,0x801140a4
  lcr3(V2P(kpgdir));   // switch to the kernel page table
80106254:	05 00 00 00 80       	add    $0x80000000,%eax
80106259:	0f 22 d8             	mov    %eax,%cr3
}
8010625c:	c9                   	leave  
8010625d:	c3                   	ret    
8010625e:	66 90                	xchg   %ax,%ax

80106260 <clearpteu>:

// Clear PTE_U on a page. Used to create an inaccessible
// page beneath the user stack.
void
clearpteu(pde_t *pgdir, char *uva)
{
80106260:	55                   	push   %ebp
80106261:	89 e5                	mov    %esp,%ebp
80106263:	83 ec 08             	sub    $0x8,%esp
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
80106266:	31 c9                	xor    %ecx,%ecx
80106268:	8b 55 0c             	mov    0xc(%ebp),%edx
8010626b:	8b 45 08             	mov    0x8(%ebp),%eax
8010626e:	e8 39 f9 ff ff       	call   80105bac <walkpgdir>
  if(pte == 0)
80106273:	85 c0                	test   %eax,%eax
80106275:	74 05                	je     8010627c <clearpteu+0x1c>
    panic("clearpteu");
  *pte &= ~PTE_U;
80106277:	83 20 fb             	andl   $0xfffffffb,(%eax)
}
8010627a:	c9                   	leave  
8010627b:	c3                   	ret    
    panic("clearpteu");
8010627c:	83 ec 0c             	sub    $0xc,%esp
8010627f:	68 aa 6d 10 80       	push   $0x80106daa
80106284:	e8 5b ab ff ff       	call   80100de4 <panic>
80106289:	8d 76 00             	lea    0x0(%esi),%esi

8010628c <copyuvm>:

// Given a parent process's page table, create a copy
// of it for a child.
pde_t*
copyuvm(pde_t *pgdir, uint sz)
{
8010628c:	55                   	push   %ebp
8010628d:	89 e5                	mov    %esp,%ebp
8010628f:	57                   	push   %edi
80106290:	56                   	push   %esi
80106291:	53                   	push   %ebx
80106292:	83 ec 1c             	sub    $0x1c,%esp
  pde_t *d;
  pte_t *pte;
  uint pa, i, flags;
  char *mem;

  if((d = setupkvm()) == 0)
80106295:	e8 32 ff ff ff       	call   801061cc <setupkvm>
8010629a:	89 45 e0             	mov    %eax,-0x20(%ebp)
8010629d:	85 c0                	test   %eax,%eax
8010629f:	0f 84 a6 00 00 00    	je     8010634b <copyuvm+0xbf>
    return 0;
  for(i = 0; i < sz; i += PGSIZE){
801062a5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
801062a8:	85 db                	test   %ebx,%ebx
801062aa:	0f 84 90 00 00 00    	je     80106340 <copyuvm+0xb4>
801062b0:	31 f6                	xor    %esi,%esi
801062b2:	eb 40                	jmp    801062f4 <copyuvm+0x68>
      panic("copyuvm: page not present");
    pa = PTE_ADDR(*pte);
    flags = PTE_FLAGS(*pte);
    if((mem = kalloc()) == 0)
      goto bad;
    memmove(mem, (char*)P2V(pa), PGSIZE);
801062b4:	50                   	push   %eax
801062b5:	68 00 10 00 00       	push   $0x1000
801062ba:	81 c7 00 00 00 80    	add    $0x80000000,%edi
801062c0:	57                   	push   %edi
801062c1:	53                   	push   %ebx
801062c2:	e8 d5 e5 ff ff       	call   8010489c <memmove>
    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
801062c7:	5a                   	pop    %edx
801062c8:	59                   	pop    %ecx
801062c9:	ff 75 e4             	pushl  -0x1c(%ebp)
801062cc:	8d 93 00 00 00 80    	lea    -0x80000000(%ebx),%edx
801062d2:	52                   	push   %edx
801062d3:	b9 00 10 00 00       	mov    $0x1000,%ecx
801062d8:	89 f2                	mov    %esi,%edx
801062da:	8b 45 e0             	mov    -0x20(%ebp),%eax
801062dd:	e8 3e f9 ff ff       	call   80105c20 <mappages>
801062e2:	83 c4 10             	add    $0x10,%esp
801062e5:	85 c0                	test   %eax,%eax
801062e7:	78 3e                	js     80106327 <copyuvm+0x9b>
  for(i = 0; i < sz; i += PGSIZE){
801062e9:	81 c6 00 10 00 00    	add    $0x1000,%esi
801062ef:	39 75 0c             	cmp    %esi,0xc(%ebp)
801062f2:	76 4c                	jbe    80106340 <copyuvm+0xb4>
    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
801062f4:	31 c9                	xor    %ecx,%ecx
801062f6:	89 f2                	mov    %esi,%edx
801062f8:	8b 45 08             	mov    0x8(%ebp),%eax
801062fb:	e8 ac f8 ff ff       	call   80105bac <walkpgdir>
80106300:	85 c0                	test   %eax,%eax
80106302:	74 58                	je     8010635c <copyuvm+0xd0>
    if(!(*pte & PTE_P))
80106304:	8b 18                	mov    (%eax),%ebx
80106306:	f6 c3 01             	test   $0x1,%bl
80106309:	74 44                	je     8010634f <copyuvm+0xc3>
    pa = PTE_ADDR(*pte);
8010630b:	89 df                	mov    %ebx,%edi
8010630d:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
    flags = PTE_FLAGS(*pte);
80106313:	81 e3 ff 0f 00 00    	and    $0xfff,%ebx
80106319:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    if((mem = kalloc()) == 0)
8010631c:	e8 3b c9 ff ff       	call   80102c5c <kalloc>
80106321:	89 c3                	mov    %eax,%ebx
80106323:	85 c0                	test   %eax,%eax
80106325:	75 8d                	jne    801062b4 <copyuvm+0x28>
      goto bad;
  }
  return d;

bad:
  freevm(d);
80106327:	83 ec 0c             	sub    $0xc,%esp
8010632a:	ff 75 e0             	pushl  -0x20(%ebp)
8010632d:	e8 2a fe ff ff       	call   8010615c <freevm>
  return 0;
80106332:	83 c4 10             	add    $0x10,%esp
80106335:	31 c0                	xor    %eax,%eax
}
80106337:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010633a:	5b                   	pop    %ebx
8010633b:	5e                   	pop    %esi
8010633c:	5f                   	pop    %edi
8010633d:	5d                   	pop    %ebp
8010633e:	c3                   	ret    
8010633f:	90                   	nop
  for(i = 0; i < sz; i += PGSIZE){
80106340:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
80106343:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106346:	5b                   	pop    %ebx
80106347:	5e                   	pop    %esi
80106348:	5f                   	pop    %edi
80106349:	5d                   	pop    %ebp
8010634a:	c3                   	ret    
    return 0;
8010634b:	31 c0                	xor    %eax,%eax
8010634d:	eb e8                	jmp    80106337 <copyuvm+0xab>
      panic("copyuvm: page not present");
8010634f:	83 ec 0c             	sub    $0xc,%esp
80106352:	68 ce 6d 10 80       	push   $0x80106dce
80106357:	e8 88 aa ff ff       	call   80100de4 <panic>
      panic("copyuvm: pte should exist");
8010635c:	83 ec 0c             	sub    $0xc,%esp
8010635f:	68 b4 6d 10 80       	push   $0x80106db4
80106364:	e8 7b aa ff ff       	call   80100de4 <panic>
80106369:	8d 76 00             	lea    0x0(%esi),%esi

8010636c <uva2ka>:

//PAGEBREAK!
// Map user virtual address to kernel address.
char*
uva2ka(pde_t *pgdir, char *uva)
{
8010636c:	55                   	push   %ebp
8010636d:	89 e5                	mov    %esp,%ebp
8010636f:	83 ec 08             	sub    $0x8,%esp
  pte_t *pte;

  pte = walkpgdir(pgdir, uva, 0);
80106372:	31 c9                	xor    %ecx,%ecx
80106374:	8b 55 0c             	mov    0xc(%ebp),%edx
80106377:	8b 45 08             	mov    0x8(%ebp),%eax
8010637a:	e8 2d f8 ff ff       	call   80105bac <walkpgdir>
  if((*pte & PTE_P) == 0)
8010637f:	8b 00                	mov    (%eax),%eax
80106381:	89 c2                	mov    %eax,%edx
80106383:	83 e2 05             	and    $0x5,%edx
    return 0;
  if((*pte & PTE_U) == 0)
80106386:	83 fa 05             	cmp    $0x5,%edx
80106389:	75 0d                	jne    80106398 <uva2ka+0x2c>
    return 0;
  return (char*)P2V(PTE_ADDR(*pte));
8010638b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80106390:	05 00 00 00 80       	add    $0x80000000,%eax
}
80106395:	c9                   	leave  
80106396:	c3                   	ret    
80106397:	90                   	nop
    return 0;
80106398:	31 c0                	xor    %eax,%eax
}
8010639a:	c9                   	leave  
8010639b:	c3                   	ret    

8010639c <copyout>:
// Copy len bytes from p to user address va in page table pgdir.
// Most useful when pgdir is not the current page table.
// uva2ka ensures this only works for PTE_U pages.
int
copyout(pde_t *pgdir, uint va, void *p, uint len)
{
8010639c:	55                   	push   %ebp
8010639d:	89 e5                	mov    %esp,%ebp
8010639f:	57                   	push   %edi
801063a0:	56                   	push   %esi
801063a1:	53                   	push   %ebx
801063a2:	83 ec 0c             	sub    $0xc,%esp
801063a5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  char *buf, *pa0;
  uint n, va0;

  buf = (char*)p;
  while(len > 0){
801063a8:	8b 4d 14             	mov    0x14(%ebp),%ecx
801063ab:	89 df                	mov    %ebx,%edi
801063ad:	85 c9                	test   %ecx,%ecx
801063af:	75 37                	jne    801063e8 <copyout+0x4c>
801063b1:	eb 5d                	jmp    80106410 <copyout+0x74>
801063b3:	90                   	nop
    va0 = (uint)PGROUNDDOWN(va);
    pa0 = uva2ka(pgdir, (char*)va0);
    if(pa0 == 0)
      return -1;
    n = PGSIZE - (va - va0);
801063b4:	89 f2                	mov    %esi,%edx
801063b6:	29 fa                	sub    %edi,%edx
801063b8:	8d 9a 00 10 00 00    	lea    0x1000(%edx),%ebx
801063be:	3b 5d 14             	cmp    0x14(%ebp),%ebx
801063c1:	76 03                	jbe    801063c6 <copyout+0x2a>
801063c3:	8b 5d 14             	mov    0x14(%ebp),%ebx
    if(n > len)
      n = len;
    memmove(pa0 + (va - va0), buf, n);
801063c6:	52                   	push   %edx
801063c7:	53                   	push   %ebx
801063c8:	ff 75 10             	pushl  0x10(%ebp)
801063cb:	89 f9                	mov    %edi,%ecx
801063cd:	29 f1                	sub    %esi,%ecx
801063cf:	01 c8                	add    %ecx,%eax
801063d1:	50                   	push   %eax
801063d2:	e8 c5 e4 ff ff       	call   8010489c <memmove>
    len -= n;
    buf += n;
801063d7:	01 5d 10             	add    %ebx,0x10(%ebp)
    va = va0 + PGSIZE;
801063da:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
  while(len > 0){
801063e0:	83 c4 10             	add    $0x10,%esp
801063e3:	29 5d 14             	sub    %ebx,0x14(%ebp)
801063e6:	74 28                	je     80106410 <copyout+0x74>
    va0 = (uint)PGROUNDDOWN(va);
801063e8:	89 fe                	mov    %edi,%esi
801063ea:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
    pa0 = uva2ka(pgdir, (char*)va0);
801063f0:	83 ec 08             	sub    $0x8,%esp
801063f3:	56                   	push   %esi
801063f4:	ff 75 08             	pushl  0x8(%ebp)
801063f7:	e8 70 ff ff ff       	call   8010636c <uva2ka>
    if(pa0 == 0)
801063fc:	83 c4 10             	add    $0x10,%esp
801063ff:	85 c0                	test   %eax,%eax
80106401:	75 b1                	jne    801063b4 <copyout+0x18>
      return -1;
80106403:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  }
  return 0;
}
80106408:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010640b:	5b                   	pop    %ebx
8010640c:	5e                   	pop    %esi
8010640d:	5f                   	pop    %edi
8010640e:	5d                   	pop    %ebp
8010640f:	c3                   	ret    
  return 0;
80106410:	31 c0                	xor    %eax,%eax
}
80106412:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106415:	5b                   	pop    %ebx
80106416:	5e                   	pop    %esi
80106417:	5f                   	pop    %edi
80106418:	5d                   	pop    %ebp
80106419:	c3                   	ret    
